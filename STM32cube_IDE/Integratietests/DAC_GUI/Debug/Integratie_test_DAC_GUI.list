
Integratie_test_DAC_GUI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  08010d98  08010d98  00020d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011454  08011454  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011454  08011454  00021454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801145c  0801145c  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801145c  0801145c  0002145c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011460  08011460  00021460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08011464  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e54  200002e4  08011748  000302e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008138  08011748  00038138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a42  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005215  00000000  00000000  00057d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0005cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dc0  00000000  00000000  0005ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000080c2  00000000  00000000  00060ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002501c  00000000  00000000  00068daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4dd3  00000000  00000000  0008ddc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172b99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a50  00000000  00000000  00172bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010d7c 	.word	0x08010d7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002e8 	.word	0x200002e8
 800020c:	08010d7c 	.word	0x08010d7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9aa 	b.w	8000fe4 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468e      	mov	lr, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d14d      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d22:	428a      	cmp	r2, r1
 8000d24:	4694      	mov	ip, r2
 8000d26:	d969      	bls.n	8000dfc <__udivmoddi4+0xe8>
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	b152      	cbz	r2, 8000d44 <__udivmoddi4+0x30>
 8000d2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d32:	f1c2 0120 	rsb	r1, r2, #32
 8000d36:	fa20 f101 	lsr.w	r1, r0, r1
 8000d3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d42:	4094      	lsls	r4, r2
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	0c21      	lsrs	r1, r4, #16
 8000d4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d4e:	fa1f f78c 	uxth.w	r7, ip
 8000d52:	fb08 e316 	mls	r3, r8, r6, lr
 8000d56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d5a:	fb06 f107 	mul.w	r1, r6, r7
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6a:	f080 811f 	bcs.w	8000fac <__udivmoddi4+0x298>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 811c 	bls.w	8000fac <__udivmoddi4+0x298>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 f707 	mul.w	r7, r0, r7
 8000d8c:	42a7      	cmp	r7, r4
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x92>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	f080 810a 	bcs.w	8000fb0 <__udivmoddi4+0x29c>
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	f240 8107 	bls.w	8000fb0 <__udivmoddi4+0x29c>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000daa:	1be4      	subs	r4, r4, r7
 8000dac:	2600      	movs	r6, #0
 8000dae:	b11d      	cbz	r5, 8000db8 <__udivmoddi4+0xa4>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c5 4300 	strd	r4, r3, [r5]
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xc2>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80ef 	beq.w	8000fa6 <__udivmoddi4+0x292>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x160>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd4>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80f9 	bhi.w	8000fda <__udivmoddi4+0x2c6>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	469e      	mov	lr, r3
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa4>
 8000df6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xec>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 8092 	bne.w	8000f2e <__udivmoddi4+0x21a>
 8000e0a:	eba1 010c 	sub.w	r1, r1, ip
 8000e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	2601      	movs	r6, #1
 8000e18:	0c20      	lsrs	r0, r4, #16
 8000e1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e26:	fb0e f003 	mul.w	r0, lr, r3
 8000e2a:	4288      	cmp	r0, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x12c>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x12a>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f200 80cb 	bhi.w	8000fd4 <__udivmoddi4+0x2c0>
 8000e3e:	4643      	mov	r3, r8
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e50:	fb0e fe00 	mul.w	lr, lr, r0
 8000e54:	45a6      	cmp	lr, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x156>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e60:	d202      	bcs.n	8000e68 <__udivmoddi4+0x154>
 8000e62:	45a6      	cmp	lr, r4
 8000e64:	f200 80bb 	bhi.w	8000fde <__udivmoddi4+0x2ca>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e72:	e79c      	b.n	8000dae <__udivmoddi4+0x9a>
 8000e74:	f1c6 0720 	rsb	r7, r6, #32
 8000e78:	40b3      	lsls	r3, r6
 8000e7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e82:	fa20 f407 	lsr.w	r4, r0, r7
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	431c      	orrs	r4, r3
 8000e8c:	40f9      	lsrs	r1, r7
 8000e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e92:	fa00 f306 	lsl.w	r3, r0, r6
 8000e96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e9a:	0c20      	lsrs	r0, r4, #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eac:	4288      	cmp	r0, r1
 8000eae:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb2:	d90b      	bls.n	8000ecc <__udivmoddi4+0x1b8>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ebc:	f080 8088 	bcs.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f240 8085 	bls.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	1a09      	subs	r1, r1, r0
 8000ece:	b2a4      	uxth	r4, r4
 8000ed0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ed4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ed8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000edc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee0:	458e      	cmp	lr, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1e2>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eec:	d26c      	bcs.n	8000fc8 <__udivmoddi4+0x2b4>
 8000eee:	458e      	cmp	lr, r1
 8000ef0:	d96a      	bls.n	8000fc8 <__udivmoddi4+0x2b4>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efa:	fba0 9402 	umull	r9, r4, r0, r2
 8000efe:	eba1 010e 	sub.w	r1, r1, lr
 8000f02:	42a1      	cmp	r1, r4
 8000f04:	46c8      	mov	r8, r9
 8000f06:	46a6      	mov	lr, r4
 8000f08:	d356      	bcc.n	8000fb8 <__udivmoddi4+0x2a4>
 8000f0a:	d053      	beq.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x212>
 8000f0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f12:	eb61 010e 	sbc.w	r1, r1, lr
 8000f16:	fa01 f707 	lsl.w	r7, r1, r7
 8000f1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f1e:	40f1      	lsrs	r1, r6
 8000f20:	431f      	orrs	r7, r3
 8000f22:	e9c5 7100 	strd	r7, r1, [r5]
 8000f26:	2600      	movs	r6, #0
 8000f28:	4631      	mov	r1, r6
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	f1c2 0320 	rsb	r3, r2, #32
 8000f32:	40d8      	lsrs	r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	4301      	orrs	r1, r0
 8000f40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f50:	0c0b      	lsrs	r3, r1, #16
 8000f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f56:	fb00 f60e 	mul.w	r6, r0, lr
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x260>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f6a:	d22f      	bcs.n	8000fcc <__udivmoddi4+0x2b8>
 8000f6c:	429e      	cmp	r6, r3
 8000f6e:	d92d      	bls.n	8000fcc <__udivmoddi4+0x2b8>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1b9b      	subs	r3, r3, r6
 8000f76:	b289      	uxth	r1, r1
 8000f78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f84:	fb06 f30e 	mul.w	r3, r6, lr
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x28a>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f94:	d216      	bcs.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d914      	bls.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f9a:	3e02      	subs	r6, #2
 8000f9c:	4461      	add	r1, ip
 8000f9e:	1ac9      	subs	r1, r1, r3
 8000fa0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fa4:	e738      	b.n	8000e18 <__udivmoddi4+0x104>
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e705      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e3      	b.n	8000d78 <__udivmoddi4+0x64>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6f8      	b.n	8000da6 <__udivmoddi4+0x92>
 8000fb4:	454b      	cmp	r3, r9
 8000fb6:	d2a9      	bcs.n	8000f0c <__udivmoddi4+0x1f8>
 8000fb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7a3      	b.n	8000f0c <__udivmoddi4+0x1f8>
 8000fc4:	4646      	mov	r6, r8
 8000fc6:	e7ea      	b.n	8000f9e <__udivmoddi4+0x28a>
 8000fc8:	4620      	mov	r0, r4
 8000fca:	e794      	b.n	8000ef6 <__udivmoddi4+0x1e2>
 8000fcc:	4640      	mov	r0, r8
 8000fce:	e7d1      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fd0:	46d0      	mov	r8, sl
 8000fd2:	e77b      	b.n	8000ecc <__udivmoddi4+0x1b8>
 8000fd4:	3b02      	subs	r3, #2
 8000fd6:	4461      	add	r1, ip
 8000fd8:	e732      	b.n	8000e40 <__udivmoddi4+0x12c>
 8000fda:	4630      	mov	r0, r6
 8000fdc:	e709      	b.n	8000df2 <__udivmoddi4+0xde>
 8000fde:	4464      	add	r4, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e742      	b.n	8000e6a <__udivmoddi4+0x156>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <DAC8564_Write>:
    }
    calculate_three_phase_sine_wave_samples();
}


void DAC8564_Write(uint16_t channel, uint16_t value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80bb      	strh	r3, [r7, #4]
    uint8_t data[3];
    data[0] = DAC8564_SEQUENTIANALY_WRITE_UPDATE | (channel << 1);  // Set command and channel
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	b25b      	sxtb	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	733b      	strb	r3, [r7, #12]
    data[1] = (value >> 8) & 0xFF;  // MSB
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	0a1b      	lsrs	r3, r3, #8
 800100c:	b29b      	uxth	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	737b      	strb	r3, [r7, #13]
    data[2] = value & 0xFF;  // LSB
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_RESET);  // CS Low
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <DAC8564_Write+0x60>)
 8001020:	f001 f9ce 	bl	80023c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, 3, SPI_TIMEOUT);
 8001024:	f107 010c 	add.w	r1, r7, #12
 8001028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102c:	2203      	movs	r2, #3
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <DAC8564_Write+0x64>)
 8001030:	f004 fa89 	bl	8005546 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_SET);  // CS High
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <DAC8564_Write+0x60>)
 800103c:	f001 f9c0 	bl	80023c0 <HAL_GPIO_WritePin>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40020400 	.word	0x40020400
 800104c:	20000348 	.word	0x20000348

08001050 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001060:	d133      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x7a>
        // Output the current sample for each phase to respective DAC channels
        DAC8564_Write(0, sine_wave_A[sample_index]);  // Phase A on DAC A
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800106c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001070:	4619      	mov	r1, r3
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff ffb8 	bl	8000fe8 <DAC8564_Write>
        DAC8564_Write(1, sine_wave_B[sample_index]);  // Phase B on DAC B
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001082:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001086:	4619      	mov	r1, r3
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff ffad 	bl	8000fe8 <DAC8564_Write>
        DAC8564_Write(2, sine_wave_C[sample_index]);  // Phase C on DAC C
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001098:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800109c:	4619      	mov	r1, r3
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff ffa2 	bl	8000fe8 <DAC8564_Write>

        // Increment the sample index
        sample_index = (sample_index + 1) % NUM_SAMPLES;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80010ae:	fb83 1302 	smull	r1, r3, r3, r2
 80010b2:	4413      	add	r3, r2
 80010b4:	1259      	asrs	r1, r3, #9
 80010b6:	17d3      	asrs	r3, r2, #31
 80010b8:	1ac9      	subs	r1, r1, r3
 80010ba:	460b      	mov	r3, r1
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	1a5b      	subs	r3, r3, r1
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	1ad1      	subs	r1, r2, r3
 80010c4:	b28a      	uxth	r2, r1
 80010c6:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010c8:	801a      	strh	r2, [r3, #0]
    }
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20001b00 	.word	0x20001b00
 80010d8:	20000480 	.word	0x20000480
 80010dc:	20000c00 	.word	0x20000c00
 80010e0:	20001380 	.word	0x20001380
 80010e4:	88888889 	.word	0x88888889

080010e8 <update_status>:
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
    HAL_GPIO_TogglePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN);
}

void update_status(TestStatus nieuwe_status) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
    huidig_status = nieuwe_status;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <update_status+0x1c>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	7013      	strb	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	20001b02 	.word	0x20001b02

08001108 <send_active_scenario_to_gui>:

/* Userinterface CODE END*/

/* USB_GUI_ CODE BEGIN*/
void send_active_scenario_to_gui(int scenario_number) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b092      	sub	sp, #72	; 0x48
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    char scenario_message[64];
    sprintf(scenario_message, "ACTIEF_SCENARIO=%d\n", scenario_number);
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4906      	ldr	r1, [pc, #24]	; (8001130 <send_active_scenario_to_gui+0x28>)
 8001118:	4618      	mov	r0, r3
 800111a:	f00c fed3 	bl	800dec4 <siprintf>
    send_status_to_gui(scenario_message);  // Verstuur het scenario
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f806 	bl	8001134 <send_status_to_gui>


}
 8001128:	bf00      	nop
 800112a:	3748      	adds	r7, #72	; 0x48
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	08010dc4 	.word	0x08010dc4

08001134 <send_status_to_gui>:


void send_status_to_gui(char* status_message) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t *)status_message, strlen(status_message));
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff f867 	bl	8000210 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	4619      	mov	r1, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f00b fd7e 	bl	800cc48 <CDC_Transmit_FS>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <receive_settings_and_update_status>:

// Functie om te checken of de knoppen voor starten, pauzeren of stoppen zijn ingedrukt


// Simuleer de ontvangst van instellingen en stuur statusupdates naar de GUI
void receive_settings_and_update_status(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    // Wachten op instellingen
	update_status (STATUS_WACHTEN_OP_INSTELLINGEN);
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff ffc5 	bl	80010e8 <update_status>


}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fdd6 	bl	8001d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f85c 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 f9cc 	bl	800150c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001174:	f000 f976 	bl	8001464 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001178:	f000 f99e 	bl	80014b8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800117c:	f000 f926 	bl	80013cc <MX_TIM2_Init>
  MX_I2S1_Init();
 8001180:	f000 f8be 	bl	8001300 <MX_I2S1_Init>
  MX_SPI2_Init();
 8001184:	f000 f8ea 	bl	800135c <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001188:	f00b fca0 	bl	800cacc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  while (!(HAL_GPIO_ReadPin(GPIO_PORT_VBUS, GPIO_PIN_VBUS) == GPIO_PIN_SET));
 800118c:	bf00      	nop
 800118e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <main+0x90>)
 8001194:	f001 f8fc 	bl	8002390 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d1f7      	bne.n	800118e <main+0x2a>
  receive_settings_and_update_status();
 800119e:	f7ff ffd9 	bl	8001154 <receive_settings_and_update_status>
  HAL_Delay (3000);
 80011a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011a6:	f000 fe29 	bl	8001dfc <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011aa:	f008 ff13 	bl	8009fd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <main+0x94>)
 80011b0:	2100      	movs	r1, #0
 80011b2:	4812      	ldr	r0, [pc, #72]	; (80011fc <main+0x98>)
 80011b4:	f008 ff58 	bl	800a068 <osThreadNew>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a11      	ldr	r2, [pc, #68]	; (8001200 <main+0x9c>)
 80011bc:	6013      	str	r3, [r2, #0]

  /* creation of KnopTASK */
  KnopTASKHandle = osThreadNew(StartKnopThread, NULL, &KnopTASK_attributes);
 80011be:	4a11      	ldr	r2, [pc, #68]	; (8001204 <main+0xa0>)
 80011c0:	2100      	movs	r1, #0
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <main+0xa4>)
 80011c4:	f008 ff50 	bl	800a068 <osThreadNew>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <main+0xa8>)
 80011cc:	6013      	str	r3, [r2, #0]

  /* creation of LedTASK */
  LedTASKHandle = osThreadNew(StartLEDThread, NULL, &LedTASK_attributes);
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <main+0xac>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <main+0xb0>)
 80011d4:	f008 ff48 	bl	800a068 <osThreadNew>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <main+0xb4>)
 80011dc:	6013      	str	r3, [r2, #0]

  /* creation of Dac_TASK */
  Dac_TASKHandle = osThreadNew(Simulate_DAC, NULL, &Dac_TASK_attributes);
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <main+0xb8>)
 80011e0:	2100      	movs	r1, #0
 80011e2:	480f      	ldr	r0, [pc, #60]	; (8001220 <main+0xbc>)
 80011e4:	f008 ff40 	bl	800a068 <osThreadNew>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <main+0xc0>)
 80011ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011ee:	f008 ff15 	bl	800a01c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <main+0x8e>
 80011f4:	40020000 	.word	0x40020000
 80011f8:	08010f74 	.word	0x08010f74
 80011fc:	0800167d 	.word	0x0800167d
 8001200:	20000470 	.word	0x20000470
 8001204:	08010f98 	.word	0x08010f98
 8001208:	0800168f 	.word	0x0800168f
 800120c:	20000474 	.word	0x20000474
 8001210:	08010fbc 	.word	0x08010fbc
 8001214:	0800169f 	.word	0x0800169f
 8001218:	20000478 	.word	0x20000478
 800121c:	08010fe0 	.word	0x08010fe0
 8001220:	080016b1 	.word	0x080016b1
 8001224:	2000047c 	.word	0x2000047c

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2234      	movs	r2, #52	; 0x34
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f00c fb17 	bl	800d86a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <SystemClock_Config+0xd0>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <SystemClock_Config+0xd0>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <SystemClock_Config+0xd0>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	2300      	movs	r3, #0
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <SystemClock_Config+0xd4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a22      	ldr	r2, [pc, #136]	; (80012fc <SystemClock_Config+0xd4>)
 8001272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <SystemClock_Config+0xd4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001284:	2301      	movs	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001298:	2304      	movs	r3, #4
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800129c:	23a8      	movs	r3, #168	; 0xa8
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012a4:	2307      	movs	r3, #7
 80012a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fe21 	bl	8004ef8 <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012bc:	f000 fa4a 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c0:	230f      	movs	r3, #15
 80012c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80012c4:	2303      	movs	r3, #3
 80012c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	2105      	movs	r1, #5
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fd4e 	bl	8003d80 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ea:	f000 fa33 	bl	8001754 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	; 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_I2S1_Init+0x54>)
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <MX_I2S1_Init+0x58>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_I2S1_Init+0x54>)
 800130c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001310:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_I2S1_Init+0x54>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_I2S1_Init+0x54>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_I2S1_Init+0x54>)
 8001320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001324:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_I2S1_Init+0x54>)
 8001328:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800132c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_I2S1_Init+0x54>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <MX_I2S1_Init+0x54>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_I2S1_Init+0x54>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_I2S1_Init+0x54>)
 8001342:	f001 f857 	bl	80023f4 <HAL_I2S_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 800134c:	f000 fa02 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000300 	.word	0x20000300
 8001358:	40013000 	.word	0x40013000

0800135c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_SPI2_Init+0x68>)
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <MX_SPI2_Init+0x6c>)
 8001364:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_SPI2_Init+0x68>)
 8001368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800136c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_SPI2_Init+0x68>)
 8001370:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001374:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_SPI2_Init+0x68>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_SPI2_Init+0x68>)
 800137e:	2202      	movs	r2, #2
 8001380:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_SPI2_Init+0x68>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_SPI2_Init+0x68>)
 800138a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_SPI2_Init+0x68>)
 8001392:	2218      	movs	r2, #24
 8001394:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_SPI2_Init+0x68>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_SPI2_Init+0x68>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_SPI2_Init+0x68>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_SPI2_Init+0x68>)
 80013aa:	220a      	movs	r2, #10
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_SPI2_Init+0x68>)
 80013b0:	f004 f840 	bl	8005434 <HAL_SPI_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80013ba:	f000 f9cb 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000348 	.word	0x20000348
 80013c8:	40003800 	.word	0x40003800

080013cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_TIM2_Init+0x94>)
 80013ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <MX_TIM2_Init+0x94>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <MX_TIM2_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1749;
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <MX_TIM2_Init+0x94>)
 80013fe:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8001402:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_TIM2_Init+0x94>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_TIM2_Init+0x94>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001410:	4813      	ldr	r0, [pc, #76]	; (8001460 <MX_TIM2_Init+0x94>)
 8001412:	f004 fa9f 	bl	8005954 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800141c:	f000 f99a 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <MX_TIM2_Init+0x94>)
 800142e:	f004 fbe8 	bl	8005c02 <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001438:	f000 f98c 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_TIM2_Init+0x94>)
 800144a:	f004 fe03 	bl	8006054 <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001454:	f000 f97e 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200003a0 	.word	0x200003a0

08001464 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <MX_USART1_UART_Init+0x50>)
 800146c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001474:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 800149c:	f004 fe6a 	bl	8006174 <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014a6:	f000 f955 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200003e8 	.word	0x200003e8
 80014b4:	40011000 	.word	0x40011000

080014b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <MX_USART3_UART_Init+0x50>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014f0:	f004 fe40 	bl	8006174 <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014fa:	f000 f92b 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000042c 	.word	0x2000042c
 8001508:	40004800 	.word	0x40004800

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	4b50      	ldr	r3, [pc, #320]	; (8001668 <MX_GPIO_Init+0x15c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a4f      	ldr	r2, [pc, #316]	; (8001668 <MX_GPIO_Init+0x15c>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <MX_GPIO_Init+0x15c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <MX_GPIO_Init+0x15c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a48      	ldr	r2, [pc, #288]	; (8001668 <MX_GPIO_Init+0x15c>)
 8001548:	f043 0320 	orr.w	r3, r3, #32
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b46      	ldr	r3, [pc, #280]	; (8001668 <MX_GPIO_Init+0x15c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0320 	and.w	r3, r3, #32
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b42      	ldr	r3, [pc, #264]	; (8001668 <MX_GPIO_Init+0x15c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a41      	ldr	r2, [pc, #260]	; (8001668 <MX_GPIO_Init+0x15c>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <MX_GPIO_Init+0x15c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <MX_GPIO_Init+0x15c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a3a      	ldr	r2, [pc, #232]	; (8001668 <MX_GPIO_Init+0x15c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <MX_GPIO_Init+0x15c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b34      	ldr	r3, [pc, #208]	; (8001668 <MX_GPIO_Init+0x15c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a33      	ldr	r2, [pc, #204]	; (8001668 <MX_GPIO_Init+0x15c>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b31      	ldr	r3, [pc, #196]	; (8001668 <MX_GPIO_Init+0x15c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <MX_GPIO_Init+0x15c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a2c      	ldr	r2, [pc, #176]	; (8001668 <MX_GPIO_Init+0x15c>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <MX_GPIO_Init+0x15c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	210e      	movs	r1, #14
 80015ce:	4827      	ldr	r0, [pc, #156]	; (800166c <MX_GPIO_Init+0x160>)
 80015d0:	f000 fef6 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin|RE_tranceiver_Pin|DE_tranceiver_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f241 0130 	movw	r1, #4144	; 0x1030
 80015da:	4825      	ldr	r0, [pc, #148]	; (8001670 <MX_GPIO_Init+0x164>)
 80015dc:	f000 fef0 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e6:	4823      	ldr	r0, [pc, #140]	; (8001674 <MX_GPIO_Init+0x168>)
 80015e8:	f000 feea 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Start_knop_Pin Pauzeer_knop_Pin Stop_knop_Pin */
  GPIO_InitStruct.Pin = Start_knop_Pin|Pauzeer_knop_Pin|Stop_knop_Pin;
 80015ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	481d      	ldr	r0, [pc, #116]	; (8001678 <MX_GPIO_Init+0x16c>)
 8001602:	f000 fd31 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blauwe_LED_Pin Groene_LED_Pin Rode_LED_Pin */
  GPIO_InitStruct.Pin = Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin;
 8001606:	230e      	movs	r3, #14
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <MX_GPIO_Init+0x160>)
 800161e:	f000 fd23 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SYNC_Pin RE_tranceiver_Pin DE_tranceiver_Pin */
  GPIO_InitStruct.Pin = SPI_SYNC_Pin|RE_tranceiver_Pin|DE_tranceiver_Pin;
 8001622:	f241 0330 	movw	r3, #4144	; 0x1030
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_GPIO_Init+0x164>)
 800163c:	f000 fd14 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDAC_Pin */
  GPIO_InitStruct.Pin = LDAC_Pin;
 8001640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDAC_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <MX_GPIO_Init+0x168>)
 800165a:	f000 fd05 	bl	8002068 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	; 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40021400 	.word	0x40021400
 8001670:	40020400 	.word	0x40020400
 8001674:	40020c00 	.word	0x40020c00
 8001678:	40020800 	.word	0x40020800

0800167c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001688:	f008 fd80 	bl	800a18c <osDelay>
 800168c:	e7fa      	b.n	8001684 <StartDefaultTask+0x8>

0800168e <StartKnopThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKnopThread */
void StartKnopThread(void *argument)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKnopThread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001696:	2001      	movs	r0, #1
 8001698:	f008 fd78 	bl	800a18c <osDelay>
 800169c:	e7fb      	b.n	8001696 <StartKnopThread+0x8>

0800169e <StartLEDThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDThread */
void StartLEDThread(void *argument)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDThread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f008 fd70 	bl	800a18c <osDelay>
 80016ac:	e7fb      	b.n	80016a6 <StartLEDThread+0x8>
	...

080016b0 <Simulate_DAC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Simulate_DAC */
void Simulate_DAC(void *argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Simulate_DAC */
	int scenario=1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
	  {




		    while ((huidig_status == STATUS_TEST_GESTART && usb_busy == false)  || huidig_status == STATUS_TEST_GEPAUZEERD) {
 80016bc:	e031      	b.n	8001722 <Simulate_DAC+0x72>
				   // Deze Delay is noodzakkelijk anders voert hij de send_status_to_gui(TEST_RUNNING);niet uit in de status thread.
		    	   osDelay(10);
 80016be:	200a      	movs	r0, #10
 80016c0:	f008 fd64 	bl	800a18c <osDelay>


				  // Stuur het actieve scenario naar de GUI
					usb_busy = true;
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <Simulate_DAC+0x9c>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
					send_active_scenario_to_gui(scenario);
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f7ff fd1c 	bl	8001108 <send_active_scenario_to_gui>
					usb_busy = false;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <Simulate_DAC+0x9c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
					// Zet de vlag weer op false zodat andere threads de USB kunnen gebruiken


				  // Simuleer een vertraging tijdens het draaien van dit scenario
				  for (int i = 0; i < 5000; i++) { // Delay van 5 seconden
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	e011      	b.n	8001700 <Simulate_DAC+0x50>
				   // Controleer tijdens de delay of de test gepauzeerd is
						if (huidig_status == STATUS_TEST_GEPAUZEERD) {
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <Simulate_DAC+0xa0>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d107      	bne.n	80016f4 <Simulate_DAC+0x44>
						  // Als de test gepauzeerd is, blijf in deze lus totdat de status verandert
							  while (huidig_status == STATUS_TEST_GEPAUZEERD) {
 80016e4:	e002      	b.n	80016ec <Simulate_DAC+0x3c>
								osDelay(1); // Wacht kleine intervallen en check status continu
 80016e6:	2001      	movs	r0, #1
 80016e8:	f008 fd50 	bl	800a18c <osDelay>
							  while (huidig_status == STATUS_TEST_GEPAUZEERD) {
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <Simulate_DAC+0xa0>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d0f8      	beq.n	80016e6 <Simulate_DAC+0x36>
							  }
						}
						osDelay(1);  // Dit vervangt de HAL_Delay met osDelay
 80016f4:	2001      	movs	r0, #1
 80016f6:	f008 fd49 	bl	800a18c <osDelay>
				  for (int i = 0; i < 5000; i++) { // Delay van 5 seconden
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	3301      	adds	r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f241 3287 	movw	r2, #4999	; 0x1387
 8001706:	4293      	cmp	r3, r2
 8001708:	dde8      	ble.n	80016dc <Simulate_DAC+0x2c>
				  }

				  // Verhoog het scenario
				  scenario++;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
				  if (scenario > 6) {
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b06      	cmp	r3, #6
 8001714:	dd05      	ble.n	8001722 <Simulate_DAC+0x72>
					// Als alle scenario's zijn afgerond, stel de status in op voltooid
					huidig_status = STATUS_TEST_VOLTOOID;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <Simulate_DAC+0xa0>)
 8001718:	2206      	movs	r2, #6
 800171a:	701a      	strb	r2, [r3, #0]
					scenario = 1;
 800171c:	2301      	movs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
					break;  // Breek de while-loop
 8001720:	e00f      	b.n	8001742 <Simulate_DAC+0x92>
		    while ((huidig_status == STATUS_TEST_GESTART && usb_busy == false)  || huidig_status == STATUS_TEST_GEPAUZEERD) {
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <Simulate_DAC+0xa0>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d107      	bne.n	800173a <Simulate_DAC+0x8a>
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <Simulate_DAC+0x9c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f083 0301 	eor.w	r3, r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1c1      	bne.n	80016be <Simulate_DAC+0xe>
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <Simulate_DAC+0xa0>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b04      	cmp	r3, #4
 8001740:	d0bd      	beq.n	80016be <Simulate_DAC+0xe>

		    }


		// Kleine vertraging om CPU te besparen
		osDelay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f008 fd22 	bl	800a18c <osDelay>
		    while ((huidig_status == STATUS_TEST_GESTART && usb_busy == false)  || huidig_status == STATUS_TEST_GEPAUZEERD) {
 8001748:	e7eb      	b.n	8001722 <Simulate_DAC+0x72>
 800174a:	bf00      	nop
 800174c:	20001b03 	.word	0x20001b03
 8001750:	20001b02 	.word	0x20001b02

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x8>
	...

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_MspInit+0x54>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <HAL_MspInit+0x54>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_MspInit+0x54>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_MspInit+0x54>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_MspInit+0x54>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_MspInit+0x54>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	210f      	movs	r1, #15
 80017a2:	f06f 0001 	mvn.w	r0, #1
 80017a6:	f000 fc28 	bl	8001ffa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0a2      	sub	sp, #136	; 0x88
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	225c      	movs	r2, #92	; 0x5c
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f00c f846 	bl	800d86a <memset>
  if(hi2s->Instance==SPI1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a37      	ldr	r2, [pc, #220]	; (80018c0 <HAL_I2S_MspInit+0x108>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d167      	bne.n	80018b8 <HAL_I2S_MspInit+0x100>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80017ec:	2332      	movs	r3, #50	; 0x32
 80017ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 80017f4:	2304      	movs	r3, #4
 80017f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001800:	2301      	movs	r3, #1
 8001802:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8001804:	2300      	movs	r3, #0
 8001806:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	4618      	mov	r0, r3
 800180e:	f002 fbd1 	bl	8003fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8001818:	f7ff ff9c 	bl	8001754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <HAL_I2S_MspInit+0x10c>)
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <HAL_I2S_MspInit+0x10c>)
 8001826:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800182a:	6453      	str	r3, [r2, #68]	; 0x44
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_I2S_MspInit+0x10c>)
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_I2S_MspInit+0x10c>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <HAL_I2S_MspInit+0x10c>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_I2S_MspInit+0x10c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_I2S_MspInit+0x10c>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_I2S_MspInit+0x10c>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_I2S_MspInit+0x10c>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001870:	23b0      	movs	r3, #176	; 0xb0
 8001872:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001882:	2305      	movs	r3, #5
 8001884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800188c:	4619      	mov	r1, r3
 800188e:	480e      	ldr	r0, [pc, #56]	; (80018c8 <HAL_I2S_MspInit+0x110>)
 8001890:	f000 fbea 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001894:	2310      	movs	r3, #16
 8001896:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018a6:	2305      	movs	r3, #5
 80018a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <HAL_I2S_MspInit+0x114>)
 80018b4:	f000 fbd8 	bl	8002068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3788      	adds	r7, #136	; 0x88
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40013000 	.word	0x40013000
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020800 	.word	0x40020800

080018d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_SPI_MspInit+0x84>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d12c      	bne.n	800194c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_SPI_MspInit+0x88>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_SPI_MspInit+0x88>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_SPI_MspInit+0x88>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_SPI_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a10      	ldr	r2, [pc, #64]	; (8001958 <HAL_SPI_MspInit+0x88>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_SPI_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800192a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800193c:	2305      	movs	r3, #5
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <HAL_SPI_MspInit+0x8c>)
 8001948:	f000 fb8e 	bl	8002068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800194c:	bf00      	nop
 800194e:	3728      	adds	r7, #40	; 0x28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40003800 	.word	0x40003800
 8001958:	40023800 	.word	0x40023800
 800195c:	40020400 	.word	0x40020400

08001960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001970:	d115      	bne.n	800199e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_TIM_Base_MspInit+0x48>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <HAL_TIM_Base_MspInit+0x48>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_TIM_Base_MspInit+0x48>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2105      	movs	r1, #5
 8001992:	201c      	movs	r0, #28
 8001994:	f000 fb31 	bl	8001ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001998:	201c      	movs	r0, #28
 800199a:	f000 fb4a 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	; 0x30
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a32      	ldr	r2, [pc, #200]	; (8001a94 <HAL_UART_MspInit+0xe8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12c      	bne.n	8001a28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a30      	ldr	r2, [pc, #192]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019d8:	f043 0310 	orr.w	r3, r3, #16
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a06:	23c0      	movs	r3, #192	; 0xc0
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a16:	2307      	movs	r3, #7
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	481e      	ldr	r0, [pc, #120]	; (8001a9c <HAL_UART_MspInit+0xf0>)
 8001a22:	f000 fb21 	bl	8002068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a26:	e031      	b.n	8001a8c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_UART_MspInit+0xf4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12c      	bne.n	8001a8c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCOM_TX_STLINK_Pin|VCOM_RX_ST_LINK_Pin;
 8001a6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <HAL_UART_MspInit+0xf0>)
 8001a88:	f000 faee 	bl	8002068 <HAL_GPIO_Init>
}
 8001a8c:	bf00      	nop
 8001a8e:	3730      	adds	r7, #48	; 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40011000 	.word	0x40011000
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	40004800 	.word	0x40004800

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <NMI_Handler+0x4>

08001aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler+0x4>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler+0x4>

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad4:	f000 f972 	bl	8001dbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ad8:	f009 ff90 	bl	800b9fc <xTaskGetSchedulerState>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d001      	beq.n	8001ae6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ae2:	f00a fd79 	bl	800c5d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <TIM2_IRQHandler+0x10>)
 8001af2:	f003 ff7e 	bl	80059f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200003a0 	.word	0x200003a0

08001b00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <OTG_FS_IRQHandler+0x10>)
 8001b06:	f000 ffc9 	bl	8002a9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200079fc 	.word	0x200079fc

08001b14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return 1;
 8001b18:	2301      	movs	r3, #1
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_kill>:

int _kill(int pid, int sig)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b2e:	f00b fd6b 	bl	800d608 <__errno>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2216      	movs	r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
  return -1;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_exit>:

void _exit (int status)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffe7 	bl	8001b24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b56:	e7fe      	b.n	8001b56 <_exit+0x12>

08001b58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e00a      	b.n	8001b80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b6a:	f3af 8000 	nop.w
 8001b6e:	4601      	mov	r1, r0
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	60ba      	str	r2, [r7, #8]
 8001b76:	b2ca      	uxtb	r2, r1
 8001b78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbf0      	blt.n	8001b6a <_read+0x12>
  }

  return len;
 8001b88:	687b      	ldr	r3, [r7, #4]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e009      	b.n	8001bb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf1      	blt.n	8001ba4 <_write+0x12>
  }
  return len;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_close>:

int _close(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf2:	605a      	str	r2, [r3, #4]
  return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_isatty>:

int _isatty(int file)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c64:	f00b fcd0 	bl	800d608 <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	e009      	b.n	8001c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <_sbrk+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20020000 	.word	0x20020000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	20001b04 	.word	0x20001b04
 8001c9c:	20008138 	.word	0x20008138

08001ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <SystemInit+0x20>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <SystemInit+0x20>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cca:	490e      	ldr	r1, [pc, #56]	; (8001d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce0:	4c0b      	ldr	r4, [pc, #44]	; (8001d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cee:	f7ff ffd7 	bl	8001ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f00b fd85 	bl	800d800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7ff fa35 	bl	8001164 <main>
  bx  lr    
 8001cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8001d08:	08011464 	.word	0x08011464
  ldr r2, =_sbss
 8001d0c:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8001d10:	20008138 	.word	0x20008138

08001d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC_IRQHandler>
	...

08001d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <HAL_Init+0x40>)
 8001d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_Init+0x40>)
 8001d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_Init+0x40>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f000 f94f 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d46:	200f      	movs	r0, #15
 8001d48:	f000 f808 	bl	8001d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4c:	f7ff fd08 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x54>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x58>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 f967 	bl	800204e <HAL_SYSTICK_Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00e      	b.n	8001da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b0f      	cmp	r3, #15
 8001d8e:	d80a      	bhi.n	8001da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d90:	2200      	movs	r2, #0
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f000 f92f 	bl	8001ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d9c:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <HAL_InitTick+0x5c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000008 	.word	0x20000008
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x20>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x24>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_IncTick+0x24>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	20001b08 	.word	0x20001b08

08001de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return uwTick;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_GetTick+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20001b08 	.word	0x20001b08

08001dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff ffee 	bl	8001de4 <HAL_GetTick>
 8001e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d005      	beq.n	8001e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_Delay+0x44>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e22:	bf00      	nop
 8001e24:	f7ff ffde 	bl	8001de4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d8f7      	bhi.n	8001e24 <HAL_Delay+0x28>
  {
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008

08001e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 0307 	and.w	r3, r3, #7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	db0b      	blt.n	8001ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4907      	ldr	r1, [pc, #28]	; (8001ee0 <__NVIC_EnableIRQ+0x38>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2001      	movs	r0, #1
 8001eca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	; (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
         );
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb0:	d301      	bcc.n	8001fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00f      	b.n	8001fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <SysTick_Config+0x40>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f7ff ff8e 	bl	8001ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <SysTick_Config+0x40>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <SysTick_Config+0x40>)
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000e010 	.word	0xe000e010

08001fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff29 	bl	8001e44 <__NVIC_SetPriorityGrouping>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200c:	f7ff ff3e 	bl	8001e8c <__NVIC_GetPriorityGrouping>
 8002010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff ff8e 	bl	8001f38 <NVIC_EncodePriority>
 800201c:	4602      	mov	r2, r0
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff5d 	bl	8001ee4 <__NVIC_SetPriority>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff31 	bl	8001ea8 <__NVIC_EnableIRQ>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ffa2 	bl	8001fa0 <SysTick_Config>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e165      	b.n	8002350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002084:	2201      	movs	r2, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	f040 8154 	bne.w	800234a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d005      	beq.n	80020ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d130      	bne.n	800211c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 0201 	and.w	r2, r3, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b03      	cmp	r3, #3
 8002126:	d017      	beq.n	8002158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d123      	bne.n	80021ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	69b9      	ldr	r1, [r7, #24]
 80021a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0203 	and.w	r2, r3, #3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80ae 	beq.w	800234a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b5d      	ldr	r3, [pc, #372]	; (8002368 <HAL_GPIO_Init+0x300>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	4a5c      	ldr	r2, [pc, #368]	; (8002368 <HAL_GPIO_Init+0x300>)
 80021f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fc:	6453      	str	r3, [r2, #68]	; 0x44
 80021fe:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <HAL_GPIO_Init+0x300>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220a:	4a58      	ldr	r2, [pc, #352]	; (800236c <HAL_GPIO_Init+0x304>)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	220f      	movs	r2, #15
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4f      	ldr	r2, [pc, #316]	; (8002370 <HAL_GPIO_Init+0x308>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d025      	beq.n	8002282 <HAL_GPIO_Init+0x21a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4e      	ldr	r2, [pc, #312]	; (8002374 <HAL_GPIO_Init+0x30c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01f      	beq.n	800227e <HAL_GPIO_Init+0x216>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4d      	ldr	r2, [pc, #308]	; (8002378 <HAL_GPIO_Init+0x310>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d019      	beq.n	800227a <HAL_GPIO_Init+0x212>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4c      	ldr	r2, [pc, #304]	; (800237c <HAL_GPIO_Init+0x314>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0x20e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_GPIO_Init+0x318>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00d      	beq.n	8002272 <HAL_GPIO_Init+0x20a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4a      	ldr	r2, [pc, #296]	; (8002384 <HAL_GPIO_Init+0x31c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0x206>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a49      	ldr	r2, [pc, #292]	; (8002388 <HAL_GPIO_Init+0x320>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_GPIO_Init+0x202>
 8002266:	2306      	movs	r3, #6
 8002268:	e00c      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 800226a:	2307      	movs	r3, #7
 800226c:	e00a      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 800226e:	2305      	movs	r3, #5
 8002270:	e008      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 8002272:	2304      	movs	r3, #4
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 8002276:	2303      	movs	r3, #3
 8002278:	e004      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 800227a:	2302      	movs	r3, #2
 800227c:	e002      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_GPIO_Init+0x21c>
 8002282:	2300      	movs	r3, #0
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f002 0203 	and.w	r2, r2, #3
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	4093      	lsls	r3, r2
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002294:	4935      	ldr	r1, [pc, #212]	; (800236c <HAL_GPIO_Init+0x304>)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a2:	4b3a      	ldr	r3, [pc, #232]	; (800238c <HAL_GPIO_Init+0x324>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022c6:	4a31      	ldr	r2, [pc, #196]	; (800238c <HAL_GPIO_Init+0x324>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022cc:	4b2f      	ldr	r3, [pc, #188]	; (800238c <HAL_GPIO_Init+0x324>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f0:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_GPIO_Init+0x324>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022f6:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_GPIO_Init+0x324>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231a:	4a1c      	ldr	r2, [pc, #112]	; (800238c <HAL_GPIO_Init+0x324>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_GPIO_Init+0x324>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002344:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_GPIO_Init+0x324>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3301      	adds	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b0f      	cmp	r3, #15
 8002354:	f67f ae96 	bls.w	8002084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40013800 	.word	0x40013800
 8002370:	40020000 	.word	0x40020000
 8002374:	40020400 	.word	0x40020400
 8002378:	40020800 	.word	0x40020800
 800237c:	40020c00 	.word	0x40020c00
 8002380:	40021000 	.word	0x40021000
 8002384:	40021400 	.word	0x40021400
 8002388:	40021800 	.word	0x40021800
 800238c:	40013c00 	.word	0x40013c00

08002390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	887b      	ldrh	r3, [r7, #2]
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	e001      	b.n	80023b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023dc:	e003      	b.n	80023e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0e1      	b.n	80025ca <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a6d      	ldr	r2, [pc, #436]	; (80025d4 <HAL_I2S_Init+0x1e0>)
 800241e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff f9c9 	bl	80017b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800243c:	f023 030f 	bic.w	r3, r3, #15
 8002440:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2202      	movs	r2, #2
 8002448:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d06f      	beq.n	8002532 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800245a:	2310      	movs	r3, #16
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e001      	b.n	8002464 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b20      	cmp	r3, #32
 800246a:	d802      	bhi.n	8002472 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <HAL_I2S_Init+0x1e4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <HAL_I2S_Init+0x92>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a56      	ldr	r2, [pc, #344]	; (80025dc <HAL_I2S_Init+0x1e8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d104      	bne.n	8002490 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8002486:	2001      	movs	r0, #1
 8002488:	f002 f8be 	bl	8004608 <HAL_RCCEx_GetPeriphCLKFreq>
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	e003      	b.n	8002498 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002490:	2002      	movs	r0, #2
 8002492:	f002 f8b9 	bl	8004608 <HAL_RCCEx_GetPeriphCLKFreq>
 8002496:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a0:	d125      	bne.n	80024ee <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d010      	beq.n	80024cc <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	461a      	mov	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c6:	3305      	adds	r3, #5
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	e01f      	b.n	800250c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	461a      	mov	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	3305      	adds	r3, #5
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	e00e      	b.n	800250c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	461a      	mov	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	3305      	adds	r3, #5
 800250a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <HAL_I2S_Init+0x1ec>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	08db      	lsrs	r3, r3, #3
 8002516:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	e003      	b.n	800253a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002532:	2302      	movs	r3, #2
 8002534:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d902      	bls.n	8002546 <HAL_I2S_Init+0x152>
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2bff      	cmp	r3, #255	; 0xff
 8002544:	d907      	bls.n	8002556 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f043 0210 	orr.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e039      	b.n	80025ca <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	ea42 0103 	orr.w	r1, r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	430a      	orrs	r2, r1
 8002568:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002574:	f023 030f 	bic.w	r3, r3, #15
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6851      	ldr	r1, [r2, #4]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6892      	ldr	r2, [r2, #8]
 8002580:	4311      	orrs	r1, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68d2      	ldr	r2, [r2, #12]
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6992      	ldr	r2, [r2, #24]
 800258c:	430a      	orrs	r2, r1
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002598:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b30      	cmp	r3, #48	; 0x30
 80025a0:	d003      	beq.n	80025aa <HAL_I2S_Init+0x1b6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2bb0      	cmp	r3, #176	; 0xb0
 80025a8:	d107      	bne.n	80025ba <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025b8:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	080026db 	.word	0x080026db
 80025d8:	40003800 	.word	0x40003800
 80025dc:	40003c00 	.word	0x40003c00
 80025e0:	cccccccd 	.word	0xcccccccd

080025e4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10e      	bne.n	8002674 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002664:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ffb8 	bl	80025e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	b292      	uxth	r2, r2
 8002690:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	1c9a      	adds	r2, r3, #2
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10e      	bne.n	80026d2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff93 	bl	80025f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d13a      	bne.n	800276c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d109      	bne.n	8002714 <I2S_IRQHandler+0x3a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d102      	bne.n	8002714 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffb4 	bl	800267c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271a:	2b40      	cmp	r3, #64	; 0x40
 800271c:	d126      	bne.n	800276c <I2S_IRQHandler+0x92>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b20      	cmp	r3, #32
 800272a:	d11f      	bne.n	800276c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800273a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f043 0202 	orr.w	r2, r3, #2
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ff50 	bl	800260c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b03      	cmp	r3, #3
 8002776:	d136      	bne.n	80027e6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d109      	bne.n	8002796 <I2S_IRQHandler+0xbc>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278c:	2b80      	cmp	r3, #128	; 0x80
 800278e:	d102      	bne.n	8002796 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff45 	bl	8002620 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b08      	cmp	r3, #8
 800279e:	d122      	bne.n	80027e6 <I2S_IRQHandler+0x10c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d11b      	bne.n	80027e6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027bc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	f043 0204 	orr.w	r2, r3, #4
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff13 	bl	800260c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f0:	b08f      	sub	sp, #60	; 0x3c
 80027f2:	af0a      	add	r7, sp, #40	; 0x28
 80027f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e116      	b.n	8002a2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f00a fb6e 	bl	800cefc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2203      	movs	r2, #3
 8002824:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f004 f86f 	bl	8006922 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	687e      	ldr	r6, [r7, #4]
 800284c:	466d      	mov	r5, sp
 800284e:	f106 0410 	add.w	r4, r6, #16
 8002852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800285e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002862:	1d33      	adds	r3, r6, #4
 8002864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002866:	6838      	ldr	r0, [r7, #0]
 8002868:	f003 ff46 	bl	80066f8 <USB_CoreInit>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0d7      	b.n	8002a2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f004 f85d 	bl	8006944 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	e04a      	b.n	8002926 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	333d      	adds	r3, #61	; 0x3d
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	333c      	adds	r3, #60	; 0x3c
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	b298      	uxth	r0, r3
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3344      	adds	r3, #68	; 0x44
 80028cc:	4602      	mov	r2, r0
 80028ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3340      	adds	r3, #64	; 0x40
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3348      	adds	r3, #72	; 0x48
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	334c      	adds	r3, #76	; 0x4c
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	3354      	adds	r3, #84	; 0x54
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	3301      	adds	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	7bfa      	ldrb	r2, [r7, #15]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3af      	bcc.n	8002890 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e044      	b.n	80029c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	3301      	adds	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d3b5      	bcc.n	8002936 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	687e      	ldr	r6, [r7, #4]
 80029d2:	466d      	mov	r5, sp
 80029d4:	f106 0410 	add.w	r4, r6, #16
 80029d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80029e8:	1d33      	adds	r3, r6, #4
 80029ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ec:	6838      	ldr	r0, [r7, #0]
 80029ee:	f003 fff5 	bl	80069dc <USB_DevInit>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e014      	b.n	8002a2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d102      	bne.n	8002a22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f001 f98b 	bl	8003d38 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f005 f937 	bl	8007c9a <USB_DevDisconnect>

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_PCD_Start+0x1c>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e020      	b.n	8002a94 <HAL_PCD_Start+0x5e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d109      	bne.n	8002a76 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d005      	beq.n	8002a76 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 ff40 	bl	8006900 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f005 f8e7 	bl	8007c58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b08d      	sub	sp, #52	; 0x34
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f005 f9a5 	bl	8007e02 <USB_GetMode>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 84b7 	bne.w	800342e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f005 f909 	bl	8007cdc <USB_ReadInterrupts>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 84ad 	beq.w	800342c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f005 f8f6 	bl	8007cdc <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d107      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f002 0202 	and.w	r2, r2, #2
 8002b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f005 f8e4 	bl	8007cdc <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d161      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0210 	bic.w	r2, r2, #16
 8002b2c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 020f 	and.w	r2, r3, #15
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	0c5b      	lsrs	r3, r3, #17
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d124      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d035      	beq.n	8002bd2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	6a38      	ldr	r0, [r7, #32]
 8002b7a:	f004 ff1b 	bl	80079b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b8a:	441a      	add	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b9c:	441a      	add	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
 8002ba2:	e016      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	0c5b      	lsrs	r3, r3, #17
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	2b06      	cmp	r3, #6
 8002bae:	d110      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	4619      	mov	r1, r3
 8002bba:	6a38      	ldr	r0, [r7, #32]
 8002bbc:	f004 fefa 	bl	80079b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	6a1a      	ldr	r2, [r3, #32]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bcc:	441a      	add	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0210 	orr.w	r2, r2, #16
 8002be0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f005 f878 	bl	8007cdc <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bf6:	f040 80a7 	bne.w	8002d48 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f005 f87d 	bl	8007d02 <USB_ReadDevAllOutEpInterrupt>
 8002c08:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c0a:	e099      	b.n	8002d40 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 808e 	beq.w	8002d34 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f005 f8a1 	bl	8007d6a <USB_ReadDevOutEPInterrupt>
 8002c28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00c      	beq.n	8002c4e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c40:	461a      	mov	r2, r3
 8002c42:	2301      	movs	r3, #1
 8002c44:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 feef 	bl	8003a2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00c      	beq.n	8002c72 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c64:	461a      	mov	r2, r3
 8002c66:	2308      	movs	r3, #8
 8002c68:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 ffc5 	bl	8003bfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2310      	movs	r3, #16
 8002c8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d030      	beq.n	8002cfa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	2b80      	cmp	r3, #128	; 0x80
 8002ca2:	d109      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	3304      	adds	r3, #4
 8002ccc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	78db      	ldrb	r3, [r3, #3]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d108      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f00a fa34 	bl	800d150 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d10:	461a      	mov	r2, r3
 8002d12:	2320      	movs	r3, #32
 8002d14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d32:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	3301      	adds	r3, #1
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f47f af62 	bne.w	8002c0c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f004 ffc5 	bl	8007cdc <USB_ReadInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d5c:	f040 80db 	bne.w	8002f16 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f004 ffe6 	bl	8007d36 <USB_ReadDevAllInEpInterrupt>
 8002d6a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d70:	e0cd      	b.n	8002f0e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80c2 	beq.w	8002f02 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f005 f80c 	bl	8007da6 <USB_ReadDevInEPInterrupt>
 8002d8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d057      	beq.n	8002e4a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	2201      	movs	r2, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69f9      	ldr	r1, [r7, #28]
 8002db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dba:	4013      	ands	r3, r2
 8002dbc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2301      	movs	r3, #1
 8002dce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d132      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	334c      	adds	r3, #76	; 0x4c
 8002de8:	6819      	ldr	r1, [r3, #0]
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4403      	add	r3, r0
 8002df8:	3348      	adds	r3, #72	; 0x48
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4419      	add	r1, r3
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4403      	add	r3, r0
 8002e0c:	334c      	adds	r3, #76	; 0x4c
 8002e0e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d113      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x3a2>
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3354      	adds	r3, #84	; 0x54
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d108      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e36:	461a      	mov	r2, r3
 8002e38:	2101      	movs	r1, #1
 8002e3a:	f005 f813 	bl	8007e64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f00a f8fe 	bl	800d046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e60:	461a      	mov	r2, r3
 8002e62:	2308      	movs	r3, #8
 8002e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2310      	movs	r3, #16
 8002e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2340      	movs	r3, #64	; 0x40
 8002e9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d023      	beq.n	8002ef0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eaa:	6a38      	ldr	r0, [r7, #32]
 8002eac:	f003 fef4 	bl	8006c98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	3338      	adds	r3, #56	; 0x38
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	78db      	ldrb	r3, [r3, #3]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d108      	bne.n	8002ede <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f00a f94b 	bl	800d174 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eea:	461a      	mov	r2, r3
 8002eec:	2302      	movs	r3, #2
 8002eee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fd08 	bl	8003912 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	3301      	adds	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f47f af2e 	bne.w	8002d72 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f004 fede 	bl	8007cdc <USB_ReadInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f2a:	d122      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d108      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f52:	2100      	movs	r1, #0
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f00a fac5 	bl	800d4e4 <HAL_PCDEx_LPM_Callback>
 8002f5a:	e002      	b.n	8002f62 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f00a f8e9 	bl	800d134 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f004 feb0 	bl	8007cdc <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f86:	d112      	bne.n	8002fae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d102      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f00a f8a5 	bl	800d0e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002fac:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 fe92 	bl	8007cdc <USB_ReadInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc2:	d121      	bne.n	8003008 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002fd2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d111      	bne.n	8003002 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	f003 020f 	and.w	r2, r3, #15
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f00a fa72 	bl	800d4e4 <HAL_PCDEx_LPM_Callback>
 8003000:	e002      	b.n	8003008 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f00a f870 	bl	800d0e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f004 fe65 	bl	8007cdc <USB_ReadInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301c:	f040 80b7 	bne.w	800318e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2110      	movs	r1, #16
 800303a:	4618      	mov	r0, r3
 800303c:	f003 fe2c 	bl	8006c98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003040:	2300      	movs	r3, #0
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003044:	e046      	b.n	80030d4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003052:	461a      	mov	r2, r3
 8003054:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003058:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306a:	0151      	lsls	r1, r2, #5
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	440a      	add	r2, r1
 8003070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003074:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003078:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003086:	461a      	mov	r2, r3
 8003088:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800308c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309e:	0151      	lsls	r1, r2, #5
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	440a      	add	r2, r1
 80030a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030be:	0151      	lsls	r1, r2, #5
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	440a      	add	r2, r1
 80030c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d0:	3301      	adds	r3, #1
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3b3      	bcc.n	8003046 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800310a:	f043 030b 	orr.w	r3, r3, #11
 800310e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003120:	f043 030b 	orr.w	r3, r3, #11
 8003124:	6453      	str	r3, [r2, #68]	; 0x44
 8003126:	e015      	b.n	8003154 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003136:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800313a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800313e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314e:	f043 030b 	orr.w	r3, r3, #11
 8003152:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003162:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003166:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003178:	461a      	mov	r2, r3
 800317a:	f004 fe73 	bl	8007e64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800318c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f004 fda2 	bl	8007cdc <USB_ReadInterrupts>
 8003198:	4603      	mov	r3, r0
 800319a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a2:	d124      	bne.n	80031ee <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f004 fe38 	bl	8007e1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 fded 	bl	8006d92 <USB_GetDevSpeed>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681c      	ldr	r4, [r3, #0]
 80031c4:	f000 fec2 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 80031c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	4620      	mov	r0, r4
 80031d4:	f003 faf2 	bl	80067bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f009 ff5c 	bl	800d096 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f004 fd72 	bl	8007cdc <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d10a      	bne.n	8003218 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f009 ff39 	bl	800d07a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f002 0208 	and.w	r2, r2, #8
 8003216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f004 fd5d 	bl	8007cdc <USB_ReadInterrupts>
 8003222:	4603      	mov	r3, r0
 8003224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003228:	2b80      	cmp	r3, #128	; 0x80
 800322a:	d122      	bne.n	8003272 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003238:	2301      	movs	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	e014      	b.n	8003268 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d105      	bne.n	8003262 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	b2db      	uxtb	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fb27 	bl	80038b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	429a      	cmp	r2, r3
 8003270:	d3e5      	bcc.n	800323e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f004 fd30 	bl	8007cdc <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003286:	d13b      	bne.n	8003300 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
 800328c:	e02b      	b.n	80032e6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	3340      	adds	r3, #64	; 0x40
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d115      	bne.n	80032e0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da12      	bge.n	80032e0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	333f      	adds	r3, #63	; 0x3f
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fae8 	bl	80038b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	3301      	adds	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d3ce      	bcc.n	800328e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f004 fce9 	bl	8007cdc <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003314:	d155      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003316:	2301      	movs	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	e045      	b.n	80033a8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d12e      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003344:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003346:	2b00      	cmp	r3, #0
 8003348:	da2b      	bge.n	80033a2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003356:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800335a:	429a      	cmp	r2, r3
 800335c:	d121      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800339e:	6053      	str	r3, [r2, #4]
            break;
 80033a0:	e007      	b.n	80033b2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	3301      	adds	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d3b4      	bcc.n	800331c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f004 fc88 	bl	8007cdc <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d6:	d10a      	bne.n	80033ee <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f009 fedd 	bl	800d198 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 fc72 	bl	8007cdc <USB_ReadInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d115      	bne.n	800342e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f009 fecd 	bl	800d1b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	e000      	b.n	800342e <HAL_PCD_IRQHandler+0x992>
      return;
 800342c:	bf00      	nop
    }
  }
}
 800342e:	3734      	adds	r7, #52	; 0x34
 8003430:	46bd      	mov	sp, r7
 8003432:	bd90      	pop	{r4, r7, pc}

08003434 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_PCD_SetAddress+0x1a>
 800344a:	2302      	movs	r3, #2
 800344c:	e013      	b.n	8003476 <HAL_PCD_SetAddress+0x42>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f004 fbd0 	bl	8007c0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	4608      	mov	r0, r1
 8003488:	4611      	mov	r1, r2
 800348a:	461a      	mov	r2, r3
 800348c:	4603      	mov	r3, r0
 800348e:	70fb      	strb	r3, [r7, #3]
 8003490:	460b      	mov	r3, r1
 8003492:	803b      	strh	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800349c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da0f      	bge.n	80034c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	3338      	adds	r3, #56	; 0x38
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	705a      	strb	r2, [r3, #1]
 80034c2:	e00f      	b.n	80034e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 020f 	and.w	r2, r3, #15
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034f0:	883a      	ldrh	r2, [r7, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	78ba      	ldrb	r2, [r7, #2]
 80034fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	785b      	ldrb	r3, [r3, #1]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800350e:	78bb      	ldrb	r3, [r7, #2]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d102      	bne.n	800351a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_PCD_EP_Open+0xaa>
 8003524:	2302      	movs	r3, #2
 8003526:	e00e      	b.n	8003546 <HAL_PCD_EP_Open+0xc8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68f9      	ldr	r1, [r7, #12]
 8003536:	4618      	mov	r0, r3
 8003538:	f003 fc50 	bl	8006ddc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003544:	7afb      	ldrb	r3, [r7, #11]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800355a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800355e:	2b00      	cmp	r3, #0
 8003560:	da0f      	bge.n	8003582 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	3338      	adds	r3, #56	; 0x38
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	3304      	adds	r3, #4
 8003578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	705a      	strb	r2, [r3, #1]
 8003580:	e00f      	b.n	80035a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	3304      	adds	r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_PCD_EP_Close+0x6e>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e00e      	b.n	80035da <HAL_PCD_EP_Close+0x8c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68f9      	ldr	r1, [r7, #12]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 fc8e 	bl	8006eec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	460b      	mov	r3, r1
 80035f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f2:	7afb      	ldrb	r3, [r7, #11]
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	3304      	adds	r3, #4
 800360a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2200      	movs	r2, #0
 800361c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2200      	movs	r2, #0
 8003622:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003624:	7afb      	ldrb	r3, [r7, #11]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	b2da      	uxtb	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d102      	bne.n	800363e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	6979      	ldr	r1, [r7, #20]
 8003656:	f003 ff6d 	bl	8007534 <USB_EP0StartXfer>
 800365a:	e008      	b.n	800366e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	6979      	ldr	r1, [r7, #20]
 800366a:	f003 fd1b 	bl	80070a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	f003 020f 	and.w	r2, r3, #15
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	460b      	mov	r3, r1
 80036b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	f003 020f 	and.w	r2, r3, #15
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	3338      	adds	r3, #56	; 0x38
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	3304      	adds	r3, #4
 80036ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2200      	movs	r2, #0
 80036e0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2201      	movs	r2, #1
 80036e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036e8:	7afb      	ldrb	r3, [r7, #11]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	6979      	ldr	r1, [r7, #20]
 800371a:	f003 ff0b 	bl	8007534 <USB_EP0StartXfer>
 800371e:	e008      	b.n	8003732 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	6979      	ldr	r1, [r7, #20]
 800372e:	f003 fcb9 	bl	80070a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 020f 	and.w	r2, r3, #15
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	429a      	cmp	r2, r3
 8003754:	d901      	bls.n	800375a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e050      	b.n	80037fc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800375a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800375e:	2b00      	cmp	r3, #0
 8003760:	da0f      	bge.n	8003782 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 020f 	and.w	r2, r3, #15
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	3338      	adds	r3, #56	; 0x38
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	3304      	adds	r3, #4
 8003778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	705a      	strb	r2, [r3, #1]
 8003780:	e00d      	b.n	800379e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_PCD_EP_SetStall+0x82>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e01e      	b.n	80037fc <HAL_PCD_EP_SetStall+0xc0>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f004 f949 	bl	8007a64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	b2d9      	uxtb	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037ec:	461a      	mov	r2, r3
 80037ee:	f004 fb39 	bl	8007e64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	f003 020f 	and.w	r2, r3, #15
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	d901      	bls.n	8003822 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e042      	b.n	80038a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003826:	2b00      	cmp	r3, #0
 8003828:	da0f      	bge.n	800384a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	3338      	adds	r3, #56	; 0x38
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	3304      	adds	r3, #4
 8003840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	705a      	strb	r2, [r3, #1]
 8003848:	e00f      	b.n	800386a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_PCD_EP_ClrStall+0x86>
 8003886:	2302      	movs	r3, #2
 8003888:	e00e      	b.n	80038a8 <HAL_PCD_EP_ClrStall+0xa4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	4618      	mov	r0, r3
 800389a:	f004 f951 	bl	8007b40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	da0c      	bge.n	80038de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	f003 020f 	and.w	r2, r3, #15
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	3338      	adds	r3, #56	; 0x38
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	3304      	adds	r3, #4
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e00c      	b.n	80038f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	f003 020f 	and.w	r2, r3, #15
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	3304      	adds	r3, #4
 80038f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68f9      	ldr	r1, [r7, #12]
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 ff70 	bl	80077e4 <USB_EPStopXfer>
 8003904:	4603      	mov	r3, r0
 8003906:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003908:	7afb      	ldrb	r3, [r7, #11]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b08a      	sub	sp, #40	; 0x28
 8003916:	af02      	add	r7, sp, #8
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	3338      	adds	r3, #56	; 0x38
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	3304      	adds	r3, #4
 8003938:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	429a      	cmp	r2, r3
 8003944:	d901      	bls.n	800394a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06c      	b.n	8003a24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	429a      	cmp	r2, r3
 800395e:	d902      	bls.n	8003966 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3303      	adds	r3, #3
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800396e:	e02b      	b.n	80039c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	699a      	ldr	r2, [r3, #24]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	429a      	cmp	r2, r3
 8003984:	d902      	bls.n	800398c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3303      	adds	r3, #3
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6919      	ldr	r1, [r3, #16]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4603      	mov	r3, r0
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f003 ffc4 	bl	8007938 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	441a      	add	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	441a      	add	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d809      	bhi.n	80039f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d203      	bcs.n	80039f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1be      	bne.n	8003970 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d811      	bhi.n	8003a22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	2201      	movs	r2, #1
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	6939      	ldr	r1, [r7, #16]
 8003a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a1e:	4013      	ands	r3, r2
 8003a20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	333c      	adds	r3, #60	; 0x3c
 8003a44:	3304      	adds	r3, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d17b      	bne.n	8003b5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	4a61      	ldr	r2, [pc, #388]	; (8003bf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	f240 80b9 	bls.w	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80b3 	beq.w	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a94:	6093      	str	r3, [r2, #8]
 8003a96:	e0a7      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	6093      	str	r3, [r2, #8]
 8003ab4:	e098      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 8093 	bne.w	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4a4b      	ldr	r2, [pc, #300]	; (8003bf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d90f      	bls.n	8003aea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae6:	6093      	str	r3, [r2, #8]
 8003ae8:	e07e      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4413      	add	r3, r2
 8003afc:	3304      	adds	r3, #4
 8003afe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	0159      	lsls	r1, r3, #5
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d114      	bne.n	8003b4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b34:	461a      	mov	r2, r3
 8003b36:	2101      	movs	r1, #1
 8003b38:	f004 f994 	bl	8007e64 <USB_EP0_OutStart>
 8003b3c:	e006      	b.n	8003b4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	441a      	add	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f009 fa5c 	bl	800d010 <HAL_PCD_DataOutStageCallback>
 8003b58:	e046      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4a26      	ldr	r2, [pc, #152]	; (8003bf8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d124      	bne.n	8003bac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	e032      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f009 fa33 	bl	800d010 <HAL_PCD_DataOutStageCallback>
 8003baa:	e01d      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d114      	bne.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	f004 f944 	bl	8007e64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f009 fa14 	bl	800d010 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	4f54300a 	.word	0x4f54300a
 8003bf8:	4f54310a 	.word	0x4f54310a

08003bfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	333c      	adds	r3, #60	; 0x3c
 8003c14:	3304      	adds	r3, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d90e      	bls.n	8003c50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f009 f9cb 	bl	800cfec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d90c      	bls.n	8003c78 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d108      	bne.n	8003c78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c70:	461a      	mov	r2, r3
 8003c72:	2101      	movs	r1, #1
 8003c74:	f004 f8f6 	bl	8007e64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	4f54300a 	.word	0x4f54300a

08003c88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
 8003c94:	4613      	mov	r3, r2
 8003c96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ca6:	883b      	ldrh	r3, [r7, #0]
 8003ca8:	0419      	lsls	r1, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb4:	e028      	b.n	8003d08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e00d      	b.n	8003ce6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	3340      	adds	r3, #64	; 0x40
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	4413      	add	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3ec      	bcc.n	8003cca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cf0:	883b      	ldrh	r3, [r7, #0]
 8003cf2:	0418      	lsls	r0, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	4302      	orrs	r2, r0
 8003d00:	3340      	adds	r3, #64	; 0x40
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	f043 0303 	orr.w	r3, r3, #3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0cc      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b68      	ldr	r3, [pc, #416]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d90c      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b65      	ldr	r3, [pc, #404]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b63      	ldr	r3, [pc, #396]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0b8      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd4:	4b59      	ldr	r3, [pc, #356]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a58      	ldr	r2, [pc, #352]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dec:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a52      	ldr	r2, [pc, #328]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df8:	4b50      	ldr	r3, [pc, #320]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	494d      	ldr	r1, [pc, #308]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d044      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d119      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d003      	beq.n	8003e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e06f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4e:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e067      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e5e:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 0203 	bic.w	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4934      	ldr	r1, [pc, #208]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e70:	f7fd ffb8 	bl	8001de4 <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e78:	f7fd ffb4 	bl	8001de4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e04f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 020c 	and.w	r2, r3, #12
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d1eb      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d20c      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e032      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4916      	ldr	r1, [pc, #88]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	490e      	ldr	r1, [pc, #56]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f06:	f000 fdc7 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	490a      	ldr	r1, [pc, #40]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003f18:	5ccb      	ldrb	r3, [r1, r3]
 8003f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x1c8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd ff18 	bl	8001d5c <HAL_InitTick>

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023c00 	.word	0x40023c00
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	08011004 	.word	0x08011004
 8003f44:	20000000 	.word	0x20000000
 8003f48:	20000004 	.word	0x20000004

08003f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000000 	.word	0x20000000

08003f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f68:	f7ff fff0 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	0a9b      	lsrs	r3, r3, #10
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40023800 	.word	0x40023800
 8003f88:	08011014 	.word	0x08011014

08003f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f90:	f7ff ffdc 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0b5b      	lsrs	r3, r3, #13
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4903      	ldr	r1, [pc, #12]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	08011014 	.word	0x08011014

08003fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08c      	sub	sp, #48	; 0x30
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d010      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003fec:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	496c      	ldr	r1, [pc, #432]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800400a:	2301      	movs	r3, #1
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d010      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800401a:	4b64      	ldr	r3, [pc, #400]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800401c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004020:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004028:	4960      	ldr	r1, [pc, #384]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004038:	2301      	movs	r3, #1
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d017      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004048:	4b58      	ldr	r3, [pc, #352]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800404a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	4955      	ldr	r1, [pc, #340]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004066:	d101      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004068:	2301      	movs	r3, #1
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004074:	2301      	movs	r3, #1
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d017      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004084:	4b49      	ldr	r3, [pc, #292]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	4946      	ldr	r1, [pc, #280]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a2:	d101      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80040a4:	2301      	movs	r3, #1
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80040b0:	2301      	movs	r3, #1
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 808a 	beq.w	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040de:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a33      	ldr	r2, [pc, #204]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80040e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040ea:	f7fd fe7b 	bl	8001de4 <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040f2:	f7fd fe77 	bl	8001de4 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e278      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004104:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004110:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004118:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02f      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	429a      	cmp	r2, r3
 800412c:	d028      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800412e:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004136:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004138:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800414a:	4b18      	ldr	r3, [pc, #96]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d114      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004156:	f7fd fe45 	bl	8001de4 <HAL_GetTick>
 800415a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415c:	e00a      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fd fe41 	bl	8001de4 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e240      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004174:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ee      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800418c:	d114      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800418e:	4b07      	ldr	r3, [pc, #28]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800419e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a2:	4902      	ldr	r1, [pc, #8]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]
 80041a8:	e00c      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40007000 	.word	0x40007000
 80041b4:	42470e40 	.word	0x42470e40
 80041b8:	4b4a      	ldr	r3, [pc, #296]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a49      	ldr	r2, [pc, #292]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041c2:	6093      	str	r3, [r2, #8]
 80041c4:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d0:	4944      	ldr	r1, [pc, #272]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d004      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80041e8:	4b3f      	ldr	r3, [pc, #252]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80041ea:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80041f8:	4b3a      	ldr	r3, [pc, #232]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	4937      	ldr	r1, [pc, #220]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800421a:	4b32      	ldr	r3, [pc, #200]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800421c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004220:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004228:	492e      	ldr	r1, [pc, #184]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d011      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800423c:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800423e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004242:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	4926      	ldr	r1, [pc, #152]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800425a:	d101      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800425c:	2301      	movs	r3, #1
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	491a      	ldr	r1, [pc, #104]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800428e:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004294:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429c:	4911      	ldr	r1, [pc, #68]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ac:	d101      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80042ae:	2301      	movs	r3, #1
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d005      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c0:	f040 80ff 	bne.w	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ca:	f7fd fd8b 	bl	8001de4 <HAL_GetTick>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042d0:	e00e      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042d2:	f7fd fd87 	bl	8001de4 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d907      	bls.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e188      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80042e4:	40023800 	.word	0x40023800
 80042e8:	424711e0 	.word	0x424711e0
 80042ec:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042f0:	4b7e      	ldr	r3, [pc, #504]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ea      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	2b00      	cmp	r3, #0
 800430e:	d009      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004318:	2b00      	cmp	r3, #0
 800431a:	d028      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d124      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004324:	4b71      	ldr	r3, [pc, #452]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	3301      	adds	r3, #1
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004336:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433c:	0e1b      	lsrs	r3, r3, #24
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	019b      	lsls	r3, r3, #6
 800434e:	431a      	orrs	r2, r3
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	3b01      	subs	r3, #1
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	431a      	orrs	r2, r3
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	071b      	lsls	r3, r3, #28
 8004366:	4961      	ldr	r1, [pc, #388]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800438c:	2b00      	cmp	r3, #0
 800438e:	d035      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004398:	d130      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800439a:	4b54      	ldr	r3, [pc, #336]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a0:	0c1b      	lsrs	r3, r3, #16
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	3301      	adds	r3, #1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043ac:	4b4f      	ldr	r3, [pc, #316]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b2:	0f1b      	lsrs	r3, r3, #28
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	019b      	lsls	r3, r3, #6
 80043c4:	431a      	orrs	r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	3b01      	subs	r3, #1
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	431a      	orrs	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	071b      	lsls	r3, r3, #28
 80043dc:	4943      	ldr	r1, [pc, #268]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043e4:	4b41      	ldr	r3, [pc, #260]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ea:	f023 021f 	bic.w	r2, r3, #31
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	493d      	ldr	r1, [pc, #244]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004404:	2b00      	cmp	r3, #0
 8004406:	d029      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004410:	d124      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	3301      	adds	r3, #1
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004424:	4b31      	ldr	r3, [pc, #196]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442a:	0f1b      	lsrs	r3, r3, #28
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	019b      	lsls	r3, r3, #6
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	3b01      	subs	r3, #1
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	431a      	orrs	r2, r3
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	431a      	orrs	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	071b      	lsls	r3, r3, #28
 8004454:	4925      	ldr	r1, [pc, #148]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004464:	2b00      	cmp	r3, #0
 8004466:	d016      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	3b01      	subs	r3, #1
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	071b      	lsls	r3, r3, #28
 800448e:	4917      	ldr	r1, [pc, #92]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004496:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800449c:	f7fd fca2 	bl	8001de4 <HAL_GetTick>
 80044a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044a4:	f7fd fc9e 	bl	8001de4 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e09f      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	f040 8095 	bne.w	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044ca:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044d0:	f7fd fc88 	bl	8001de4 <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044d6:	e00f      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80044d8:	f7fd fc84 	bl	8001de4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d908      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e085      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	42470068 	.word	0x42470068
 80044f4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044f8:	4b41      	ldr	r3, [pc, #260]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004504:	d0e8      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004522:	2b00      	cmp	r3, #0
 8004524:	d02b      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452a:	2b00      	cmp	r3, #0
 800452c:	d127      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800452e:	4b34      	ldr	r3, [pc, #208]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	3301      	adds	r3, #1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	019b      	lsls	r3, r3, #6
 800454a:	431a      	orrs	r2, r3
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	3b01      	subs	r3, #1
 8004552:	041b      	lsls	r3, r3, #16
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	061b      	lsls	r3, r3, #24
 800455c:	4928      	ldr	r1, [pc, #160]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004564:	4b26      	ldr	r3, [pc, #152]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	3b01      	subs	r3, #1
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	4922      	ldr	r1, [pc, #136]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01d      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004592:	d118      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004594:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	0e1b      	lsrs	r3, r3, #24
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	019b      	lsls	r3, r3, #6
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	3b01      	subs	r3, #1
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	061b      	lsls	r3, r3, #24
 80045be:	4910      	ldr	r1, [pc, #64]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045cc:	f7fd fc0a 	bl	8001de4 <HAL_GetTick>
 80045d0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80045d4:	f7fd fc06 	bl	8001de4 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e007      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f2:	d1ef      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3730      	adds	r7, #48	; 0x30
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	42470070 	.word	0x42470070

08004608 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3b01      	subs	r3, #1
 800462c:	2b07      	cmp	r3, #7
 800462e:	f200 8224 	bhi.w	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	0800483b 	.word	0x0800483b
 800463c:	08004965 	.word	0x08004965
 8004640:	08004a7b 	.word	0x08004a7b
 8004644:	08004659 	.word	0x08004659
 8004648:	08004a7b 	.word	0x08004a7b
 800464c:	08004a7b 	.word	0x08004a7b
 8004650:	08004a7b 	.word	0x08004a7b
 8004654:	08004659 	.word	0x08004659
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004658:	4ba8      	ldr	r3, [pc, #672]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800465a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465e:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800466e:	f000 80d6 	beq.w	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004678:	f200 80dd 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004682:	f000 809f 	beq.w	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800468c:	f200 80d3 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004696:	d05b      	beq.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800469e:	f200 80ca 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046a8:	f000 80b6 	beq.w	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046b2:	f200 80c0 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046bc:	f000 8082 	beq.w	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c6:	f200 80b6 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d6:	d03b      	beq.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 80046d8:	e0ad      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80046da:	4b88      	ldr	r3, [pc, #544]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80046e6:	4b85      	ldr	r3, [pc, #532]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f0:	4a83      	ldr	r2, [pc, #524]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	e008      	b.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80046fa:	4b80      	ldr	r3, [pc, #512]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004704:	4a7f      	ldr	r2, [pc, #508]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004706:	fbb2 f3f3 	udiv	r3, r2, r3
 800470a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800470c:	4b7b      	ldr	r3, [pc, #492]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	0e1b      	lsrs	r3, r3, #24
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800471a:	4b78      	ldr	r3, [pc, #480]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004720:	099b      	lsrs	r3, r3, #6
 8004722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	fb03 f202 	mul.w	r2, r3, r2
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004734:	4b71      	ldr	r3, [pc, #452]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800473a:	0a1b      	lsrs	r3, r3, #8
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	3301      	adds	r3, #1
 8004742:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	61fb      	str	r3, [r7, #28]
          break;
 800474e:	e073      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004750:	4b6a      	ldr	r3, [pc, #424]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800475c:	4b67      	ldr	r3, [pc, #412]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800475e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004762:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004766:	4a66      	ldr	r2, [pc, #408]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	e008      	b.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8004770:	4b62      	ldr	r3, [pc, #392]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800477a:	4a62      	ldr	r2, [pc, #392]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8004782:	4b5e      	ldr	r3, [pc, #376]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004788:	0e1b      	lsrs	r3, r3, #24
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8004790:	4b5a      	ldr	r3, [pc, #360]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	fb03 f202 	mul.w	r2, r3, r2
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80047aa:	4b54      	ldr	r3, [pc, #336]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	3301      	adds	r3, #1
 80047b6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	61fb      	str	r3, [r7, #28]
          break;
 80047c2:	e039      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047c4:	4b4d      	ldr	r3, [pc, #308]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047d0:	4b4a      	ldr	r3, [pc, #296]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d8:	4a49      	ldr	r2, [pc, #292]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80047da:	fbb2 f3f3 	udiv	r3, r2, r3
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e007      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80047e2:	4b46      	ldr	r3, [pc, #280]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ea:	4a46      	ldr	r2, [pc, #280]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80047f2:	4b42      	ldr	r3, [pc, #264]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	0f1b      	lsrs	r3, r3, #28
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	099b      	lsrs	r3, r3, #6
 8004804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	fb03 f202 	mul.w	r2, r3, r2
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	61fb      	str	r3, [r7, #28]
          break;
 8004816:	e00f      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004818:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800481a:	61fb      	str	r3, [r7, #28]
          break;
 800481c:	e00c      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800481e:	4b37      	ldr	r3, [pc, #220]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800482a:	4b35      	ldr	r3, [pc, #212]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800482c:	61fb      	str	r3, [r7, #28]
          break;
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8004830:	4b34      	ldr	r3, [pc, #208]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004832:	61fb      	str	r3, [r7, #28]
          break;
 8004834:	e000      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8004836:	bf00      	nop
        }
      }
      break;
 8004838:	e11f      	b.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800483a:	4b30      	ldr	r3, [pc, #192]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800483c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004840:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800484c:	d079      	beq.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004854:	f200 8082 	bhi.w	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800485e:	d03c      	beq.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004866:	d879      	bhi.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d006      	beq.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004874:	d172      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004876:	4b24      	ldr	r3, [pc, #144]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004878:	61fb      	str	r3, [r7, #28]
          break;
 800487a:	e072      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800487c:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004888:	d109      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800488a:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800488c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004894:	4a1b      	ldr	r2, [pc, #108]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	e008      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800489e:	4b17      	ldr	r3, [pc, #92]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80048a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a8:	4a15      	ldr	r2, [pc, #84]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80048aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ae:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80048b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80048c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ca:	0f1b      	lsrs	r3, r3, #28
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	61fb      	str	r3, [r7, #28]
          break;
 80048d8:	e043      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e6:	d111      	bne.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	e010      	b.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800
 8004900:	00f42400 	.word	0x00f42400
 8004904:	007a1200 	.word	0x007a1200
 8004908:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800490c:	4b5e      	ldr	r3, [pc, #376]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004914:	4a5d      	ldr	r2, [pc, #372]	; (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800491c:	4b5a      	ldr	r3, [pc, #360]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	099b      	lsrs	r3, r3, #6
 8004922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800492e:	4b56      	ldr	r3, [pc, #344]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	0f1b      	lsrs	r3, r3, #28
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	fbb2 f3f3 	udiv	r3, r2, r3
 800493e:	61fb      	str	r3, [r7, #28]
          break;
 8004940:	e00f      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004942:	4b51      	ldr	r3, [pc, #324]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494e:	d102      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8004950:	4b4f      	ldr	r3, [pc, #316]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004952:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004954:	e005      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8004956:	4b4d      	ldr	r3, [pc, #308]	; (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004958:	61fb      	str	r3, [r7, #28]
          break;
 800495a:	e002      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	61fb      	str	r3, [r7, #28]
          break;
 8004960:	bf00      	nop
        }
      }
      break;
 8004962:	e08a      	b.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004964:	4b48      	ldr	r3, [pc, #288]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800496a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004976:	d06f      	beq.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800497e:	d878      	bhi.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004986:	d03c      	beq.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800498e:	d870      	bhi.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d006      	beq.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800499c:	d169      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800499e:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80049a0:	61fb      	str	r3, [r7, #28]
          break;
 80049a2:	e069      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049a4:	4b38      	ldr	r3, [pc, #224]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b0:	d109      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80049b2:	4b35      	ldr	r3, [pc, #212]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80049b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049bc:	4a34      	ldr	r2, [pc, #208]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80049be:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80049c6:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80049c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049d0:	4a2e      	ldr	r2, [pc, #184]	; (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80049d8:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80049da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049de:	099b      	lsrs	r3, r3, #6
 80049e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	fb02 f303 	mul.w	r3, r2, r3
 80049ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80049ec:	4b26      	ldr	r3, [pc, #152]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80049ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f2:	0f1b      	lsrs	r3, r3, #28
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	61fb      	str	r3, [r7, #28]
          break;
 8004a00:	e03a      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a02:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a0e:	d108      	bne.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a10:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a18:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	e007      	b.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a22:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a2a:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	fb02 f303 	mul.w	r3, r2, r3
 8004a42:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004a44:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	0f1b      	lsrs	r3, r3, #28
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a54:	61fb      	str	r3, [r7, #28]
          break;
 8004a56:	e00f      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a64:	d102      	bne.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004a68:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004a6a:	e005      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8004a6c:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004a6e:	61fb      	str	r3, [r7, #28]
          break;
 8004a70:	e002      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
          break;
 8004a76:	bf00      	nop
        }
      }
      break;
 8004a78:	bf00      	nop
    }
  }
  return frequency;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3724      	adds	r7, #36	; 0x24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	00f42400 	.word	0x00f42400
 8004a90:	007a1200 	.word	0x007a1200
 8004a94:	00bb8000 	.word	0x00bb8000

08004a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a9c:	b0ae      	sub	sp, #184	; 0xb8
 8004a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004abe:	4bcb      	ldr	r3, [pc, #812]	; (8004dec <HAL_RCC_GetSysClockFreq+0x354>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	f200 8206 	bhi.w	8004ed8 <HAL_RCC_GetSysClockFreq+0x440>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004b09 	.word	0x08004b09
 8004ad8:	08004ed9 	.word	0x08004ed9
 8004adc:	08004ed9 	.word	0x08004ed9
 8004ae0:	08004ed9 	.word	0x08004ed9
 8004ae4:	08004b11 	.word	0x08004b11
 8004ae8:	08004ed9 	.word	0x08004ed9
 8004aec:	08004ed9 	.word	0x08004ed9
 8004af0:	08004ed9 	.word	0x08004ed9
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004ed9 	.word	0x08004ed9
 8004afc:	08004ed9 	.word	0x08004ed9
 8004b00:	08004ed9 	.word	0x08004ed9
 8004b04:	08004d09 	.word	0x08004d09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b08:	4bb9      	ldr	r3, [pc, #740]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004b0e:	e1e7      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b10:	4bb8      	ldr	r3, [pc, #736]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b16:	e1e3      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b18:	4bb4      	ldr	r3, [pc, #720]	; (8004dec <HAL_RCC_GetSysClockFreq+0x354>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b24:	4bb1      	ldr	r3, [pc, #708]	; (8004dec <HAL_RCC_GetSysClockFreq+0x354>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d071      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b30:	4bae      	ldr	r3, [pc, #696]	; (8004dec <HAL_RCC_GetSysClockFreq+0x354>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	099b      	lsrs	r3, r3, #6
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b3c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b56:	4622      	mov	r2, r4
 8004b58:	462b      	mov	r3, r5
 8004b5a:	f04f 0000 	mov.w	r0, #0
 8004b5e:	f04f 0100 	mov.w	r1, #0
 8004b62:	0159      	lsls	r1, r3, #5
 8004b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b68:	0150      	lsls	r0, r2, #5
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4621      	mov	r1, r4
 8004b70:	1a51      	subs	r1, r2, r1
 8004b72:	6439      	str	r1, [r7, #64]	; 0x40
 8004b74:	4629      	mov	r1, r5
 8004b76:	eb63 0301 	sbc.w	r3, r3, r1
 8004b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004b88:	4649      	mov	r1, r9
 8004b8a:	018b      	lsls	r3, r1, #6
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b92:	4641      	mov	r1, r8
 8004b94:	018a      	lsls	r2, r1, #6
 8004b96:	4641      	mov	r1, r8
 8004b98:	1a51      	subs	r1, r2, r1
 8004b9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	00cb      	lsls	r3, r1, #3
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bba:	4641      	mov	r1, r8
 8004bbc:	00ca      	lsls	r2, r1, #3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bca:	462b      	mov	r3, r5
 8004bcc:	460a      	mov	r2, r1
 8004bce:	eb42 0303 	adc.w	r3, r2, r3
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004be0:	4629      	mov	r1, r5
 8004be2:	024b      	lsls	r3, r1, #9
 8004be4:	4621      	mov	r1, r4
 8004be6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bea:	4621      	mov	r1, r4
 8004bec:	024a      	lsls	r2, r1, #9
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c00:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004c04:	f7fc f838 	bl	8000c78 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c12:	e067      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c14:	4b75      	ldr	r3, [pc, #468]	; (8004dec <HAL_RCC_GetSysClockFreq+0x354>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	099b      	lsrs	r3, r3, #6
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c20:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004c24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c2e:	2300      	movs	r3, #0
 8004c30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c32:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004c36:	4622      	mov	r2, r4
 8004c38:	462b      	mov	r3, r5
 8004c3a:	f04f 0000 	mov.w	r0, #0
 8004c3e:	f04f 0100 	mov.w	r1, #0
 8004c42:	0159      	lsls	r1, r3, #5
 8004c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c48:	0150      	lsls	r0, r2, #5
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4621      	mov	r1, r4
 8004c50:	1a51      	subs	r1, r2, r1
 8004c52:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c54:	4629      	mov	r1, r5
 8004c56:	eb63 0301 	sbc.w	r3, r3, r1
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004c68:	4649      	mov	r1, r9
 8004c6a:	018b      	lsls	r3, r1, #6
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c72:	4641      	mov	r1, r8
 8004c74:	018a      	lsls	r2, r1, #6
 8004c76:	4641      	mov	r1, r8
 8004c78:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c8e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c96:	4692      	mov	sl, r2
 8004c98:	469b      	mov	fp, r3
 8004c9a:	4623      	mov	r3, r4
 8004c9c:	eb1a 0303 	adds.w	r3, sl, r3
 8004ca0:	623b      	str	r3, [r7, #32]
 8004ca2:	462b      	mov	r3, r5
 8004ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	028b      	lsls	r3, r1, #10
 8004cba:	4621      	mov	r1, r4
 8004cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	028a      	lsls	r2, r1, #10
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ccc:	2200      	movs	r2, #0
 8004cce:	673b      	str	r3, [r7, #112]	; 0x70
 8004cd0:	677a      	str	r2, [r7, #116]	; 0x74
 8004cd2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004cd6:	f7fb ffcf 	bl	8000c78 <__aeabi_uldivmod>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4613      	mov	r3, r2
 8004ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ce4:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCC_GetSysClockFreq+0x354>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004cf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004d06:	e0eb      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d08:	4b38      	ldr	r3, [pc, #224]	; (8004dec <HAL_RCC_GetSysClockFreq+0x354>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d14:	4b35      	ldr	r3, [pc, #212]	; (8004dec <HAL_RCC_GetSysClockFreq+0x354>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d06b      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d20:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_RCC_GetSysClockFreq+0x354>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	099b      	lsrs	r3, r3, #6
 8004d26:	2200      	movs	r2, #0
 8004d28:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d32:	663b      	str	r3, [r7, #96]	; 0x60
 8004d34:	2300      	movs	r3, #0
 8004d36:	667b      	str	r3, [r7, #100]	; 0x64
 8004d38:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	462b      	mov	r3, r5
 8004d40:	f04f 0000 	mov.w	r0, #0
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	0159      	lsls	r1, r3, #5
 8004d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d4e:	0150      	lsls	r0, r2, #5
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4621      	mov	r1, r4
 8004d56:	1a51      	subs	r1, r2, r1
 8004d58:	61b9      	str	r1, [r7, #24]
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d6e:	4659      	mov	r1, fp
 8004d70:	018b      	lsls	r3, r1, #6
 8004d72:	4651      	mov	r1, sl
 8004d74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d78:	4651      	mov	r1, sl
 8004d7a:	018a      	lsls	r2, r1, #6
 8004d7c:	4651      	mov	r1, sl
 8004d7e:	ebb2 0801 	subs.w	r8, r2, r1
 8004d82:	4659      	mov	r1, fp
 8004d84:	eb63 0901 	sbc.w	r9, r3, r1
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9c:	4690      	mov	r8, r2
 8004d9e:	4699      	mov	r9, r3
 8004da0:	4623      	mov	r3, r4
 8004da2:	eb18 0303 	adds.w	r3, r8, r3
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	462b      	mov	r3, r5
 8004daa:	eb49 0303 	adc.w	r3, r9, r3
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	024b      	lsls	r3, r1, #9
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	024a      	lsls	r2, r1, #9
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dd6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004dd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ddc:	f7fb ff4c 	bl	8000c78 <__aeabi_uldivmod>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4613      	mov	r3, r2
 8004de6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dea:	e065      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x420>
 8004dec:	40023800 	.word	0x40023800
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df8:	4b3d      	ldr	r3, [pc, #244]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	2200      	movs	r2, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	4611      	mov	r1, r2
 8004e04:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e08:	653b      	str	r3, [r7, #80]	; 0x50
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	657b      	str	r3, [r7, #84]	; 0x54
 8004e0e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004e12:	4642      	mov	r2, r8
 8004e14:	464b      	mov	r3, r9
 8004e16:	f04f 0000 	mov.w	r0, #0
 8004e1a:	f04f 0100 	mov.w	r1, #0
 8004e1e:	0159      	lsls	r1, r3, #5
 8004e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e24:	0150      	lsls	r0, r2, #5
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	1a51      	subs	r1, r2, r1
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	4649      	mov	r1, r9
 8004e32:	eb63 0301 	sbc.w	r3, r3, r1
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004e44:	4659      	mov	r1, fp
 8004e46:	018b      	lsls	r3, r1, #6
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e4e:	4651      	mov	r1, sl
 8004e50:	018a      	lsls	r2, r1, #6
 8004e52:	4651      	mov	r1, sl
 8004e54:	1a54      	subs	r4, r2, r1
 8004e56:	4659      	mov	r1, fp
 8004e58:	eb63 0501 	sbc.w	r5, r3, r1
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	00eb      	lsls	r3, r5, #3
 8004e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e6a:	00e2      	lsls	r2, r4, #3
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	461d      	mov	r5, r3
 8004e70:	4643      	mov	r3, r8
 8004e72:	18e3      	adds	r3, r4, r3
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	464b      	mov	r3, r9
 8004e78:	eb45 0303 	adc.w	r3, r5, r3
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	028b      	lsls	r3, r1, #10
 8004e8e:	4621      	mov	r1, r4
 8004e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e94:	4621      	mov	r1, r4
 8004e96:	028a      	lsls	r2, r1, #10
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ea6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004eaa:	f7fb fee5 	bl	8000c78 <__aeabi_uldivmod>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004eb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	0f1b      	lsrs	r3, r3, #28
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004eca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ed6:	e003      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ed8:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ede:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	37b8      	adds	r7, #184	; 0xb8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	00f42400 	.word	0x00f42400

08004ef8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e28d      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8083 	beq.w	800501e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f18:	4b94      	ldr	r3, [pc, #592]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d019      	beq.n	8004f58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f24:	4b91      	ldr	r3, [pc, #580]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d106      	bne.n	8004f3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f30:	4b8e      	ldr	r3, [pc, #568]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f3c:	d00c      	beq.n	8004f58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f3e:	4b8b      	ldr	r3, [pc, #556]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f46:	2b0c      	cmp	r3, #12
 8004f48:	d112      	bne.n	8004f70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f4a:	4b88      	ldr	r3, [pc, #544]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f56:	d10b      	bne.n	8004f70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f58:	4b84      	ldr	r3, [pc, #528]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d05b      	beq.n	800501c <HAL_RCC_OscConfig+0x124>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d157      	bne.n	800501c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e25a      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f78:	d106      	bne.n	8004f88 <HAL_RCC_OscConfig+0x90>
 8004f7a:	4b7c      	ldr	r3, [pc, #496]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a7b      	ldr	r2, [pc, #492]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e01d      	b.n	8004fc4 <HAL_RCC_OscConfig+0xcc>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f90:	d10c      	bne.n	8004fac <HAL_RCC_OscConfig+0xb4>
 8004f92:	4b76      	ldr	r3, [pc, #472]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a75      	ldr	r2, [pc, #468]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	4b73      	ldr	r3, [pc, #460]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a72      	ldr	r2, [pc, #456]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e00b      	b.n	8004fc4 <HAL_RCC_OscConfig+0xcc>
 8004fac:	4b6f      	ldr	r3, [pc, #444]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a6e      	ldr	r2, [pc, #440]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	4b6c      	ldr	r3, [pc, #432]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a6b      	ldr	r2, [pc, #428]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d013      	beq.n	8004ff4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fc ff0a 	bl	8001de4 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd4:	f7fc ff06 	bl	8001de4 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e21f      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe6:	4b61      	ldr	r3, [pc, #388]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0xdc>
 8004ff2:	e014      	b.n	800501e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fc fef6 	bl	8001de4 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fc fef2 	bl	8001de4 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	; 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e20b      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500e:	4b57      	ldr	r3, [pc, #348]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x104>
 800501a:	e000      	b.n	800501e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d06f      	beq.n	800510a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800502a:	4b50      	ldr	r3, [pc, #320]	; (800516c <HAL_RCC_OscConfig+0x274>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b00      	cmp	r3, #0
 8005034:	d017      	beq.n	8005066 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005036:	4b4d      	ldr	r3, [pc, #308]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800503e:	2b08      	cmp	r3, #8
 8005040:	d105      	bne.n	800504e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005042:	4b4a      	ldr	r3, [pc, #296]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504e:	4b47      	ldr	r3, [pc, #284]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d11c      	bne.n	8005094 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800505a:	4b44      	ldr	r3, [pc, #272]	; (800516c <HAL_RCC_OscConfig+0x274>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d116      	bne.n	8005094 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005066:	4b41      	ldr	r3, [pc, #260]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_RCC_OscConfig+0x186>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d001      	beq.n	800507e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e1d3      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507e:	4b3b      	ldr	r3, [pc, #236]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4937      	ldr	r1, [pc, #220]	; (800516c <HAL_RCC_OscConfig+0x274>)
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005092:	e03a      	b.n	800510a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800509c:	4b34      	ldr	r3, [pc, #208]	; (8005170 <HAL_RCC_OscConfig+0x278>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fc fe9f 	bl	8001de4 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050aa:	f7fc fe9b 	bl	8001de4 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e1b4      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050bc:	4b2b      	ldr	r3, [pc, #172]	; (800516c <HAL_RCC_OscConfig+0x274>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	4b28      	ldr	r3, [pc, #160]	; (800516c <HAL_RCC_OscConfig+0x274>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4925      	ldr	r1, [pc, #148]	; (800516c <HAL_RCC_OscConfig+0x274>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]
 80050dc:	e015      	b.n	800510a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050de:	4b24      	ldr	r3, [pc, #144]	; (8005170 <HAL_RCC_OscConfig+0x278>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fc fe7e 	bl	8001de4 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ec:	f7fc fe7a 	bl	8001de4 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e193      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	4b1b      	ldr	r3, [pc, #108]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d036      	beq.n	8005184 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d016      	beq.n	800514c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511e:	4b15      	ldr	r3, [pc, #84]	; (8005174 <HAL_RCC_OscConfig+0x27c>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fc fe5e 	bl	8001de4 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800512c:	f7fc fe5a 	bl	8001de4 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e173      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	4b0b      	ldr	r3, [pc, #44]	; (800516c <HAL_RCC_OscConfig+0x274>)
 8005140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x234>
 800514a:	e01b      	b.n	8005184 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCC_OscConfig+0x27c>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005152:	f7fc fe47 	bl	8001de4 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005158:	e00e      	b.n	8005178 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800515a:	f7fc fe43 	bl	8001de4 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d907      	bls.n	8005178 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e15c      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
 800516c:	40023800 	.word	0x40023800
 8005170:	42470000 	.word	0x42470000
 8005174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005178:	4b8a      	ldr	r3, [pc, #552]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 800517a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ea      	bne.n	800515a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8097 	beq.w	80052c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005196:	4b83      	ldr	r3, [pc, #524]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	4b7f      	ldr	r3, [pc, #508]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	4a7e      	ldr	r2, [pc, #504]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 80051ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b0:	6413      	str	r3, [r2, #64]	; 0x40
 80051b2:	4b7c      	ldr	r3, [pc, #496]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051be:	2301      	movs	r3, #1
 80051c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c2:	4b79      	ldr	r3, [pc, #484]	; (80053a8 <HAL_RCC_OscConfig+0x4b0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d118      	bne.n	8005200 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ce:	4b76      	ldr	r3, [pc, #472]	; (80053a8 <HAL_RCC_OscConfig+0x4b0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a75      	ldr	r2, [pc, #468]	; (80053a8 <HAL_RCC_OscConfig+0x4b0>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051da:	f7fc fe03 	bl	8001de4 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e2:	f7fc fdff 	bl	8001de4 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e118      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	4b6c      	ldr	r3, [pc, #432]	; (80053a8 <HAL_RCC_OscConfig+0x4b0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d106      	bne.n	8005216 <HAL_RCC_OscConfig+0x31e>
 8005208:	4b66      	ldr	r3, [pc, #408]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 800520a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520c:	4a65      	ldr	r2, [pc, #404]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	6713      	str	r3, [r2, #112]	; 0x70
 8005214:	e01c      	b.n	8005250 <HAL_RCC_OscConfig+0x358>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b05      	cmp	r3, #5
 800521c:	d10c      	bne.n	8005238 <HAL_RCC_OscConfig+0x340>
 800521e:	4b61      	ldr	r3, [pc, #388]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	4a60      	ldr	r2, [pc, #384]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 8005224:	f043 0304 	orr.w	r3, r3, #4
 8005228:	6713      	str	r3, [r2, #112]	; 0x70
 800522a:	4b5e      	ldr	r3, [pc, #376]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522e:	4a5d      	ldr	r2, [pc, #372]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	6713      	str	r3, [r2, #112]	; 0x70
 8005236:	e00b      	b.n	8005250 <HAL_RCC_OscConfig+0x358>
 8005238:	4b5a      	ldr	r3, [pc, #360]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a59      	ldr	r2, [pc, #356]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	; 0x70
 8005244:	4b57      	ldr	r3, [pc, #348]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	4a56      	ldr	r2, [pc, #344]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 800524a:	f023 0304 	bic.w	r3, r3, #4
 800524e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005258:	f7fc fdc4 	bl	8001de4 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525e:	e00a      	b.n	8005276 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005260:	f7fc fdc0 	bl	8001de4 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	; 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e0d7      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005276:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ee      	beq.n	8005260 <HAL_RCC_OscConfig+0x368>
 8005282:	e014      	b.n	80052ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fc fdae 	bl	8001de4 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800528c:	f7fc fdaa 	bl	8001de4 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	; 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e0c1      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a2:	4b40      	ldr	r3, [pc, #256]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ee      	bne.n	800528c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d105      	bne.n	80052c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b4:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	4a3a      	ldr	r2, [pc, #232]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 80052ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80ad 	beq.w	8005424 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ca:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d060      	beq.n	8005398 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d145      	bne.n	800536a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052de:	4b33      	ldr	r3, [pc, #204]	; (80053ac <HAL_RCC_OscConfig+0x4b4>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fc fd7e 	bl	8001de4 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ec:	f7fc fd7a 	bl	8001de4 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e093      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69da      	ldr	r2, [r3, #28]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	019b      	lsls	r3, r3, #6
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	3b01      	subs	r3, #1
 8005324:	041b      	lsls	r3, r3, #16
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	061b      	lsls	r3, r3, #24
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	071b      	lsls	r3, r3, #28
 8005336:	491b      	ldr	r1, [pc, #108]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 8005338:	4313      	orrs	r3, r2
 800533a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800533c:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <HAL_RCC_OscConfig+0x4b4>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005342:	f7fc fd4f 	bl	8001de4 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534a:	f7fc fd4b 	bl	8001de4 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e064      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x452>
 8005368:	e05c      	b.n	8005424 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_RCC_OscConfig+0x4b4>)
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fc fd38 	bl	8001de4 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005378:	f7fc fd34 	bl	8001de4 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e04d      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_RCC_OscConfig+0x4ac>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0x480>
 8005396:	e045      	b.n	8005424 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d107      	bne.n	80053b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e040      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40007000 	.word	0x40007000
 80053ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053b0:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <HAL_RCC_OscConfig+0x538>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d030      	beq.n	8005420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d129      	bne.n	8005420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d122      	bne.n	8005420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053e0:	4013      	ands	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d119      	bne.n	8005420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	3b01      	subs	r3, #1
 80053fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d10f      	bne.n	8005420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d107      	bne.n	8005420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800

08005434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e07b      	b.n	800553e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	2b00      	cmp	r3, #0
 800544c:	d108      	bne.n	8005460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005456:	d009      	beq.n	800546c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	61da      	str	r2, [r3, #28]
 800545e:	e005      	b.n	800546c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc fa22 	bl	80018d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	ea42 0103 	orr.w	r1, r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	0c1b      	lsrs	r3, r3, #16
 800550a:	f003 0104 	and.w	r1, r3, #4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f003 0210 	and.w	r2, r3, #16
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800552c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b088      	sub	sp, #32
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	4613      	mov	r3, r2
 8005554:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_SPI_Transmit+0x22>
 8005564:	2302      	movs	r3, #2
 8005566:	e126      	b.n	80057b6 <HAL_SPI_Transmit+0x270>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005570:	f7fc fc38 	bl	8001de4 <HAL_GetTick>
 8005574:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b01      	cmp	r3, #1
 8005584:	d002      	beq.n	800558c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005586:	2302      	movs	r3, #2
 8005588:	77fb      	strb	r3, [r7, #31]
    goto error;
 800558a:	e10b      	b.n	80057a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Transmit+0x52>
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800559c:	e102      	b.n	80057a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2203      	movs	r2, #3
 80055a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	88fa      	ldrh	r2, [r7, #6]
 80055b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	88fa      	ldrh	r2, [r7, #6]
 80055bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e4:	d10f      	bne.n	8005606 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005604:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d007      	beq.n	8005624 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005622:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800562c:	d14b      	bne.n	80056c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_SPI_Transmit+0xf6>
 8005636:	8afb      	ldrh	r3, [r7, #22]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d13e      	bne.n	80056ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	881a      	ldrh	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	1c9a      	adds	r2, r3, #2
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005656:	b29b      	uxth	r3, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005660:	e02b      	b.n	80056ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b02      	cmp	r3, #2
 800566e:	d112      	bne.n	8005696 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	881a      	ldrh	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	1c9a      	adds	r2, r3, #2
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	86da      	strh	r2, [r3, #54]	; 0x36
 8005694:	e011      	b.n	80056ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005696:	f7fc fba5 	bl	8001de4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d803      	bhi.n	80056ae <HAL_SPI_Transmit+0x168>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d102      	bne.n	80056b4 <HAL_SPI_Transmit+0x16e>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d102      	bne.n	80056ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056b8:	e074      	b.n	80057a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1ce      	bne.n	8005662 <HAL_SPI_Transmit+0x11c>
 80056c4:	e04c      	b.n	8005760 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Transmit+0x18e>
 80056ce:	8afb      	ldrh	r3, [r7, #22]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d140      	bne.n	8005756 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	7812      	ldrb	r2, [r2, #0]
 80056e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056fa:	e02c      	b.n	8005756 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b02      	cmp	r3, #2
 8005708:	d113      	bne.n	8005732 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	330c      	adds	r3, #12
 8005714:	7812      	ldrb	r2, [r2, #0]
 8005716:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005730:	e011      	b.n	8005756 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005732:	f7fc fb57 	bl	8001de4 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d803      	bhi.n	800574a <HAL_SPI_Transmit+0x204>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d102      	bne.n	8005750 <HAL_SPI_Transmit+0x20a>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005754:	e026      	b.n	80057a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1cd      	bne.n	80056fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f8b3 	bl	80058d0 <SPI_EndRxTxTransaction>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e000      	b.n	80057a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80057a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	4613      	mov	r3, r2
 80057ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057d0:	f7fc fb08 	bl	8001de4 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	4413      	add	r3, r2
 80057de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057e0:	f7fc fb00 	bl	8001de4 <HAL_GetTick>
 80057e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057e6:	4b39      	ldr	r3, [pc, #228]	; (80058cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	015b      	lsls	r3, r3, #5
 80057ec:	0d1b      	lsrs	r3, r3, #20
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	fb02 f303 	mul.w	r3, r2, r3
 80057f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057f6:	e054      	b.n	80058a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d050      	beq.n	80058a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005800:	f7fc faf0 	bl	8001de4 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	429a      	cmp	r2, r3
 800580e:	d902      	bls.n	8005816 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d13d      	bne.n	8005892 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800582e:	d111      	bne.n	8005854 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005838:	d004      	beq.n	8005844 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005842:	d107      	bne.n	8005854 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585c:	d10f      	bne.n	800587e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800587c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e017      	b.n	80058c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	3b01      	subs	r3, #1
 80058a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4013      	ands	r3, r2
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	bf0c      	ite	eq
 80058b2:	2301      	moveq	r3, #1
 80058b4:	2300      	movne	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d19b      	bne.n	80057f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000000 	.word	0x20000000

080058d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058dc:	4b1b      	ldr	r3, [pc, #108]	; (800594c <SPI_EndRxTxTransaction+0x7c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <SPI_EndRxTxTransaction+0x80>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	0d5b      	lsrs	r3, r3, #21
 80058e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058ec:	fb02 f303 	mul.w	r3, r2, r3
 80058f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058fa:	d112      	bne.n	8005922 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2200      	movs	r2, #0
 8005904:	2180      	movs	r1, #128	; 0x80
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f7ff ff5a 	bl	80057c0 <SPI_WaitFlagStateUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d016      	beq.n	8005940 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	f043 0220 	orr.w	r2, r3, #32
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e00f      	b.n	8005942 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	3b01      	subs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005938:	2b80      	cmp	r3, #128	; 0x80
 800593a:	d0f2      	beq.n	8005922 <SPI_EndRxTxTransaction+0x52>
 800593c:	e000      	b.n	8005940 <SPI_EndRxTxTransaction+0x70>
        break;
 800593e:	bf00      	nop
  }

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20000000 	.word	0x20000000
 8005950:	165e9f81 	.word	0x165e9f81

08005954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e041      	b.n	80059ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fb fff0 	bl	8001960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f000 fa24 	bl	8005de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d122      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d11b      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f06f 0202 	mvn.w	r2, #2
 8005a1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f9b5 	bl	8005da4 <HAL_TIM_IC_CaptureCallback>
 8005a3a:	e005      	b.n	8005a48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f9a7 	bl	8005d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9b8 	bl	8005db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d122      	bne.n	8005aa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d11b      	bne.n	8005aa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f06f 0204 	mvn.w	r2, #4
 8005a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f98b 	bl	8005da4 <HAL_TIM_IC_CaptureCallback>
 8005a8e:	e005      	b.n	8005a9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f97d 	bl	8005d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f98e 	bl	8005db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d122      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d11b      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f06f 0208 	mvn.w	r2, #8
 8005ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2204      	movs	r2, #4
 8005acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f961 	bl	8005da4 <HAL_TIM_IC_CaptureCallback>
 8005ae2:	e005      	b.n	8005af0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f953 	bl	8005d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f964 	bl	8005db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d122      	bne.n	8005b4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d11b      	bne.n	8005b4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f06f 0210 	mvn.w	r2, #16
 8005b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2208      	movs	r2, #8
 8005b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f937 	bl	8005da4 <HAL_TIM_IC_CaptureCallback>
 8005b36:	e005      	b.n	8005b44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f929 	bl	8005d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f93a 	bl	8005db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d10e      	bne.n	8005b76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d107      	bne.n	8005b76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f06f 0201 	mvn.w	r2, #1
 8005b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fb fa6d 	bl	8001050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	2b80      	cmp	r3, #128	; 0x80
 8005b82:	d10e      	bne.n	8005ba2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b80      	cmp	r3, #128	; 0x80
 8005b90:	d107      	bne.n	8005ba2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fadf 	bl	8006160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d10e      	bne.n	8005bce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d107      	bne.n	8005bce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f8ff 	bl	8005dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d10e      	bne.n	8005bfa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d107      	bne.n	8005bfa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f06f 0220 	mvn.w	r2, #32
 8005bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 faa9 	bl	800614c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_TIM_ConfigClockSource+0x1c>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e0b4      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x186>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c56:	d03e      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0xd4>
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5c:	f200 8087 	bhi.w	8005d6e <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c64:	f000 8086 	beq.w	8005d74 <HAL_TIM_ConfigClockSource+0x172>
 8005c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6c:	d87f      	bhi.n	8005d6e <HAL_TIM_ConfigClockSource+0x16c>
 8005c6e:	2b70      	cmp	r3, #112	; 0x70
 8005c70:	d01a      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0xa6>
 8005c72:	2b70      	cmp	r3, #112	; 0x70
 8005c74:	d87b      	bhi.n	8005d6e <HAL_TIM_ConfigClockSource+0x16c>
 8005c76:	2b60      	cmp	r3, #96	; 0x60
 8005c78:	d050      	beq.n	8005d1c <HAL_TIM_ConfigClockSource+0x11a>
 8005c7a:	2b60      	cmp	r3, #96	; 0x60
 8005c7c:	d877      	bhi.n	8005d6e <HAL_TIM_ConfigClockSource+0x16c>
 8005c7e:	2b50      	cmp	r3, #80	; 0x50
 8005c80:	d03c      	beq.n	8005cfc <HAL_TIM_ConfigClockSource+0xfa>
 8005c82:	2b50      	cmp	r3, #80	; 0x50
 8005c84:	d873      	bhi.n	8005d6e <HAL_TIM_ConfigClockSource+0x16c>
 8005c86:	2b40      	cmp	r3, #64	; 0x40
 8005c88:	d058      	beq.n	8005d3c <HAL_TIM_ConfigClockSource+0x13a>
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d86f      	bhi.n	8005d6e <HAL_TIM_ConfigClockSource+0x16c>
 8005c8e:	2b30      	cmp	r3, #48	; 0x30
 8005c90:	d064      	beq.n	8005d5c <HAL_TIM_ConfigClockSource+0x15a>
 8005c92:	2b30      	cmp	r3, #48	; 0x30
 8005c94:	d86b      	bhi.n	8005d6e <HAL_TIM_ConfigClockSource+0x16c>
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d060      	beq.n	8005d5c <HAL_TIM_ConfigClockSource+0x15a>
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d867      	bhi.n	8005d6e <HAL_TIM_ConfigClockSource+0x16c>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d05c      	beq.n	8005d5c <HAL_TIM_ConfigClockSource+0x15a>
 8005ca2:	2b10      	cmp	r3, #16
 8005ca4:	d05a      	beq.n	8005d5c <HAL_TIM_ConfigClockSource+0x15a>
 8005ca6:	e062      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6899      	ldr	r1, [r3, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f000 f9ac 	bl	8006014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	609a      	str	r2, [r3, #8]
      break;
 8005cd4:	e04f      	b.n	8005d76 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6899      	ldr	r1, [r3, #8]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f000 f995 	bl	8006014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cf8:	609a      	str	r2, [r3, #8]
      break;
 8005cfa:	e03c      	b.n	8005d76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	6859      	ldr	r1, [r3, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f000 f909 	bl	8005f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2150      	movs	r1, #80	; 0x50
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f962 	bl	8005fde <TIM_ITRx_SetConfig>
      break;
 8005d1a:	e02c      	b.n	8005d76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6859      	ldr	r1, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f000 f928 	bl	8005f7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2160      	movs	r1, #96	; 0x60
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 f952 	bl	8005fde <TIM_ITRx_SetConfig>
      break;
 8005d3a:	e01c      	b.n	8005d76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f000 f8e9 	bl	8005f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2140      	movs	r1, #64	; 0x40
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f942 	bl	8005fde <TIM_ITRx_SetConfig>
      break;
 8005d5a:	e00c      	b.n	8005d76 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f000 f939 	bl	8005fde <TIM_ITRx_SetConfig>
      break;
 8005d6c:	e003      	b.n	8005d76 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
      break;
 8005d72:	e000      	b.n	8005d76 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a40      	ldr	r2, [pc, #256]	; (8005ef4 <TIM_Base_SetConfig+0x114>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfe:	d00f      	beq.n	8005e20 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a3d      	ldr	r2, [pc, #244]	; (8005ef8 <TIM_Base_SetConfig+0x118>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00b      	beq.n	8005e20 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a3c      	ldr	r2, [pc, #240]	; (8005efc <TIM_Base_SetConfig+0x11c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d007      	beq.n	8005e20 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a3b      	ldr	r2, [pc, #236]	; (8005f00 <TIM_Base_SetConfig+0x120>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a3a      	ldr	r2, [pc, #232]	; (8005f04 <TIM_Base_SetConfig+0x124>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d108      	bne.n	8005e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2f      	ldr	r2, [pc, #188]	; (8005ef4 <TIM_Base_SetConfig+0x114>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d02b      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e40:	d027      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a2c      	ldr	r2, [pc, #176]	; (8005ef8 <TIM_Base_SetConfig+0x118>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d023      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2b      	ldr	r2, [pc, #172]	; (8005efc <TIM_Base_SetConfig+0x11c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01f      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2a      	ldr	r2, [pc, #168]	; (8005f00 <TIM_Base_SetConfig+0x120>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01b      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a29      	ldr	r2, [pc, #164]	; (8005f04 <TIM_Base_SetConfig+0x124>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d017      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a28      	ldr	r2, [pc, #160]	; (8005f08 <TIM_Base_SetConfig+0x128>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d013      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a27      	ldr	r2, [pc, #156]	; (8005f0c <TIM_Base_SetConfig+0x12c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00f      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a26      	ldr	r2, [pc, #152]	; (8005f10 <TIM_Base_SetConfig+0x130>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00b      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a25      	ldr	r2, [pc, #148]	; (8005f14 <TIM_Base_SetConfig+0x134>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d007      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a24      	ldr	r2, [pc, #144]	; (8005f18 <TIM_Base_SetConfig+0x138>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d003      	beq.n	8005e92 <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a23      	ldr	r2, [pc, #140]	; (8005f1c <TIM_Base_SetConfig+0x13c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d108      	bne.n	8005ea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a0a      	ldr	r2, [pc, #40]	; (8005ef4 <TIM_Base_SetConfig+0x114>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_Base_SetConfig+0xf8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <TIM_Base_SetConfig+0x124>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d103      	bne.n	8005ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	615a      	str	r2, [r3, #20]
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40010000 	.word	0x40010000
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	40000c00 	.word	0x40000c00
 8005f04:	40010400 	.word	0x40010400
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800
 8005f14:	40001800 	.word	0x40001800
 8005f18:	40001c00 	.word	0x40001c00
 8005f1c:	40002000 	.word	0x40002000

08005f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f023 0201 	bic.w	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f023 030a 	bic.w	r3, r3, #10
 8005f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	621a      	str	r2, [r3, #32]
}
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b087      	sub	sp, #28
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f023 0210 	bic.w	r2, r3, #16
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	031b      	lsls	r3, r3, #12
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f043 0307 	orr.w	r3, r3, #7
 8006000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	609a      	str	r2, [r3, #8]
}
 8006008:	bf00      	nop
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800602e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	021a      	lsls	r2, r3, #8
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	431a      	orrs	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4313      	orrs	r3, r2
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	609a      	str	r2, [r3, #8]
}
 8006048:	bf00      	nop
 800604a:	371c      	adds	r7, #28
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006068:	2302      	movs	r3, #2
 800606a:	e05a      	b.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a21      	ldr	r2, [pc, #132]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d022      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b8:	d01d      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1d      	ldr	r2, [pc, #116]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d018      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1b      	ldr	r2, [pc, #108]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1a      	ldr	r2, [pc, #104]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00e      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a18      	ldr	r2, [pc, #96]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d009      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a17      	ldr	r2, [pc, #92]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d004      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a15      	ldr	r2, [pc, #84]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d10c      	bne.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	4313      	orrs	r3, r2
 8006106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40010000 	.word	0x40010000
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800
 800613c:	40000c00 	.word	0x40000c00
 8006140:	40010400 	.word	0x40010400
 8006144:	40014000 	.word	0x40014000
 8006148:	40001800 	.word	0x40001800

0800614c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e03f      	b.n	8006206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fb fc06 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2224      	movs	r2, #36	; 0x24
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f829 	bl	8006210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695a      	ldr	r2, [r3, #20]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006214:	b0c0      	sub	sp, #256	; 0x100
 8006216:	af00      	add	r7, sp, #0
 8006218:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622c:	68d9      	ldr	r1, [r3, #12]
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	ea40 0301 	orr.w	r3, r0, r1
 8006238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	431a      	orrs	r2, r3
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	431a      	orrs	r2, r3
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006268:	f021 010c 	bic.w	r1, r1, #12
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006276:	430b      	orrs	r3, r1
 8006278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800627a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628a:	6999      	ldr	r1, [r3, #24]
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	ea40 0301 	orr.w	r3, r0, r1
 8006296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4b8f      	ldr	r3, [pc, #572]	; (80064dc <UART_SetConfig+0x2cc>)
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d005      	beq.n	80062b0 <UART_SetConfig+0xa0>
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b8d      	ldr	r3, [pc, #564]	; (80064e0 <UART_SetConfig+0x2d0>)
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d104      	bne.n	80062ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7fd fe6c 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 80062b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062b8:	e003      	b.n	80062c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062ba:	f7fd fe53 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 80062be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062cc:	f040 810c 	bne.w	80064e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062e2:	4622      	mov	r2, r4
 80062e4:	462b      	mov	r3, r5
 80062e6:	1891      	adds	r1, r2, r2
 80062e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80062ea:	415b      	adcs	r3, r3
 80062ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062f2:	4621      	mov	r1, r4
 80062f4:	eb12 0801 	adds.w	r8, r2, r1
 80062f8:	4629      	mov	r1, r5
 80062fa:	eb43 0901 	adc.w	r9, r3, r1
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800630a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800630e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006312:	4690      	mov	r8, r2
 8006314:	4699      	mov	r9, r3
 8006316:	4623      	mov	r3, r4
 8006318:	eb18 0303 	adds.w	r3, r8, r3
 800631c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006320:	462b      	mov	r3, r5
 8006322:	eb49 0303 	adc.w	r3, r9, r3
 8006326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800632a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006336:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800633a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800633e:	460b      	mov	r3, r1
 8006340:	18db      	adds	r3, r3, r3
 8006342:	653b      	str	r3, [r7, #80]	; 0x50
 8006344:	4613      	mov	r3, r2
 8006346:	eb42 0303 	adc.w	r3, r2, r3
 800634a:	657b      	str	r3, [r7, #84]	; 0x54
 800634c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006354:	f7fa fc90 	bl	8000c78 <__aeabi_uldivmod>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4b61      	ldr	r3, [pc, #388]	; (80064e4 <UART_SetConfig+0x2d4>)
 800635e:	fba3 2302 	umull	r2, r3, r3, r2
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	011c      	lsls	r4, r3, #4
 8006366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800636a:	2200      	movs	r2, #0
 800636c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006370:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	1891      	adds	r1, r2, r2
 800637e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006380:	415b      	adcs	r3, r3
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006388:	4641      	mov	r1, r8
 800638a:	eb12 0a01 	adds.w	sl, r2, r1
 800638e:	4649      	mov	r1, r9
 8006390:	eb43 0b01 	adc.w	fp, r3, r1
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a8:	4692      	mov	sl, r2
 80063aa:	469b      	mov	fp, r3
 80063ac:	4643      	mov	r3, r8
 80063ae:	eb1a 0303 	adds.w	r3, sl, r3
 80063b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063b6:	464b      	mov	r3, r9
 80063b8:	eb4b 0303 	adc.w	r3, fp, r3
 80063bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063d4:	460b      	mov	r3, r1
 80063d6:	18db      	adds	r3, r3, r3
 80063d8:	643b      	str	r3, [r7, #64]	; 0x40
 80063da:	4613      	mov	r3, r2
 80063dc:	eb42 0303 	adc.w	r3, r2, r3
 80063e0:	647b      	str	r3, [r7, #68]	; 0x44
 80063e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063ea:	f7fa fc45 	bl	8000c78 <__aeabi_uldivmod>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	4b3b      	ldr	r3, [pc, #236]	; (80064e4 <UART_SetConfig+0x2d4>)
 80063f6:	fba3 2301 	umull	r2, r3, r3, r1
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	2264      	movs	r2, #100	; 0x64
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	1acb      	subs	r3, r1, r3
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800640a:	4b36      	ldr	r3, [pc, #216]	; (80064e4 <UART_SetConfig+0x2d4>)
 800640c:	fba3 2302 	umull	r2, r3, r3, r2
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006418:	441c      	add	r4, r3
 800641a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641e:	2200      	movs	r2, #0
 8006420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006424:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	1891      	adds	r1, r2, r2
 8006432:	63b9      	str	r1, [r7, #56]	; 0x38
 8006434:	415b      	adcs	r3, r3
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800643c:	4641      	mov	r1, r8
 800643e:	1851      	adds	r1, r2, r1
 8006440:	6339      	str	r1, [r7, #48]	; 0x30
 8006442:	4649      	mov	r1, r9
 8006444:	414b      	adcs	r3, r1
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006454:	4659      	mov	r1, fp
 8006456:	00cb      	lsls	r3, r1, #3
 8006458:	4651      	mov	r1, sl
 800645a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645e:	4651      	mov	r1, sl
 8006460:	00ca      	lsls	r2, r1, #3
 8006462:	4610      	mov	r0, r2
 8006464:	4619      	mov	r1, r3
 8006466:	4603      	mov	r3, r0
 8006468:	4642      	mov	r2, r8
 800646a:	189b      	adds	r3, r3, r2
 800646c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006470:	464b      	mov	r3, r9
 8006472:	460a      	mov	r2, r1
 8006474:	eb42 0303 	adc.w	r3, r2, r3
 8006478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006488:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800648c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006490:	460b      	mov	r3, r1
 8006492:	18db      	adds	r3, r3, r3
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
 8006496:	4613      	mov	r3, r2
 8006498:	eb42 0303 	adc.w	r3, r2, r3
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800649e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064a6:	f7fa fbe7 	bl	8000c78 <__aeabi_uldivmod>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <UART_SetConfig+0x2d4>)
 80064b0:	fba3 1302 	umull	r1, r3, r3, r2
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	2164      	movs	r1, #100	; 0x64
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	3332      	adds	r3, #50	; 0x32
 80064c2:	4a08      	ldr	r2, [pc, #32]	; (80064e4 <UART_SetConfig+0x2d4>)
 80064c4:	fba2 2303 	umull	r2, r3, r2, r3
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	f003 0207 	and.w	r2, r3, #7
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4422      	add	r2, r4
 80064d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064d8:	e105      	b.n	80066e6 <UART_SetConfig+0x4d6>
 80064da:	bf00      	nop
 80064dc:	40011000 	.word	0x40011000
 80064e0:	40011400 	.word	0x40011400
 80064e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064fa:	4642      	mov	r2, r8
 80064fc:	464b      	mov	r3, r9
 80064fe:	1891      	adds	r1, r2, r2
 8006500:	6239      	str	r1, [r7, #32]
 8006502:	415b      	adcs	r3, r3
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
 8006506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800650a:	4641      	mov	r1, r8
 800650c:	1854      	adds	r4, r2, r1
 800650e:	4649      	mov	r1, r9
 8006510:	eb43 0501 	adc.w	r5, r3, r1
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	00eb      	lsls	r3, r5, #3
 800651e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006522:	00e2      	lsls	r2, r4, #3
 8006524:	4614      	mov	r4, r2
 8006526:	461d      	mov	r5, r3
 8006528:	4643      	mov	r3, r8
 800652a:	18e3      	adds	r3, r4, r3
 800652c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006530:	464b      	mov	r3, r9
 8006532:	eb45 0303 	adc.w	r3, r5, r3
 8006536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006546:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006556:	4629      	mov	r1, r5
 8006558:	008b      	lsls	r3, r1, #2
 800655a:	4621      	mov	r1, r4
 800655c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006560:	4621      	mov	r1, r4
 8006562:	008a      	lsls	r2, r1, #2
 8006564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006568:	f7fa fb86 	bl	8000c78 <__aeabi_uldivmod>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4b60      	ldr	r3, [pc, #384]	; (80066f4 <UART_SetConfig+0x4e4>)
 8006572:	fba3 2302 	umull	r2, r3, r3, r2
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	011c      	lsls	r4, r3, #4
 800657a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800657e:	2200      	movs	r2, #0
 8006580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006584:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	1891      	adds	r1, r2, r2
 8006592:	61b9      	str	r1, [r7, #24]
 8006594:	415b      	adcs	r3, r3
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800659c:	4641      	mov	r1, r8
 800659e:	1851      	adds	r1, r2, r1
 80065a0:	6139      	str	r1, [r7, #16]
 80065a2:	4649      	mov	r1, r9
 80065a4:	414b      	adcs	r3, r1
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065b4:	4659      	mov	r1, fp
 80065b6:	00cb      	lsls	r3, r1, #3
 80065b8:	4651      	mov	r1, sl
 80065ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065be:	4651      	mov	r1, sl
 80065c0:	00ca      	lsls	r2, r1, #3
 80065c2:	4610      	mov	r0, r2
 80065c4:	4619      	mov	r1, r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	4642      	mov	r2, r8
 80065ca:	189b      	adds	r3, r3, r2
 80065cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065d0:	464b      	mov	r3, r9
 80065d2:	460a      	mov	r2, r1
 80065d4:	eb42 0303 	adc.w	r3, r2, r3
 80065d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80065e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065f4:	4649      	mov	r1, r9
 80065f6:	008b      	lsls	r3, r1, #2
 80065f8:	4641      	mov	r1, r8
 80065fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065fe:	4641      	mov	r1, r8
 8006600:	008a      	lsls	r2, r1, #2
 8006602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006606:	f7fa fb37 	bl	8000c78 <__aeabi_uldivmod>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <UART_SetConfig+0x4e4>)
 8006610:	fba3 1302 	umull	r1, r3, r3, r2
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	2164      	movs	r1, #100	; 0x64
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	3332      	adds	r3, #50	; 0x32
 8006622:	4a34      	ldr	r2, [pc, #208]	; (80066f4 <UART_SetConfig+0x4e4>)
 8006624:	fba2 2303 	umull	r2, r3, r2, r3
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800662e:	441c      	add	r4, r3
 8006630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006634:	2200      	movs	r2, #0
 8006636:	673b      	str	r3, [r7, #112]	; 0x70
 8006638:	677a      	str	r2, [r7, #116]	; 0x74
 800663a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800663e:	4642      	mov	r2, r8
 8006640:	464b      	mov	r3, r9
 8006642:	1891      	adds	r1, r2, r2
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	415b      	adcs	r3, r3
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800664e:	4641      	mov	r1, r8
 8006650:	1851      	adds	r1, r2, r1
 8006652:	6039      	str	r1, [r7, #0]
 8006654:	4649      	mov	r1, r9
 8006656:	414b      	adcs	r3, r1
 8006658:	607b      	str	r3, [r7, #4]
 800665a:	f04f 0200 	mov.w	r2, #0
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006666:	4659      	mov	r1, fp
 8006668:	00cb      	lsls	r3, r1, #3
 800666a:	4651      	mov	r1, sl
 800666c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006670:	4651      	mov	r1, sl
 8006672:	00ca      	lsls	r2, r1, #3
 8006674:	4610      	mov	r0, r2
 8006676:	4619      	mov	r1, r3
 8006678:	4603      	mov	r3, r0
 800667a:	4642      	mov	r2, r8
 800667c:	189b      	adds	r3, r3, r2
 800667e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006680:	464b      	mov	r3, r9
 8006682:	460a      	mov	r2, r1
 8006684:	eb42 0303 	adc.w	r3, r2, r3
 8006688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800668a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	663b      	str	r3, [r7, #96]	; 0x60
 8006694:	667a      	str	r2, [r7, #100]	; 0x64
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066a2:	4649      	mov	r1, r9
 80066a4:	008b      	lsls	r3, r1, #2
 80066a6:	4641      	mov	r1, r8
 80066a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ac:	4641      	mov	r1, r8
 80066ae:	008a      	lsls	r2, r1, #2
 80066b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066b4:	f7fa fae0 	bl	8000c78 <__aeabi_uldivmod>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <UART_SetConfig+0x4e4>)
 80066be:	fba3 1302 	umull	r1, r3, r3, r2
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	2164      	movs	r1, #100	; 0x64
 80066c6:	fb01 f303 	mul.w	r3, r1, r3
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	3332      	adds	r3, #50	; 0x32
 80066d0:	4a08      	ldr	r2, [pc, #32]	; (80066f4 <UART_SetConfig+0x4e4>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	f003 020f 	and.w	r2, r3, #15
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4422      	add	r2, r4
 80066e4:	609a      	str	r2, [r3, #8]
}
 80066e6:	bf00      	nop
 80066e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066ec:	46bd      	mov	sp, r7
 80066ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066f2:	bf00      	nop
 80066f4:	51eb851f 	.word	0x51eb851f

080066f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066f8:	b084      	sub	sp, #16
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	f107 001c 	add.w	r0, r7, #28
 8006706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	2b01      	cmp	r3, #1
 800670e:	d122      	bne.n	8006756 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673a:	2b01      	cmp	r3, #1
 800673c:	d105      	bne.n	800674a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f001 fbe8 	bl	8007f20 <USB_CoreReset>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
 8006754:	e01a      	b.n	800678c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fbdc 	bl	8007f20 <USB_CoreReset>
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800676c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
 800677e:	e005      	b.n	800678c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	2b01      	cmp	r3, #1
 8006790:	d10b      	bne.n	80067aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f043 0206 	orr.w	r2, r3, #6
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f043 0220 	orr.w	r2, r3, #32
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b6:	b004      	add	sp, #16
 80067b8:	4770      	bx	lr
	...

080067bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	4613      	mov	r3, r2
 80067c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d165      	bne.n	800689c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4a41      	ldr	r2, [pc, #260]	; (80068d8 <USB_SetTurnaroundTime+0x11c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d906      	bls.n	80067e6 <USB_SetTurnaroundTime+0x2a>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4a40      	ldr	r2, [pc, #256]	; (80068dc <USB_SetTurnaroundTime+0x120>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d202      	bcs.n	80067e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80067e0:	230f      	movs	r3, #15
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	e062      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	4a3c      	ldr	r2, [pc, #240]	; (80068dc <USB_SetTurnaroundTime+0x120>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d306      	bcc.n	80067fc <USB_SetTurnaroundTime+0x40>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4a3b      	ldr	r2, [pc, #236]	; (80068e0 <USB_SetTurnaroundTime+0x124>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d202      	bcs.n	80067fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80067f6:	230e      	movs	r3, #14
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	e057      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4a38      	ldr	r2, [pc, #224]	; (80068e0 <USB_SetTurnaroundTime+0x124>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d306      	bcc.n	8006812 <USB_SetTurnaroundTime+0x56>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4a37      	ldr	r2, [pc, #220]	; (80068e4 <USB_SetTurnaroundTime+0x128>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d202      	bcs.n	8006812 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800680c:	230d      	movs	r3, #13
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	e04c      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4a33      	ldr	r2, [pc, #204]	; (80068e4 <USB_SetTurnaroundTime+0x128>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d306      	bcc.n	8006828 <USB_SetTurnaroundTime+0x6c>
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	4a32      	ldr	r2, [pc, #200]	; (80068e8 <USB_SetTurnaroundTime+0x12c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d802      	bhi.n	8006828 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006822:	230c      	movs	r3, #12
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	e041      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4a2f      	ldr	r2, [pc, #188]	; (80068e8 <USB_SetTurnaroundTime+0x12c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d906      	bls.n	800683e <USB_SetTurnaroundTime+0x82>
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4a2e      	ldr	r2, [pc, #184]	; (80068ec <USB_SetTurnaroundTime+0x130>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d802      	bhi.n	800683e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006838:	230b      	movs	r3, #11
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e036      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4a2a      	ldr	r2, [pc, #168]	; (80068ec <USB_SetTurnaroundTime+0x130>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d906      	bls.n	8006854 <USB_SetTurnaroundTime+0x98>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	4a29      	ldr	r2, [pc, #164]	; (80068f0 <USB_SetTurnaroundTime+0x134>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d802      	bhi.n	8006854 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800684e:	230a      	movs	r3, #10
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	e02b      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4a26      	ldr	r2, [pc, #152]	; (80068f0 <USB_SetTurnaroundTime+0x134>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d906      	bls.n	800686a <USB_SetTurnaroundTime+0xae>
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4a25      	ldr	r2, [pc, #148]	; (80068f4 <USB_SetTurnaroundTime+0x138>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d202      	bcs.n	800686a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006864:	2309      	movs	r3, #9
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e020      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	4a21      	ldr	r2, [pc, #132]	; (80068f4 <USB_SetTurnaroundTime+0x138>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d306      	bcc.n	8006880 <USB_SetTurnaroundTime+0xc4>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <USB_SetTurnaroundTime+0x13c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d802      	bhi.n	8006880 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800687a:	2308      	movs	r3, #8
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	e015      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4a1d      	ldr	r2, [pc, #116]	; (80068f8 <USB_SetTurnaroundTime+0x13c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d906      	bls.n	8006896 <USB_SetTurnaroundTime+0xda>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4a1c      	ldr	r2, [pc, #112]	; (80068fc <USB_SetTurnaroundTime+0x140>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d202      	bcs.n	8006896 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006890:	2307      	movs	r3, #7
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e00a      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006896:	2306      	movs	r3, #6
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	e007      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d102      	bne.n	80068a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80068a2:	2309      	movs	r3, #9
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	e001      	b.n	80068ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80068a8:	2309      	movs	r3, #9
 80068aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	029b      	lsls	r3, r3, #10
 80068c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80068c4:	431a      	orrs	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	00d8acbf 	.word	0x00d8acbf
 80068dc:	00e4e1c0 	.word	0x00e4e1c0
 80068e0:	00f42400 	.word	0x00f42400
 80068e4:	01067380 	.word	0x01067380
 80068e8:	011a499f 	.word	0x011a499f
 80068ec:	01312cff 	.word	0x01312cff
 80068f0:	014ca43f 	.word	0x014ca43f
 80068f4:	016e3600 	.word	0x016e3600
 80068f8:	01a6ab1f 	.word	0x01a6ab1f
 80068fc:	01e84800 	.word	0x01e84800

08006900 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f043 0201 	orr.w	r2, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f023 0201 	bic.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d115      	bne.n	8006992 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006972:	2001      	movs	r0, #1
 8006974:	f7fb fa42 	bl	8001dfc <HAL_Delay>
      ms++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fa3f 	bl	8007e02 <USB_GetMode>
 8006984:	4603      	mov	r3, r0
 8006986:	2b01      	cmp	r3, #1
 8006988:	d01e      	beq.n	80069c8 <USB_SetCurrentMode+0x84>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b31      	cmp	r3, #49	; 0x31
 800698e:	d9f0      	bls.n	8006972 <USB_SetCurrentMode+0x2e>
 8006990:	e01a      	b.n	80069c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006992:	78fb      	ldrb	r3, [r7, #3]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d115      	bne.n	80069c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069a4:	2001      	movs	r0, #1
 80069a6:	f7fb fa29 	bl	8001dfc <HAL_Delay>
      ms++;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3301      	adds	r3, #1
 80069ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fa26 	bl	8007e02 <USB_GetMode>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <USB_SetCurrentMode+0x84>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b31      	cmp	r3, #49	; 0x31
 80069c0:	d9f0      	bls.n	80069a4 <USB_SetCurrentMode+0x60>
 80069c2:	e001      	b.n	80069c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e005      	b.n	80069d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b32      	cmp	r3, #50	; 0x32
 80069cc:	d101      	bne.n	80069d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069dc:	b084      	sub	sp, #16
 80069de:	b580      	push	{r7, lr}
 80069e0:	b086      	sub	sp, #24
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069f6:	2300      	movs	r3, #0
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	e009      	b.n	8006a10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	3340      	adds	r3, #64	; 0x40
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b0e      	cmp	r3, #14
 8006a14:	d9f2      	bls.n	80069fc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d11c      	bne.n	8006a56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a2a:	f043 0302 	orr.w	r3, r3, #2
 8006a2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	e005      	b.n	8006a62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a74:	4619      	mov	r1, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	680b      	ldr	r3, [r1, #0]
 8006a80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d10c      	bne.n	8006aa2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a8e:	2100      	movs	r1, #0
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f965 	bl	8006d60 <USB_SetDevSpeed>
 8006a96:	e008      	b.n	8006aaa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a98:	2101      	movs	r1, #1
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f960 	bl	8006d60 <USB_SetDevSpeed>
 8006aa0:	e003      	b.n	8006aaa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006aa2:	2103      	movs	r1, #3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f95b 	bl	8006d60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006aaa:	2110      	movs	r1, #16
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f8f3 	bl	8006c98 <USB_FlushTxFifo>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f91f 	bl	8006d00 <USB_FlushRxFifo>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ade:	461a      	mov	r2, r3
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aea:	461a      	mov	r2, r3
 8006aec:	2300      	movs	r3, #0
 8006aee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006af0:	2300      	movs	r3, #0
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	e043      	b.n	8006b7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b0c:	d118      	bne.n	8006b40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b20:	461a      	mov	r2, r3
 8006b22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	e013      	b.n	8006b52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b36:	461a      	mov	r2, r3
 8006b38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	e008      	b.n	8006b52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5e:	461a      	mov	r2, r3
 8006b60:	2300      	movs	r3, #0
 8006b62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	461a      	mov	r2, r3
 8006b72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d3b7      	bcc.n	8006af6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b86:	2300      	movs	r3, #0
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	e043      	b.n	8006c14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ba2:	d118      	bne.n	8006bd6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	e013      	b.n	8006be8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	e008      	b.n	8006be8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be2:	461a      	mov	r2, r3
 8006be4:	2300      	movs	r3, #0
 8006be6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c06:	461a      	mov	r2, r3
 8006c08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	3301      	adds	r3, #1
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d3b7      	bcc.n	8006b8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d105      	bne.n	8006c50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	f043 0210 	orr.w	r2, r3, #16
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699a      	ldr	r2, [r3, #24]
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <USB_DevInit+0x2b8>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f043 0208 	orr.w	r2, r3, #8
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d107      	bne.n	8006c84 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c7c:	f043 0304 	orr.w	r3, r3, #4
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c90:	b004      	add	sp, #16
 8006c92:	4770      	bx	lr
 8006c94:	803c3800 	.word	0x803c3800

08006c98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <USB_FlushTxFifo+0x64>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d901      	bls.n	8006cb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e01b      	b.n	8006cf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	daf2      	bge.n	8006ca6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	019b      	lsls	r3, r3, #6
 8006cc8:	f043 0220 	orr.w	r2, r3, #32
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4a08      	ldr	r2, [pc, #32]	; (8006cfc <USB_FlushTxFifo+0x64>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d901      	bls.n	8006ce2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e006      	b.n	8006cf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d0f0      	beq.n	8006cd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	00030d40 	.word	0x00030d40

08006d00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4a11      	ldr	r2, [pc, #68]	; (8006d5c <USB_FlushRxFifo+0x5c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e018      	b.n	8006d50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	daf2      	bge.n	8006d0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2210      	movs	r2, #16
 8006d2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3301      	adds	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4a08      	ldr	r2, [pc, #32]	; (8006d5c <USB_FlushRxFifo+0x5c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d901      	bls.n	8006d42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e006      	b.n	8006d50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0310 	and.w	r3, r3, #16
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d0f0      	beq.n	8006d30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	00030d40 	.word	0x00030d40

08006d60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	68f9      	ldr	r1, [r7, #12]
 8006d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d80:	4313      	orrs	r3, r2
 8006d82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b087      	sub	sp, #28
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 0306 	and.w	r3, r3, #6
 8006daa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]
 8006db6:	e00a      	b.n	8006dce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d002      	beq.n	8006dc4 <USB_GetDevSpeed+0x32>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b06      	cmp	r3, #6
 8006dc2:	d102      	bne.n	8006dca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	75fb      	strb	r3, [r7, #23]
 8006dc8:	e001      	b.n	8006dce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006dca:	230f      	movs	r3, #15
 8006dcc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	371c      	adds	r7, #28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	785b      	ldrb	r3, [r3, #1]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d13a      	bne.n	8006e6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfe:	69da      	ldr	r2, [r3, #28]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	2101      	movs	r1, #1
 8006e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	68f9      	ldr	r1, [r7, #12]
 8006e12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d155      	bne.n	8006edc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	791b      	ldrb	r3, [r3, #4]
 8006e4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	059b      	lsls	r3, r3, #22
 8006e52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e54:	4313      	orrs	r3, r2
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	e036      	b.n	8006edc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e74:	69da      	ldr	r2, [r3, #28]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	2101      	movs	r1, #1
 8006e80:	fa01 f303 	lsl.w	r3, r1, r3
 8006e84:	041b      	lsls	r3, r3, #16
 8006e86:	68f9      	ldr	r1, [r7, #12]
 8006e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d11a      	bne.n	8006edc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	791b      	ldrb	r3, [r3, #4]
 8006ec0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ec2:	430b      	orrs	r3, r1
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d161      	bne.n	8006fcc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1e:	d11f      	bne.n	8006f60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	2101      	movs	r1, #1
 8006f72:	fa01 f303 	lsl.w	r3, r1, r3
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	68f9      	ldr	r1, [r7, #12]
 8006f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f80:	4013      	ands	r3, r2
 8006f82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	2101      	movs	r1, #1
 8006f96:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	68f9      	ldr	r1, [r7, #12]
 8006fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	0159      	lsls	r1, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	440b      	add	r3, r1
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4b35      	ldr	r3, [pc, #212]	; (800709c <USB_DeactivateEndpoint+0x1b0>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]
 8006fca:	e060      	b.n	800708e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fe2:	d11f      	bne.n	8007024 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ffe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007002:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	440a      	add	r2, r1
 800701a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007022:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	2101      	movs	r1, #1
 8007036:	fa01 f303 	lsl.w	r3, r1, r3
 800703a:	041b      	lsls	r3, r3, #16
 800703c:	43db      	mvns	r3, r3
 800703e:	68f9      	ldr	r1, [r7, #12]
 8007040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007044:	4013      	ands	r3, r2
 8007046:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	69da      	ldr	r2, [r3, #28]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	2101      	movs	r1, #1
 800705a:	fa01 f303 	lsl.w	r3, r1, r3
 800705e:	041b      	lsls	r3, r3, #16
 8007060:	43db      	mvns	r3, r3
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007068:	4013      	ands	r3, r2
 800706a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	0159      	lsls	r1, r3, #5
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	440b      	add	r3, r1
 8007082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007086:	4619      	mov	r1, r3
 8007088:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <USB_DeactivateEndpoint+0x1b4>)
 800708a:	4013      	ands	r3, r2
 800708c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	ec337800 	.word	0xec337800
 80070a0:	eff37800 	.word	0xeff37800

080070a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	; 0x28
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	f040 815c 	bne.w	800737e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d132      	bne.n	8007134 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	69fa      	ldr	r2, [r7, #28]
 8007106:	440a      	add	r2, r1
 8007108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007110:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	0151      	lsls	r1, r2, #5
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	440a      	add	r2, r1
 8007128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800712c:	0cdb      	lsrs	r3, r3, #19
 800712e:	04db      	lsls	r3, r3, #19
 8007130:	6113      	str	r3, [r2, #16]
 8007132:	e074      	b.n	800721e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	440a      	add	r2, r1
 800714a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800714e:	0cdb      	lsrs	r3, r3, #19
 8007150:	04db      	lsls	r3, r3, #19
 8007152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	440a      	add	r2, r1
 800716a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800716e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007172:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007184:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	6999      	ldr	r1, [r3, #24]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	440b      	add	r3, r1
 8007190:	1e59      	subs	r1, r3, #1
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	fbb1 f3f3 	udiv	r3, r1, r3
 800719a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800719c:	4b9d      	ldr	r3, [pc, #628]	; (8007414 <USB_EPStartXfer+0x370>)
 800719e:	400b      	ands	r3, r1
 80071a0:	69b9      	ldr	r1, [r7, #24]
 80071a2:	0148      	lsls	r0, r1, #5
 80071a4:	69f9      	ldr	r1, [r7, #28]
 80071a6:	4401      	add	r1, r0
 80071a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071ac:	4313      	orrs	r3, r2
 80071ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071bc:	691a      	ldr	r2, [r3, #16]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c6:	69b9      	ldr	r1, [r7, #24]
 80071c8:	0148      	lsls	r0, r1, #5
 80071ca:	69f9      	ldr	r1, [r7, #28]
 80071cc:	4401      	add	r1, r0
 80071ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071d2:	4313      	orrs	r3, r2
 80071d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	791b      	ldrb	r3, [r3, #4]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d11f      	bne.n	800721e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	0151      	lsls	r1, r2, #5
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	440a      	add	r2, r1
 80071f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80071fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	4413      	add	r3, r2
 8007206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	0151      	lsls	r1, r2, #5
 8007210:	69fa      	ldr	r2, [r7, #28]
 8007212:	440a      	add	r2, r1
 8007214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007218:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800721c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d14b      	bne.n	80072bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d009      	beq.n	8007240 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007238:	461a      	mov	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	791b      	ldrb	r3, [r3, #4]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d128      	bne.n	800729a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007254:	2b00      	cmp	r3, #0
 8007256:	d110      	bne.n	800727a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007272:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	e00f      	b.n	800729a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007298:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	e133      	b.n	8007524 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	0151      	lsls	r1, r2, #5
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	440a      	add	r2, r1
 80072d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	791b      	ldrb	r3, [r3, #4]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d015      	beq.n	8007310 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 811b 	beq.w	8007524 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	2101      	movs	r1, #1
 8007300:	fa01 f303 	lsl.w	r3, r1, r3
 8007304:	69f9      	ldr	r1, [r7, #28]
 8007306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800730a:	4313      	orrs	r3, r2
 800730c:	634b      	str	r3, [r1, #52]	; 0x34
 800730e:	e109      	b.n	8007524 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d110      	bne.n	8007342 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	440a      	add	r2, r1
 8007336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800733a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	e00f      	b.n	8007362 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	0151      	lsls	r1, r2, #5
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	440a      	add	r2, r1
 8007358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800735c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007360:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6919      	ldr	r1, [r3, #16]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	b298      	uxth	r0, r3
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	4603      	mov	r3, r0
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 fade 	bl	8007938 <USB_WritePacket>
 800737c:	e0d2      	b.n	8007524 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007398:	0cdb      	lsrs	r3, r3, #19
 800739a:	04db      	lsls	r3, r3, #19
 800739c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d126      	bne.n	8007418 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d6:	691a      	ldr	r2, [r3, #16]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073e0:	69b9      	ldr	r1, [r7, #24]
 80073e2:	0148      	lsls	r0, r1, #5
 80073e4:	69f9      	ldr	r1, [r7, #28]
 80073e6:	4401      	add	r1, r0
 80073e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073ec:	4313      	orrs	r3, r2
 80073ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800740e:	6113      	str	r3, [r2, #16]
 8007410:	e03a      	b.n	8007488 <USB_EPStartXfer+0x3e4>
 8007412:	bf00      	nop
 8007414:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	699a      	ldr	r2, [r3, #24]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	4413      	add	r3, r2
 8007422:	1e5a      	subs	r2, r3, #1
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	fbb2 f3f3 	udiv	r3, r2, r3
 800742c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	8afa      	ldrh	r2, [r7, #22]
 8007434:	fb03 f202 	mul.w	r2, r3, r2
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	8afb      	ldrh	r3, [r7, #22]
 800744c:	04d9      	lsls	r1, r3, #19
 800744e:	4b38      	ldr	r3, [pc, #224]	; (8007530 <USB_EPStartXfer+0x48c>)
 8007450:	400b      	ands	r3, r1
 8007452:	69b9      	ldr	r1, [r7, #24]
 8007454:	0148      	lsls	r0, r1, #5
 8007456:	69f9      	ldr	r1, [r7, #28]
 8007458:	4401      	add	r1, r0
 800745a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800745e:	4313      	orrs	r3, r2
 8007460:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007478:	69b9      	ldr	r1, [r7, #24]
 800747a:	0148      	lsls	r0, r1, #5
 800747c:	69f9      	ldr	r1, [r7, #28]
 800747e:	4401      	add	r1, r0
 8007480:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007484:	4313      	orrs	r3, r2
 8007486:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d10d      	bne.n	80074aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6919      	ldr	r1, [r3, #16]
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a6:	460a      	mov	r2, r1
 80074a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	791b      	ldrb	r3, [r3, #4]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d128      	bne.n	8007504 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d110      	bne.n	80074e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	e00f      	b.n	8007504 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007502:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	0151      	lsls	r1, r2, #5
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	440a      	add	r2, r1
 800751a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007522:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3720      	adds	r7, #32
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	1ff80000 	.word	0x1ff80000

08007534 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b01      	cmp	r3, #1
 8007552:	f040 80ce 	bne.w	80076f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d132      	bne.n	80075c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	440a      	add	r2, r1
 8007574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007578:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800757c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	0151      	lsls	r1, r2, #5
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	440a      	add	r2, r1
 80075b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075bc:	0cdb      	lsrs	r3, r3, #19
 80075be:	04db      	lsls	r3, r3, #19
 80075c0:	6113      	str	r3, [r2, #16]
 80075c2:	e04e      	b.n	8007662 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075de:	0cdb      	lsrs	r3, r3, #19
 80075e0:	04db      	lsls	r3, r3, #19
 80075e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	0151      	lsls	r1, r2, #5
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	440a      	add	r2, r1
 80075fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007602:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007606:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	429a      	cmp	r2, r3
 8007612:	d903      	bls.n	800761c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	0151      	lsls	r1, r2, #5
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	440a      	add	r2, r1
 8007632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800763a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007652:	6939      	ldr	r1, [r7, #16]
 8007654:	0148      	lsls	r0, r1, #5
 8007656:	6979      	ldr	r1, [r7, #20]
 8007658:	4401      	add	r1, r0
 800765a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800765e:	4313      	orrs	r3, r2
 8007660:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d11e      	bne.n	80076a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d009      	beq.n	8007684 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767c:	461a      	mov	r2, r3
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	0151      	lsls	r1, r2, #5
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	440a      	add	r2, r1
 800769a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	e097      	b.n	80077d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	0151      	lsls	r1, r2, #5
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	440a      	add	r2, r1
 80076bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8083 	beq.w	80077d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	2101      	movs	r1, #1
 80076e2:	fa01 f303 	lsl.w	r3, r1, r3
 80076e6:	6979      	ldr	r1, [r7, #20]
 80076e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ec:	4313      	orrs	r3, r2
 80076ee:	634b      	str	r3, [r1, #52]	; 0x34
 80076f0:	e071      	b.n	80077d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	0151      	lsls	r1, r2, #5
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	440a      	add	r2, r1
 8007708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800770c:	0cdb      	lsrs	r3, r3, #19
 800770e:	04db      	lsls	r3, r3, #19
 8007710:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	440a      	add	r2, r1
 8007728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800772c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007730:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007734:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800776c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007784:	6939      	ldr	r1, [r7, #16]
 8007786:	0148      	lsls	r0, r1, #5
 8007788:	6979      	ldr	r1, [r7, #20]
 800778a:	4401      	add	r1, r0
 800778c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007790:	4313      	orrs	r3, r2
 8007792:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d10d      	bne.n	80077b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d009      	beq.n	80077b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6919      	ldr	r1, [r3, #16]
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b2:	460a      	mov	r2, r1
 80077b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	785b      	ldrb	r3, [r3, #1]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d14a      	bne.n	8007898 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800781a:	f040 8086 	bne.w	800792a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	7812      	ldrb	r2, [r2, #0]
 8007832:	0151      	lsls	r1, r2, #5
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	440a      	add	r2, r1
 8007838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800783c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007840:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	7812      	ldrb	r2, [r2, #0]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	440a      	add	r2, r1
 800785c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007864:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3301      	adds	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007872:	4293      	cmp	r3, r2
 8007874:	d902      	bls.n	800787c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
          break;
 800787a:	e056      	b.n	800792a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007894:	d0e7      	beq.n	8007866 <USB_EPStopXfer+0x82>
 8007896:	e048      	b.n	800792a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b0:	d13b      	bne.n	800792a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	7812      	ldrb	r2, [r2, #0]
 80078c6:	0151      	lsls	r1, r2, #5
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	440a      	add	r2, r1
 80078cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	7812      	ldrb	r2, [r2, #0]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3301      	adds	r3, #1
 80078fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f242 7210 	movw	r2, #10000	; 0x2710
 8007906:	4293      	cmp	r3, r2
 8007908:	d902      	bls.n	8007910 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	75fb      	strb	r3, [r7, #23]
          break;
 800790e:	e00c      	b.n	800792a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007928:	d0e7      	beq.n	80078fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800792a:	7dfb      	ldrb	r3, [r7, #23]
}
 800792c:	4618      	mov	r0, r3
 800792e:	371c      	adds	r7, #28
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007938:	b480      	push	{r7}
 800793a:	b089      	sub	sp, #36	; 0x24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	4611      	mov	r1, r2
 8007944:	461a      	mov	r2, r3
 8007946:	460b      	mov	r3, r1
 8007948:	71fb      	strb	r3, [r7, #7]
 800794a:	4613      	mov	r3, r2
 800794c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007956:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800795a:	2b00      	cmp	r3, #0
 800795c:	d123      	bne.n	80079a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800795e:	88bb      	ldrh	r3, [r7, #4]
 8007960:	3303      	adds	r3, #3
 8007962:	089b      	lsrs	r3, r3, #2
 8007964:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007966:	2300      	movs	r3, #0
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	e018      	b.n	800799e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	031a      	lsls	r2, r3, #12
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	4413      	add	r3, r2
 8007974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007978:	461a      	mov	r2, r3
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	3301      	adds	r3, #1
 8007984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	3301      	adds	r3, #1
 800798a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	3301      	adds	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	3301      	adds	r3, #1
 8007996:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	3301      	adds	r3, #1
 800799c:	61bb      	str	r3, [r7, #24]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d3e2      	bcc.n	800796c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3724      	adds	r7, #36	; 0x24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b08b      	sub	sp, #44	; 0x2c
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	089b      	lsrs	r3, r3, #2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80079d2:	88fb      	ldrh	r3, [r7, #6]
 80079d4:	f003 0303 	and.w	r3, r3, #3
 80079d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079da:	2300      	movs	r3, #0
 80079dc:	623b      	str	r3, [r7, #32]
 80079de:	e014      	b.n	8007a0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	3301      	adds	r3, #1
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	3301      	adds	r3, #1
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	3301      	adds	r3, #1
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	3301      	adds	r3, #1
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	3301      	adds	r3, #1
 8007a08:	623b      	str	r3, [r7, #32]
 8007a0a:	6a3a      	ldr	r2, [r7, #32]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d3e6      	bcc.n	80079e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a12:	8bfb      	ldrh	r3, [r7, #30]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01e      	beq.n	8007a56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a22:	461a      	mov	r2, r3
 8007a24:	f107 0310 	add.w	r3, r7, #16
 8007a28:	6812      	ldr	r2, [r2, #0]
 8007a2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	701a      	strb	r2, [r3, #0]
      i++;
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	3301      	adds	r3, #1
 8007a42:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	3301      	adds	r3, #1
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a4a:	8bfb      	ldrh	r3, [r7, #30]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a50:	8bfb      	ldrh	r3, [r7, #30]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1ea      	bne.n	8007a2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	372c      	adds	r7, #44	; 0x2c
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	785b      	ldrb	r3, [r3, #1]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d12c      	bne.n	8007ada <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	db12      	blt.n	8007ab8 <USB_EPSetStall+0x54>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00f      	beq.n	8007ab8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	0151      	lsls	r1, r2, #5
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	440a      	add	r2, r1
 8007aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ab6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	0151      	lsls	r1, r2, #5
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	440a      	add	r2, r1
 8007ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	e02b      	b.n	8007b32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	db12      	blt.n	8007b12 <USB_EPSetStall+0xae>
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00f      	beq.n	8007b12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	0151      	lsls	r1, r2, #5
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	440a      	add	r2, r1
 8007b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	0151      	lsls	r1, r2, #5
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	440a      	add	r2, r1
 8007b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	785b      	ldrb	r3, [r3, #1]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d128      	bne.n	8007bae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	791b      	ldrb	r3, [r3, #4]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d003      	beq.n	8007b8c <USB_EPClearStall+0x4c>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	791b      	ldrb	r3, [r3, #4]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d138      	bne.n	8007bfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	0151      	lsls	r1, r2, #5
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	440a      	add	r2, r1
 8007ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	e027      	b.n	8007bfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	0151      	lsls	r1, r2, #5
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	440a      	add	r2, r1
 8007bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	791b      	ldrb	r3, [r3, #4]
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d003      	beq.n	8007bde <USB_EPClearStall+0x9e>
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	791b      	ldrb	r3, [r3, #4]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d10f      	bne.n	8007bfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	0151      	lsls	r1, r2, #5
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	440a      	add	r2, r1
 8007bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c40:	68f9      	ldr	r1, [r7, #12]
 8007c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c46:	4313      	orrs	r3, r2
 8007c48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c72:	f023 0303 	bic.w	r3, r3, #3
 8007c76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c86:	f023 0302 	bic.w	r3, r3, #2
 8007c8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cb4:	f023 0303 	bic.w	r3, r3, #3
 8007cb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cc8:	f043 0302 	orr.w	r3, r3, #2
 8007ccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	4013      	ands	r3, r2
 8007d24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	0c1b      	lsrs	r3, r3, #16
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	4013      	ands	r3, r2
 8007d58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	b29b      	uxth	r3, r3
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b085      	sub	sp, #20
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	4013      	ands	r3, r2
 8007d96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d98:	68bb      	ldr	r3, [r7, #8]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b087      	sub	sp, #28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd6:	01db      	lsls	r3, r3, #7
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	4013      	ands	r3, r2
 8007df2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007df4:	68bb      	ldr	r3, [r7, #8]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b085      	sub	sp, #20
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e3c:	f023 0307 	bic.w	r3, r3, #7
 8007e40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	333c      	adds	r3, #60	; 0x3c
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	4a26      	ldr	r2, [pc, #152]	; (8007f1c <USB_EP0_OutStart+0xb8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d90a      	bls.n	8007e9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e98:	d101      	bne.n	8007e9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e037      	b.n	8007f0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ecc:	f043 0318 	orr.w	r3, r3, #24
 8007ed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007ee4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007ee6:	7afb      	ldrb	r3, [r7, #11]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d10f      	bne.n	8007f0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	4f54300a 	.word	0x4f54300a

08007f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4a13      	ldr	r2, [pc, #76]	; (8007f84 <USB_CoreReset+0x64>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d901      	bls.n	8007f3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e01b      	b.n	8007f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	daf2      	bge.n	8007f2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	f043 0201 	orr.w	r2, r3, #1
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4a09      	ldr	r2, [pc, #36]	; (8007f84 <USB_CoreReset+0x64>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d901      	bls.n	8007f68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e006      	b.n	8007f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d0f0      	beq.n	8007f56 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	00030d40 	.word	0x00030d40

08007f88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f98:	f005 faf2 	bl	800d580 <USBD_static_malloc>
 8007f9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d109      	bne.n	8007fb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	32b0      	adds	r2, #176	; 0xb0
 8007fae:	2100      	movs	r1, #0
 8007fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e0d4      	b.n	8008162 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007fb8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f005 fc53 	bl	800d86a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	32b0      	adds	r2, #176	; 0xb0
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	32b0      	adds	r2, #176	; 0xb0
 8007fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	7c1b      	ldrb	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d138      	bne.n	8008062 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ff0:	4b5e      	ldr	r3, [pc, #376]	; (800816c <USBD_CDC_Init+0x1e4>)
 8007ff2:	7819      	ldrb	r1, [r3, #0]
 8007ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f005 f94f 	bl	800d29e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008000:	4b5a      	ldr	r3, [pc, #360]	; (800816c <USBD_CDC_Init+0x1e4>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	f003 020f 	and.w	r2, r3, #15
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	440b      	add	r3, r1
 8008014:	3324      	adds	r3, #36	; 0x24
 8008016:	2201      	movs	r2, #1
 8008018:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800801a:	4b55      	ldr	r3, [pc, #340]	; (8008170 <USBD_CDC_Init+0x1e8>)
 800801c:	7819      	ldrb	r1, [r3, #0]
 800801e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008022:	2202      	movs	r2, #2
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f005 f93a 	bl	800d29e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800802a:	4b51      	ldr	r3, [pc, #324]	; (8008170 <USBD_CDC_Init+0x1e8>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	f003 020f 	and.w	r2, r3, #15
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008042:	2201      	movs	r2, #1
 8008044:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008046:	4b4b      	ldr	r3, [pc, #300]	; (8008174 <USBD_CDC_Init+0x1ec>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 020f 	and.w	r2, r3, #15
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	3326      	adds	r3, #38	; 0x26
 800805c:	2210      	movs	r2, #16
 800805e:	801a      	strh	r2, [r3, #0]
 8008060:	e035      	b.n	80080ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008062:	4b42      	ldr	r3, [pc, #264]	; (800816c <USBD_CDC_Init+0x1e4>)
 8008064:	7819      	ldrb	r1, [r3, #0]
 8008066:	2340      	movs	r3, #64	; 0x40
 8008068:	2202      	movs	r2, #2
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f005 f917 	bl	800d29e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008070:	4b3e      	ldr	r3, [pc, #248]	; (800816c <USBD_CDC_Init+0x1e4>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	f003 020f 	and.w	r2, r3, #15
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	3324      	adds	r3, #36	; 0x24
 8008086:	2201      	movs	r2, #1
 8008088:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800808a:	4b39      	ldr	r3, [pc, #228]	; (8008170 <USBD_CDC_Init+0x1e8>)
 800808c:	7819      	ldrb	r1, [r3, #0]
 800808e:	2340      	movs	r3, #64	; 0x40
 8008090:	2202      	movs	r2, #2
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f005 f903 	bl	800d29e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008098:	4b35      	ldr	r3, [pc, #212]	; (8008170 <USBD_CDC_Init+0x1e8>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f003 020f 	and.w	r2, r3, #15
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	440b      	add	r3, r1
 80080ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080b0:	2201      	movs	r2, #1
 80080b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80080b4:	4b2f      	ldr	r3, [pc, #188]	; (8008174 <USBD_CDC_Init+0x1ec>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f003 020f 	and.w	r2, r3, #15
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	440b      	add	r3, r1
 80080c8:	3326      	adds	r3, #38	; 0x26
 80080ca:	2210      	movs	r2, #16
 80080cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080ce:	4b29      	ldr	r3, [pc, #164]	; (8008174 <USBD_CDC_Init+0x1ec>)
 80080d0:	7819      	ldrb	r1, [r3, #0]
 80080d2:	2308      	movs	r3, #8
 80080d4:	2203      	movs	r2, #3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f005 f8e1 	bl	800d29e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80080dc:	4b25      	ldr	r3, [pc, #148]	; (8008174 <USBD_CDC_Init+0x1ec>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	f003 020f 	and.w	r2, r3, #15
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	3324      	adds	r3, #36	; 0x24
 80080f2:	2201      	movs	r2, #1
 80080f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	33b0      	adds	r3, #176	; 0xb0
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800812c:	2302      	movs	r3, #2
 800812e:	e018      	b.n	8008162 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7c1b      	ldrb	r3, [r3, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008138:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <USBD_CDC_Init+0x1e8>)
 800813a:	7819      	ldrb	r1, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f005 f998 	bl	800d47c <USBD_LL_PrepareReceive>
 800814c:	e008      	b.n	8008160 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800814e:	4b08      	ldr	r3, [pc, #32]	; (8008170 <USBD_CDC_Init+0x1e8>)
 8008150:	7819      	ldrb	r1, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008158:	2340      	movs	r3, #64	; 0x40
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f005 f98e 	bl	800d47c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000093 	.word	0x20000093
 8008170:	20000094 	.word	0x20000094
 8008174:	20000095 	.word	0x20000095

08008178 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008184:	4b3a      	ldr	r3, [pc, #232]	; (8008270 <USBD_CDC_DeInit+0xf8>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f005 f8ad 	bl	800d2ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008190:	4b37      	ldr	r3, [pc, #220]	; (8008270 <USBD_CDC_DeInit+0xf8>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	f003 020f 	and.w	r2, r3, #15
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	440b      	add	r3, r1
 80081a4:	3324      	adds	r3, #36	; 0x24
 80081a6:	2200      	movs	r2, #0
 80081a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80081aa:	4b32      	ldr	r3, [pc, #200]	; (8008274 <USBD_CDC_DeInit+0xfc>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f005 f89a 	bl	800d2ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80081b6:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <USBD_CDC_DeInit+0xfc>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	f003 020f 	and.w	r2, r3, #15
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	4613      	mov	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081ce:	2200      	movs	r2, #0
 80081d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80081d2:	4b29      	ldr	r3, [pc, #164]	; (8008278 <USBD_CDC_DeInit+0x100>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f005 f886 	bl	800d2ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80081de:	4b26      	ldr	r3, [pc, #152]	; (8008278 <USBD_CDC_DeInit+0x100>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	f003 020f 	and.w	r2, r3, #15
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	3324      	adds	r3, #36	; 0x24
 80081f4:	2200      	movs	r2, #0
 80081f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80081f8:	4b1f      	ldr	r3, [pc, #124]	; (8008278 <USBD_CDC_DeInit+0x100>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	f003 020f 	and.w	r2, r3, #15
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	4613      	mov	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	3326      	adds	r3, #38	; 0x26
 800820e:	2200      	movs	r2, #0
 8008210:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	32b0      	adds	r2, #176	; 0xb0
 800821c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01f      	beq.n	8008264 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	33b0      	adds	r3, #176	; 0xb0
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	32b0      	adds	r2, #176	; 0xb0
 8008242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008246:	4618      	mov	r0, r3
 8008248:	f005 f9a8 	bl	800d59c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	32b0      	adds	r2, #176	; 0xb0
 8008256:	2100      	movs	r1, #0
 8008258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000093 	.word	0x20000093
 8008274:	20000094 	.word	0x20000094
 8008278:	20000095 	.word	0x20000095

0800827c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	32b0      	adds	r2, #176	; 0xb0
 8008290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008294:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e0bf      	b.n	800842c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d050      	beq.n	800835a <USBD_CDC_Setup+0xde>
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	f040 80af 	bne.w	800841c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	88db      	ldrh	r3, [r3, #6]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d03a      	beq.n	800833c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	b25b      	sxtb	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	da1b      	bge.n	8008308 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	33b0      	adds	r3, #176	; 0xb0
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80082e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	88d2      	ldrh	r2, [r2, #6]
 80082ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	88db      	ldrh	r3, [r3, #6]
 80082f2:	2b07      	cmp	r3, #7
 80082f4:	bf28      	it	cs
 80082f6:	2307      	movcs	r3, #7
 80082f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	89fa      	ldrh	r2, [r7, #14]
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 fdb3 	bl	8009e6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008306:	e090      	b.n	800842a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	785a      	ldrb	r2, [r3, #1]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	88db      	ldrh	r3, [r3, #6]
 8008316:	2b3f      	cmp	r3, #63	; 0x3f
 8008318:	d803      	bhi.n	8008322 <USBD_CDC_Setup+0xa6>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	88db      	ldrh	r3, [r3, #6]
 800831e:	b2da      	uxtb	r2, r3
 8008320:	e000      	b.n	8008324 <USBD_CDC_Setup+0xa8>
 8008322:	2240      	movs	r2, #64	; 0x40
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800832a:	6939      	ldr	r1, [r7, #16]
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008332:	461a      	mov	r2, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fdc5 	bl	8009ec4 <USBD_CtlPrepareRx>
      break;
 800833a:	e076      	b.n	800842a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	33b0      	adds	r3, #176	; 0xb0
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	7850      	ldrb	r0, [r2, #1]
 8008352:	2200      	movs	r2, #0
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	4798      	blx	r3
      break;
 8008358:	e067      	b.n	800842a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	785b      	ldrb	r3, [r3, #1]
 800835e:	2b0b      	cmp	r3, #11
 8008360:	d851      	bhi.n	8008406 <USBD_CDC_Setup+0x18a>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <USBD_CDC_Setup+0xec>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	08008399 	.word	0x08008399
 800836c:	08008415 	.word	0x08008415
 8008370:	08008407 	.word	0x08008407
 8008374:	08008407 	.word	0x08008407
 8008378:	08008407 	.word	0x08008407
 800837c:	08008407 	.word	0x08008407
 8008380:	08008407 	.word	0x08008407
 8008384:	08008407 	.word	0x08008407
 8008388:	08008407 	.word	0x08008407
 800838c:	08008407 	.word	0x08008407
 8008390:	080083c3 	.word	0x080083c3
 8008394:	080083ed 	.word	0x080083ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d107      	bne.n	80083b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083a4:	f107 030a 	add.w	r3, r7, #10
 80083a8:	2202      	movs	r2, #2
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 fd5d 	bl	8009e6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083b2:	e032      	b.n	800841a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fce7 	bl	8009d8a <USBD_CtlError>
            ret = USBD_FAIL;
 80083bc:	2303      	movs	r3, #3
 80083be:	75fb      	strb	r3, [r7, #23]
          break;
 80083c0:	e02b      	b.n	800841a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d107      	bne.n	80083de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80083ce:	f107 030d 	add.w	r3, r7, #13
 80083d2:	2201      	movs	r2, #1
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 fd48 	bl	8009e6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083dc:	e01d      	b.n	800841a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 fcd2 	bl	8009d8a <USBD_CtlError>
            ret = USBD_FAIL;
 80083e6:	2303      	movs	r3, #3
 80083e8:	75fb      	strb	r3, [r7, #23]
          break;
 80083ea:	e016      	b.n	800841a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d00f      	beq.n	8008418 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fcc5 	bl	8009d8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008400:	2303      	movs	r3, #3
 8008402:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008404:	e008      	b.n	8008418 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 fcbe 	bl	8009d8a <USBD_CtlError>
          ret = USBD_FAIL;
 800840e:	2303      	movs	r3, #3
 8008410:	75fb      	strb	r3, [r7, #23]
          break;
 8008412:	e002      	b.n	800841a <USBD_CDC_Setup+0x19e>
          break;
 8008414:	bf00      	nop
 8008416:	e008      	b.n	800842a <USBD_CDC_Setup+0x1ae>
          break;
 8008418:	bf00      	nop
      }
      break;
 800841a:	e006      	b.n	800842a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 fcb3 	bl	8009d8a <USBD_CtlError>
      ret = USBD_FAIL;
 8008424:	2303      	movs	r3, #3
 8008426:	75fb      	strb	r3, [r7, #23]
      break;
 8008428:	bf00      	nop
  }

  return (uint8_t)ret;
 800842a:	7dfb      	ldrb	r3, [r7, #23]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008446:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	32b0      	adds	r2, #176	; 0xb0
 8008452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800845a:	2303      	movs	r3, #3
 800845c:	e065      	b.n	800852a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	32b0      	adds	r2, #176	; 0xb0
 8008468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	f003 020f 	and.w	r2, r3, #15
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	3318      	adds	r3, #24
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d02f      	beq.n	80084e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	f003 020f 	and.w	r2, r3, #15
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	3318      	adds	r3, #24
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	f003 010f 	and.w	r1, r3, #15
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	460b      	mov	r3, r1
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	440b      	add	r3, r1
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4403      	add	r3, r0
 80084b0:	3348      	adds	r3, #72	; 0x48
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80084b8:	fb01 f303 	mul.w	r3, r1, r3
 80084bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d112      	bne.n	80084e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	f003 020f 	and.w	r2, r3, #15
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	440b      	add	r3, r1
 80084d4:	3318      	adds	r3, #24
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084da:	78f9      	ldrb	r1, [r7, #3]
 80084dc:	2300      	movs	r3, #0
 80084de:	2200      	movs	r2, #0
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f004 ffaa 	bl	800d43a <USBD_LL_Transmit>
 80084e6:	e01f      	b.n	8008528 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	33b0      	adds	r3, #176	; 0xb0
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d010      	beq.n	8008528 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	33b0      	adds	r3, #176	; 0xb0
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008524:	78fa      	ldrb	r2, [r7, #3]
 8008526:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	460b      	mov	r3, r1
 800853c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	32b0      	adds	r2, #176	; 0xb0
 8008548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	32b0      	adds	r2, #176	; 0xb0
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008560:	2303      	movs	r3, #3
 8008562:	e01a      	b.n	800859a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f004 ffa8 	bl	800d4be <USBD_LL_GetRxDataSize>
 800856e:	4602      	mov	r2, r0
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	33b0      	adds	r3, #176	; 0xb0
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008594:	4611      	mov	r1, r2
 8008596:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	32b0      	adds	r2, #176	; 0xb0
 80085b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d101      	bne.n	80085c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e025      	b.n	8008610 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	33b0      	adds	r3, #176	; 0xb0
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01a      	beq.n	800860e <USBD_CDC_EP0_RxReady+0x6c>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80085de:	2bff      	cmp	r3, #255	; 0xff
 80085e0:	d015      	beq.n	800860e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	33b0      	adds	r3, #176	; 0xb0
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80085fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008602:	b292      	uxth	r2, r2
 8008604:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	22ff      	movs	r2, #255	; 0xff
 800860a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008620:	2182      	movs	r1, #130	; 0x82
 8008622:	4818      	ldr	r0, [pc, #96]	; (8008684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008624:	f000 fd4f 	bl	80090c6 <USBD_GetEpDesc>
 8008628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800862a:	2101      	movs	r1, #1
 800862c:	4815      	ldr	r0, [pc, #84]	; (8008684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800862e:	f000 fd4a 	bl	80090c6 <USBD_GetEpDesc>
 8008632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008634:	2181      	movs	r1, #129	; 0x81
 8008636:	4813      	ldr	r0, [pc, #76]	; (8008684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008638:	f000 fd45 	bl	80090c6 <USBD_GetEpDesc>
 800863c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2210      	movs	r2, #16
 8008648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d006      	beq.n	800865e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2200      	movs	r2, #0
 8008654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008658:	711a      	strb	r2, [r3, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d006      	beq.n	8008672 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800866c:	711a      	strb	r2, [r3, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2243      	movs	r2, #67	; 0x43
 8008676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008678:	4b02      	ldr	r3, [pc, #8]	; (8008684 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000050 	.word	0x20000050

08008688 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008690:	2182      	movs	r1, #130	; 0x82
 8008692:	4818      	ldr	r0, [pc, #96]	; (80086f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008694:	f000 fd17 	bl	80090c6 <USBD_GetEpDesc>
 8008698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800869a:	2101      	movs	r1, #1
 800869c:	4815      	ldr	r0, [pc, #84]	; (80086f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800869e:	f000 fd12 	bl	80090c6 <USBD_GetEpDesc>
 80086a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086a4:	2181      	movs	r1, #129	; 0x81
 80086a6:	4813      	ldr	r0, [pc, #76]	; (80086f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086a8:	f000 fd0d 	bl	80090c6 <USBD_GetEpDesc>
 80086ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2210      	movs	r2, #16
 80086b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d006      	beq.n	80086ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2200      	movs	r2, #0
 80086c4:	711a      	strb	r2, [r3, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f042 0202 	orr.w	r2, r2, #2
 80086cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d006      	beq.n	80086e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	711a      	strb	r2, [r3, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f042 0202 	orr.w	r2, r2, #2
 80086e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2243      	movs	r2, #67	; 0x43
 80086e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086e8:	4b02      	ldr	r3, [pc, #8]	; (80086f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20000050 	.word	0x20000050

080086f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008700:	2182      	movs	r1, #130	; 0x82
 8008702:	4818      	ldr	r0, [pc, #96]	; (8008764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008704:	f000 fcdf 	bl	80090c6 <USBD_GetEpDesc>
 8008708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800870a:	2101      	movs	r1, #1
 800870c:	4815      	ldr	r0, [pc, #84]	; (8008764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800870e:	f000 fcda 	bl	80090c6 <USBD_GetEpDesc>
 8008712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008714:	2181      	movs	r1, #129	; 0x81
 8008716:	4813      	ldr	r0, [pc, #76]	; (8008764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008718:	f000 fcd5 	bl	80090c6 <USBD_GetEpDesc>
 800871c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2210      	movs	r2, #16
 8008728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d006      	beq.n	800873e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	2200      	movs	r2, #0
 8008734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008738:	711a      	strb	r2, [r3, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d006      	beq.n	8008752 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800874c:	711a      	strb	r2, [r3, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2243      	movs	r2, #67	; 0x43
 8008756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008758:	4b02      	ldr	r3, [pc, #8]	; (8008764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000050 	.word	0x20000050

08008768 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	220a      	movs	r2, #10
 8008774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008776:	4b03      	ldr	r3, [pc, #12]	; (8008784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	2000000c 	.word	0x2000000c

08008788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008798:	2303      	movs	r3, #3
 800879a:	e009      	b.n	80087b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	33b0      	adds	r3, #176	; 0xb0
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	32b0      	adds	r2, #176	; 0xb0
 80087d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80087de:	2303      	movs	r3, #3
 80087e0:	e008      	b.n	80087f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	371c      	adds	r7, #28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	32b0      	adds	r2, #176	; 0xb0
 8008814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008820:	2303      	movs	r3, #3
 8008822:	e004      	b.n	800882e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
	...

0800883c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32b0      	adds	r2, #176	; 0xb0
 800884e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008852:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008854:	2301      	movs	r3, #1
 8008856:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	32b0      	adds	r2, #176	; 0xb0
 8008862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800886a:	2303      	movs	r3, #3
 800886c:	e025      	b.n	80088ba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11f      	bne.n	80088b8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2201      	movs	r2, #1
 800887c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008880:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <USBD_CDC_TransmitPacket+0x88>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	f003 020f 	and.w	r2, r3, #15
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4403      	add	r3, r0
 800889a:	3318      	adds	r3, #24
 800889c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800889e:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <USBD_CDC_TransmitPacket+0x88>)
 80088a0:	7819      	ldrb	r1, [r3, #0]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f004 fdc3 	bl	800d43a <USBD_LL_Transmit>

    ret = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000093 	.word	0x20000093

080088c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	32b0      	adds	r2, #176	; 0xb0
 80088da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	32b0      	adds	r2, #176	; 0xb0
 80088ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e018      	b.n	8008928 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	7c1b      	ldrb	r3, [r3, #16]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10a      	bne.n	8008914 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088fe:	4b0c      	ldr	r3, [pc, #48]	; (8008930 <USBD_CDC_ReceivePacket+0x68>)
 8008900:	7819      	ldrb	r1, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f004 fdb5 	bl	800d47c <USBD_LL_PrepareReceive>
 8008912:	e008      	b.n	8008926 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008914:	4b06      	ldr	r3, [pc, #24]	; (8008930 <USBD_CDC_ReceivePacket+0x68>)
 8008916:	7819      	ldrb	r1, [r3, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800891e:	2340      	movs	r3, #64	; 0x40
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f004 fdab 	bl	800d47c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20000094 	.word	0x20000094

08008934 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008948:	2303      	movs	r3, #3
 800894a:	e01f      	b.n	800898c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	79fa      	ldrb	r2, [r7, #7]
 800897e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f004 fc25 	bl	800d1d0 <USBD_LL_Init>
 8008986:	4603      	mov	r3, r0
 8008988:	75fb      	strb	r3, [r7, #23]

  return ret;
 800898a:	7dfb      	ldrb	r3, [r7, #23]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e025      	b.n	80089f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	32ae      	adds	r2, #174	; 0xae
 80089be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00f      	beq.n	80089e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	32ae      	adds	r2, #174	; 0xae
 80089d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	f107 020e 	add.w	r2, r7, #14
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	4602      	mov	r2, r0
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f004 fc2d 	bl	800d268 <USBD_LL_Start>
 8008a0e:	4603      	mov	r3, r0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d009      	beq.n	8008a5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	78fa      	ldrb	r2, [r7, #3]
 8008a52:	4611      	mov	r1, r2
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	4798      	blx	r3
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	4611      	mov	r1, r2
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 f932 	bl	8009d16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ace:	f003 031f 	and.w	r3, r3, #31
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d01a      	beq.n	8008b0c <USBD_LL_SetupStage+0x72>
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d822      	bhi.n	8008b20 <USBD_LL_SetupStage+0x86>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <USBD_LL_SetupStage+0x4a>
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d00a      	beq.n	8008af8 <USBD_LL_SetupStage+0x5e>
 8008ae2:	e01d      	b.n	8008b20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fb5f 	bl	80091b0 <USBD_StdDevReq>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]
      break;
 8008af6:	e020      	b.n	8008b3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fbc7 	bl	8009294 <USBD_StdItfReq>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]
      break;
 8008b0a:	e016      	b.n	8008b3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fc29 	bl	800936c <USBD_StdEPReq>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b1e:	e00c      	b.n	8008b3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f004 fbfa 	bl	800d328 <USBD_LL_StallEP>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]
      break;
 8008b38:	bf00      	nop
  }

  return ret;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b56:	7afb      	ldrb	r3, [r7, #11]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d16e      	bne.n	8008c3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	f040 8098 	bne.w	8008ca0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d913      	bls.n	8008ba4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	1ad2      	subs	r2, r2, r3
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	4293      	cmp	r3, r2
 8008b94:	bf28      	it	cs
 8008b96:	4613      	movcs	r3, r2
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6879      	ldr	r1, [r7, #4]
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f001 f9ae 	bl	8009efe <USBD_CtlContinueRx>
 8008ba2:	e07d      	b.n	8008ca0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008baa:	f003 031f 	and.w	r3, r3, #31
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d014      	beq.n	8008bdc <USBD_LL_DataOutStage+0x98>
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d81d      	bhi.n	8008bf2 <USBD_LL_DataOutStage+0xae>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <USBD_LL_DataOutStage+0x7c>
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d003      	beq.n	8008bc6 <USBD_LL_DataOutStage+0x82>
 8008bbe:	e018      	b.n	8008bf2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	75bb      	strb	r3, [r7, #22]
            break;
 8008bc4:	e018      	b.n	8008bf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	4619      	mov	r1, r3
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 fa5e 	bl	8009092 <USBD_CoreFindIF>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	75bb      	strb	r3, [r7, #22]
            break;
 8008bda:	e00d      	b.n	8008bf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	4619      	mov	r1, r3
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 fa60 	bl	80090ac <USBD_CoreFindEP>
 8008bec:	4603      	mov	r3, r0
 8008bee:	75bb      	strb	r3, [r7, #22]
            break;
 8008bf0:	e002      	b.n	8008bf8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75bb      	strb	r3, [r7, #22]
            break;
 8008bf6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008bf8:	7dbb      	ldrb	r3, [r7, #22]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d119      	bne.n	8008c32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d113      	bne.n	8008c32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008c0a:	7dba      	ldrb	r2, [r7, #22]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	32ae      	adds	r2, #174	; 0xae
 8008c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00b      	beq.n	8008c32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008c1a:	7dba      	ldrb	r2, [r7, #22]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008c22:	7dba      	ldrb	r2, [r7, #22]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	32ae      	adds	r2, #174	; 0xae
 8008c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f001 f974 	bl	8009f20 <USBD_CtlSendStatus>
 8008c38:	e032      	b.n	8008ca0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c3a:	7afb      	ldrb	r3, [r7, #11]
 8008c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	4619      	mov	r1, r3
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 fa31 	bl	80090ac <USBD_CoreFindEP>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c4e:	7dbb      	ldrb	r3, [r7, #22]
 8008c50:	2bff      	cmp	r3, #255	; 0xff
 8008c52:	d025      	beq.n	8008ca0 <USBD_LL_DataOutStage+0x15c>
 8008c54:	7dbb      	ldrb	r3, [r7, #22]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d122      	bne.n	8008ca0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d117      	bne.n	8008c96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c66:	7dba      	ldrb	r2, [r7, #22]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	32ae      	adds	r2, #174	; 0xae
 8008c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00f      	beq.n	8008c96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c76:	7dba      	ldrb	r2, [r7, #22]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c7e:	7dba      	ldrb	r2, [r7, #22]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	32ae      	adds	r2, #174	; 0xae
 8008c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	7afa      	ldrb	r2, [r7, #11]
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	4798      	blx	r3
 8008c92:	4603      	mov	r3, r0
 8008c94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
 8008c9e:	e000      	b.n	8008ca2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008cb8:	7afb      	ldrb	r3, [r7, #11]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d16f      	bne.n	8008d9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3314      	adds	r3, #20
 8008cc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d15a      	bne.n	8008d84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d914      	bls.n	8008d04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	689a      	ldr	r2, [r3, #8]
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	1ad2      	subs	r2, r2, r3
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	461a      	mov	r2, r3
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f001 f8d6 	bl	8009ea2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f004 fbbd 	bl	800d47c <USBD_LL_PrepareReceive>
 8008d02:	e03f      	b.n	8008d84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d11c      	bne.n	8008d4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d316      	bcc.n	8008d4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d20f      	bcs.n	8008d4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f001 f8b7 	bl	8009ea2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2100      	movs	r1, #0
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f004 fb9a 	bl	800d47c <USBD_LL_PrepareReceive>
 8008d48:	e01c      	b.n	8008d84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	d10f      	bne.n	8008d76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d009      	beq.n	8008d76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d76:	2180      	movs	r1, #128	; 0x80
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f004 fad5 	bl	800d328 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f001 f8e1 	bl	8009f46 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d03a      	beq.n	8008e04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f7ff fe42 	bl	8008a18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d9c:	e032      	b.n	8008e04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	4619      	mov	r1, r3
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 f97f 	bl	80090ac <USBD_CoreFindEP>
 8008dae:	4603      	mov	r3, r0
 8008db0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	2bff      	cmp	r3, #255	; 0xff
 8008db6:	d025      	beq.n	8008e04 <USBD_LL_DataInStage+0x15a>
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d122      	bne.n	8008e04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d11c      	bne.n	8008e04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008dca:	7dfa      	ldrb	r2, [r7, #23]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	32ae      	adds	r2, #174	; 0xae
 8008dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d014      	beq.n	8008e04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008dda:	7dfa      	ldrb	r2, [r7, #23]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008de2:	7dfa      	ldrb	r2, [r7, #23]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	32ae      	adds	r2, #174	; 0xae
 8008de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	7afa      	ldrb	r2, [r7, #11]
 8008df0:	4611      	mov	r1, r2
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	4798      	blx	r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008dfa:	7dbb      	ldrb	r3, [r7, #22]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008e00:	7dbb      	ldrb	r3, [r7, #22]
 8008e02:	e000      	b.n	8008e06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b084      	sub	sp, #16
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d014      	beq.n	8008e74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00e      	beq.n	8008e74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6852      	ldr	r2, [r2, #4]
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	4611      	mov	r1, r2
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	4798      	blx	r3
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e74:	2340      	movs	r3, #64	; 0x40
 8008e76:	2200      	movs	r2, #0
 8008e78:	2100      	movs	r1, #0
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f004 fa0f 	bl	800d29e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2240      	movs	r2, #64	; 0x40
 8008e8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e90:	2340      	movs	r3, #64	; 0x40
 8008e92:	2200      	movs	r2, #0
 8008e94:	2180      	movs	r1, #128	; 0x80
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f004 fa01 	bl	800d29e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2240      	movs	r2, #64	; 0x40
 8008ea6:	621a      	str	r2, [r3, #32]

  return ret;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	78fa      	ldrb	r2, [r7, #3]
 8008ec2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2204      	movs	r2, #4
 8008eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d106      	bne.n	8008f20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b082      	sub	sp, #8
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d110      	bne.n	8008f64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00b      	beq.n	8008f64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f52:	69db      	ldr	r3, [r3, #28]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d005      	beq.n	8008f64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	32ae      	adds	r2, #174	; 0xae
 8008f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e01c      	b.n	8008fca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d115      	bne.n	8008fc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	32ae      	adds	r2, #174	; 0xae
 8008fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	32ae      	adds	r2, #174	; 0xae
 8008fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	78fa      	ldrb	r2, [r7, #3]
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	32ae      	adds	r2, #174	; 0xae
 8008fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e01c      	b.n	800902e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d115      	bne.n	800902c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	32ae      	adds	r2, #174	; 0xae
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00b      	beq.n	800902c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	32ae      	adds	r2, #174	; 0xae
 800901e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	78fa      	ldrb	r2, [r7, #3]
 8009026:	4611      	mov	r1, r2
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00e      	beq.n	8009088 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6852      	ldr	r2, [r2, #4]
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	4611      	mov	r1, r2
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009084:	2303      	movs	r3, #3
 8009086:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800909e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b086      	sub	sp, #24
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	885b      	ldrh	r3, [r3, #2]
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d920      	bls.n	8009130 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80090f6:	e013      	b.n	8009120 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80090f8:	f107 030a 	add.w	r3, r7, #10
 80090fc:	4619      	mov	r1, r3
 80090fe:	6978      	ldr	r0, [r7, #20]
 8009100:	f000 f81b 	bl	800913a <USBD_GetNextDesc>
 8009104:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	2b05      	cmp	r3, #5
 800910c:	d108      	bne.n	8009120 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	789b      	ldrb	r3, [r3, #2]
 8009116:	78fa      	ldrb	r2, [r7, #3]
 8009118:	429a      	cmp	r2, r3
 800911a:	d008      	beq.n	800912e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800911c:	2300      	movs	r3, #0
 800911e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	885b      	ldrh	r3, [r3, #2]
 8009124:	b29a      	uxth	r2, r3
 8009126:	897b      	ldrh	r3, [r7, #10]
 8009128:	429a      	cmp	r2, r3
 800912a:	d8e5      	bhi.n	80090f8 <USBD_GetEpDesc+0x32>
 800912c:	e000      	b.n	8009130 <USBD_GetEpDesc+0x6a>
          break;
 800912e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009130:	693b      	ldr	r3, [r7, #16]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800913a:	b480      	push	{r7}
 800913c:	b085      	sub	sp, #20
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	881a      	ldrh	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	b29b      	uxth	r3, r3
 8009152:	4413      	add	r3, r2
 8009154:	b29a      	uxth	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4413      	add	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009166:	68fb      	ldr	r3, [r7, #12]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	3301      	adds	r3, #1
 800918a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009192:	8a3b      	ldrh	r3, [r7, #16]
 8009194:	021b      	lsls	r3, r3, #8
 8009196:	b21a      	sxth	r2, r3
 8009198:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800919c:	4313      	orrs	r3, r2
 800919e:	b21b      	sxth	r3, r3
 80091a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80091a2:	89fb      	ldrh	r3, [r7, #14]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	371c      	adds	r7, #28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d005      	beq.n	80091d6 <USBD_StdDevReq+0x26>
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	d857      	bhi.n	800927e <USBD_StdDevReq+0xce>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00f      	beq.n	80091f2 <USBD_StdDevReq+0x42>
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d153      	bne.n	800927e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	32ae      	adds	r2, #174	; 0xae
 80091e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4798      	blx	r3
 80091ec:	4603      	mov	r3, r0
 80091ee:	73fb      	strb	r3, [r7, #15]
      break;
 80091f0:	e04a      	b.n	8009288 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	785b      	ldrb	r3, [r3, #1]
 80091f6:	2b09      	cmp	r3, #9
 80091f8:	d83b      	bhi.n	8009272 <USBD_StdDevReq+0xc2>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <USBD_StdDevReq+0x50>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	08009255 	.word	0x08009255
 8009204:	08009269 	.word	0x08009269
 8009208:	08009273 	.word	0x08009273
 800920c:	0800925f 	.word	0x0800925f
 8009210:	08009273 	.word	0x08009273
 8009214:	08009233 	.word	0x08009233
 8009218:	08009229 	.word	0x08009229
 800921c:	08009273 	.word	0x08009273
 8009220:	0800924b 	.word	0x0800924b
 8009224:	0800923d 	.word	0x0800923d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa3c 	bl	80096a8 <USBD_GetDescriptor>
          break;
 8009230:	e024      	b.n	800927c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fbcb 	bl	80099d0 <USBD_SetAddress>
          break;
 800923a:	e01f      	b.n	800927c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc0a 	bl	8009a58 <USBD_SetConfig>
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]
          break;
 8009248:	e018      	b.n	800927c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fcad 	bl	8009bac <USBD_GetConfig>
          break;
 8009252:	e013      	b.n	800927c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fcde 	bl	8009c18 <USBD_GetStatus>
          break;
 800925c:	e00e      	b.n	800927c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fd0d 	bl	8009c80 <USBD_SetFeature>
          break;
 8009266:	e009      	b.n	800927c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fd31 	bl	8009cd2 <USBD_ClrFeature>
          break;
 8009270:	e004      	b.n	800927c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fd88 	bl	8009d8a <USBD_CtlError>
          break;
 800927a:	bf00      	nop
      }
      break;
 800927c:	e004      	b.n	8009288 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fd82 	bl	8009d8a <USBD_CtlError>
      break;
 8009286:	bf00      	nop
  }

  return ret;
 8009288:	7bfb      	ldrb	r3, [r7, #15]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop

08009294 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	d005      	beq.n	80092ba <USBD_StdItfReq+0x26>
 80092ae:	2b40      	cmp	r3, #64	; 0x40
 80092b0:	d852      	bhi.n	8009358 <USBD_StdItfReq+0xc4>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <USBD_StdItfReq+0x26>
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	d14e      	bne.n	8009358 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	3b01      	subs	r3, #1
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d840      	bhi.n	800934a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	889b      	ldrh	r3, [r3, #4]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d836      	bhi.n	8009340 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	889b      	ldrh	r3, [r3, #4]
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7ff fed9 	bl	8009092 <USBD_CoreFindIF>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	2bff      	cmp	r3, #255	; 0xff
 80092e8:	d01d      	beq.n	8009326 <USBD_StdItfReq+0x92>
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d11a      	bne.n	8009326 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80092f0:	7bba      	ldrb	r2, [r7, #14]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	32ae      	adds	r2, #174	; 0xae
 80092f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00f      	beq.n	8009320 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009300:	7bba      	ldrb	r2, [r7, #14]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009308:	7bba      	ldrb	r2, [r7, #14]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	32ae      	adds	r2, #174	; 0xae
 800930e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	4798      	blx	r3
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800931e:	e004      	b.n	800932a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009320:	2303      	movs	r3, #3
 8009322:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009324:	e001      	b.n	800932a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009326:	2303      	movs	r3, #3
 8009328:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	88db      	ldrh	r3, [r3, #6]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d110      	bne.n	8009354 <USBD_StdItfReq+0xc0>
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10d      	bne.n	8009354 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fdf1 	bl	8009f20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800933e:	e009      	b.n	8009354 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fd21 	bl	8009d8a <USBD_CtlError>
          break;
 8009348:	e004      	b.n	8009354 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fd1c 	bl	8009d8a <USBD_CtlError>
          break;
 8009352:	e000      	b.n	8009356 <USBD_StdItfReq+0xc2>
          break;
 8009354:	bf00      	nop
      }
      break;
 8009356:	e004      	b.n	8009362 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fd15 	bl	8009d8a <USBD_CtlError>
      break;
 8009360:	bf00      	nop
  }

  return ret;
 8009362:	7bfb      	ldrb	r3, [r7, #15]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	889b      	ldrh	r3, [r3, #4]
 800937e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009388:	2b40      	cmp	r3, #64	; 0x40
 800938a:	d007      	beq.n	800939c <USBD_StdEPReq+0x30>
 800938c:	2b40      	cmp	r3, #64	; 0x40
 800938e:	f200 817f 	bhi.w	8009690 <USBD_StdEPReq+0x324>
 8009392:	2b00      	cmp	r3, #0
 8009394:	d02a      	beq.n	80093ec <USBD_StdEPReq+0x80>
 8009396:	2b20      	cmp	r3, #32
 8009398:	f040 817a 	bne.w	8009690 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800939c:	7bbb      	ldrb	r3, [r7, #14]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff fe83 	bl	80090ac <USBD_CoreFindEP>
 80093a6:	4603      	mov	r3, r0
 80093a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093aa:	7b7b      	ldrb	r3, [r7, #13]
 80093ac:	2bff      	cmp	r3, #255	; 0xff
 80093ae:	f000 8174 	beq.w	800969a <USBD_StdEPReq+0x32e>
 80093b2:	7b7b      	ldrb	r3, [r7, #13]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f040 8170 	bne.w	800969a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80093ba:	7b7a      	ldrb	r2, [r7, #13]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80093c2:	7b7a      	ldrb	r2, [r7, #13]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	32ae      	adds	r2, #174	; 0xae
 80093c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 8163 	beq.w	800969a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80093d4:	7b7a      	ldrb	r2, [r7, #13]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	32ae      	adds	r2, #174	; 0xae
 80093da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	4798      	blx	r3
 80093e6:	4603      	mov	r3, r0
 80093e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093ea:	e156      	b.n	800969a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d008      	beq.n	8009406 <USBD_StdEPReq+0x9a>
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	f300 8145 	bgt.w	8009684 <USBD_StdEPReq+0x318>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 809b 	beq.w	8009536 <USBD_StdEPReq+0x1ca>
 8009400:	2b01      	cmp	r3, #1
 8009402:	d03c      	beq.n	800947e <USBD_StdEPReq+0x112>
 8009404:	e13e      	b.n	8009684 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b02      	cmp	r3, #2
 8009410:	d002      	beq.n	8009418 <USBD_StdEPReq+0xac>
 8009412:	2b03      	cmp	r3, #3
 8009414:	d016      	beq.n	8009444 <USBD_StdEPReq+0xd8>
 8009416:	e02c      	b.n	8009472 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00d      	beq.n	800943a <USBD_StdEPReq+0xce>
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	2b80      	cmp	r3, #128	; 0x80
 8009422:	d00a      	beq.n	800943a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	4619      	mov	r1, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f003 ff7d 	bl	800d328 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800942e:	2180      	movs	r1, #128	; 0x80
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f003 ff79 	bl	800d328 <USBD_LL_StallEP>
 8009436:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009438:	e020      	b.n	800947c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fca4 	bl	8009d8a <USBD_CtlError>
              break;
 8009442:	e01b      	b.n	800947c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	885b      	ldrh	r3, [r3, #2]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10e      	bne.n	800946a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00b      	beq.n	800946a <USBD_StdEPReq+0xfe>
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	2b80      	cmp	r3, #128	; 0x80
 8009456:	d008      	beq.n	800946a <USBD_StdEPReq+0xfe>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	88db      	ldrh	r3, [r3, #6]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f003 ff5f 	bl	800d328 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fd58 	bl	8009f20 <USBD_CtlSendStatus>

              break;
 8009470:	e004      	b.n	800947c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fc88 	bl	8009d8a <USBD_CtlError>
              break;
 800947a:	bf00      	nop
          }
          break;
 800947c:	e107      	b.n	800968e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b02      	cmp	r3, #2
 8009488:	d002      	beq.n	8009490 <USBD_StdEPReq+0x124>
 800948a:	2b03      	cmp	r3, #3
 800948c:	d016      	beq.n	80094bc <USBD_StdEPReq+0x150>
 800948e:	e04b      	b.n	8009528 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00d      	beq.n	80094b2 <USBD_StdEPReq+0x146>
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	2b80      	cmp	r3, #128	; 0x80
 800949a:	d00a      	beq.n	80094b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f003 ff41 	bl	800d328 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094a6:	2180      	movs	r1, #128	; 0x80
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f003 ff3d 	bl	800d328 <USBD_LL_StallEP>
 80094ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094b0:	e040      	b.n	8009534 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fc68 	bl	8009d8a <USBD_CtlError>
              break;
 80094ba:	e03b      	b.n	8009534 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	885b      	ldrh	r3, [r3, #2]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d136      	bne.n	8009532 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094c4:	7bbb      	ldrb	r3, [r7, #14]
 80094c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d004      	beq.n	80094d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f003 ff47 	bl	800d366 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fd21 	bl	8009f20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff fde2 	bl	80090ac <USBD_CoreFindEP>
 80094e8:	4603      	mov	r3, r0
 80094ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094ec:	7b7b      	ldrb	r3, [r7, #13]
 80094ee:	2bff      	cmp	r3, #255	; 0xff
 80094f0:	d01f      	beq.n	8009532 <USBD_StdEPReq+0x1c6>
 80094f2:	7b7b      	ldrb	r3, [r7, #13]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d11c      	bne.n	8009532 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80094f8:	7b7a      	ldrb	r2, [r7, #13]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009500:	7b7a      	ldrb	r2, [r7, #13]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	32ae      	adds	r2, #174	; 0xae
 8009506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d010      	beq.n	8009532 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009510:	7b7a      	ldrb	r2, [r7, #13]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	32ae      	adds	r2, #174	; 0xae
 8009516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
 8009522:	4603      	mov	r3, r0
 8009524:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009526:	e004      	b.n	8009532 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fc2d 	bl	8009d8a <USBD_CtlError>
              break;
 8009530:	e000      	b.n	8009534 <USBD_StdEPReq+0x1c8>
              break;
 8009532:	bf00      	nop
          }
          break;
 8009534:	e0ab      	b.n	800968e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b02      	cmp	r3, #2
 8009540:	d002      	beq.n	8009548 <USBD_StdEPReq+0x1dc>
 8009542:	2b03      	cmp	r3, #3
 8009544:	d032      	beq.n	80095ac <USBD_StdEPReq+0x240>
 8009546:	e097      	b.n	8009678 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009548:	7bbb      	ldrb	r3, [r7, #14]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <USBD_StdEPReq+0x1f2>
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	2b80      	cmp	r3, #128	; 0x80
 8009552:	d004      	beq.n	800955e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fc17 	bl	8009d8a <USBD_CtlError>
                break;
 800955c:	e091      	b.n	8009682 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800955e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009562:	2b00      	cmp	r3, #0
 8009564:	da0b      	bge.n	800957e <USBD_StdEPReq+0x212>
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800956c:	4613      	mov	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	3310      	adds	r3, #16
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	4413      	add	r3, r2
 800957a:	3304      	adds	r3, #4
 800957c:	e00b      	b.n	8009596 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009584:	4613      	mov	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	4413      	add	r3, r2
 8009594:	3304      	adds	r3, #4
 8009596:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2202      	movs	r2, #2
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fc61 	bl	8009e6c <USBD_CtlSendData>
              break;
 80095aa:	e06a      	b.n	8009682 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	da11      	bge.n	80095d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	f003 020f 	and.w	r2, r3, #15
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	440b      	add	r3, r1
 80095c6:	3324      	adds	r3, #36	; 0x24
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d117      	bne.n	80095fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fbda 	bl	8009d8a <USBD_CtlError>
                  break;
 80095d6:	e054      	b.n	8009682 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	f003 020f 	and.w	r2, r3, #15
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	4613      	mov	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	440b      	add	r3, r1
 80095ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fbc7 	bl	8009d8a <USBD_CtlError>
                  break;
 80095fc:	e041      	b.n	8009682 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009602:	2b00      	cmp	r3, #0
 8009604:	da0b      	bge.n	800961e <USBD_StdEPReq+0x2b2>
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	3310      	adds	r3, #16
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	4413      	add	r3, r2
 800961a:	3304      	adds	r3, #4
 800961c:	e00b      	b.n	8009636 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	4413      	add	r3, r2
 8009634:	3304      	adds	r3, #4
 8009636:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <USBD_StdEPReq+0x2d8>
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b80      	cmp	r3, #128	; 0x80
 8009642:	d103      	bne.n	800964c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2200      	movs	r2, #0
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	e00e      	b.n	800966a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f003 fea7 	bl	800d3a4 <USBD_LL_IsStallEP>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2201      	movs	r2, #1
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	e002      	b.n	800966a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2200      	movs	r2, #0
 8009668:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2202      	movs	r2, #2
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fbfb 	bl	8009e6c <USBD_CtlSendData>
              break;
 8009676:	e004      	b.n	8009682 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fb85 	bl	8009d8a <USBD_CtlError>
              break;
 8009680:	bf00      	nop
          }
          break;
 8009682:	e004      	b.n	800968e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fb7f 	bl	8009d8a <USBD_CtlError>
          break;
 800968c:	bf00      	nop
      }
      break;
 800968e:	e005      	b.n	800969c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fb79 	bl	8009d8a <USBD_CtlError>
      break;
 8009698:	e000      	b.n	800969c <USBD_StdEPReq+0x330>
      break;
 800969a:	bf00      	nop
  }

  return ret;
 800969c:	7bfb      	ldrb	r3, [r7, #15]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096b2:	2300      	movs	r3, #0
 80096b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	885b      	ldrh	r3, [r3, #2]
 80096c2:	0a1b      	lsrs	r3, r3, #8
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	3b01      	subs	r3, #1
 80096c8:	2b0e      	cmp	r3, #14
 80096ca:	f200 8152 	bhi.w	8009972 <USBD_GetDescriptor+0x2ca>
 80096ce:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <USBD_GetDescriptor+0x2c>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	08009745 	.word	0x08009745
 80096d8:	0800975d 	.word	0x0800975d
 80096dc:	0800979d 	.word	0x0800979d
 80096e0:	08009973 	.word	0x08009973
 80096e4:	08009973 	.word	0x08009973
 80096e8:	08009913 	.word	0x08009913
 80096ec:	0800993f 	.word	0x0800993f
 80096f0:	08009973 	.word	0x08009973
 80096f4:	08009973 	.word	0x08009973
 80096f8:	08009973 	.word	0x08009973
 80096fc:	08009973 	.word	0x08009973
 8009700:	08009973 	.word	0x08009973
 8009704:	08009973 	.word	0x08009973
 8009708:	08009973 	.word	0x08009973
 800970c:	08009711 	.word	0x08009711
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00b      	beq.n	8009734 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	7c12      	ldrb	r2, [r2, #16]
 8009728:	f107 0108 	add.w	r1, r7, #8
 800972c:	4610      	mov	r0, r2
 800972e:	4798      	blx	r3
 8009730:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009732:	e126      	b.n	8009982 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fb27 	bl	8009d8a <USBD_CtlError>
        err++;
 800973c:	7afb      	ldrb	r3, [r7, #11]
 800973e:	3301      	adds	r3, #1
 8009740:	72fb      	strb	r3, [r7, #11]
      break;
 8009742:	e11e      	b.n	8009982 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	7c12      	ldrb	r2, [r2, #16]
 8009750:	f107 0108 	add.w	r1, r7, #8
 8009754:	4610      	mov	r0, r2
 8009756:	4798      	blx	r3
 8009758:	60f8      	str	r0, [r7, #12]
      break;
 800975a:	e112      	b.n	8009982 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	7c1b      	ldrb	r3, [r3, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10d      	bne.n	8009780 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800976a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976c:	f107 0208 	add.w	r2, r7, #8
 8009770:	4610      	mov	r0, r2
 8009772:	4798      	blx	r3
 8009774:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3301      	adds	r3, #1
 800977a:	2202      	movs	r2, #2
 800977c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800977e:	e100      	b.n	8009982 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009788:	f107 0208 	add.w	r2, r7, #8
 800978c:	4610      	mov	r0, r2
 800978e:	4798      	blx	r3
 8009790:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3301      	adds	r3, #1
 8009796:	2202      	movs	r2, #2
 8009798:	701a      	strb	r2, [r3, #0]
      break;
 800979a:	e0f2      	b.n	8009982 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	885b      	ldrh	r3, [r3, #2]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b05      	cmp	r3, #5
 80097a4:	f200 80ac 	bhi.w	8009900 <USBD_GetDescriptor+0x258>
 80097a8:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <USBD_GetDescriptor+0x108>)
 80097aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ae:	bf00      	nop
 80097b0:	080097c9 	.word	0x080097c9
 80097b4:	080097fd 	.word	0x080097fd
 80097b8:	08009831 	.word	0x08009831
 80097bc:	08009865 	.word	0x08009865
 80097c0:	08009899 	.word	0x08009899
 80097c4:	080098cd 	.word	0x080098cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	7c12      	ldrb	r2, [r2, #16]
 80097e0:	f107 0108 	add.w	r1, r7, #8
 80097e4:	4610      	mov	r0, r2
 80097e6:	4798      	blx	r3
 80097e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ea:	e091      	b.n	8009910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 facb 	bl	8009d8a <USBD_CtlError>
            err++;
 80097f4:	7afb      	ldrb	r3, [r7, #11]
 80097f6:	3301      	adds	r3, #1
 80097f8:	72fb      	strb	r3, [r7, #11]
          break;
 80097fa:	e089      	b.n	8009910 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00b      	beq.n	8009820 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	7c12      	ldrb	r2, [r2, #16]
 8009814:	f107 0108 	add.w	r1, r7, #8
 8009818:	4610      	mov	r0, r2
 800981a:	4798      	blx	r3
 800981c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800981e:	e077      	b.n	8009910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fab1 	bl	8009d8a <USBD_CtlError>
            err++;
 8009828:	7afb      	ldrb	r3, [r7, #11]
 800982a:	3301      	adds	r3, #1
 800982c:	72fb      	strb	r3, [r7, #11]
          break;
 800982e:	e06f      	b.n	8009910 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00b      	beq.n	8009854 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	7c12      	ldrb	r2, [r2, #16]
 8009848:	f107 0108 	add.w	r1, r7, #8
 800984c:	4610      	mov	r0, r2
 800984e:	4798      	blx	r3
 8009850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009852:	e05d      	b.n	8009910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa97 	bl	8009d8a <USBD_CtlError>
            err++;
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	3301      	adds	r3, #1
 8009860:	72fb      	strb	r3, [r7, #11]
          break;
 8009862:	e055      	b.n	8009910 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	7c12      	ldrb	r2, [r2, #16]
 800987c:	f107 0108 	add.w	r1, r7, #8
 8009880:	4610      	mov	r0, r2
 8009882:	4798      	blx	r3
 8009884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009886:	e043      	b.n	8009910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa7d 	bl	8009d8a <USBD_CtlError>
            err++;
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	3301      	adds	r3, #1
 8009894:	72fb      	strb	r3, [r7, #11]
          break;
 8009896:	e03b      	b.n	8009910 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00b      	beq.n	80098bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7c12      	ldrb	r2, [r2, #16]
 80098b0:	f107 0108 	add.w	r1, r7, #8
 80098b4:	4610      	mov	r0, r2
 80098b6:	4798      	blx	r3
 80098b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ba:	e029      	b.n	8009910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fa63 	bl	8009d8a <USBD_CtlError>
            err++;
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	3301      	adds	r3, #1
 80098c8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ca:	e021      	b.n	8009910 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	7c12      	ldrb	r2, [r2, #16]
 80098e4:	f107 0108 	add.w	r1, r7, #8
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
 80098ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ee:	e00f      	b.n	8009910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa49 	bl	8009d8a <USBD_CtlError>
            err++;
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	3301      	adds	r3, #1
 80098fc:	72fb      	strb	r3, [r7, #11]
          break;
 80098fe:	e007      	b.n	8009910 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fa41 	bl	8009d8a <USBD_CtlError>
          err++;
 8009908:	7afb      	ldrb	r3, [r7, #11]
 800990a:	3301      	adds	r3, #1
 800990c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800990e:	bf00      	nop
      }
      break;
 8009910:	e037      	b.n	8009982 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	7c1b      	ldrb	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d109      	bne.n	800992e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009922:	f107 0208 	add.w	r2, r7, #8
 8009926:	4610      	mov	r0, r2
 8009928:	4798      	blx	r3
 800992a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800992c:	e029      	b.n	8009982 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fa2a 	bl	8009d8a <USBD_CtlError>
        err++;
 8009936:	7afb      	ldrb	r3, [r7, #11]
 8009938:	3301      	adds	r3, #1
 800993a:	72fb      	strb	r3, [r7, #11]
      break;
 800993c:	e021      	b.n	8009982 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	7c1b      	ldrb	r3, [r3, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10d      	bne.n	8009962 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800994c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994e:	f107 0208 	add.w	r2, r7, #8
 8009952:	4610      	mov	r0, r2
 8009954:	4798      	blx	r3
 8009956:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	2207      	movs	r2, #7
 800995e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009960:	e00f      	b.n	8009982 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fa10 	bl	8009d8a <USBD_CtlError>
        err++;
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	3301      	adds	r3, #1
 800996e:	72fb      	strb	r3, [r7, #11]
      break;
 8009970:	e007      	b.n	8009982 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fa08 	bl	8009d8a <USBD_CtlError>
      err++;
 800997a:	7afb      	ldrb	r3, [r7, #11]
 800997c:	3301      	adds	r3, #1
 800997e:	72fb      	strb	r3, [r7, #11]
      break;
 8009980:	bf00      	nop
  }

  if (err != 0U)
 8009982:	7afb      	ldrb	r3, [r7, #11]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d11e      	bne.n	80099c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	88db      	ldrh	r3, [r3, #6]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d016      	beq.n	80099be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009990:	893b      	ldrh	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00e      	beq.n	80099b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	88da      	ldrh	r2, [r3, #6]
 800999a:	893b      	ldrh	r3, [r7, #8]
 800999c:	4293      	cmp	r3, r2
 800999e:	bf28      	it	cs
 80099a0:	4613      	movcs	r3, r2
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099a6:	893b      	ldrh	r3, [r7, #8]
 80099a8:	461a      	mov	r2, r3
 80099aa:	68f9      	ldr	r1, [r7, #12]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fa5d 	bl	8009e6c <USBD_CtlSendData>
 80099b2:	e009      	b.n	80099c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f9e7 	bl	8009d8a <USBD_CtlError>
 80099bc:	e004      	b.n	80099c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 faae 	bl	8009f20 <USBD_CtlSendStatus>
 80099c4:	e000      	b.n	80099c8 <USBD_GetDescriptor+0x320>
    return;
 80099c6:	bf00      	nop
  }
}
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop

080099d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	889b      	ldrh	r3, [r3, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d131      	bne.n	8009a46 <USBD_SetAddress+0x76>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	88db      	ldrh	r3, [r3, #6]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d12d      	bne.n	8009a46 <USBD_SetAddress+0x76>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	885b      	ldrh	r3, [r3, #2]
 80099ee:	2b7f      	cmp	r3, #127	; 0x7f
 80099f0:	d829      	bhi.n	8009a46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	885b      	ldrh	r3, [r3, #2]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d104      	bne.n	8009a14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f9bc 	bl	8009d8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a12:	e01d      	b.n	8009a50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	7bfa      	ldrb	r2, [r7, #15]
 8009a18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4619      	mov	r1, r3
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f003 fceb 	bl	800d3fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa7a 	bl	8009f20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d004      	beq.n	8009a3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2202      	movs	r2, #2
 8009a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a3a:	e009      	b.n	8009a50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a44:	e004      	b.n	8009a50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f99e 	bl	8009d8a <USBD_CtlError>
  }
}
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	885b      	ldrh	r3, [r3, #2]
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	4b4e      	ldr	r3, [pc, #312]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009a6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a70:	4b4d      	ldr	r3, [pc, #308]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d905      	bls.n	8009a84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f985 	bl	8009d8a <USBD_CtlError>
    return USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e08c      	b.n	8009b9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d002      	beq.n	8009a96 <USBD_SetConfig+0x3e>
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d029      	beq.n	8009ae8 <USBD_SetConfig+0x90>
 8009a94:	e075      	b.n	8009b82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a96:	4b44      	ldr	r3, [pc, #272]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d020      	beq.n	8009ae0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009a9e:	4b42      	ldr	r3, [pc, #264]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009aa8:	4b3f      	ldr	r3, [pc, #252]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fe ffbd 	bl	8008a2e <USBD_SetClassConfig>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d008      	beq.n	8009ad0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f962 	bl	8009d8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2202      	movs	r2, #2
 8009aca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ace:	e065      	b.n	8009b9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fa25 	bl	8009f20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2203      	movs	r2, #3
 8009ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ade:	e05d      	b.n	8009b9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fa1d 	bl	8009f20 <USBD_CtlSendStatus>
      break;
 8009ae6:	e059      	b.n	8009b9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ae8:	4b2f      	ldr	r3, [pc, #188]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d112      	bne.n	8009b16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009af8:	4b2b      	ldr	r3, [pc, #172]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	461a      	mov	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b02:	4b29      	ldr	r3, [pc, #164]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7fe ffac 	bl	8008a66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa06 	bl	8009f20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b14:	e042      	b.n	8009b9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009b16:	4b24      	ldr	r3, [pc, #144]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d02a      	beq.n	8009b7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7fe ff9a 	bl	8008a66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b32:	4b1d      	ldr	r3, [pc, #116]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7fe ff73 	bl	8008a2e <USBD_SetClassConfig>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00f      	beq.n	8009b72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f918 	bl	8009d8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7fe ff7f 	bl	8008a66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b70:	e014      	b.n	8009b9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f9d4 	bl	8009f20 <USBD_CtlSendStatus>
      break;
 8009b78:	e010      	b.n	8009b9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f9d0 	bl	8009f20 <USBD_CtlSendStatus>
      break;
 8009b80:	e00c      	b.n	8009b9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f900 	bl	8009d8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b8a:	4b07      	ldr	r3, [pc, #28]	; (8009ba8 <USBD_SetConfig+0x150>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7fe ff68 	bl	8008a66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b96:	2303      	movs	r3, #3
 8009b98:	73fb      	strb	r3, [r7, #15]
      break;
 8009b9a:	bf00      	nop
  }

  return ret;
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20001b0c 	.word	0x20001b0c

08009bac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	88db      	ldrh	r3, [r3, #6]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d004      	beq.n	8009bc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f8e2 	bl	8009d8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bc6:	e023      	b.n	8009c10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	dc02      	bgt.n	8009bda <USBD_GetConfig+0x2e>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	dc03      	bgt.n	8009be0 <USBD_GetConfig+0x34>
 8009bd8:	e015      	b.n	8009c06 <USBD_GetConfig+0x5a>
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d00b      	beq.n	8009bf6 <USBD_GetConfig+0x4a>
 8009bde:	e012      	b.n	8009c06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	3308      	adds	r3, #8
 8009bea:	2201      	movs	r2, #1
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f93c 	bl	8009e6c <USBD_CtlSendData>
        break;
 8009bf4:	e00c      	b.n	8009c10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f934 	bl	8009e6c <USBD_CtlSendData>
        break;
 8009c04:	e004      	b.n	8009c10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f8be 	bl	8009d8a <USBD_CtlError>
        break;
 8009c0e:	bf00      	nop
}
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d81e      	bhi.n	8009c6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	88db      	ldrh	r3, [r3, #6]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d004      	beq.n	8009c42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f8a5 	bl	8009d8a <USBD_CtlError>
        break;
 8009c40:	e01a      	b.n	8009c78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	f043 0202 	orr.w	r2, r3, #2
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	330c      	adds	r3, #12
 8009c62:	2202      	movs	r2, #2
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f900 	bl	8009e6c <USBD_CtlSendData>
      break;
 8009c6c:	e004      	b.n	8009c78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f88a 	bl	8009d8a <USBD_CtlError>
      break;
 8009c76:	bf00      	nop
  }
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	885b      	ldrh	r3, [r3, #2]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d107      	bne.n	8009ca2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f940 	bl	8009f20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ca0:	e013      	b.n	8009cca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	885b      	ldrh	r3, [r3, #2]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d10b      	bne.n	8009cc2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	889b      	ldrh	r3, [r3, #4]
 8009cae:	0a1b      	lsrs	r3, r3, #8
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f930 	bl	8009f20 <USBD_CtlSendStatus>
}
 8009cc0:	e003      	b.n	8009cca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f860 	bl	8009d8a <USBD_CtlError>
}
 8009cca:	bf00      	nop
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d80b      	bhi.n	8009d02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	885b      	ldrh	r3, [r3, #2]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d10c      	bne.n	8009d0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f910 	bl	8009f20 <USBD_CtlSendStatus>
      }
      break;
 8009d00:	e004      	b.n	8009d0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f840 	bl	8009d8a <USBD_CtlError>
      break;
 8009d0a:	e000      	b.n	8009d0e <USBD_ClrFeature+0x3c>
      break;
 8009d0c:	bf00      	nop
  }
}
 8009d0e:	bf00      	nop
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	781a      	ldrb	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	781a      	ldrb	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f7ff fa17 	bl	8009174 <SWAPBYTE>
 8009d46:	4603      	mov	r3, r0
 8009d48:	461a      	mov	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3301      	adds	r3, #1
 8009d52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3301      	adds	r3, #1
 8009d58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f7ff fa0a 	bl	8009174 <SWAPBYTE>
 8009d60:	4603      	mov	r3, r0
 8009d62:	461a      	mov	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3301      	adds	r3, #1
 8009d72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7ff f9fd 	bl	8009174 <SWAPBYTE>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	80da      	strh	r2, [r3, #6]
}
 8009d82:	bf00      	nop
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d94:	2180      	movs	r1, #128	; 0x80
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f003 fac6 	bl	800d328 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f003 fac2 	bl	800d328 <USBD_LL_StallEP>
}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009db8:	2300      	movs	r3, #0
 8009dba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d036      	beq.n	8009e30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009dc6:	6938      	ldr	r0, [r7, #16]
 8009dc8:	f000 f836 	bl	8009e38 <USBD_GetLen>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	3301      	adds	r3, #1
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	005b      	lsls	r3, r3, #1
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	4413      	add	r3, r2
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
 8009de8:	3301      	adds	r3, #1
 8009dea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	4413      	add	r3, r2
 8009df2:	2203      	movs	r2, #3
 8009df4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009dfc:	e013      	b.n	8009e26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009dfe:	7dfb      	ldrb	r3, [r7, #23]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	4413      	add	r3, r2
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	7812      	ldrb	r2, [r2, #0]
 8009e08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	613b      	str	r3, [r7, #16]
    idx++;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	3301      	adds	r3, #1
 8009e14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	3301      	adds	r3, #1
 8009e24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e7      	bne.n	8009dfe <USBD_GetString+0x52>
 8009e2e:	e000      	b.n	8009e32 <USBD_GetString+0x86>
    return;
 8009e30:	bf00      	nop
  }
}
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e48:	e005      	b.n	8009e56 <USBD_GetLen+0x1e>
  {
    len++;
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	3301      	adds	r3, #1
 8009e54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1f5      	bne.n	8009e4a <USBD_GetLen+0x12>
  }

  return len;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	2100      	movs	r1, #0
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f003 fad1 	bl	800d43a <USBD_LL_Transmit>

  return USBD_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f003 fac0 	bl	800d43a <USBD_LL_Transmit>

  return USBD_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2203      	movs	r2, #3
 8009ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	2100      	movs	r1, #0
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f003 fac4 	bl	800d47c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	60b9      	str	r1, [r7, #8]
 8009f08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	2100      	movs	r1, #0
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f003 fab3 	bl	800d47c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2204      	movs	r2, #4
 8009f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f30:	2300      	movs	r3, #0
 8009f32:	2200      	movs	r2, #0
 8009f34:	2100      	movs	r1, #0
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f003 fa7f 	bl	800d43a <USBD_LL_Transmit>

  return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2205      	movs	r2, #5
 8009f52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f56:	2300      	movs	r3, #0
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f003 fa8d 	bl	800d47c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <__NVIC_SetPriority>:
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	6039      	str	r1, [r7, #0]
 8009f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	db0a      	blt.n	8009f96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	490c      	ldr	r1, [pc, #48]	; (8009fb8 <__NVIC_SetPriority+0x4c>)
 8009f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f8a:	0112      	lsls	r2, r2, #4
 8009f8c:	b2d2      	uxtb	r2, r2
 8009f8e:	440b      	add	r3, r1
 8009f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009f94:	e00a      	b.n	8009fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	4908      	ldr	r1, [pc, #32]	; (8009fbc <__NVIC_SetPriority+0x50>)
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	f003 030f 	and.w	r3, r3, #15
 8009fa2:	3b04      	subs	r3, #4
 8009fa4:	0112      	lsls	r2, r2, #4
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	440b      	add	r3, r1
 8009faa:	761a      	strb	r2, [r3, #24]
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	e000e100 	.word	0xe000e100
 8009fbc:	e000ed00 	.word	0xe000ed00

08009fc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	f06f 0004 	mvn.w	r0, #4
 8009fca:	f7ff ffcf 	bl	8009f6c <__NVIC_SetPriority>
#endif
}
 8009fce:	bf00      	nop
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fda:	f3ef 8305 	mrs	r3, IPSR
 8009fde:	603b      	str	r3, [r7, #0]
  return(result);
 8009fe0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d003      	beq.n	8009fee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009fe6:	f06f 0305 	mvn.w	r3, #5
 8009fea:	607b      	str	r3, [r7, #4]
 8009fec:	e00c      	b.n	800a008 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009fee:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <osKernelInitialize+0x44>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d105      	bne.n	800a002 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ff6:	4b08      	ldr	r3, [pc, #32]	; (800a018 <osKernelInitialize+0x44>)
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	607b      	str	r3, [r7, #4]
 800a000:	e002      	b.n	800a008 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a002:	f04f 33ff 	mov.w	r3, #4294967295
 800a006:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a008:	687b      	ldr	r3, [r7, #4]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	370c      	adds	r7, #12
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	20001b10 	.word	0x20001b10

0800a01c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a022:	f3ef 8305 	mrs	r3, IPSR
 800a026:	603b      	str	r3, [r7, #0]
  return(result);
 800a028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d003      	beq.n	800a036 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a02e:	f06f 0305 	mvn.w	r3, #5
 800a032:	607b      	str	r3, [r7, #4]
 800a034:	e010      	b.n	800a058 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a036:	4b0b      	ldr	r3, [pc, #44]	; (800a064 <osKernelStart+0x48>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d109      	bne.n	800a052 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a03e:	f7ff ffbf 	bl	8009fc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a042:	4b08      	ldr	r3, [pc, #32]	; (800a064 <osKernelStart+0x48>)
 800a044:	2202      	movs	r2, #2
 800a046:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a048:	f001 f87c 	bl	800b144 <vTaskStartScheduler>
      stat = osOK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	607b      	str	r3, [r7, #4]
 800a050:	e002      	b.n	800a058 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a052:	f04f 33ff 	mov.w	r3, #4294967295
 800a056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a058:	687b      	ldr	r3, [r7, #4]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20001b10 	.word	0x20001b10

0800a068 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08e      	sub	sp, #56	; 0x38
 800a06c:	af04      	add	r7, sp, #16
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a074:	2300      	movs	r3, #0
 800a076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a078:	f3ef 8305 	mrs	r3, IPSR
 800a07c:	617b      	str	r3, [r7, #20]
  return(result);
 800a07e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a080:	2b00      	cmp	r3, #0
 800a082:	d17e      	bne.n	800a182 <osThreadNew+0x11a>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d07b      	beq.n	800a182 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a08a:	2380      	movs	r3, #128	; 0x80
 800a08c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a08e:	2318      	movs	r3, #24
 800a090:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a096:	f04f 33ff 	mov.w	r3, #4294967295
 800a09a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d045      	beq.n	800a12e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <osThreadNew+0x48>
        name = attr->name;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d008      	beq.n	800a0d6 <osThreadNew+0x6e>
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	2b38      	cmp	r3, #56	; 0x38
 800a0c8:	d805      	bhi.n	800a0d6 <osThreadNew+0x6e>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <osThreadNew+0x72>
        return (NULL);
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e054      	b.n	800a184 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	089b      	lsrs	r3, r3, #2
 800a0e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00e      	beq.n	800a110 <osThreadNew+0xa8>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	2bbb      	cmp	r3, #187	; 0xbb
 800a0f8:	d90a      	bls.n	800a110 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d006      	beq.n	800a110 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d002      	beq.n	800a110 <osThreadNew+0xa8>
        mem = 1;
 800a10a:	2301      	movs	r3, #1
 800a10c:	61bb      	str	r3, [r7, #24]
 800a10e:	e010      	b.n	800a132 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10c      	bne.n	800a132 <osThreadNew+0xca>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d108      	bne.n	800a132 <osThreadNew+0xca>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d104      	bne.n	800a132 <osThreadNew+0xca>
          mem = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	61bb      	str	r3, [r7, #24]
 800a12c:	e001      	b.n	800a132 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d110      	bne.n	800a15a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a140:	9202      	str	r2, [sp, #8]
 800a142:	9301      	str	r3, [sp, #4]
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	6a3a      	ldr	r2, [r7, #32]
 800a14c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f000 fe0c 	bl	800ad6c <xTaskCreateStatic>
 800a154:	4603      	mov	r3, r0
 800a156:	613b      	str	r3, [r7, #16]
 800a158:	e013      	b.n	800a182 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d110      	bne.n	800a182 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	b29a      	uxth	r2, r3
 800a164:	f107 0310 	add.w	r3, r7, #16
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 fe57 	bl	800ae26 <xTaskCreate>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d001      	beq.n	800a182 <osThreadNew+0x11a>
            hTask = NULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a182:	693b      	ldr	r3, [r7, #16]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3728      	adds	r7, #40	; 0x28
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a194:	f3ef 8305 	mrs	r3, IPSR
 800a198:	60bb      	str	r3, [r7, #8]
  return(result);
 800a19a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <osDelay+0x1c>
    stat = osErrorISR;
 800a1a0:	f06f 0305 	mvn.w	r3, #5
 800a1a4:	60fb      	str	r3, [r7, #12]
 800a1a6:	e007      	b.n	800a1b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 ff92 	bl	800b0dc <vTaskDelay>
    }
  }

  return (stat);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	4a07      	ldr	r2, [pc, #28]	; (800a1f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a1d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	4a06      	ldr	r2, [pc, #24]	; (800a1f4 <vApplicationGetIdleTaskMemory+0x30>)
 800a1da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2280      	movs	r2, #128	; 0x80
 800a1e0:	601a      	str	r2, [r3, #0]
}
 800a1e2:	bf00      	nop
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	20001b14 	.word	0x20001b14
 800a1f4:	20001bd0 	.word	0x20001bd0

0800a1f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4a07      	ldr	r2, [pc, #28]	; (800a224 <vApplicationGetTimerTaskMemory+0x2c>)
 800a208:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	4a06      	ldr	r2, [pc, #24]	; (800a228 <vApplicationGetTimerTaskMemory+0x30>)
 800a20e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a216:	601a      	str	r2, [r3, #0]
}
 800a218:	bf00      	nop
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	20001dd0 	.word	0x20001dd0
 800a228:	20001e8c 	.word	0x20001e8c

0800a22c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f103 0208 	add.w	r2, r3, #8
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f04f 32ff 	mov.w	r2, #4294967295
 800a244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f103 0208 	add.w	r2, r3, #8
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f103 0208 	add.w	r2, r3, #8
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a27a:	bf00      	nop
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a286:	b480      	push	{r7}
 800a288:	b085      	sub	sp, #20
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	689a      	ldr	r2, [r3, #8]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	601a      	str	r2, [r3, #0]
}
 800a2c2:	bf00      	nop
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b085      	sub	sp, #20
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e4:	d103      	bne.n	800a2ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	e00c      	b.n	800a308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	60fb      	str	r3, [r7, #12]
 800a2f4:	e002      	b.n	800a2fc <vListInsert+0x2e>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	429a      	cmp	r2, r3
 800a306:	d2f6      	bcs.n	800a2f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	601a      	str	r2, [r3, #0]
}
 800a334:	bf00      	nop
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	6892      	ldr	r2, [r2, #8]
 800a356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	6852      	ldr	r2, [r2, #4]
 800a360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d103      	bne.n	800a374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	1e5a      	subs	r2, r3, #1
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a3ba:	bf00      	nop
 800a3bc:	e7fe      	b.n	800a3bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a3be:	f002 f879 	bl	800c4b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ca:	68f9      	ldr	r1, [r7, #12]
 800a3cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3ce:	fb01 f303 	mul.w	r3, r1, r3
 800a3d2:	441a      	add	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	68f9      	ldr	r1, [r7, #12]
 800a3f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3f4:	fb01 f303 	mul.w	r3, r1, r3
 800a3f8:	441a      	add	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	22ff      	movs	r2, #255	; 0xff
 800a402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	22ff      	movs	r2, #255	; 0xff
 800a40a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d114      	bne.n	800a43e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01a      	beq.n	800a452 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3310      	adds	r3, #16
 800a420:	4618      	mov	r0, r3
 800a422:	f001 f929 	bl	800b678 <xTaskRemoveFromEventList>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d012      	beq.n	800a452 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a42c:	4b0c      	ldr	r3, [pc, #48]	; (800a460 <xQueueGenericReset+0xcc>)
 800a42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	e009      	b.n	800a452 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3310      	adds	r3, #16
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff fef2 	bl	800a22c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3324      	adds	r3, #36	; 0x24
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff feed 	bl	800a22c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a452:	f002 f85f 	bl	800c514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a456:	2301      	movs	r3, #1
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	e000ed04 	.word	0xe000ed04

0800a464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08e      	sub	sp, #56	; 0x38
 800a468:	af02      	add	r7, sp, #8
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <xQueueGenericCreateStatic+0x52>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <xQueueGenericCreateStatic+0x56>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e000      	b.n	800a4bc <xQueueGenericCreateStatic+0x58>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	623b      	str	r3, [r7, #32]
}
 800a4d2:	bf00      	nop
 800a4d4:	e7fe      	b.n	800a4d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d102      	bne.n	800a4e2 <xQueueGenericCreateStatic+0x7e>
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <xQueueGenericCreateStatic+0x82>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e000      	b.n	800a4e8 <xQueueGenericCreateStatic+0x84>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10a      	bne.n	800a502 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	61fb      	str	r3, [r7, #28]
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a502:	2350      	movs	r3, #80	; 0x50
 800a504:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b50      	cmp	r3, #80	; 0x50
 800a50a:	d00a      	beq.n	800a522 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	61bb      	str	r3, [r7, #24]
}
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a522:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00d      	beq.n	800a54a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a536:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	4613      	mov	r3, r2
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	68b9      	ldr	r1, [r7, #8]
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 f805 	bl	800a554 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3730      	adds	r7, #48	; 0x30
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d103      	bne.n	800a570 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	e002      	b.n	800a576 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a582:	2101      	movs	r1, #1
 800a584:	69b8      	ldr	r0, [r7, #24]
 800a586:	f7ff ff05 	bl	800a394 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	78fa      	ldrb	r2, [r7, #3]
 800a58e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a592:	bf00      	nop
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08e      	sub	sp, #56	; 0x38
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <xQueueGenericSend+0x32>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d103      	bne.n	800a5dc <xQueueGenericSend+0x40>
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <xQueueGenericSend+0x44>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e000      	b.n	800a5e2 <xQueueGenericSend+0x46>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <xQueueGenericSend+0x60>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5f8:	bf00      	nop
 800a5fa:	e7fe      	b.n	800a5fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d103      	bne.n	800a60a <xQueueGenericSend+0x6e>
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a606:	2b01      	cmp	r3, #1
 800a608:	d101      	bne.n	800a60e <xQueueGenericSend+0x72>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <xQueueGenericSend+0x74>
 800a60e:	2300      	movs	r3, #0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <xQueueGenericSend+0x8e>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	623b      	str	r3, [r7, #32]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a62a:	f001 f9e7 	bl	800b9fc <xTaskGetSchedulerState>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d102      	bne.n	800a63a <xQueueGenericSend+0x9e>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <xQueueGenericSend+0xa2>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e000      	b.n	800a640 <xQueueGenericSend+0xa4>
 800a63e:	2300      	movs	r3, #0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <xQueueGenericSend+0xbe>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	61fb      	str	r3, [r7, #28]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a65a:	f001 ff2b 	bl	800c4b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a666:	429a      	cmp	r2, r3
 800a668:	d302      	bcc.n	800a670 <xQueueGenericSend+0xd4>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d129      	bne.n	800a6c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a676:	f000 fa0b 	bl	800aa90 <prvCopyDataToQueue>
 800a67a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	d010      	beq.n	800a6a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	3324      	adds	r3, #36	; 0x24
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fff5 	bl	800b678 <xTaskRemoveFromEventList>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d013      	beq.n	800a6bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a694:	4b3f      	ldr	r3, [pc, #252]	; (800a794 <xQueueGenericSend+0x1f8>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	e00a      	b.n	800a6bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d007      	beq.n	800a6bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6ac:	4b39      	ldr	r3, [pc, #228]	; (800a794 <xQueueGenericSend+0x1f8>)
 800a6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6bc:	f001 ff2a 	bl	800c514 <vPortExitCritical>
				return pdPASS;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e063      	b.n	800a78c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d103      	bne.n	800a6d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6ca:	f001 ff23 	bl	800c514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e05c      	b.n	800a78c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d8:	f107 0314 	add.w	r3, r7, #20
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f001 f82f 	bl	800b740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e6:	f001 ff15 	bl	800c514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6ea:	f000 fd9b 	bl	800b224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ee:	f001 fee1 	bl	800c4b4 <vPortEnterCritical>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f8:	b25b      	sxtb	r3, r3
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fe:	d103      	bne.n	800a708 <xQueueGenericSend+0x16c>
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a70e:	b25b      	sxtb	r3, r3
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a714:	d103      	bne.n	800a71e <xQueueGenericSend+0x182>
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a71e:	f001 fef9 	bl	800c514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a722:	1d3a      	adds	r2, r7, #4
 800a724:	f107 0314 	add.w	r3, r7, #20
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f001 f81e 	bl	800b76c <xTaskCheckForTimeOut>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d124      	bne.n	800a780 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a738:	f000 faa2 	bl	800ac80 <prvIsQueueFull>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d018      	beq.n	800a774 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	3310      	adds	r3, #16
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	4611      	mov	r1, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 ff44 	bl	800b5d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a752:	f000 fa2d 	bl	800abb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a756:	f000 fd73 	bl	800b240 <xTaskResumeAll>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f47f af7c 	bne.w	800a65a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a762:	4b0c      	ldr	r3, [pc, #48]	; (800a794 <xQueueGenericSend+0x1f8>)
 800a764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	e772      	b.n	800a65a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a776:	f000 fa1b 	bl	800abb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a77a:	f000 fd61 	bl	800b240 <xTaskResumeAll>
 800a77e:	e76c      	b.n	800a65a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a782:	f000 fa15 	bl	800abb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a786:	f000 fd5b 	bl	800b240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a78a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3738      	adds	r7, #56	; 0x38
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	e000ed04 	.word	0xe000ed04

0800a798 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b090      	sub	sp, #64	; 0x40
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10a      	bne.n	800a7c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d103      	bne.n	800a7d4 <xQueueGenericSendFromISR+0x3c>
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <xQueueGenericSendFromISR+0x40>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e000      	b.n	800a7da <xQueueGenericSendFromISR+0x42>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10a      	bne.n	800a7f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d103      	bne.n	800a802 <xQueueGenericSendFromISR+0x6a>
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <xQueueGenericSendFromISR+0x6e>
 800a802:	2301      	movs	r3, #1
 800a804:	e000      	b.n	800a808 <xQueueGenericSendFromISR+0x70>
 800a806:	2300      	movs	r3, #0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10a      	bne.n	800a822 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	623b      	str	r3, [r7, #32]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a822:	f001 ff29 	bl	800c678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a826:	f3ef 8211 	mrs	r2, BASEPRI
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	61fa      	str	r2, [r7, #28]
 800a83c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a83e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a840:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d302      	bcc.n	800a854 <xQueueGenericSendFromISR+0xbc>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b02      	cmp	r3, #2
 800a852:	d12f      	bne.n	800a8b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a862:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	68b9      	ldr	r1, [r7, #8]
 800a868:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a86a:	f000 f911 	bl	800aa90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a86e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a876:	d112      	bne.n	800a89e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d016      	beq.n	800a8ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a882:	3324      	adds	r3, #36	; 0x24
 800a884:	4618      	mov	r0, r3
 800a886:	f000 fef7 	bl	800b678 <xTaskRemoveFromEventList>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00e      	beq.n	800a8ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00b      	beq.n	800a8ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	e007      	b.n	800a8ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a89e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	b25a      	sxtb	r2, r3
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a8b2:	e001      	b.n	800a8b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3740      	adds	r7, #64	; 0x40
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
	...

0800a8d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08c      	sub	sp, #48	; 0x30
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10a      	bne.n	800a900 <xQueueReceive+0x30>
	__asm volatile
 800a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	623b      	str	r3, [r7, #32]
}
 800a8fc:	bf00      	nop
 800a8fe:	e7fe      	b.n	800a8fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d103      	bne.n	800a90e <xQueueReceive+0x3e>
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d101      	bne.n	800a912 <xQueueReceive+0x42>
 800a90e:	2301      	movs	r3, #1
 800a910:	e000      	b.n	800a914 <xQueueReceive+0x44>
 800a912:	2300      	movs	r3, #0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10a      	bne.n	800a92e <xQueueReceive+0x5e>
	__asm volatile
 800a918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	61fb      	str	r3, [r7, #28]
}
 800a92a:	bf00      	nop
 800a92c:	e7fe      	b.n	800a92c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a92e:	f001 f865 	bl	800b9fc <xTaskGetSchedulerState>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <xQueueReceive+0x6e>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <xQueueReceive+0x72>
 800a93e:	2301      	movs	r3, #1
 800a940:	e000      	b.n	800a944 <xQueueReceive+0x74>
 800a942:	2300      	movs	r3, #0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10a      	bne.n	800a95e <xQueueReceive+0x8e>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	61bb      	str	r3, [r7, #24]
}
 800a95a:	bf00      	nop
 800a95c:	e7fe      	b.n	800a95c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a95e:	f001 fda9 	bl	800c4b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a966:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d01f      	beq.n	800a9ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a96e:	68b9      	ldr	r1, [r7, #8]
 800a970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a972:	f000 f8f7 	bl	800ab64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	1e5a      	subs	r2, r3, #1
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00f      	beq.n	800a9a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	3310      	adds	r3, #16
 800a98a:	4618      	mov	r0, r3
 800a98c:	f000 fe74 	bl	800b678 <xTaskRemoveFromEventList>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d007      	beq.n	800a9a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a996:	4b3d      	ldr	r3, [pc, #244]	; (800aa8c <xQueueReceive+0x1bc>)
 800a998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9a6:	f001 fdb5 	bl	800c514 <vPortExitCritical>
				return pdPASS;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e069      	b.n	800aa82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d103      	bne.n	800a9bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9b4:	f001 fdae 	bl	800c514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e062      	b.n	800aa82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d106      	bne.n	800a9d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9c2:	f107 0310 	add.w	r3, r7, #16
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 feba 	bl	800b740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9d0:	f001 fda0 	bl	800c514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9d4:	f000 fc26 	bl	800b224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9d8:	f001 fd6c 	bl	800c4b4 <vPortEnterCritical>
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9e2:	b25b      	sxtb	r3, r3
 800a9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e8:	d103      	bne.n	800a9f2 <xQueueReceive+0x122>
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9f8:	b25b      	sxtb	r3, r3
 800a9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fe:	d103      	bne.n	800aa08 <xQueueReceive+0x138>
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa08:	f001 fd84 	bl	800c514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa0c:	1d3a      	adds	r2, r7, #4
 800aa0e:	f107 0310 	add.w	r3, r7, #16
 800aa12:	4611      	mov	r1, r2
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fea9 	bl	800b76c <xTaskCheckForTimeOut>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d123      	bne.n	800aa68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa22:	f000 f917 	bl	800ac54 <prvIsQueueEmpty>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d017      	beq.n	800aa5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	3324      	adds	r3, #36	; 0x24
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	4611      	mov	r1, r2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 fdcf 	bl	800b5d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3c:	f000 f8b8 	bl	800abb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa40:	f000 fbfe 	bl	800b240 <xTaskResumeAll>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d189      	bne.n	800a95e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa4a:	4b10      	ldr	r3, [pc, #64]	; (800aa8c <xQueueReceive+0x1bc>)
 800aa4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	e780      	b.n	800a95e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa5e:	f000 f8a7 	bl	800abb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa62:	f000 fbed 	bl	800b240 <xTaskResumeAll>
 800aa66:	e77a      	b.n	800a95e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa6a:	f000 f8a1 	bl	800abb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa6e:	f000 fbe7 	bl	800b240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa74:	f000 f8ee 	bl	800ac54 <prvIsQueueEmpty>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f43f af6f 	beq.w	800a95e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3730      	adds	r7, #48	; 0x30
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	e000ed04 	.word	0xe000ed04

0800aa90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10d      	bne.n	800aaca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d14d      	bne.n	800ab52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 ffbc 	bl	800ba38 <xTaskPriorityDisinherit>
 800aac0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	609a      	str	r2, [r3, #8]
 800aac8:	e043      	b.n	800ab52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d119      	bne.n	800ab04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6858      	ldr	r0, [r3, #4]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad8:	461a      	mov	r2, r3
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	f002 feb7 	bl	800d84e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae8:	441a      	add	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d32b      	bcc.n	800ab52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	605a      	str	r2, [r3, #4]
 800ab02:	e026      	b.n	800ab52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	68d8      	ldr	r0, [r3, #12]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	f002 fe9d 	bl	800d84e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	68da      	ldr	r2, [r3, #12]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	425b      	negs	r3, r3
 800ab1e:	441a      	add	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d207      	bcs.n	800ab40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	689a      	ldr	r2, [r3, #8]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab38:	425b      	negs	r3, r3
 800ab3a:	441a      	add	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d105      	bne.n	800ab52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab5a:	697b      	ldr	r3, [r7, #20]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3718      	adds	r7, #24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d018      	beq.n	800aba8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68da      	ldr	r2, [r3, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7e:	441a      	add	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68da      	ldr	r2, [r3, #12]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d303      	bcc.n	800ab98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68d9      	ldr	r1, [r3, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba0:	461a      	mov	r2, r3
 800aba2:	6838      	ldr	r0, [r7, #0]
 800aba4:	f002 fe53 	bl	800d84e <memcpy>
	}
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abb8:	f001 fc7c 	bl	800c4b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abc4:	e011      	b.n	800abea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d012      	beq.n	800abf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3324      	adds	r3, #36	; 0x24
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 fd50 	bl	800b678 <xTaskRemoveFromEventList>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d001      	beq.n	800abe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abde:	f000 fe27 	bl	800b830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	3b01      	subs	r3, #1
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	dce9      	bgt.n	800abc6 <prvUnlockQueue+0x16>
 800abf2:	e000      	b.n	800abf6 <prvUnlockQueue+0x46>
					break;
 800abf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	22ff      	movs	r2, #255	; 0xff
 800abfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abfe:	f001 fc89 	bl	800c514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac02:	f001 fc57 	bl	800c4b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac0e:	e011      	b.n	800ac34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d012      	beq.n	800ac3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3310      	adds	r3, #16
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 fd2b 	bl	800b678 <xTaskRemoveFromEventList>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac28:	f000 fe02 	bl	800b830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dce9      	bgt.n	800ac10 <prvUnlockQueue+0x60>
 800ac3c:	e000      	b.n	800ac40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	22ff      	movs	r2, #255	; 0xff
 800ac44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac48:	f001 fc64 	bl	800c514 <vPortExitCritical>
}
 800ac4c:	bf00      	nop
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac5c:	f001 fc2a 	bl	800c4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	e001      	b.n	800ac72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac72:	f001 fc4f 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800ac76:	68fb      	ldr	r3, [r7, #12]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac88:	f001 fc14 	bl	800c4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d102      	bne.n	800ac9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	e001      	b.n	800aca2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aca2:	f001 fc37 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800aca6:	68fb      	ldr	r3, [r7, #12]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acba:	2300      	movs	r3, #0
 800acbc:	60fb      	str	r3, [r7, #12]
 800acbe:	e014      	b.n	800acea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800acc0:	4a0f      	ldr	r2, [pc, #60]	; (800ad00 <vQueueAddToRegistry+0x50>)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10b      	bne.n	800ace4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800accc:	490c      	ldr	r1, [pc, #48]	; (800ad00 <vQueueAddToRegistry+0x50>)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acd6:	4a0a      	ldr	r2, [pc, #40]	; (800ad00 <vQueueAddToRegistry+0x50>)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	4413      	add	r3, r2
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ace2:	e006      	b.n	800acf2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	3301      	adds	r3, #1
 800ace8:	60fb      	str	r3, [r7, #12]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b07      	cmp	r3, #7
 800acee:	d9e7      	bls.n	800acc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	2000228c 	.word	0x2000228c

0800ad04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad14:	f001 fbce 	bl	800c4b4 <vPortEnterCritical>
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad1e:	b25b      	sxtb	r3, r3
 800ad20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad24:	d103      	bne.n	800ad2e <vQueueWaitForMessageRestricted+0x2a>
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad34:	b25b      	sxtb	r3, r3
 800ad36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3a:	d103      	bne.n	800ad44 <vQueueWaitForMessageRestricted+0x40>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad44:	f001 fbe6 	bl	800c514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d106      	bne.n	800ad5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	3324      	adds	r3, #36	; 0x24
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	68b9      	ldr	r1, [r7, #8]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 fc61 	bl	800b620 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad5e:	6978      	ldr	r0, [r7, #20]
 800ad60:	f7ff ff26 	bl	800abb0 <prvUnlockQueue>
	}
 800ad64:	bf00      	nop
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08e      	sub	sp, #56	; 0x38
 800ad70:	af04      	add	r7, sp, #16
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	623b      	str	r3, [r7, #32]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10a      	bne.n	800adb2 <xTaskCreateStatic+0x46>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	61fb      	str	r3, [r7, #28]
}
 800adae:	bf00      	nop
 800adb0:	e7fe      	b.n	800adb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adb2:	23bc      	movs	r3, #188	; 0xbc
 800adb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2bbc      	cmp	r3, #188	; 0xbc
 800adba:	d00a      	beq.n	800add2 <xTaskCreateStatic+0x66>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	61bb      	str	r3, [r7, #24]
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800add2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01e      	beq.n	800ae18 <xTaskCreateStatic+0xac>
 800adda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800addc:	2b00      	cmp	r3, #0
 800adde:	d01b      	beq.n	800ae18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ade8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adec:	2202      	movs	r2, #2
 800adee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adf2:	2300      	movs	r3, #0
 800adf4:	9303      	str	r3, [sp, #12]
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	9302      	str	r3, [sp, #8]
 800adfa:	f107 0314 	add.w	r3, r7, #20
 800adfe:	9301      	str	r3, [sp, #4]
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 f850 	bl	800aeb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae12:	f000 f8f3 	bl	800affc <prvAddNewTaskToReadyList>
 800ae16:	e001      	b.n	800ae1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae1c:	697b      	ldr	r3, [r7, #20]
	}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3728      	adds	r7, #40	; 0x28
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b08c      	sub	sp, #48	; 0x30
 800ae2a:	af04      	add	r7, sp, #16
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	603b      	str	r3, [r7, #0]
 800ae32:	4613      	mov	r3, r2
 800ae34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae36:	88fb      	ldrh	r3, [r7, #6]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f001 fc5c 	bl	800c6f8 <pvPortMalloc>
 800ae40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00e      	beq.n	800ae66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae48:	20bc      	movs	r0, #188	; 0xbc
 800ae4a:	f001 fc55 	bl	800c6f8 <pvPortMalloc>
 800ae4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	631a      	str	r2, [r3, #48]	; 0x30
 800ae5c:	e005      	b.n	800ae6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae5e:	6978      	ldr	r0, [r7, #20]
 800ae60:	f001 fd16 	bl	800c890 <vPortFree>
 800ae64:	e001      	b.n	800ae6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d017      	beq.n	800aea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae78:	88fa      	ldrh	r2, [r7, #6]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9303      	str	r3, [sp, #12]
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	9302      	str	r3, [sp, #8]
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	68b9      	ldr	r1, [r7, #8]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 f80e 	bl	800aeb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae94:	69f8      	ldr	r0, [r7, #28]
 800ae96:	f000 f8b1 	bl	800affc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	61bb      	str	r3, [r7, #24]
 800ae9e:	e002      	b.n	800aea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aea0:	f04f 33ff 	mov.w	r3, #4294967295
 800aea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aea6:	69bb      	ldr	r3, [r7, #24]
	}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3720      	adds	r7, #32
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	461a      	mov	r2, r3
 800aec8:	21a5      	movs	r1, #165	; 0xa5
 800aeca:	f002 fcce 	bl	800d86a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aed8:	3b01      	subs	r3, #1
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	f023 0307 	bic.w	r3, r3, #7
 800aee6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00a      	beq.n	800af08 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	617b      	str	r3, [r7, #20]
}
 800af04:	bf00      	nop
 800af06:	e7fe      	b.n	800af06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d01f      	beq.n	800af4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af0e:	2300      	movs	r3, #0
 800af10:	61fb      	str	r3, [r7, #28]
 800af12:	e012      	b.n	800af3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	4413      	add	r3, r2
 800af1a:	7819      	ldrb	r1, [r3, #0]
 800af1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	4413      	add	r3, r2
 800af22:	3334      	adds	r3, #52	; 0x34
 800af24:	460a      	mov	r2, r1
 800af26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	4413      	add	r3, r2
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d006      	beq.n	800af42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	3301      	adds	r3, #1
 800af38:	61fb      	str	r3, [r7, #28]
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	2b0f      	cmp	r3, #15
 800af3e:	d9e9      	bls.n	800af14 <prvInitialiseNewTask+0x64>
 800af40:	e000      	b.n	800af44 <prvInitialiseNewTask+0x94>
			{
				break;
 800af42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	2200      	movs	r2, #0
 800af48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af4c:	e003      	b.n	800af56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	2200      	movs	r2, #0
 800af52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	2b37      	cmp	r3, #55	; 0x37
 800af5a:	d901      	bls.n	800af60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af5c:	2337      	movs	r3, #55	; 0x37
 800af5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	2200      	movs	r2, #0
 800af70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	3304      	adds	r3, #4
 800af76:	4618      	mov	r0, r3
 800af78:	f7ff f978 	bl	800a26c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	3318      	adds	r3, #24
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff f973 	bl	800a26c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	2200      	movs	r2, #0
 800afa0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	2200      	movs	r2, #0
 800afa8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	3354      	adds	r3, #84	; 0x54
 800afb0:	2260      	movs	r2, #96	; 0x60
 800afb2:	2100      	movs	r1, #0
 800afb4:	4618      	mov	r0, r3
 800afb6:	f002 fc58 	bl	800d86a <memset>
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	4a0c      	ldr	r2, [pc, #48]	; (800aff0 <prvInitialiseNewTask+0x140>)
 800afbe:	659a      	str	r2, [r3, #88]	; 0x58
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	4a0c      	ldr	r2, [pc, #48]	; (800aff4 <prvInitialiseNewTask+0x144>)
 800afc4:	65da      	str	r2, [r3, #92]	; 0x5c
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	4a0b      	ldr	r2, [pc, #44]	; (800aff8 <prvInitialiseNewTask+0x148>)
 800afca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	68f9      	ldr	r1, [r7, #12]
 800afd0:	69b8      	ldr	r0, [r7, #24]
 800afd2:	f001 f941 	bl	800c258 <pxPortInitialiseStack>
 800afd6:	4602      	mov	r2, r0
 800afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afe8:	bf00      	nop
 800afea:	3720      	adds	r7, #32
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	0801103c 	.word	0x0801103c
 800aff4:	0801105c 	.word	0x0801105c
 800aff8:	0801101c 	.word	0x0801101c

0800affc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b004:	f001 fa56 	bl	800c4b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b008:	4b2d      	ldr	r3, [pc, #180]	; (800b0c0 <prvAddNewTaskToReadyList+0xc4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3301      	adds	r3, #1
 800b00e:	4a2c      	ldr	r2, [pc, #176]	; (800b0c0 <prvAddNewTaskToReadyList+0xc4>)
 800b010:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b012:	4b2c      	ldr	r3, [pc, #176]	; (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d109      	bne.n	800b02e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b01a:	4a2a      	ldr	r2, [pc, #168]	; (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b020:	4b27      	ldr	r3, [pc, #156]	; (800b0c0 <prvAddNewTaskToReadyList+0xc4>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d110      	bne.n	800b04a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b028:	f000 fc26 	bl	800b878 <prvInitialiseTaskLists>
 800b02c:	e00d      	b.n	800b04a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b02e:	4b26      	ldr	r3, [pc, #152]	; (800b0c8 <prvAddNewTaskToReadyList+0xcc>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d109      	bne.n	800b04a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b036:	4b23      	ldr	r3, [pc, #140]	; (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b040:	429a      	cmp	r2, r3
 800b042:	d802      	bhi.n	800b04a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b044:	4a1f      	ldr	r2, [pc, #124]	; (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b04a:	4b20      	ldr	r3, [pc, #128]	; (800b0cc <prvAddNewTaskToReadyList+0xd0>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3301      	adds	r3, #1
 800b050:	4a1e      	ldr	r2, [pc, #120]	; (800b0cc <prvAddNewTaskToReadyList+0xd0>)
 800b052:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b054:	4b1d      	ldr	r3, [pc, #116]	; (800b0cc <prvAddNewTaskToReadyList+0xd0>)
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b060:	4b1b      	ldr	r3, [pc, #108]	; (800b0d0 <prvAddNewTaskToReadyList+0xd4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	429a      	cmp	r2, r3
 800b066:	d903      	bls.n	800b070 <prvAddNewTaskToReadyList+0x74>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	4a18      	ldr	r2, [pc, #96]	; (800b0d0 <prvAddNewTaskToReadyList+0xd4>)
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b074:	4613      	mov	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4a15      	ldr	r2, [pc, #84]	; (800b0d4 <prvAddNewTaskToReadyList+0xd8>)
 800b07e:	441a      	add	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	3304      	adds	r3, #4
 800b084:	4619      	mov	r1, r3
 800b086:	4610      	mov	r0, r2
 800b088:	f7ff f8fd 	bl	800a286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b08c:	f001 fa42 	bl	800c514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b090:	4b0d      	ldr	r3, [pc, #52]	; (800b0c8 <prvAddNewTaskToReadyList+0xcc>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00e      	beq.n	800b0b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b098:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d207      	bcs.n	800b0b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0a6:	4b0c      	ldr	r3, [pc, #48]	; (800b0d8 <prvAddNewTaskToReadyList+0xdc>)
 800b0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0b6:	bf00      	nop
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	200027a0 	.word	0x200027a0
 800b0c4:	200022cc 	.word	0x200022cc
 800b0c8:	200027ac 	.word	0x200027ac
 800b0cc:	200027bc 	.word	0x200027bc
 800b0d0:	200027a8 	.word	0x200027a8
 800b0d4:	200022d0 	.word	0x200022d0
 800b0d8:	e000ed04 	.word	0xe000ed04

0800b0dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d017      	beq.n	800b11e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0ee:	4b13      	ldr	r3, [pc, #76]	; (800b13c <vTaskDelay+0x60>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00a      	beq.n	800b10c <vTaskDelay+0x30>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	60bb      	str	r3, [r7, #8]
}
 800b108:	bf00      	nop
 800b10a:	e7fe      	b.n	800b10a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b10c:	f000 f88a 	bl	800b224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b110:	2100      	movs	r1, #0
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fcfe 	bl	800bb14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b118:	f000 f892 	bl	800b240 <xTaskResumeAll>
 800b11c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d107      	bne.n	800b134 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b124:	4b06      	ldr	r3, [pc, #24]	; (800b140 <vTaskDelay+0x64>)
 800b126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b134:	bf00      	nop
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	200027c8 	.word	0x200027c8
 800b140:	e000ed04 	.word	0xe000ed04

0800b144 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08a      	sub	sp, #40	; 0x28
 800b148:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b152:	463a      	mov	r2, r7
 800b154:	1d39      	adds	r1, r7, #4
 800b156:	f107 0308 	add.w	r3, r7, #8
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff f832 	bl	800a1c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	9202      	str	r2, [sp, #8]
 800b168:	9301      	str	r3, [sp, #4]
 800b16a:	2300      	movs	r3, #0
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	2300      	movs	r3, #0
 800b170:	460a      	mov	r2, r1
 800b172:	4924      	ldr	r1, [pc, #144]	; (800b204 <vTaskStartScheduler+0xc0>)
 800b174:	4824      	ldr	r0, [pc, #144]	; (800b208 <vTaskStartScheduler+0xc4>)
 800b176:	f7ff fdf9 	bl	800ad6c <xTaskCreateStatic>
 800b17a:	4603      	mov	r3, r0
 800b17c:	4a23      	ldr	r2, [pc, #140]	; (800b20c <vTaskStartScheduler+0xc8>)
 800b17e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b180:	4b22      	ldr	r3, [pc, #136]	; (800b20c <vTaskStartScheduler+0xc8>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b188:	2301      	movs	r3, #1
 800b18a:	617b      	str	r3, [r7, #20]
 800b18c:	e001      	b.n	800b192 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b18e:	2300      	movs	r3, #0
 800b190:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d102      	bne.n	800b19e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b198:	f000 fd10 	bl	800bbbc <xTimerCreateTimerTask>
 800b19c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d11b      	bne.n	800b1dc <vTaskStartScheduler+0x98>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	613b      	str	r3, [r7, #16]
}
 800b1b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1b8:	4b15      	ldr	r3, [pc, #84]	; (800b210 <vTaskStartScheduler+0xcc>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3354      	adds	r3, #84	; 0x54
 800b1be:	4a15      	ldr	r2, [pc, #84]	; (800b214 <vTaskStartScheduler+0xd0>)
 800b1c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1c2:	4b15      	ldr	r3, [pc, #84]	; (800b218 <vTaskStartScheduler+0xd4>)
 800b1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1ca:	4b14      	ldr	r3, [pc, #80]	; (800b21c <vTaskStartScheduler+0xd8>)
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1d0:	4b13      	ldr	r3, [pc, #76]	; (800b220 <vTaskStartScheduler+0xdc>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1d6:	f001 f8cb 	bl	800c370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1da:	e00e      	b.n	800b1fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e2:	d10a      	bne.n	800b1fa <vTaskStartScheduler+0xb6>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	60fb      	str	r3, [r7, #12]
}
 800b1f6:	bf00      	nop
 800b1f8:	e7fe      	b.n	800b1f8 <vTaskStartScheduler+0xb4>
}
 800b1fa:	bf00      	nop
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	08010f1c 	.word	0x08010f1c
 800b208:	0800b849 	.word	0x0800b849
 800b20c:	200027c4 	.word	0x200027c4
 800b210:	200022cc 	.word	0x200022cc
 800b214:	20000110 	.word	0x20000110
 800b218:	200027c0 	.word	0x200027c0
 800b21c:	200027ac 	.word	0x200027ac
 800b220:	200027a4 	.word	0x200027a4

0800b224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b224:	b480      	push	{r7}
 800b226:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b228:	4b04      	ldr	r3, [pc, #16]	; (800b23c <vTaskSuspendAll+0x18>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3301      	adds	r3, #1
 800b22e:	4a03      	ldr	r2, [pc, #12]	; (800b23c <vTaskSuspendAll+0x18>)
 800b230:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b232:	bf00      	nop
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	200027c8 	.word	0x200027c8

0800b240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b24e:	4b42      	ldr	r3, [pc, #264]	; (800b358 <xTaskResumeAll+0x118>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d10a      	bne.n	800b26c <xTaskResumeAll+0x2c>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	603b      	str	r3, [r7, #0]
}
 800b268:	bf00      	nop
 800b26a:	e7fe      	b.n	800b26a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b26c:	f001 f922 	bl	800c4b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b270:	4b39      	ldr	r3, [pc, #228]	; (800b358 <xTaskResumeAll+0x118>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3b01      	subs	r3, #1
 800b276:	4a38      	ldr	r2, [pc, #224]	; (800b358 <xTaskResumeAll+0x118>)
 800b278:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b27a:	4b37      	ldr	r3, [pc, #220]	; (800b358 <xTaskResumeAll+0x118>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d162      	bne.n	800b348 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b282:	4b36      	ldr	r3, [pc, #216]	; (800b35c <xTaskResumeAll+0x11c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d05e      	beq.n	800b348 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b28a:	e02f      	b.n	800b2ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b28c:	4b34      	ldr	r3, [pc, #208]	; (800b360 <xTaskResumeAll+0x120>)
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3318      	adds	r3, #24
 800b298:	4618      	mov	r0, r3
 800b29a:	f7ff f851 	bl	800a340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff f84c 	bl	800a340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ac:	4b2d      	ldr	r3, [pc, #180]	; (800b364 <xTaskResumeAll+0x124>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d903      	bls.n	800b2bc <xTaskResumeAll+0x7c>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b8:	4a2a      	ldr	r2, [pc, #168]	; (800b364 <xTaskResumeAll+0x124>)
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4a27      	ldr	r2, [pc, #156]	; (800b368 <xTaskResumeAll+0x128>)
 800b2ca:	441a      	add	r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	4610      	mov	r0, r2
 800b2d4:	f7fe ffd7 	bl	800a286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2dc:	4b23      	ldr	r3, [pc, #140]	; (800b36c <xTaskResumeAll+0x12c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d302      	bcc.n	800b2ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b2e6:	4b22      	ldr	r3, [pc, #136]	; (800b370 <xTaskResumeAll+0x130>)
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2ec:	4b1c      	ldr	r3, [pc, #112]	; (800b360 <xTaskResumeAll+0x120>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1cb      	bne.n	800b28c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2fa:	f000 fb5f 	bl	800b9bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2fe:	4b1d      	ldr	r3, [pc, #116]	; (800b374 <xTaskResumeAll+0x134>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d010      	beq.n	800b32c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b30a:	f000 f847 	bl	800b39c <xTaskIncrementTick>
 800b30e:	4603      	mov	r3, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b314:	4b16      	ldr	r3, [pc, #88]	; (800b370 <xTaskResumeAll+0x130>)
 800b316:	2201      	movs	r2, #1
 800b318:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3b01      	subs	r3, #1
 800b31e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1f1      	bne.n	800b30a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b326:	4b13      	ldr	r3, [pc, #76]	; (800b374 <xTaskResumeAll+0x134>)
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b32c:	4b10      	ldr	r3, [pc, #64]	; (800b370 <xTaskResumeAll+0x130>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d009      	beq.n	800b348 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b334:	2301      	movs	r3, #1
 800b336:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b338:	4b0f      	ldr	r3, [pc, #60]	; (800b378 <xTaskResumeAll+0x138>)
 800b33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b33e:	601a      	str	r2, [r3, #0]
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b348:	f001 f8e4 	bl	800c514 <vPortExitCritical>

	return xAlreadyYielded;
 800b34c:	68bb      	ldr	r3, [r7, #8]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	200027c8 	.word	0x200027c8
 800b35c:	200027a0 	.word	0x200027a0
 800b360:	20002760 	.word	0x20002760
 800b364:	200027a8 	.word	0x200027a8
 800b368:	200022d0 	.word	0x200022d0
 800b36c:	200022cc 	.word	0x200022cc
 800b370:	200027b4 	.word	0x200027b4
 800b374:	200027b0 	.word	0x200027b0
 800b378:	e000ed04 	.word	0xe000ed04

0800b37c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b382:	4b05      	ldr	r3, [pc, #20]	; (800b398 <xTaskGetTickCount+0x1c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b388:	687b      	ldr	r3, [r7, #4]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	370c      	adds	r7, #12
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	200027a4 	.word	0x200027a4

0800b39c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3a6:	4b4f      	ldr	r3, [pc, #316]	; (800b4e4 <xTaskIncrementTick+0x148>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f040 808f 	bne.w	800b4ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3b0:	4b4d      	ldr	r3, [pc, #308]	; (800b4e8 <xTaskIncrementTick+0x14c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3b8:	4a4b      	ldr	r2, [pc, #300]	; (800b4e8 <xTaskIncrementTick+0x14c>)
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d120      	bne.n	800b406 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3c4:	4b49      	ldr	r3, [pc, #292]	; (800b4ec <xTaskIncrementTick+0x150>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00a      	beq.n	800b3e4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	603b      	str	r3, [r7, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	e7fe      	b.n	800b3e2 <xTaskIncrementTick+0x46>
 800b3e4:	4b41      	ldr	r3, [pc, #260]	; (800b4ec <xTaskIncrementTick+0x150>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	4b41      	ldr	r3, [pc, #260]	; (800b4f0 <xTaskIncrementTick+0x154>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a3f      	ldr	r2, [pc, #252]	; (800b4ec <xTaskIncrementTick+0x150>)
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	4a3f      	ldr	r2, [pc, #252]	; (800b4f0 <xTaskIncrementTick+0x154>)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6013      	str	r3, [r2, #0]
 800b3f8:	4b3e      	ldr	r3, [pc, #248]	; (800b4f4 <xTaskIncrementTick+0x158>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	4a3d      	ldr	r2, [pc, #244]	; (800b4f4 <xTaskIncrementTick+0x158>)
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	f000 fadb 	bl	800b9bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b406:	4b3c      	ldr	r3, [pc, #240]	; (800b4f8 <xTaskIncrementTick+0x15c>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	693a      	ldr	r2, [r7, #16]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d349      	bcc.n	800b4a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b410:	4b36      	ldr	r3, [pc, #216]	; (800b4ec <xTaskIncrementTick+0x150>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d104      	bne.n	800b424 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b41a:	4b37      	ldr	r3, [pc, #220]	; (800b4f8 <xTaskIncrementTick+0x15c>)
 800b41c:	f04f 32ff 	mov.w	r2, #4294967295
 800b420:	601a      	str	r2, [r3, #0]
					break;
 800b422:	e03f      	b.n	800b4a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b424:	4b31      	ldr	r3, [pc, #196]	; (800b4ec <xTaskIncrementTick+0x150>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d203      	bcs.n	800b444 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b43c:	4a2e      	ldr	r2, [pc, #184]	; (800b4f8 <xTaskIncrementTick+0x15c>)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b442:	e02f      	b.n	800b4a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	3304      	adds	r3, #4
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe ff79 	bl	800a340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	2b00      	cmp	r3, #0
 800b454:	d004      	beq.n	800b460 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	3318      	adds	r3, #24
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe ff70 	bl	800a340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b464:	4b25      	ldr	r3, [pc, #148]	; (800b4fc <xTaskIncrementTick+0x160>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d903      	bls.n	800b474 <xTaskIncrementTick+0xd8>
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	4a22      	ldr	r2, [pc, #136]	; (800b4fc <xTaskIncrementTick+0x160>)
 800b472:	6013      	str	r3, [r2, #0]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b478:	4613      	mov	r3, r2
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	4413      	add	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4a1f      	ldr	r2, [pc, #124]	; (800b500 <xTaskIncrementTick+0x164>)
 800b482:	441a      	add	r2, r3
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	3304      	adds	r3, #4
 800b488:	4619      	mov	r1, r3
 800b48a:	4610      	mov	r0, r2
 800b48c:	f7fe fefb 	bl	800a286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b494:	4b1b      	ldr	r3, [pc, #108]	; (800b504 <xTaskIncrementTick+0x168>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d3b8      	bcc.n	800b410 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4a2:	e7b5      	b.n	800b410 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4a4:	4b17      	ldr	r3, [pc, #92]	; (800b504 <xTaskIncrementTick+0x168>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4aa:	4915      	ldr	r1, [pc, #84]	; (800b500 <xTaskIncrementTick+0x164>)
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d901      	bls.n	800b4c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4c0:	4b11      	ldr	r3, [pc, #68]	; (800b508 <xTaskIncrementTick+0x16c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d007      	beq.n	800b4d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	617b      	str	r3, [r7, #20]
 800b4cc:	e004      	b.n	800b4d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4ce:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <xTaskIncrementTick+0x170>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	4a0d      	ldr	r2, [pc, #52]	; (800b50c <xTaskIncrementTick+0x170>)
 800b4d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4d8:	697b      	ldr	r3, [r7, #20]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3718      	adds	r7, #24
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	200027c8 	.word	0x200027c8
 800b4e8:	200027a4 	.word	0x200027a4
 800b4ec:	20002758 	.word	0x20002758
 800b4f0:	2000275c 	.word	0x2000275c
 800b4f4:	200027b8 	.word	0x200027b8
 800b4f8:	200027c0 	.word	0x200027c0
 800b4fc:	200027a8 	.word	0x200027a8
 800b500:	200022d0 	.word	0x200022d0
 800b504:	200022cc 	.word	0x200022cc
 800b508:	200027b4 	.word	0x200027b4
 800b50c:	200027b0 	.word	0x200027b0

0800b510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b516:	4b2a      	ldr	r3, [pc, #168]	; (800b5c0 <vTaskSwitchContext+0xb0>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b51e:	4b29      	ldr	r3, [pc, #164]	; (800b5c4 <vTaskSwitchContext+0xb4>)
 800b520:	2201      	movs	r2, #1
 800b522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b524:	e046      	b.n	800b5b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b526:	4b27      	ldr	r3, [pc, #156]	; (800b5c4 <vTaskSwitchContext+0xb4>)
 800b528:	2200      	movs	r2, #0
 800b52a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b52c:	4b26      	ldr	r3, [pc, #152]	; (800b5c8 <vTaskSwitchContext+0xb8>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60fb      	str	r3, [r7, #12]
 800b532:	e010      	b.n	800b556 <vTaskSwitchContext+0x46>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <vTaskSwitchContext+0x40>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	607b      	str	r3, [r7, #4]
}
 800b54c:	bf00      	nop
 800b54e:	e7fe      	b.n	800b54e <vTaskSwitchContext+0x3e>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3b01      	subs	r3, #1
 800b554:	60fb      	str	r3, [r7, #12]
 800b556:	491d      	ldr	r1, [pc, #116]	; (800b5cc <vTaskSwitchContext+0xbc>)
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	440b      	add	r3, r1
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d0e4      	beq.n	800b534 <vTaskSwitchContext+0x24>
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4a15      	ldr	r2, [pc, #84]	; (800b5cc <vTaskSwitchContext+0xbc>)
 800b576:	4413      	add	r3, r2
 800b578:	60bb      	str	r3, [r7, #8]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	685a      	ldr	r2, [r3, #4]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	605a      	str	r2, [r3, #4]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	3308      	adds	r3, #8
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d104      	bne.n	800b59a <vTaskSwitchContext+0x8a>
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	605a      	str	r2, [r3, #4]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	4a0b      	ldr	r2, [pc, #44]	; (800b5d0 <vTaskSwitchContext+0xc0>)
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	4a08      	ldr	r2, [pc, #32]	; (800b5c8 <vTaskSwitchContext+0xb8>)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5aa:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <vTaskSwitchContext+0xc0>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3354      	adds	r3, #84	; 0x54
 800b5b0:	4a08      	ldr	r2, [pc, #32]	; (800b5d4 <vTaskSwitchContext+0xc4>)
 800b5b2:	6013      	str	r3, [r2, #0]
}
 800b5b4:	bf00      	nop
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	200027c8 	.word	0x200027c8
 800b5c4:	200027b4 	.word	0x200027b4
 800b5c8:	200027a8 	.word	0x200027a8
 800b5cc:	200022d0 	.word	0x200022d0
 800b5d0:	200022cc 	.word	0x200022cc
 800b5d4:	20000110 	.word	0x20000110

0800b5d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	60fb      	str	r3, [r7, #12]
}
 800b5fa:	bf00      	nop
 800b5fc:	e7fe      	b.n	800b5fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5fe:	4b07      	ldr	r3, [pc, #28]	; (800b61c <vTaskPlaceOnEventList+0x44>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3318      	adds	r3, #24
 800b604:	4619      	mov	r1, r3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7fe fe61 	bl	800a2ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b60c:	2101      	movs	r1, #1
 800b60e:	6838      	ldr	r0, [r7, #0]
 800b610:	f000 fa80 	bl	800bb14 <prvAddCurrentTaskToDelayedList>
}
 800b614:	bf00      	nop
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	200022cc 	.word	0x200022cc

0800b620 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b620:	b580      	push	{r7, lr}
 800b622:	b086      	sub	sp, #24
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10a      	bne.n	800b648 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	617b      	str	r3, [r7, #20]
}
 800b644:	bf00      	nop
 800b646:	e7fe      	b.n	800b646 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b648:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <vTaskPlaceOnEventListRestricted+0x54>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	3318      	adds	r3, #24
 800b64e:	4619      	mov	r1, r3
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7fe fe18 	bl	800a286 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b65c:	f04f 33ff 	mov.w	r3, #4294967295
 800b660:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	68b8      	ldr	r0, [r7, #8]
 800b666:	f000 fa55 	bl	800bb14 <prvAddCurrentTaskToDelayedList>
	}
 800b66a:	bf00      	nop
 800b66c:	3718      	adds	r7, #24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	200022cc 	.word	0x200022cc

0800b678 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10a      	bne.n	800b6a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	60fb      	str	r3, [r7, #12]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	3318      	adds	r3, #24
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7fe fe49 	bl	800a340 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ae:	4b1e      	ldr	r3, [pc, #120]	; (800b728 <xTaskRemoveFromEventList+0xb0>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d11d      	bne.n	800b6f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fe fe40 	bl	800a340 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c4:	4b19      	ldr	r3, [pc, #100]	; (800b72c <xTaskRemoveFromEventList+0xb4>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d903      	bls.n	800b6d4 <xTaskRemoveFromEventList+0x5c>
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d0:	4a16      	ldr	r2, [pc, #88]	; (800b72c <xTaskRemoveFromEventList+0xb4>)
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d8:	4613      	mov	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4a13      	ldr	r2, [pc, #76]	; (800b730 <xTaskRemoveFromEventList+0xb8>)
 800b6e2:	441a      	add	r2, r3
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4610      	mov	r0, r2
 800b6ec:	f7fe fdcb 	bl	800a286 <vListInsertEnd>
 800b6f0:	e005      	b.n	800b6fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	3318      	adds	r3, #24
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	480e      	ldr	r0, [pc, #56]	; (800b734 <xTaskRemoveFromEventList+0xbc>)
 800b6fa:	f7fe fdc4 	bl	800a286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b702:	4b0d      	ldr	r3, [pc, #52]	; (800b738 <xTaskRemoveFromEventList+0xc0>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b708:	429a      	cmp	r2, r3
 800b70a:	d905      	bls.n	800b718 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b70c:	2301      	movs	r3, #1
 800b70e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b710:	4b0a      	ldr	r3, [pc, #40]	; (800b73c <xTaskRemoveFromEventList+0xc4>)
 800b712:	2201      	movs	r2, #1
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	e001      	b.n	800b71c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b718:	2300      	movs	r3, #0
 800b71a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b71c:	697b      	ldr	r3, [r7, #20]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	200027c8 	.word	0x200027c8
 800b72c:	200027a8 	.word	0x200027a8
 800b730:	200022d0 	.word	0x200022d0
 800b734:	20002760 	.word	0x20002760
 800b738:	200022cc 	.word	0x200022cc
 800b73c:	200027b4 	.word	0x200027b4

0800b740 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b748:	4b06      	ldr	r3, [pc, #24]	; (800b764 <vTaskInternalSetTimeOutState+0x24>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b750:	4b05      	ldr	r3, [pc, #20]	; (800b768 <vTaskInternalSetTimeOutState+0x28>)
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	605a      	str	r2, [r3, #4]
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	200027b8 	.word	0x200027b8
 800b768:	200027a4 	.word	0x200027a4

0800b76c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10a      	bne.n	800b792 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	613b      	str	r3, [r7, #16]
}
 800b78e:	bf00      	nop
 800b790:	e7fe      	b.n	800b790 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10a      	bne.n	800b7ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	60fb      	str	r3, [r7, #12]
}
 800b7aa:	bf00      	nop
 800b7ac:	e7fe      	b.n	800b7ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b7ae:	f000 fe81 	bl	800c4b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7b2:	4b1d      	ldr	r3, [pc, #116]	; (800b828 <xTaskCheckForTimeOut+0xbc>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ca:	d102      	bne.n	800b7d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	e023      	b.n	800b81a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	4b15      	ldr	r3, [pc, #84]	; (800b82c <xTaskCheckForTimeOut+0xc0>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d007      	beq.n	800b7ee <xTaskCheckForTimeOut+0x82>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	69ba      	ldr	r2, [r7, #24]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d302      	bcc.n	800b7ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	e015      	b.n	800b81a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d20b      	bcs.n	800b810 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7ff ff9b 	bl	800b740 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	61fb      	str	r3, [r7, #28]
 800b80e:	e004      	b.n	800b81a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b816:	2301      	movs	r3, #1
 800b818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b81a:	f000 fe7b 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800b81e:	69fb      	ldr	r3, [r7, #28]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3720      	adds	r7, #32
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	200027a4 	.word	0x200027a4
 800b82c:	200027b8 	.word	0x200027b8

0800b830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b830:	b480      	push	{r7}
 800b832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b834:	4b03      	ldr	r3, [pc, #12]	; (800b844 <vTaskMissedYield+0x14>)
 800b836:	2201      	movs	r2, #1
 800b838:	601a      	str	r2, [r3, #0]
}
 800b83a:	bf00      	nop
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr
 800b844:	200027b4 	.word	0x200027b4

0800b848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b850:	f000 f852 	bl	800b8f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b854:	4b06      	ldr	r3, [pc, #24]	; (800b870 <prvIdleTask+0x28>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d9f9      	bls.n	800b850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b85c:	4b05      	ldr	r3, [pc, #20]	; (800b874 <prvIdleTask+0x2c>)
 800b85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b86c:	e7f0      	b.n	800b850 <prvIdleTask+0x8>
 800b86e:	bf00      	nop
 800b870:	200022d0 	.word	0x200022d0
 800b874:	e000ed04 	.word	0xe000ed04

0800b878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b87e:	2300      	movs	r3, #0
 800b880:	607b      	str	r3, [r7, #4]
 800b882:	e00c      	b.n	800b89e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	4613      	mov	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4413      	add	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4a12      	ldr	r2, [pc, #72]	; (800b8d8 <prvInitialiseTaskLists+0x60>)
 800b890:	4413      	add	r3, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fcca 	bl	800a22c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3301      	adds	r3, #1
 800b89c:	607b      	str	r3, [r7, #4]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b37      	cmp	r3, #55	; 0x37
 800b8a2:	d9ef      	bls.n	800b884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8a4:	480d      	ldr	r0, [pc, #52]	; (800b8dc <prvInitialiseTaskLists+0x64>)
 800b8a6:	f7fe fcc1 	bl	800a22c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8aa:	480d      	ldr	r0, [pc, #52]	; (800b8e0 <prvInitialiseTaskLists+0x68>)
 800b8ac:	f7fe fcbe 	bl	800a22c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8b0:	480c      	ldr	r0, [pc, #48]	; (800b8e4 <prvInitialiseTaskLists+0x6c>)
 800b8b2:	f7fe fcbb 	bl	800a22c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8b6:	480c      	ldr	r0, [pc, #48]	; (800b8e8 <prvInitialiseTaskLists+0x70>)
 800b8b8:	f7fe fcb8 	bl	800a22c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8bc:	480b      	ldr	r0, [pc, #44]	; (800b8ec <prvInitialiseTaskLists+0x74>)
 800b8be:	f7fe fcb5 	bl	800a22c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8c2:	4b0b      	ldr	r3, [pc, #44]	; (800b8f0 <prvInitialiseTaskLists+0x78>)
 800b8c4:	4a05      	ldr	r2, [pc, #20]	; (800b8dc <prvInitialiseTaskLists+0x64>)
 800b8c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8c8:	4b0a      	ldr	r3, [pc, #40]	; (800b8f4 <prvInitialiseTaskLists+0x7c>)
 800b8ca:	4a05      	ldr	r2, [pc, #20]	; (800b8e0 <prvInitialiseTaskLists+0x68>)
 800b8cc:	601a      	str	r2, [r3, #0]
}
 800b8ce:	bf00      	nop
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	200022d0 	.word	0x200022d0
 800b8dc:	20002730 	.word	0x20002730
 800b8e0:	20002744 	.word	0x20002744
 800b8e4:	20002760 	.word	0x20002760
 800b8e8:	20002774 	.word	0x20002774
 800b8ec:	2000278c 	.word	0x2000278c
 800b8f0:	20002758 	.word	0x20002758
 800b8f4:	2000275c 	.word	0x2000275c

0800b8f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8fe:	e019      	b.n	800b934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b900:	f000 fdd8 	bl	800c4b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b904:	4b10      	ldr	r3, [pc, #64]	; (800b948 <prvCheckTasksWaitingTermination+0x50>)
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	3304      	adds	r3, #4
 800b910:	4618      	mov	r0, r3
 800b912:	f7fe fd15 	bl	800a340 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b916:	4b0d      	ldr	r3, [pc, #52]	; (800b94c <prvCheckTasksWaitingTermination+0x54>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3b01      	subs	r3, #1
 800b91c:	4a0b      	ldr	r2, [pc, #44]	; (800b94c <prvCheckTasksWaitingTermination+0x54>)
 800b91e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b920:	4b0b      	ldr	r3, [pc, #44]	; (800b950 <prvCheckTasksWaitingTermination+0x58>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	3b01      	subs	r3, #1
 800b926:	4a0a      	ldr	r2, [pc, #40]	; (800b950 <prvCheckTasksWaitingTermination+0x58>)
 800b928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b92a:	f000 fdf3 	bl	800c514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f810 	bl	800b954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b934:	4b06      	ldr	r3, [pc, #24]	; (800b950 <prvCheckTasksWaitingTermination+0x58>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1e1      	bne.n	800b900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b93c:	bf00      	nop
 800b93e:	bf00      	nop
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	20002774 	.word	0x20002774
 800b94c:	200027a0 	.word	0x200027a0
 800b950:	20002788 	.word	0x20002788

0800b954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3354      	adds	r3, #84	; 0x54
 800b960:	4618      	mov	r0, r3
 800b962:	f002 fa3d 	bl	800dde0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d108      	bne.n	800b982 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b974:	4618      	mov	r0, r3
 800b976:	f000 ff8b 	bl	800c890 <vPortFree>
				vPortFree( pxTCB );
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 ff88 	bl	800c890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b980:	e018      	b.n	800b9b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d103      	bne.n	800b994 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 ff7f 	bl	800c890 <vPortFree>
	}
 800b992:	e00f      	b.n	800b9b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d00a      	beq.n	800b9b4 <prvDeleteTCB+0x60>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	60fb      	str	r3, [r7, #12]
}
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <prvDeleteTCB+0x5e>
	}
 800b9b4:	bf00      	nop
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9c2:	4b0c      	ldr	r3, [pc, #48]	; (800b9f4 <prvResetNextTaskUnblockTime+0x38>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d104      	bne.n	800b9d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9cc:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9d4:	e008      	b.n	800b9e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9d6:	4b07      	ldr	r3, [pc, #28]	; (800b9f4 <prvResetNextTaskUnblockTime+0x38>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	4a04      	ldr	r2, [pc, #16]	; (800b9f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b9e6:	6013      	str	r3, [r2, #0]
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	20002758 	.word	0x20002758
 800b9f8:	200027c0 	.word	0x200027c0

0800b9fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba02:	4b0b      	ldr	r3, [pc, #44]	; (800ba30 <xTaskGetSchedulerState+0x34>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d102      	bne.n	800ba10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	607b      	str	r3, [r7, #4]
 800ba0e:	e008      	b.n	800ba22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba10:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <xTaskGetSchedulerState+0x38>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba18:	2302      	movs	r3, #2
 800ba1a:	607b      	str	r3, [r7, #4]
 800ba1c:	e001      	b.n	800ba22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba22:	687b      	ldr	r3, [r7, #4]
	}
 800ba24:	4618      	mov	r0, r3
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	200027ac 	.word	0x200027ac
 800ba34:	200027c8 	.word	0x200027c8

0800ba38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba44:	2300      	movs	r3, #0
 800ba46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d056      	beq.n	800bafc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba4e:	4b2e      	ldr	r3, [pc, #184]	; (800bb08 <xTaskPriorityDisinherit+0xd0>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d00a      	beq.n	800ba6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	60fb      	str	r3, [r7, #12]
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10a      	bne.n	800ba8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	60bb      	str	r3, [r7, #8]
}
 800ba88:	bf00      	nop
 800ba8a:	e7fe      	b.n	800ba8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba90:	1e5a      	subs	r2, r3, #1
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d02c      	beq.n	800bafc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d128      	bne.n	800bafc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	3304      	adds	r3, #4
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fe fc46 	bl	800a340 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bacc:	4b0f      	ldr	r3, [pc, #60]	; (800bb0c <xTaskPriorityDisinherit+0xd4>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d903      	bls.n	800badc <xTaskPriorityDisinherit+0xa4>
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad8:	4a0c      	ldr	r2, [pc, #48]	; (800bb0c <xTaskPriorityDisinherit+0xd4>)
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae0:	4613      	mov	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4a09      	ldr	r2, [pc, #36]	; (800bb10 <xTaskPriorityDisinherit+0xd8>)
 800baea:	441a      	add	r2, r3
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	3304      	adds	r3, #4
 800baf0:	4619      	mov	r1, r3
 800baf2:	4610      	mov	r0, r2
 800baf4:	f7fe fbc7 	bl	800a286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800baf8:	2301      	movs	r3, #1
 800bafa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bafc:	697b      	ldr	r3, [r7, #20]
	}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3718      	adds	r7, #24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	200022cc 	.word	0x200022cc
 800bb0c:	200027a8 	.word	0x200027a8
 800bb10:	200022d0 	.word	0x200022d0

0800bb14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb1e:	4b21      	ldr	r3, [pc, #132]	; (800bba4 <prvAddCurrentTaskToDelayedList+0x90>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb24:	4b20      	ldr	r3, [pc, #128]	; (800bba8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fe fc08 	bl	800a340 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb36:	d10a      	bne.n	800bb4e <prvAddCurrentTaskToDelayedList+0x3a>
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d007      	beq.n	800bb4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb3e:	4b1a      	ldr	r3, [pc, #104]	; (800bba8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3304      	adds	r3, #4
 800bb44:	4619      	mov	r1, r3
 800bb46:	4819      	ldr	r0, [pc, #100]	; (800bbac <prvAddCurrentTaskToDelayedList+0x98>)
 800bb48:	f7fe fb9d 	bl	800a286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb4c:	e026      	b.n	800bb9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4413      	add	r3, r2
 800bb54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb56:	4b14      	ldr	r3, [pc, #80]	; (800bba8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d209      	bcs.n	800bb7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb66:	4b12      	ldr	r3, [pc, #72]	; (800bbb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	4b0f      	ldr	r3, [pc, #60]	; (800bba8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	4619      	mov	r1, r3
 800bb72:	4610      	mov	r0, r2
 800bb74:	f7fe fbab 	bl	800a2ce <vListInsert>
}
 800bb78:	e010      	b.n	800bb9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb7a:	4b0e      	ldr	r3, [pc, #56]	; (800bbb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3304      	adds	r3, #4
 800bb84:	4619      	mov	r1, r3
 800bb86:	4610      	mov	r0, r2
 800bb88:	f7fe fba1 	bl	800a2ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d202      	bcs.n	800bb9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb96:	4a08      	ldr	r2, [pc, #32]	; (800bbb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	6013      	str	r3, [r2, #0]
}
 800bb9c:	bf00      	nop
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	200027a4 	.word	0x200027a4
 800bba8:	200022cc 	.word	0x200022cc
 800bbac:	2000278c 	.word	0x2000278c
 800bbb0:	2000275c 	.word	0x2000275c
 800bbb4:	20002758 	.word	0x20002758
 800bbb8:	200027c0 	.word	0x200027c0

0800bbbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bbc6:	f000 fb07 	bl	800c1d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bbca:	4b1c      	ldr	r3, [pc, #112]	; (800bc3c <xTimerCreateTimerTask+0x80>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d021      	beq.n	800bc16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bbda:	1d3a      	adds	r2, r7, #4
 800bbdc:	f107 0108 	add.w	r1, r7, #8
 800bbe0:	f107 030c 	add.w	r3, r7, #12
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe fb07 	bl	800a1f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bbea:	6879      	ldr	r1, [r7, #4]
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	9202      	str	r2, [sp, #8]
 800bbf2:	9301      	str	r3, [sp, #4]
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	460a      	mov	r2, r1
 800bbfc:	4910      	ldr	r1, [pc, #64]	; (800bc40 <xTimerCreateTimerTask+0x84>)
 800bbfe:	4811      	ldr	r0, [pc, #68]	; (800bc44 <xTimerCreateTimerTask+0x88>)
 800bc00:	f7ff f8b4 	bl	800ad6c <xTaskCreateStatic>
 800bc04:	4603      	mov	r3, r0
 800bc06:	4a10      	ldr	r2, [pc, #64]	; (800bc48 <xTimerCreateTimerTask+0x8c>)
 800bc08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc0a:	4b0f      	ldr	r3, [pc, #60]	; (800bc48 <xTimerCreateTimerTask+0x8c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc12:	2301      	movs	r3, #1
 800bc14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10a      	bne.n	800bc32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	613b      	str	r3, [r7, #16]
}
 800bc2e:	bf00      	nop
 800bc30:	e7fe      	b.n	800bc30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc32:	697b      	ldr	r3, [r7, #20]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	200027fc 	.word	0x200027fc
 800bc40:	08010f24 	.word	0x08010f24
 800bc44:	0800bd81 	.word	0x0800bd81
 800bc48:	20002800 	.word	0x20002800

0800bc4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08a      	sub	sp, #40	; 0x28
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <xTimerGenericCommand+0x2e>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	623b      	str	r3, [r7, #32]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc7a:	4b1a      	ldr	r3, [pc, #104]	; (800bce4 <xTimerGenericCommand+0x98>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d02a      	beq.n	800bcd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b05      	cmp	r3, #5
 800bc92:	dc18      	bgt.n	800bcc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc94:	f7ff feb2 	bl	800b9fc <xTaskGetSchedulerState>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b02      	cmp	r3, #2
 800bc9c:	d109      	bne.n	800bcb2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc9e:	4b11      	ldr	r3, [pc, #68]	; (800bce4 <xTimerGenericCommand+0x98>)
 800bca0:	6818      	ldr	r0, [r3, #0]
 800bca2:	f107 0110 	add.w	r1, r7, #16
 800bca6:	2300      	movs	r3, #0
 800bca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcaa:	f7fe fc77 	bl	800a59c <xQueueGenericSend>
 800bcae:	6278      	str	r0, [r7, #36]	; 0x24
 800bcb0:	e012      	b.n	800bcd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bcb2:	4b0c      	ldr	r3, [pc, #48]	; (800bce4 <xTimerGenericCommand+0x98>)
 800bcb4:	6818      	ldr	r0, [r3, #0]
 800bcb6:	f107 0110 	add.w	r1, r7, #16
 800bcba:	2300      	movs	r3, #0
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f7fe fc6d 	bl	800a59c <xQueueGenericSend>
 800bcc2:	6278      	str	r0, [r7, #36]	; 0x24
 800bcc4:	e008      	b.n	800bcd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bcc6:	4b07      	ldr	r3, [pc, #28]	; (800bce4 <xTimerGenericCommand+0x98>)
 800bcc8:	6818      	ldr	r0, [r3, #0]
 800bcca:	f107 0110 	add.w	r1, r7, #16
 800bcce:	2300      	movs	r3, #0
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	f7fe fd61 	bl	800a798 <xQueueGenericSendFromISR>
 800bcd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3728      	adds	r7, #40	; 0x28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	200027fc 	.word	0x200027fc

0800bce8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af02      	add	r7, sp, #8
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcf2:	4b22      	ldr	r3, [pc, #136]	; (800bd7c <prvProcessExpiredTimer+0x94>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	3304      	adds	r3, #4
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fe fb1d 	bl	800a340 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd0c:	f003 0304 	and.w	r3, r3, #4
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d022      	beq.n	800bd5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	699a      	ldr	r2, [r3, #24]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	18d1      	adds	r1, r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	6978      	ldr	r0, [r7, #20]
 800bd22:	f000 f8d1 	bl	800bec8 <prvInsertTimerInActiveList>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d01f      	beq.n	800bd6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	2300      	movs	r3, #0
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	2100      	movs	r1, #0
 800bd36:	6978      	ldr	r0, [r7, #20]
 800bd38:	f7ff ff88 	bl	800bc4c <xTimerGenericCommand>
 800bd3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d113      	bne.n	800bd6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	60fb      	str	r3, [r7, #12]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd60:	f023 0301 	bic.w	r3, r3, #1
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	6978      	ldr	r0, [r7, #20]
 800bd72:	4798      	blx	r3
}
 800bd74:	bf00      	nop
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	200027f4 	.word	0x200027f4

0800bd80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd88:	f107 0308 	add.w	r3, r7, #8
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f000 f857 	bl	800be40 <prvGetNextExpireTime>
 800bd92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	4619      	mov	r1, r3
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 f803 	bl	800bda4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd9e:	f000 f8d5 	bl	800bf4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bda2:	e7f1      	b.n	800bd88 <prvTimerTask+0x8>

0800bda4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bdae:	f7ff fa39 	bl	800b224 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdb2:	f107 0308 	add.w	r3, r7, #8
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 f866 	bl	800be88 <prvSampleTimeNow>
 800bdbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d130      	bne.n	800be26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10a      	bne.n	800bde0 <prvProcessTimerOrBlockTask+0x3c>
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d806      	bhi.n	800bde0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bdd2:	f7ff fa35 	bl	800b240 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bdd6:	68f9      	ldr	r1, [r7, #12]
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff ff85 	bl	800bce8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bdde:	e024      	b.n	800be2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d008      	beq.n	800bdf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bde6:	4b13      	ldr	r3, [pc, #76]	; (800be34 <prvProcessTimerOrBlockTask+0x90>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <prvProcessTimerOrBlockTask+0x50>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e000      	b.n	800bdf6 <prvProcessTimerOrBlockTask+0x52>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bdf8:	4b0f      	ldr	r3, [pc, #60]	; (800be38 <prvProcessTimerOrBlockTask+0x94>)
 800bdfa:	6818      	ldr	r0, [r3, #0]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	4619      	mov	r1, r3
 800be06:	f7fe ff7d 	bl	800ad04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be0a:	f7ff fa19 	bl	800b240 <xTaskResumeAll>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10a      	bne.n	800be2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be14:	4b09      	ldr	r3, [pc, #36]	; (800be3c <prvProcessTimerOrBlockTask+0x98>)
 800be16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	f3bf 8f6f 	isb	sy
}
 800be24:	e001      	b.n	800be2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be26:	f7ff fa0b 	bl	800b240 <xTaskResumeAll>
}
 800be2a:	bf00      	nop
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	200027f8 	.word	0x200027f8
 800be38:	200027fc 	.word	0x200027fc
 800be3c:	e000ed04 	.word	0xe000ed04

0800be40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be48:	4b0e      	ldr	r3, [pc, #56]	; (800be84 <prvGetNextExpireTime+0x44>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <prvGetNextExpireTime+0x16>
 800be52:	2201      	movs	r2, #1
 800be54:	e000      	b.n	800be58 <prvGetNextExpireTime+0x18>
 800be56:	2200      	movs	r2, #0
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d105      	bne.n	800be70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be64:	4b07      	ldr	r3, [pc, #28]	; (800be84 <prvGetNextExpireTime+0x44>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	60fb      	str	r3, [r7, #12]
 800be6e:	e001      	b.n	800be74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be70:	2300      	movs	r3, #0
 800be72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be74:	68fb      	ldr	r3, [r7, #12]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	200027f4 	.word	0x200027f4

0800be88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be90:	f7ff fa74 	bl	800b37c <xTaskGetTickCount>
 800be94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be96:	4b0b      	ldr	r3, [pc, #44]	; (800bec4 <prvSampleTimeNow+0x3c>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d205      	bcs.n	800beac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bea0:	f000 f936 	bl	800c110 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	601a      	str	r2, [r3, #0]
 800beaa:	e002      	b.n	800beb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800beb2:	4a04      	ldr	r2, [pc, #16]	; (800bec4 <prvSampleTimeNow+0x3c>)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800beb8:	68fb      	ldr	r3, [r7, #12]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	20002804 	.word	0x20002804

0800bec8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
 800bed4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bed6:	2300      	movs	r3, #0
 800bed8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	429a      	cmp	r2, r3
 800beec:	d812      	bhi.n	800bf14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	1ad2      	subs	r2, r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	699b      	ldr	r3, [r3, #24]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d302      	bcc.n	800bf02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800befc:	2301      	movs	r3, #1
 800befe:	617b      	str	r3, [r7, #20]
 800bf00:	e01b      	b.n	800bf3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf02:	4b10      	ldr	r3, [pc, #64]	; (800bf44 <prvInsertTimerInActiveList+0x7c>)
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	3304      	adds	r3, #4
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	4610      	mov	r0, r2
 800bf0e:	f7fe f9de 	bl	800a2ce <vListInsert>
 800bf12:	e012      	b.n	800bf3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d206      	bcs.n	800bf2a <prvInsertTimerInActiveList+0x62>
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d302      	bcc.n	800bf2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf24:	2301      	movs	r3, #1
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	e007      	b.n	800bf3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf2a:	4b07      	ldr	r3, [pc, #28]	; (800bf48 <prvInsertTimerInActiveList+0x80>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3304      	adds	r3, #4
 800bf32:	4619      	mov	r1, r3
 800bf34:	4610      	mov	r0, r2
 800bf36:	f7fe f9ca 	bl	800a2ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bf3a:	697b      	ldr	r3, [r7, #20]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3718      	adds	r7, #24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	200027f8 	.word	0x200027f8
 800bf48:	200027f4 	.word	0x200027f4

0800bf4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08e      	sub	sp, #56	; 0x38
 800bf50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf52:	e0ca      	b.n	800c0ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	da18      	bge.n	800bf8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf5a:	1d3b      	adds	r3, r7, #4
 800bf5c:	3304      	adds	r3, #4
 800bf5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10a      	bne.n	800bf7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	61fb      	str	r3, [r7, #28]
}
 800bf78:	bf00      	nop
 800bf7a:	e7fe      	b.n	800bf7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf82:	6850      	ldr	r0, [r2, #4]
 800bf84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf86:	6892      	ldr	r2, [r2, #8]
 800bf88:	4611      	mov	r1, r2
 800bf8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f2c0 80aa 	blt.w	800c0e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d004      	beq.n	800bfaa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe f9cb 	bl	800a340 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfaa:	463b      	mov	r3, r7
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7ff ff6b 	bl	800be88 <prvSampleTimeNow>
 800bfb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b09      	cmp	r3, #9
 800bfb8:	f200 8097 	bhi.w	800c0ea <prvProcessReceivedCommands+0x19e>
 800bfbc:	a201      	add	r2, pc, #4	; (adr r2, 800bfc4 <prvProcessReceivedCommands+0x78>)
 800bfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc2:	bf00      	nop
 800bfc4:	0800bfed 	.word	0x0800bfed
 800bfc8:	0800bfed 	.word	0x0800bfed
 800bfcc:	0800bfed 	.word	0x0800bfed
 800bfd0:	0800c061 	.word	0x0800c061
 800bfd4:	0800c075 	.word	0x0800c075
 800bfd8:	0800c0bf 	.word	0x0800c0bf
 800bfdc:	0800bfed 	.word	0x0800bfed
 800bfe0:	0800bfed 	.word	0x0800bfed
 800bfe4:	0800c061 	.word	0x0800c061
 800bfe8:	0800c075 	.word	0x0800c075
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bff2:	f043 0301 	orr.w	r3, r3, #1
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	18d1      	adds	r1, r2, r3
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c00a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c00c:	f7ff ff5c 	bl	800bec8 <prvInsertTimerInActiveList>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d069      	beq.n	800c0ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c018:	6a1b      	ldr	r3, [r3, #32]
 800c01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c01c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d05e      	beq.n	800c0ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	441a      	add	r2, r3
 800c034:	2300      	movs	r3, #0
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	2300      	movs	r3, #0
 800c03a:	2100      	movs	r1, #0
 800c03c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c03e:	f7ff fe05 	bl	800bc4c <xTimerGenericCommand>
 800c042:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d14f      	bne.n	800c0ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	61bb      	str	r3, [r7, #24]
}
 800c05c:	bf00      	nop
 800c05e:	e7fe      	b.n	800c05e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c066:	f023 0301 	bic.w	r3, r3, #1
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c072:	e03a      	b.n	800c0ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c07a:	f043 0301 	orr.w	r3, r3, #1
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	617b      	str	r3, [r7, #20]
}
 800c0a6:	bf00      	nop
 800c0a8:	e7fe      	b.n	800c0a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	699a      	ldr	r2, [r3, #24]
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b0:	18d1      	adds	r1, r2, r3
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0b8:	f7ff ff06 	bl	800bec8 <prvInsertTimerInActiveList>
					break;
 800c0bc:	e015      	b.n	800c0ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d103      	bne.n	800c0d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c0cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ce:	f000 fbdf 	bl	800c890 <vPortFree>
 800c0d2:	e00a      	b.n	800c0ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0da:	f023 0301 	bic.w	r3, r3, #1
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c0e6:	e000      	b.n	800c0ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c0e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0ea:	4b08      	ldr	r3, [pc, #32]	; (800c10c <prvProcessReceivedCommands+0x1c0>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	1d39      	adds	r1, r7, #4
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe fbec 	bl	800a8d0 <xQueueReceive>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f47f af2a 	bne.w	800bf54 <prvProcessReceivedCommands+0x8>
	}
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	3730      	adds	r7, #48	; 0x30
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	200027fc 	.word	0x200027fc

0800c110 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c116:	e048      	b.n	800c1aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c118:	4b2d      	ldr	r3, [pc, #180]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c122:	4b2b      	ldr	r3, [pc, #172]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3304      	adds	r3, #4
 800c130:	4618      	mov	r0, r3
 800c132:	f7fe f905 	bl	800a340 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c144:	f003 0304 	and.w	r3, r3, #4
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d02e      	beq.n	800c1aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	4413      	add	r3, r2
 800c154:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d90e      	bls.n	800c17c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c16a:	4b19      	ldr	r3, [pc, #100]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3304      	adds	r3, #4
 800c172:	4619      	mov	r1, r3
 800c174:	4610      	mov	r0, r2
 800c176:	f7fe f8aa 	bl	800a2ce <vListInsert>
 800c17a:	e016      	b.n	800c1aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c17c:	2300      	movs	r3, #0
 800c17e:	9300      	str	r3, [sp, #0]
 800c180:	2300      	movs	r3, #0
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	2100      	movs	r1, #0
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f7ff fd60 	bl	800bc4c <xTimerGenericCommand>
 800c18c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10a      	bne.n	800c1aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	603b      	str	r3, [r7, #0]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1aa:	4b09      	ldr	r3, [pc, #36]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1b1      	bne.n	800c118 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c1b4:	4b06      	ldr	r3, [pc, #24]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1ba:	4b06      	ldr	r3, [pc, #24]	; (800c1d4 <prvSwitchTimerLists+0xc4>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a04      	ldr	r2, [pc, #16]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c1c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1c2:	4a04      	ldr	r2, [pc, #16]	; (800c1d4 <prvSwitchTimerLists+0xc4>)
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	6013      	str	r3, [r2, #0]
}
 800c1c8:	bf00      	nop
 800c1ca:	3718      	adds	r7, #24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	200027f4 	.word	0x200027f4
 800c1d4:	200027f8 	.word	0x200027f8

0800c1d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c1de:	f000 f969 	bl	800c4b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c1e2:	4b15      	ldr	r3, [pc, #84]	; (800c238 <prvCheckForValidListAndQueue+0x60>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d120      	bne.n	800c22c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c1ea:	4814      	ldr	r0, [pc, #80]	; (800c23c <prvCheckForValidListAndQueue+0x64>)
 800c1ec:	f7fe f81e 	bl	800a22c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c1f0:	4813      	ldr	r0, [pc, #76]	; (800c240 <prvCheckForValidListAndQueue+0x68>)
 800c1f2:	f7fe f81b 	bl	800a22c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c1f6:	4b13      	ldr	r3, [pc, #76]	; (800c244 <prvCheckForValidListAndQueue+0x6c>)
 800c1f8:	4a10      	ldr	r2, [pc, #64]	; (800c23c <prvCheckForValidListAndQueue+0x64>)
 800c1fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c1fc:	4b12      	ldr	r3, [pc, #72]	; (800c248 <prvCheckForValidListAndQueue+0x70>)
 800c1fe:	4a10      	ldr	r2, [pc, #64]	; (800c240 <prvCheckForValidListAndQueue+0x68>)
 800c200:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c202:	2300      	movs	r3, #0
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	4b11      	ldr	r3, [pc, #68]	; (800c24c <prvCheckForValidListAndQueue+0x74>)
 800c208:	4a11      	ldr	r2, [pc, #68]	; (800c250 <prvCheckForValidListAndQueue+0x78>)
 800c20a:	2110      	movs	r1, #16
 800c20c:	200a      	movs	r0, #10
 800c20e:	f7fe f929 	bl	800a464 <xQueueGenericCreateStatic>
 800c212:	4603      	mov	r3, r0
 800c214:	4a08      	ldr	r2, [pc, #32]	; (800c238 <prvCheckForValidListAndQueue+0x60>)
 800c216:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c218:	4b07      	ldr	r3, [pc, #28]	; (800c238 <prvCheckForValidListAndQueue+0x60>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d005      	beq.n	800c22c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c220:	4b05      	ldr	r3, [pc, #20]	; (800c238 <prvCheckForValidListAndQueue+0x60>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	490b      	ldr	r1, [pc, #44]	; (800c254 <prvCheckForValidListAndQueue+0x7c>)
 800c226:	4618      	mov	r0, r3
 800c228:	f7fe fd42 	bl	800acb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c22c:	f000 f972 	bl	800c514 <vPortExitCritical>
}
 800c230:	bf00      	nop
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	200027fc 	.word	0x200027fc
 800c23c:	200027cc 	.word	0x200027cc
 800c240:	200027e0 	.word	0x200027e0
 800c244:	200027f4 	.word	0x200027f4
 800c248:	200027f8 	.word	0x200027f8
 800c24c:	200028a8 	.word	0x200028a8
 800c250:	20002808 	.word	0x20002808
 800c254:	08010f2c 	.word	0x08010f2c

0800c258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	3b04      	subs	r3, #4
 800c268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3b04      	subs	r3, #4
 800c276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	f023 0201 	bic.w	r2, r3, #1
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	3b04      	subs	r3, #4
 800c286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c288:	4a0c      	ldr	r2, [pc, #48]	; (800c2bc <pxPortInitialiseStack+0x64>)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3b14      	subs	r3, #20
 800c292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	3b04      	subs	r3, #4
 800c29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f06f 0202 	mvn.w	r2, #2
 800c2a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	3b20      	subs	r3, #32
 800c2ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	0800c2c1 	.word	0x0800c2c1

0800c2c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c2ca:	4b12      	ldr	r3, [pc, #72]	; (800c314 <prvTaskExitError+0x54>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d2:	d00a      	beq.n	800c2ea <prvTaskExitError+0x2a>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	60fb      	str	r3, [r7, #12]
}
 800c2e6:	bf00      	nop
 800c2e8:	e7fe      	b.n	800c2e8 <prvTaskExitError+0x28>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	60bb      	str	r3, [r7, #8]
}
 800c2fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2fe:	bf00      	nop
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0fc      	beq.n	800c300 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c306:	bf00      	nop
 800c308:	bf00      	nop
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	20000098 	.word	0x20000098
	...

0800c320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c320:	4b07      	ldr	r3, [pc, #28]	; (800c340 <pxCurrentTCBConst2>)
 800c322:	6819      	ldr	r1, [r3, #0]
 800c324:	6808      	ldr	r0, [r1, #0]
 800c326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32a:	f380 8809 	msr	PSP, r0
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f04f 0000 	mov.w	r0, #0
 800c336:	f380 8811 	msr	BASEPRI, r0
 800c33a:	4770      	bx	lr
 800c33c:	f3af 8000 	nop.w

0800c340 <pxCurrentTCBConst2>:
 800c340:	200022cc 	.word	0x200022cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c344:	bf00      	nop
 800c346:	bf00      	nop

0800c348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c348:	4808      	ldr	r0, [pc, #32]	; (800c36c <prvPortStartFirstTask+0x24>)
 800c34a:	6800      	ldr	r0, [r0, #0]
 800c34c:	6800      	ldr	r0, [r0, #0]
 800c34e:	f380 8808 	msr	MSP, r0
 800c352:	f04f 0000 	mov.w	r0, #0
 800c356:	f380 8814 	msr	CONTROL, r0
 800c35a:	b662      	cpsie	i
 800c35c:	b661      	cpsie	f
 800c35e:	f3bf 8f4f 	dsb	sy
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	df00      	svc	0
 800c368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c36a:	bf00      	nop
 800c36c:	e000ed08 	.word	0xe000ed08

0800c370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c376:	4b46      	ldr	r3, [pc, #280]	; (800c490 <xPortStartScheduler+0x120>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a46      	ldr	r2, [pc, #280]	; (800c494 <xPortStartScheduler+0x124>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d10a      	bne.n	800c396 <xPortStartScheduler+0x26>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	613b      	str	r3, [r7, #16]
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c396:	4b3e      	ldr	r3, [pc, #248]	; (800c490 <xPortStartScheduler+0x120>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a3f      	ldr	r2, [pc, #252]	; (800c498 <xPortStartScheduler+0x128>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d10a      	bne.n	800c3b6 <xPortStartScheduler+0x46>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	60fb      	str	r3, [r7, #12]
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c3b6:	4b39      	ldr	r3, [pc, #228]	; (800c49c <xPortStartScheduler+0x12c>)
 800c3b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	22ff      	movs	r2, #255	; 0xff
 800c3c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3d0:	78fb      	ldrb	r3, [r7, #3]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	4b31      	ldr	r3, [pc, #196]	; (800c4a0 <xPortStartScheduler+0x130>)
 800c3dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3de:	4b31      	ldr	r3, [pc, #196]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c3e0:	2207      	movs	r2, #7
 800c3e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3e4:	e009      	b.n	800c3fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c3e6:	4b2f      	ldr	r3, [pc, #188]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	4a2d      	ldr	r2, [pc, #180]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c3ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3fa:	78fb      	ldrb	r3, [r7, #3]
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c402:	2b80      	cmp	r3, #128	; 0x80
 800c404:	d0ef      	beq.n	800c3e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c406:	4b27      	ldr	r3, [pc, #156]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f1c3 0307 	rsb	r3, r3, #7
 800c40e:	2b04      	cmp	r3, #4
 800c410:	d00a      	beq.n	800c428 <xPortStartScheduler+0xb8>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	60bb      	str	r3, [r7, #8]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c428:	4b1e      	ldr	r3, [pc, #120]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	021b      	lsls	r3, r3, #8
 800c42e:	4a1d      	ldr	r2, [pc, #116]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c432:	4b1c      	ldr	r3, [pc, #112]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c43a:	4a1a      	ldr	r2, [pc, #104]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c43c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	b2da      	uxtb	r2, r3
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c446:	4b18      	ldr	r3, [pc, #96]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a17      	ldr	r2, [pc, #92]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c44c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c452:	4b15      	ldr	r3, [pc, #84]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a14      	ldr	r2, [pc, #80]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c45c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c45e:	f000 f8dd 	bl	800c61c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c462:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <xPortStartScheduler+0x13c>)
 800c464:	2200      	movs	r2, #0
 800c466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c468:	f000 f8fc 	bl	800c664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c46c:	4b10      	ldr	r3, [pc, #64]	; (800c4b0 <xPortStartScheduler+0x140>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a0f      	ldr	r2, [pc, #60]	; (800c4b0 <xPortStartScheduler+0x140>)
 800c472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c478:	f7ff ff66 	bl	800c348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c47c:	f7ff f848 	bl	800b510 <vTaskSwitchContext>
	prvTaskExitError();
 800c480:	f7ff ff1e 	bl	800c2c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	e000ed00 	.word	0xe000ed00
 800c494:	410fc271 	.word	0x410fc271
 800c498:	410fc270 	.word	0x410fc270
 800c49c:	e000e400 	.word	0xe000e400
 800c4a0:	200028f8 	.word	0x200028f8
 800c4a4:	200028fc 	.word	0x200028fc
 800c4a8:	e000ed20 	.word	0xe000ed20
 800c4ac:	20000098 	.word	0x20000098
 800c4b0:	e000ef34 	.word	0xe000ef34

0800c4b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	607b      	str	r3, [r7, #4]
}
 800c4cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c4ce:	4b0f      	ldr	r3, [pc, #60]	; (800c50c <vPortEnterCritical+0x58>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	4a0d      	ldr	r2, [pc, #52]	; (800c50c <vPortEnterCritical+0x58>)
 800c4d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c4d8:	4b0c      	ldr	r3, [pc, #48]	; (800c50c <vPortEnterCritical+0x58>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d10f      	bne.n	800c500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c4e0:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <vPortEnterCritical+0x5c>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00a      	beq.n	800c500 <vPortEnterCritical+0x4c>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	603b      	str	r3, [r7, #0]
}
 800c4fc:	bf00      	nop
 800c4fe:	e7fe      	b.n	800c4fe <vPortEnterCritical+0x4a>
	}
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	20000098 	.word	0x20000098
 800c510:	e000ed04 	.word	0xe000ed04

0800c514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c51a:	4b12      	ldr	r3, [pc, #72]	; (800c564 <vPortExitCritical+0x50>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10a      	bne.n	800c538 <vPortExitCritical+0x24>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	607b      	str	r3, [r7, #4]
}
 800c534:	bf00      	nop
 800c536:	e7fe      	b.n	800c536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c538:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <vPortExitCritical+0x50>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	4a09      	ldr	r2, [pc, #36]	; (800c564 <vPortExitCritical+0x50>)
 800c540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c542:	4b08      	ldr	r3, [pc, #32]	; (800c564 <vPortExitCritical+0x50>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d105      	bne.n	800c556 <vPortExitCritical+0x42>
 800c54a:	2300      	movs	r3, #0
 800c54c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	f383 8811 	msr	BASEPRI, r3
}
 800c554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c556:	bf00      	nop
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	20000098 	.word	0x20000098
	...

0800c570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c570:	f3ef 8009 	mrs	r0, PSP
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	4b15      	ldr	r3, [pc, #84]	; (800c5d0 <pxCurrentTCBConst>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	f01e 0f10 	tst.w	lr, #16
 800c580:	bf08      	it	eq
 800c582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58a:	6010      	str	r0, [r2, #0]
 800c58c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c590:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c594:	f380 8811 	msr	BASEPRI, r0
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f7fe ffb6 	bl	800b510 <vTaskSwitchContext>
 800c5a4:	f04f 0000 	mov.w	r0, #0
 800c5a8:	f380 8811 	msr	BASEPRI, r0
 800c5ac:	bc09      	pop	{r0, r3}
 800c5ae:	6819      	ldr	r1, [r3, #0]
 800c5b0:	6808      	ldr	r0, [r1, #0]
 800c5b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b6:	f01e 0f10 	tst.w	lr, #16
 800c5ba:	bf08      	it	eq
 800c5bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c5c0:	f380 8809 	msr	PSP, r0
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	f3af 8000 	nop.w

0800c5d0 <pxCurrentTCBConst>:
 800c5d0:	200022cc 	.word	0x200022cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop

0800c5d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	607b      	str	r3, [r7, #4]
}
 800c5f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c5f2:	f7fe fed3 	bl	800b39c <xTaskIncrementTick>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c5fc:	4b06      	ldr	r3, [pc, #24]	; (800c618 <xPortSysTickHandler+0x40>)
 800c5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	2300      	movs	r3, #0
 800c606:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	f383 8811 	msr	BASEPRI, r3
}
 800c60e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c610:	bf00      	nop
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	e000ed04 	.word	0xe000ed04

0800c61c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c61c:	b480      	push	{r7}
 800c61e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c620:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <vPortSetupTimerInterrupt+0x34>)
 800c622:	2200      	movs	r2, #0
 800c624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c626:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <vPortSetupTimerInterrupt+0x38>)
 800c628:	2200      	movs	r2, #0
 800c62a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c62c:	4b0a      	ldr	r3, [pc, #40]	; (800c658 <vPortSetupTimerInterrupt+0x3c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a0a      	ldr	r2, [pc, #40]	; (800c65c <vPortSetupTimerInterrupt+0x40>)
 800c632:	fba2 2303 	umull	r2, r3, r2, r3
 800c636:	099b      	lsrs	r3, r3, #6
 800c638:	4a09      	ldr	r2, [pc, #36]	; (800c660 <vPortSetupTimerInterrupt+0x44>)
 800c63a:	3b01      	subs	r3, #1
 800c63c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c63e:	4b04      	ldr	r3, [pc, #16]	; (800c650 <vPortSetupTimerInterrupt+0x34>)
 800c640:	2207      	movs	r2, #7
 800c642:	601a      	str	r2, [r3, #0]
}
 800c644:	bf00      	nop
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	e000e010 	.word	0xe000e010
 800c654:	e000e018 	.word	0xe000e018
 800c658:	20000000 	.word	0x20000000
 800c65c:	10624dd3 	.word	0x10624dd3
 800c660:	e000e014 	.word	0xe000e014

0800c664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c674 <vPortEnableVFP+0x10>
 800c668:	6801      	ldr	r1, [r0, #0]
 800c66a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c66e:	6001      	str	r1, [r0, #0]
 800c670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c672:	bf00      	nop
 800c674:	e000ed88 	.word	0xe000ed88

0800c678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c67e:	f3ef 8305 	mrs	r3, IPSR
 800c682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b0f      	cmp	r3, #15
 800c688:	d914      	bls.n	800c6b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c68a:	4a17      	ldr	r2, [pc, #92]	; (800c6e8 <vPortValidateInterruptPriority+0x70>)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4413      	add	r3, r2
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c694:	4b15      	ldr	r3, [pc, #84]	; (800c6ec <vPortValidateInterruptPriority+0x74>)
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	7afa      	ldrb	r2, [r7, #11]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d20a      	bcs.n	800c6b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	607b      	str	r3, [r7, #4]
}
 800c6b0:	bf00      	nop
 800c6b2:	e7fe      	b.n	800c6b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c6b4:	4b0e      	ldr	r3, [pc, #56]	; (800c6f0 <vPortValidateInterruptPriority+0x78>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c6bc:	4b0d      	ldr	r3, [pc, #52]	; (800c6f4 <vPortValidateInterruptPriority+0x7c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d90a      	bls.n	800c6da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	603b      	str	r3, [r7, #0]
}
 800c6d6:	bf00      	nop
 800c6d8:	e7fe      	b.n	800c6d8 <vPortValidateInterruptPriority+0x60>
	}
 800c6da:	bf00      	nop
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	e000e3f0 	.word	0xe000e3f0
 800c6ec:	200028f8 	.word	0x200028f8
 800c6f0:	e000ed0c 	.word	0xe000ed0c
 800c6f4:	200028fc 	.word	0x200028fc

0800c6f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b08a      	sub	sp, #40	; 0x28
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c700:	2300      	movs	r3, #0
 800c702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c704:	f7fe fd8e 	bl	800b224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c708:	4b5b      	ldr	r3, [pc, #364]	; (800c878 <pvPortMalloc+0x180>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d101      	bne.n	800c714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c710:	f000 f920 	bl	800c954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c714:	4b59      	ldr	r3, [pc, #356]	; (800c87c <pvPortMalloc+0x184>)
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4013      	ands	r3, r2
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f040 8093 	bne.w	800c848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d01d      	beq.n	800c764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c728:	2208      	movs	r2, #8
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4413      	add	r3, r2
 800c72e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f003 0307 	and.w	r3, r3, #7
 800c736:	2b00      	cmp	r3, #0
 800c738:	d014      	beq.n	800c764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f023 0307 	bic.w	r3, r3, #7
 800c740:	3308      	adds	r3, #8
 800c742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f003 0307 	and.w	r3, r3, #7
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00a      	beq.n	800c764 <pvPortMalloc+0x6c>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	617b      	str	r3, [r7, #20]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d06e      	beq.n	800c848 <pvPortMalloc+0x150>
 800c76a:	4b45      	ldr	r3, [pc, #276]	; (800c880 <pvPortMalloc+0x188>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	429a      	cmp	r2, r3
 800c772:	d869      	bhi.n	800c848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c774:	4b43      	ldr	r3, [pc, #268]	; (800c884 <pvPortMalloc+0x18c>)
 800c776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c778:	4b42      	ldr	r3, [pc, #264]	; (800c884 <pvPortMalloc+0x18c>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c77e:	e004      	b.n	800c78a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	429a      	cmp	r2, r3
 800c792:	d903      	bls.n	800c79c <pvPortMalloc+0xa4>
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1f1      	bne.n	800c780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c79c:	4b36      	ldr	r3, [pc, #216]	; (800c878 <pvPortMalloc+0x180>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d050      	beq.n	800c848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2208      	movs	r2, #8
 800c7ac:	4413      	add	r3, r2
 800c7ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	1ad2      	subs	r2, r2, r3
 800c7c0:	2308      	movs	r3, #8
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d91f      	bls.n	800c808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	613b      	str	r3, [r7, #16]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	1ad2      	subs	r2, r2, r3
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c802:	69b8      	ldr	r0, [r7, #24]
 800c804:	f000 f908 	bl	800ca18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c808:	4b1d      	ldr	r3, [pc, #116]	; (800c880 <pvPortMalloc+0x188>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	4a1b      	ldr	r2, [pc, #108]	; (800c880 <pvPortMalloc+0x188>)
 800c814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c816:	4b1a      	ldr	r3, [pc, #104]	; (800c880 <pvPortMalloc+0x188>)
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	4b1b      	ldr	r3, [pc, #108]	; (800c888 <pvPortMalloc+0x190>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d203      	bcs.n	800c82a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c822:	4b17      	ldr	r3, [pc, #92]	; (800c880 <pvPortMalloc+0x188>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a18      	ldr	r2, [pc, #96]	; (800c888 <pvPortMalloc+0x190>)
 800c828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	4b13      	ldr	r3, [pc, #76]	; (800c87c <pvPortMalloc+0x184>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	431a      	orrs	r2, r3
 800c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c83e:	4b13      	ldr	r3, [pc, #76]	; (800c88c <pvPortMalloc+0x194>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	3301      	adds	r3, #1
 800c844:	4a11      	ldr	r2, [pc, #68]	; (800c88c <pvPortMalloc+0x194>)
 800c846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c848:	f7fe fcfa 	bl	800b240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	f003 0307 	and.w	r3, r3, #7
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00a      	beq.n	800c86c <pvPortMalloc+0x174>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	60fb      	str	r3, [r7, #12]
}
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <pvPortMalloc+0x172>
	return pvReturn;
 800c86c:	69fb      	ldr	r3, [r7, #28]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3728      	adds	r7, #40	; 0x28
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	20006508 	.word	0x20006508
 800c87c:	2000651c 	.word	0x2000651c
 800c880:	2000650c 	.word	0x2000650c
 800c884:	20006500 	.word	0x20006500
 800c888:	20006510 	.word	0x20006510
 800c88c:	20006514 	.word	0x20006514

0800c890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d04d      	beq.n	800c93e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c8a2:	2308      	movs	r3, #8
 800c8a4:	425b      	negs	r3, r3
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	4b24      	ldr	r3, [pc, #144]	; (800c948 <vPortFree+0xb8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4013      	ands	r3, r2
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10a      	bne.n	800c8d4 <vPortFree+0x44>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	60fb      	str	r3, [r7, #12]
}
 800c8d0:	bf00      	nop
 800c8d2:	e7fe      	b.n	800c8d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00a      	beq.n	800c8f2 <vPortFree+0x62>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	60bb      	str	r3, [r7, #8]
}
 800c8ee:	bf00      	nop
 800c8f0:	e7fe      	b.n	800c8f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	4b14      	ldr	r3, [pc, #80]	; (800c948 <vPortFree+0xb8>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d01e      	beq.n	800c93e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d11a      	bne.n	800c93e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	4b0e      	ldr	r3, [pc, #56]	; (800c948 <vPortFree+0xb8>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	43db      	mvns	r3, r3
 800c912:	401a      	ands	r2, r3
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c918:	f7fe fc84 	bl	800b224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	4b0a      	ldr	r3, [pc, #40]	; (800c94c <vPortFree+0xbc>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4413      	add	r3, r2
 800c926:	4a09      	ldr	r2, [pc, #36]	; (800c94c <vPortFree+0xbc>)
 800c928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c92a:	6938      	ldr	r0, [r7, #16]
 800c92c:	f000 f874 	bl	800ca18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c930:	4b07      	ldr	r3, [pc, #28]	; (800c950 <vPortFree+0xc0>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	3301      	adds	r3, #1
 800c936:	4a06      	ldr	r2, [pc, #24]	; (800c950 <vPortFree+0xc0>)
 800c938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c93a:	f7fe fc81 	bl	800b240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c93e:	bf00      	nop
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	2000651c 	.word	0x2000651c
 800c94c:	2000650c 	.word	0x2000650c
 800c950:	20006518 	.word	0x20006518

0800c954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c95a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c95e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c960:	4b27      	ldr	r3, [pc, #156]	; (800ca00 <prvHeapInit+0xac>)
 800c962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f003 0307 	and.w	r3, r3, #7
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00c      	beq.n	800c988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3307      	adds	r3, #7
 800c972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f023 0307 	bic.w	r3, r3, #7
 800c97a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	4a1f      	ldr	r2, [pc, #124]	; (800ca00 <prvHeapInit+0xac>)
 800c984:	4413      	add	r3, r2
 800c986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c98c:	4a1d      	ldr	r2, [pc, #116]	; (800ca04 <prvHeapInit+0xb0>)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c992:	4b1c      	ldr	r3, [pc, #112]	; (800ca04 <prvHeapInit+0xb0>)
 800c994:	2200      	movs	r2, #0
 800c996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	4413      	add	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9a0:	2208      	movs	r2, #8
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	1a9b      	subs	r3, r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f023 0307 	bic.w	r3, r3, #7
 800c9ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	4a15      	ldr	r2, [pc, #84]	; (800ca08 <prvHeapInit+0xb4>)
 800c9b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9b6:	4b14      	ldr	r3, [pc, #80]	; (800ca08 <prvHeapInit+0xb4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9be:	4b12      	ldr	r3, [pc, #72]	; (800ca08 <prvHeapInit+0xb4>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	1ad2      	subs	r2, r2, r3
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9d4:	4b0c      	ldr	r3, [pc, #48]	; (800ca08 <prvHeapInit+0xb4>)
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	4a0a      	ldr	r2, [pc, #40]	; (800ca0c <prvHeapInit+0xb8>)
 800c9e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	4a09      	ldr	r2, [pc, #36]	; (800ca10 <prvHeapInit+0xbc>)
 800c9ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c9ec:	4b09      	ldr	r3, [pc, #36]	; (800ca14 <prvHeapInit+0xc0>)
 800c9ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c9f2:	601a      	str	r2, [r3, #0]
}
 800c9f4:	bf00      	nop
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	20002900 	.word	0x20002900
 800ca04:	20006500 	.word	0x20006500
 800ca08:	20006508 	.word	0x20006508
 800ca0c:	20006510 	.word	0x20006510
 800ca10:	2000650c 	.word	0x2000650c
 800ca14:	2000651c 	.word	0x2000651c

0800ca18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca20:	4b28      	ldr	r3, [pc, #160]	; (800cac4 <prvInsertBlockIntoFreeList+0xac>)
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	e002      	b.n	800ca2c <prvInsertBlockIntoFreeList+0x14>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d8f7      	bhi.n	800ca26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	4413      	add	r3, r2
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d108      	bne.n	800ca5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	441a      	add	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	441a      	add	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d118      	bne.n	800caa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	4b15      	ldr	r3, [pc, #84]	; (800cac8 <prvInsertBlockIntoFreeList+0xb0>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d00d      	beq.n	800ca96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	441a      	add	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	e008      	b.n	800caa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca96:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <prvInsertBlockIntoFreeList+0xb0>)
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	e003      	b.n	800caa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	429a      	cmp	r2, r3
 800caae:	d002      	beq.n	800cab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cab6:	bf00      	nop
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	20006500 	.word	0x20006500
 800cac8:	20006508 	.word	0x20006508

0800cacc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cad0:	2200      	movs	r2, #0
 800cad2:	4912      	ldr	r1, [pc, #72]	; (800cb1c <MX_USB_DEVICE_Init+0x50>)
 800cad4:	4812      	ldr	r0, [pc, #72]	; (800cb20 <MX_USB_DEVICE_Init+0x54>)
 800cad6:	f7fb ff2d 	bl	8008934 <USBD_Init>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cae0:	f7f4 fe38 	bl	8001754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cae4:	490f      	ldr	r1, [pc, #60]	; (800cb24 <MX_USB_DEVICE_Init+0x58>)
 800cae6:	480e      	ldr	r0, [pc, #56]	; (800cb20 <MX_USB_DEVICE_Init+0x54>)
 800cae8:	f7fb ff54 	bl	8008994 <USBD_RegisterClass>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800caf2:	f7f4 fe2f 	bl	8001754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800caf6:	490c      	ldr	r1, [pc, #48]	; (800cb28 <MX_USB_DEVICE_Init+0x5c>)
 800caf8:	4809      	ldr	r0, [pc, #36]	; (800cb20 <MX_USB_DEVICE_Init+0x54>)
 800cafa:	f7fb fe45 	bl	8008788 <USBD_CDC_RegisterInterface>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d001      	beq.n	800cb08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb04:	f7f4 fe26 	bl	8001754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb08:	4805      	ldr	r0, [pc, #20]	; (800cb20 <MX_USB_DEVICE_Init+0x54>)
 800cb0a:	f7fb ff79 	bl	8008a00 <USBD_Start>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d001      	beq.n	800cb18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb14:	f7f4 fe1e 	bl	8001754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb18:	bf00      	nop
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	200000b0 	.word	0x200000b0
 800cb20:	20006520 	.word	0x20006520
 800cb24:	20000018 	.word	0x20000018
 800cb28:	2000009c 	.word	0x2000009c

0800cb2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cb30:	2200      	movs	r2, #0
 800cb32:	4905      	ldr	r1, [pc, #20]	; (800cb48 <CDC_Init_FS+0x1c>)
 800cb34:	4805      	ldr	r0, [pc, #20]	; (800cb4c <CDC_Init_FS+0x20>)
 800cb36:	f7fb fe41 	bl	80087bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cb3a:	4905      	ldr	r1, [pc, #20]	; (800cb50 <CDC_Init_FS+0x24>)
 800cb3c:	4803      	ldr	r0, [pc, #12]	; (800cb4c <CDC_Init_FS+0x20>)
 800cb3e:	f7fb fe5f 	bl	8008800 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cb42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	20006ffc 	.word	0x20006ffc
 800cb4c:	20006520 	.word	0x20006520
 800cb50:	200067fc 	.word	0x200067fc

0800cb54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cb54:	b480      	push	{r7}
 800cb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	6039      	str	r1, [r7, #0]
 800cb6e:	71fb      	strb	r3, [r7, #7]
 800cb70:	4613      	mov	r3, r2
 800cb72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cb74:	79fb      	ldrb	r3, [r7, #7]
 800cb76:	2b23      	cmp	r3, #35	; 0x23
 800cb78:	d84a      	bhi.n	800cc10 <CDC_Control_FS+0xac>
 800cb7a:	a201      	add	r2, pc, #4	; (adr r2, 800cb80 <CDC_Control_FS+0x1c>)
 800cb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb80:	0800cc11 	.word	0x0800cc11
 800cb84:	0800cc11 	.word	0x0800cc11
 800cb88:	0800cc11 	.word	0x0800cc11
 800cb8c:	0800cc11 	.word	0x0800cc11
 800cb90:	0800cc11 	.word	0x0800cc11
 800cb94:	0800cc11 	.word	0x0800cc11
 800cb98:	0800cc11 	.word	0x0800cc11
 800cb9c:	0800cc11 	.word	0x0800cc11
 800cba0:	0800cc11 	.word	0x0800cc11
 800cba4:	0800cc11 	.word	0x0800cc11
 800cba8:	0800cc11 	.word	0x0800cc11
 800cbac:	0800cc11 	.word	0x0800cc11
 800cbb0:	0800cc11 	.word	0x0800cc11
 800cbb4:	0800cc11 	.word	0x0800cc11
 800cbb8:	0800cc11 	.word	0x0800cc11
 800cbbc:	0800cc11 	.word	0x0800cc11
 800cbc0:	0800cc11 	.word	0x0800cc11
 800cbc4:	0800cc11 	.word	0x0800cc11
 800cbc8:	0800cc11 	.word	0x0800cc11
 800cbcc:	0800cc11 	.word	0x0800cc11
 800cbd0:	0800cc11 	.word	0x0800cc11
 800cbd4:	0800cc11 	.word	0x0800cc11
 800cbd8:	0800cc11 	.word	0x0800cc11
 800cbdc:	0800cc11 	.word	0x0800cc11
 800cbe0:	0800cc11 	.word	0x0800cc11
 800cbe4:	0800cc11 	.word	0x0800cc11
 800cbe8:	0800cc11 	.word	0x0800cc11
 800cbec:	0800cc11 	.word	0x0800cc11
 800cbf0:	0800cc11 	.word	0x0800cc11
 800cbf4:	0800cc11 	.word	0x0800cc11
 800cbf8:	0800cc11 	.word	0x0800cc11
 800cbfc:	0800cc11 	.word	0x0800cc11
 800cc00:	0800cc11 	.word	0x0800cc11
 800cc04:	0800cc11 	.word	0x0800cc11
 800cc08:	0800cc11 	.word	0x0800cc11
 800cc0c:	0800cc11 	.word	0x0800cc11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cc10:	bf00      	nop
  }

  return (USBD_OK);
 800cc12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cc2a:	6879      	ldr	r1, [r7, #4]
 800cc2c:	4805      	ldr	r0, [pc, #20]	; (800cc44 <CDC_Receive_FS+0x24>)
 800cc2e:	f7fb fde7 	bl	8008800 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cc32:	4804      	ldr	r0, [pc, #16]	; (800cc44 <CDC_Receive_FS+0x24>)
 800cc34:	f7fb fe48 	bl	80088c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cc38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20006520 	.word	0x20006520

0800cc48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cc58:	4b0d      	ldr	r3, [pc, #52]	; (800cc90 <CDC_Transmit_FS+0x48>)
 800cc5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e00b      	b.n	800cc86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cc6e:	887b      	ldrh	r3, [r7, #2]
 800cc70:	461a      	mov	r2, r3
 800cc72:	6879      	ldr	r1, [r7, #4]
 800cc74:	4806      	ldr	r0, [pc, #24]	; (800cc90 <CDC_Transmit_FS+0x48>)
 800cc76:	f7fb fda1 	bl	80087bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cc7a:	4805      	ldr	r0, [pc, #20]	; (800cc90 <CDC_Transmit_FS+0x48>)
 800cc7c:	f7fb fdde 	bl	800883c <USBD_CDC_TransmitPacket>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	20006520 	.word	0x20006520

0800cc94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b087      	sub	sp, #28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cca2:	2300      	movs	r3, #0
 800cca4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	371c      	adds	r7, #28
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
	...

0800ccb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	6039      	str	r1, [r7, #0]
 800ccc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	2212      	movs	r2, #18
 800ccc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ccca:	4b03      	ldr	r3, [pc, #12]	; (800ccd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr
 800ccd8:	200000d0 	.word	0x200000d0

0800ccdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	4603      	mov	r3, r0
 800cce4:	6039      	str	r1, [r7, #0]
 800cce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	2204      	movs	r2, #4
 800ccec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ccee:	4b03      	ldr	r3, [pc, #12]	; (800ccfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	200000f0 	.word	0x200000f0

0800cd00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	4603      	mov	r3, r0
 800cd08:	6039      	str	r1, [r7, #0]
 800cd0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd0c:	79fb      	ldrb	r3, [r7, #7]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d105      	bne.n	800cd1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	4907      	ldr	r1, [pc, #28]	; (800cd34 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd16:	4808      	ldr	r0, [pc, #32]	; (800cd38 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd18:	f7fd f848 	bl	8009dac <USBD_GetString>
 800cd1c:	e004      	b.n	800cd28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	4904      	ldr	r1, [pc, #16]	; (800cd34 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd22:	4805      	ldr	r0, [pc, #20]	; (800cd38 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd24:	f7fd f842 	bl	8009dac <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd28:	4b02      	ldr	r3, [pc, #8]	; (800cd34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3708      	adds	r7, #8
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	200077fc 	.word	0x200077fc
 800cd38:	08010f34 	.word	0x08010f34

0800cd3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	6039      	str	r1, [r7, #0]
 800cd46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd48:	683a      	ldr	r2, [r7, #0]
 800cd4a:	4904      	ldr	r1, [pc, #16]	; (800cd5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd4c:	4804      	ldr	r0, [pc, #16]	; (800cd60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd4e:	f7fd f82d 	bl	8009dac <USBD_GetString>
  return USBD_StrDesc;
 800cd52:	4b02      	ldr	r3, [pc, #8]	; (800cd5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	200077fc 	.word	0x200077fc
 800cd60:	08010f44 	.word	0x08010f44

0800cd64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	6039      	str	r1, [r7, #0]
 800cd6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	221a      	movs	r2, #26
 800cd74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd76:	f000 f855 	bl	800ce24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd7a:	4b02      	ldr	r3, [pc, #8]	; (800cd84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	200000f4 	.word	0x200000f4

0800cd88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	4603      	mov	r3, r0
 800cd90:	6039      	str	r1, [r7, #0]
 800cd92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd94:	79fb      	ldrb	r3, [r7, #7]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d105      	bne.n	800cda6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd9a:	683a      	ldr	r2, [r7, #0]
 800cd9c:	4907      	ldr	r1, [pc, #28]	; (800cdbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd9e:	4808      	ldr	r0, [pc, #32]	; (800cdc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cda0:	f7fd f804 	bl	8009dac <USBD_GetString>
 800cda4:	e004      	b.n	800cdb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	4904      	ldr	r1, [pc, #16]	; (800cdbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800cdaa:	4805      	ldr	r0, [pc, #20]	; (800cdc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cdac:	f7fc fffe 	bl	8009dac <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdb0:	4b02      	ldr	r3, [pc, #8]	; (800cdbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	200077fc 	.word	0x200077fc
 800cdc0:	08010f58 	.word	0x08010f58

0800cdc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	4603      	mov	r3, r0
 800cdcc:	6039      	str	r1, [r7, #0]
 800cdce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d105      	bne.n	800cde2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	4907      	ldr	r1, [pc, #28]	; (800cdf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdda:	4808      	ldr	r0, [pc, #32]	; (800cdfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cddc:	f7fc ffe6 	bl	8009dac <USBD_GetString>
 800cde0:	e004      	b.n	800cdec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	4904      	ldr	r1, [pc, #16]	; (800cdf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cde6:	4805      	ldr	r0, [pc, #20]	; (800cdfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cde8:	f7fc ffe0 	bl	8009dac <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdec:	4b02      	ldr	r3, [pc, #8]	; (800cdf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	200077fc 	.word	0x200077fc
 800cdfc:	08010f64 	.word	0x08010f64

0800ce00 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	4603      	mov	r3, r0
 800ce08:	6039      	str	r1, [r7, #0]
 800ce0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	220c      	movs	r2, #12
 800ce10:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ce12:	4b03      	ldr	r3, [pc, #12]	; (800ce20 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	200000e4 	.word	0x200000e4

0800ce24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce2a:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <Get_SerialNum+0x44>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce30:	4b0e      	ldr	r3, [pc, #56]	; (800ce6c <Get_SerialNum+0x48>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce36:	4b0e      	ldr	r3, [pc, #56]	; (800ce70 <Get_SerialNum+0x4c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4413      	add	r3, r2
 800ce42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d009      	beq.n	800ce5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce4a:	2208      	movs	r2, #8
 800ce4c:	4909      	ldr	r1, [pc, #36]	; (800ce74 <Get_SerialNum+0x50>)
 800ce4e:	68f8      	ldr	r0, [r7, #12]
 800ce50:	f000 f814 	bl	800ce7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce54:	2204      	movs	r2, #4
 800ce56:	4908      	ldr	r1, [pc, #32]	; (800ce78 <Get_SerialNum+0x54>)
 800ce58:	68b8      	ldr	r0, [r7, #8]
 800ce5a:	f000 f80f 	bl	800ce7c <IntToUnicode>
  }
}
 800ce5e:	bf00      	nop
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	1fff7a10 	.word	0x1fff7a10
 800ce6c:	1fff7a14 	.word	0x1fff7a14
 800ce70:	1fff7a18 	.word	0x1fff7a18
 800ce74:	200000f6 	.word	0x200000f6
 800ce78:	20000106 	.word	0x20000106

0800ce7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b087      	sub	sp, #28
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	4613      	mov	r3, r2
 800ce88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce8e:	2300      	movs	r3, #0
 800ce90:	75fb      	strb	r3, [r7, #23]
 800ce92:	e027      	b.n	800cee4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	0f1b      	lsrs	r3, r3, #28
 800ce98:	2b09      	cmp	r3, #9
 800ce9a:	d80b      	bhi.n	800ceb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	0f1b      	lsrs	r3, r3, #28
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	7dfb      	ldrb	r3, [r7, #23]
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	4619      	mov	r1, r3
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	440b      	add	r3, r1
 800ceac:	3230      	adds	r2, #48	; 0x30
 800ceae:	b2d2      	uxtb	r2, r2
 800ceb0:	701a      	strb	r2, [r3, #0]
 800ceb2:	e00a      	b.n	800ceca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	0f1b      	lsrs	r3, r3, #28
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	005b      	lsls	r3, r3, #1
 800cebe:	4619      	mov	r1, r3
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	440b      	add	r3, r1
 800cec4:	3237      	adds	r2, #55	; 0x37
 800cec6:	b2d2      	uxtb	r2, r2
 800cec8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	011b      	lsls	r3, r3, #4
 800cece:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	3301      	adds	r3, #1
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	4413      	add	r3, r2
 800ceda:	2200      	movs	r2, #0
 800cedc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	3301      	adds	r3, #1
 800cee2:	75fb      	strb	r3, [r7, #23]
 800cee4:	7dfa      	ldrb	r2, [r7, #23]
 800cee6:	79fb      	ldrb	r3, [r7, #7]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d3d3      	bcc.n	800ce94 <IntToUnicode+0x18>
  }
}
 800ceec:	bf00      	nop
 800ceee:	bf00      	nop
 800cef0:	371c      	adds	r7, #28
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
	...

0800cefc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b0a0      	sub	sp, #128	; 0x80
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cf08:	2200      	movs	r2, #0
 800cf0a:	601a      	str	r2, [r3, #0]
 800cf0c:	605a      	str	r2, [r3, #4]
 800cf0e:	609a      	str	r2, [r3, #8]
 800cf10:	60da      	str	r2, [r3, #12]
 800cf12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cf14:	f107 0310 	add.w	r3, r7, #16
 800cf18:	225c      	movs	r2, #92	; 0x5c
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f000 fca4 	bl	800d86a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf2a:	d156      	bne.n	800cfda <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cf2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800cf32:	2300      	movs	r3, #0
 800cf34:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cf36:	f107 0310 	add.w	r3, r7, #16
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7f7 f83a 	bl	8003fb4 <HAL_RCCEx_PeriphCLKConfig>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d001      	beq.n	800cf4a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800cf46:	f7f4 fc05 	bl	8001754 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60fb      	str	r3, [r7, #12]
 800cf4e:	4b25      	ldr	r3, [pc, #148]	; (800cfe4 <HAL_PCD_MspInit+0xe8>)
 800cf50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf52:	4a24      	ldr	r2, [pc, #144]	; (800cfe4 <HAL_PCD_MspInit+0xe8>)
 800cf54:	f043 0301 	orr.w	r3, r3, #1
 800cf58:	6313      	str	r3, [r2, #48]	; 0x30
 800cf5a:	4b22      	ldr	r3, [pc, #136]	; (800cfe4 <HAL_PCD_MspInit+0xe8>)
 800cf5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	60fb      	str	r3, [r7, #12]
 800cf64:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cf66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cf78:	4619      	mov	r1, r3
 800cf7a:	481b      	ldr	r0, [pc, #108]	; (800cfe8 <HAL_PCD_MspInit+0xec>)
 800cf7c:	f7f5 f874 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cf80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf84:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf86:	2302      	movs	r3, #2
 800cf88:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf8e:	2303      	movs	r3, #3
 800cf90:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cf92:	230a      	movs	r3, #10
 800cf94:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	4812      	ldr	r0, [pc, #72]	; (800cfe8 <HAL_PCD_MspInit+0xec>)
 800cf9e:	f7f5 f863 	bl	8002068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cfa2:	4b10      	ldr	r3, [pc, #64]	; (800cfe4 <HAL_PCD_MspInit+0xe8>)
 800cfa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa6:	4a0f      	ldr	r2, [pc, #60]	; (800cfe4 <HAL_PCD_MspInit+0xe8>)
 800cfa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfac:	6353      	str	r3, [r2, #52]	; 0x34
 800cfae:	2300      	movs	r3, #0
 800cfb0:	60bb      	str	r3, [r7, #8]
 800cfb2:	4b0c      	ldr	r3, [pc, #48]	; (800cfe4 <HAL_PCD_MspInit+0xe8>)
 800cfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfb6:	4a0b      	ldr	r2, [pc, #44]	; (800cfe4 <HAL_PCD_MspInit+0xe8>)
 800cfb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cfbc:	6453      	str	r3, [r2, #68]	; 0x44
 800cfbe:	4b09      	ldr	r3, [pc, #36]	; (800cfe4 <HAL_PCD_MspInit+0xe8>)
 800cfc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfc6:	60bb      	str	r3, [r7, #8]
 800cfc8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800cfca:	2200      	movs	r2, #0
 800cfcc:	2105      	movs	r1, #5
 800cfce:	2043      	movs	r0, #67	; 0x43
 800cfd0:	f7f5 f813 	bl	8001ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cfd4:	2043      	movs	r0, #67	; 0x43
 800cfd6:	f7f5 f82c 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cfda:	bf00      	nop
 800cfdc:	3780      	adds	r7, #128	; 0x80
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	40023800 	.word	0x40023800
 800cfe8:	40020000 	.word	0x40020000

0800cfec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d000:	4619      	mov	r1, r3
 800d002:	4610      	mov	r0, r2
 800d004:	f7fb fd49 	bl	8008a9a <USBD_LL_SetupStage>
}
 800d008:	bf00      	nop
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	460b      	mov	r3, r1
 800d01a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d022:	78fa      	ldrb	r2, [r7, #3]
 800d024:	6879      	ldr	r1, [r7, #4]
 800d026:	4613      	mov	r3, r2
 800d028:	00db      	lsls	r3, r3, #3
 800d02a:	4413      	add	r3, r2
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	440b      	add	r3, r1
 800d030:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	78fb      	ldrb	r3, [r7, #3]
 800d038:	4619      	mov	r1, r3
 800d03a:	f7fb fd83 	bl	8008b44 <USBD_LL_DataOutStage>
}
 800d03e:	bf00      	nop
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b082      	sub	sp, #8
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	460b      	mov	r3, r1
 800d050:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d058:	78fa      	ldrb	r2, [r7, #3]
 800d05a:	6879      	ldr	r1, [r7, #4]
 800d05c:	4613      	mov	r3, r2
 800d05e:	00db      	lsls	r3, r3, #3
 800d060:	4413      	add	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	440b      	add	r3, r1
 800d066:	334c      	adds	r3, #76	; 0x4c
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	78fb      	ldrb	r3, [r7, #3]
 800d06c:	4619      	mov	r1, r3
 800d06e:	f7fb fe1c 	bl	8008caa <USBD_LL_DataInStage>
}
 800d072:	bf00      	nop
 800d074:	3708      	adds	r7, #8
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b082      	sub	sp, #8
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fb ff50 	bl	8008f2e <USBD_LL_SOF>
}
 800d08e:	bf00      	nop
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b084      	sub	sp, #16
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d102      	bne.n	800d0b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	73fb      	strb	r3, [r7, #15]
 800d0ae:	e008      	b.n	800d0c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d102      	bne.n	800d0be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	73fb      	strb	r3, [r7, #15]
 800d0bc:	e001      	b.n	800d0c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d0be:	f7f4 fb49 	bl	8001754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0c8:	7bfa      	ldrb	r2, [r7, #15]
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7fb fef0 	bl	8008eb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fb fe98 	bl	8008e0e <USBD_LL_Reset>
}
 800d0de:	bf00      	nop
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
	...

0800d0e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fb feeb 	bl	8008ed2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	6812      	ldr	r2, [r2, #0]
 800d10a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d10e:	f043 0301 	orr.w	r3, r3, #1
 800d112:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6a1b      	ldr	r3, [r3, #32]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d005      	beq.n	800d128 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d11c:	4b04      	ldr	r3, [pc, #16]	; (800d130 <HAL_PCD_SuspendCallback+0x48>)
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	4a03      	ldr	r2, [pc, #12]	; (800d130 <HAL_PCD_SuspendCallback+0x48>)
 800d122:	f043 0306 	orr.w	r3, r3, #6
 800d126:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d128:	bf00      	nop
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	e000ed00 	.word	0xe000ed00

0800d134 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d142:	4618      	mov	r0, r3
 800d144:	f7fb fedb 	bl	8008efe <USBD_LL_Resume>
}
 800d148:	bf00      	nop
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	460b      	mov	r3, r1
 800d15a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d162:	78fa      	ldrb	r2, [r7, #3]
 800d164:	4611      	mov	r1, r2
 800d166:	4618      	mov	r0, r3
 800d168:	f7fb ff33 	bl	8008fd2 <USBD_LL_IsoOUTIncomplete>
}
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d186:	78fa      	ldrb	r2, [r7, #3]
 800d188:	4611      	mov	r1, r2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fb feef 	bl	8008f6e <USBD_LL_IsoINIncomplete>
}
 800d190:	bf00      	nop
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fb ff45 	bl	8009036 <USBD_LL_DevConnected>
}
 800d1ac:	bf00      	nop
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fb ff42 	bl	800904c <USBD_LL_DevDisconnected>
}
 800d1c8:	bf00      	nop
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d13c      	bne.n	800d25a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d1e0:	4a20      	ldr	r2, [pc, #128]	; (800d264 <USBD_LL_Init+0x94>)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a1e      	ldr	r2, [pc, #120]	; (800d264 <USBD_LL_Init+0x94>)
 800d1ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d1f0:	4b1c      	ldr	r3, [pc, #112]	; (800d264 <USBD_LL_Init+0x94>)
 800d1f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d1f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d1f8:	4b1a      	ldr	r3, [pc, #104]	; (800d264 <USBD_LL_Init+0x94>)
 800d1fa:	2206      	movs	r2, #6
 800d1fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d1fe:	4b19      	ldr	r3, [pc, #100]	; (800d264 <USBD_LL_Init+0x94>)
 800d200:	2202      	movs	r2, #2
 800d202:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d204:	4b17      	ldr	r3, [pc, #92]	; (800d264 <USBD_LL_Init+0x94>)
 800d206:	2200      	movs	r2, #0
 800d208:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d20a:	4b16      	ldr	r3, [pc, #88]	; (800d264 <USBD_LL_Init+0x94>)
 800d20c:	2202      	movs	r2, #2
 800d20e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d210:	4b14      	ldr	r3, [pc, #80]	; (800d264 <USBD_LL_Init+0x94>)
 800d212:	2200      	movs	r2, #0
 800d214:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d216:	4b13      	ldr	r3, [pc, #76]	; (800d264 <USBD_LL_Init+0x94>)
 800d218:	2200      	movs	r2, #0
 800d21a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d21c:	4b11      	ldr	r3, [pc, #68]	; (800d264 <USBD_LL_Init+0x94>)
 800d21e:	2200      	movs	r2, #0
 800d220:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d222:	4b10      	ldr	r3, [pc, #64]	; (800d264 <USBD_LL_Init+0x94>)
 800d224:	2201      	movs	r2, #1
 800d226:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d228:	4b0e      	ldr	r3, [pc, #56]	; (800d264 <USBD_LL_Init+0x94>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d22e:	480d      	ldr	r0, [pc, #52]	; (800d264 <USBD_LL_Init+0x94>)
 800d230:	f7f5 fadd 	bl	80027ee <HAL_PCD_Init>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d001      	beq.n	800d23e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d23a:	f7f4 fa8b 	bl	8001754 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d23e:	2180      	movs	r1, #128	; 0x80
 800d240:	4808      	ldr	r0, [pc, #32]	; (800d264 <USBD_LL_Init+0x94>)
 800d242:	f7f6 fd68 	bl	8003d16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d246:	2240      	movs	r2, #64	; 0x40
 800d248:	2100      	movs	r1, #0
 800d24a:	4806      	ldr	r0, [pc, #24]	; (800d264 <USBD_LL_Init+0x94>)
 800d24c:	f7f6 fd1c 	bl	8003c88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d250:	2280      	movs	r2, #128	; 0x80
 800d252:	2101      	movs	r1, #1
 800d254:	4803      	ldr	r0, [pc, #12]	; (800d264 <USBD_LL_Init+0x94>)
 800d256:	f7f6 fd17 	bl	8003c88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	200079fc 	.word	0x200079fc

0800d268 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d270:	2300      	movs	r3, #0
 800d272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d274:	2300      	movs	r3, #0
 800d276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d27e:	4618      	mov	r0, r3
 800d280:	f7f5 fbd9 	bl	8002a36 <HAL_PCD_Start>
 800d284:	4603      	mov	r3, r0
 800d286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d288:	7bfb      	ldrb	r3, [r7, #15]
 800d28a:	4618      	mov	r0, r3
 800d28c:	f000 f990 	bl	800d5b0 <USBD_Get_USB_Status>
 800d290:	4603      	mov	r3, r0
 800d292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d294:	7bbb      	ldrb	r3, [r7, #14]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3710      	adds	r7, #16
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	4608      	mov	r0, r1
 800d2a8:	4611      	mov	r1, r2
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	70fb      	strb	r3, [r7, #3]
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	70bb      	strb	r3, [r7, #2]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2c6:	78bb      	ldrb	r3, [r7, #2]
 800d2c8:	883a      	ldrh	r2, [r7, #0]
 800d2ca:	78f9      	ldrb	r1, [r7, #3]
 800d2cc:	f7f6 f8d7 	bl	800347e <HAL_PCD_EP_Open>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d4:	7bfb      	ldrb	r3, [r7, #15]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 f96a 	bl	800d5b0 <USBD_Get_USB_Status>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b084      	sub	sp, #16
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d304:	78fa      	ldrb	r2, [r7, #3]
 800d306:	4611      	mov	r1, r2
 800d308:	4618      	mov	r0, r3
 800d30a:	f7f6 f920 	bl	800354e <HAL_PCD_EP_Close>
 800d30e:	4603      	mov	r3, r0
 800d310:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d312:	7bfb      	ldrb	r3, [r7, #15]
 800d314:	4618      	mov	r0, r3
 800d316:	f000 f94b 	bl	800d5b0 <USBD_Get_USB_Status>
 800d31a:	4603      	mov	r3, r0
 800d31c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d31e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3710      	adds	r7, #16
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	460b      	mov	r3, r1
 800d332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d334:	2300      	movs	r3, #0
 800d336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d342:	78fa      	ldrb	r2, [r7, #3]
 800d344:	4611      	mov	r1, r2
 800d346:	4618      	mov	r0, r3
 800d348:	f7f6 f9f8 	bl	800373c <HAL_PCD_EP_SetStall>
 800d34c:	4603      	mov	r3, r0
 800d34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d350:	7bfb      	ldrb	r3, [r7, #15]
 800d352:	4618      	mov	r0, r3
 800d354:	f000 f92c 	bl	800d5b0 <USBD_Get_USB_Status>
 800d358:	4603      	mov	r3, r0
 800d35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d366:	b580      	push	{r7, lr}
 800d368:	b084      	sub	sp, #16
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
 800d36e:	460b      	mov	r3, r1
 800d370:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d372:	2300      	movs	r3, #0
 800d374:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d380:	78fa      	ldrb	r2, [r7, #3]
 800d382:	4611      	mov	r1, r2
 800d384:	4618      	mov	r0, r3
 800d386:	f7f6 fa3d 	bl	8003804 <HAL_PCD_EP_ClrStall>
 800d38a:	4603      	mov	r3, r0
 800d38c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d38e:	7bfb      	ldrb	r3, [r7, #15]
 800d390:	4618      	mov	r0, r3
 800d392:	f000 f90d 	bl	800d5b0 <USBD_Get_USB_Status>
 800d396:	4603      	mov	r3, r0
 800d398:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d39a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	da0b      	bge.n	800d3d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3c0:	78fb      	ldrb	r3, [r7, #3]
 800d3c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3c6:	68f9      	ldr	r1, [r7, #12]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	00db      	lsls	r3, r3, #3
 800d3cc:	4413      	add	r3, r2
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	440b      	add	r3, r1
 800d3d2:	333e      	adds	r3, #62	; 0x3e
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	e00b      	b.n	800d3f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d3d8:	78fb      	ldrb	r3, [r7, #3]
 800d3da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3de:	68f9      	ldr	r1, [r7, #12]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	00db      	lsls	r3, r3, #3
 800d3e4:	4413      	add	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	440b      	add	r3, r1
 800d3ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d3ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d416:	78fa      	ldrb	r2, [r7, #3]
 800d418:	4611      	mov	r1, r2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7f6 f80a 	bl	8003434 <HAL_PCD_SetAddress>
 800d420:	4603      	mov	r3, r0
 800d422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d424:	7bfb      	ldrb	r3, [r7, #15]
 800d426:	4618      	mov	r0, r3
 800d428:	f000 f8c2 	bl	800d5b0 <USBD_Get_USB_Status>
 800d42c:	4603      	mov	r3, r0
 800d42e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d430:	7bbb      	ldrb	r3, [r7, #14]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b086      	sub	sp, #24
 800d43e:	af00      	add	r7, sp, #0
 800d440:	60f8      	str	r0, [r7, #12]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]
 800d446:	460b      	mov	r3, r1
 800d448:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d458:	7af9      	ldrb	r1, [r7, #11]
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	f7f6 f923 	bl	80036a8 <HAL_PCD_EP_Transmit>
 800d462:	4603      	mov	r3, r0
 800d464:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d466:	7dfb      	ldrb	r3, [r7, #23]
 800d468:	4618      	mov	r0, r3
 800d46a:	f000 f8a1 	bl	800d5b0 <USBD_Get_USB_Status>
 800d46e:	4603      	mov	r3, r0
 800d470:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d472:	7dbb      	ldrb	r3, [r7, #22]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3718      	adds	r7, #24
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	607a      	str	r2, [r7, #4]
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	460b      	mov	r3, r1
 800d48a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d48c:	2300      	movs	r3, #0
 800d48e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d490:	2300      	movs	r3, #0
 800d492:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d49a:	7af9      	ldrb	r1, [r7, #11]
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	f7f6 f89f 	bl	80035e2 <HAL_PCD_EP_Receive>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4a8:	7dfb      	ldrb	r3, [r7, #23]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f000 f880 	bl	800d5b0 <USBD_Get_USB_Status>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b082      	sub	sp, #8
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4d0:	78fa      	ldrb	r2, [r7, #3]
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7f6 f8cf 	bl	8003678 <HAL_PCD_EP_GetRxCount>
 800d4da:	4603      	mov	r3, r0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d4f0:	78fb      	ldrb	r3, [r7, #3]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d002      	beq.n	800d4fc <HAL_PCDEx_LPM_Callback+0x18>
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d01f      	beq.n	800d53a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d4fa:	e03b      	b.n	800d574 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6a1b      	ldr	r3, [r3, #32]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d007      	beq.n	800d514 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d504:	f7f3 fe90 	bl	8001228 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d508:	4b1c      	ldr	r3, [pc, #112]	; (800d57c <HAL_PCDEx_LPM_Callback+0x98>)
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	4a1b      	ldr	r2, [pc, #108]	; (800d57c <HAL_PCDEx_LPM_Callback+0x98>)
 800d50e:	f023 0306 	bic.w	r3, r3, #6
 800d512:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	6812      	ldr	r2, [r2, #0]
 800d522:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d526:	f023 0301 	bic.w	r3, r3, #1
 800d52a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d532:	4618      	mov	r0, r3
 800d534:	f7fb fce3 	bl	8008efe <USBD_LL_Resume>
    break;
 800d538:	e01c      	b.n	800d574 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	6812      	ldr	r2, [r2, #0]
 800d548:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d54c:	f043 0301 	orr.w	r3, r3, #1
 800d550:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fb fcba 	bl	8008ed2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a1b      	ldr	r3, [r3, #32]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d005      	beq.n	800d572 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d566:	4b05      	ldr	r3, [pc, #20]	; (800d57c <HAL_PCDEx_LPM_Callback+0x98>)
 800d568:	691b      	ldr	r3, [r3, #16]
 800d56a:	4a04      	ldr	r2, [pc, #16]	; (800d57c <HAL_PCDEx_LPM_Callback+0x98>)
 800d56c:	f043 0306 	orr.w	r3, r3, #6
 800d570:	6113      	str	r3, [r2, #16]
    break;
 800d572:	bf00      	nop
}
 800d574:	bf00      	nop
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	e000ed00 	.word	0xe000ed00

0800d580 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d580:	b480      	push	{r7}
 800d582:	b083      	sub	sp, #12
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d588:	4b03      	ldr	r3, [pc, #12]	; (800d598 <USBD_static_malloc+0x18>)
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	370c      	adds	r7, #12
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	20007f08 	.word	0x20007f08

0800d59c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]

}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5be:	79fb      	ldrb	r3, [r7, #7]
 800d5c0:	2b03      	cmp	r3, #3
 800d5c2:	d817      	bhi.n	800d5f4 <USBD_Get_USB_Status+0x44>
 800d5c4:	a201      	add	r2, pc, #4	; (adr r2, 800d5cc <USBD_Get_USB_Status+0x1c>)
 800d5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ca:	bf00      	nop
 800d5cc:	0800d5dd 	.word	0x0800d5dd
 800d5d0:	0800d5e3 	.word	0x0800d5e3
 800d5d4:	0800d5e9 	.word	0x0800d5e9
 800d5d8:	0800d5ef 	.word	0x0800d5ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e0:	e00b      	b.n	800d5fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5e2:	2303      	movs	r3, #3
 800d5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e6:	e008      	b.n	800d5fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ec:	e005      	b.n	800d5fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f2:	e002      	b.n	800d5fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f8:	bf00      	nop
  }
  return usb_status;
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3714      	adds	r7, #20
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <__errno>:
 800d608:	4b01      	ldr	r3, [pc, #4]	; (800d610 <__errno+0x8>)
 800d60a:	6818      	ldr	r0, [r3, #0]
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	20000110 	.word	0x20000110

0800d614 <std>:
 800d614:	2300      	movs	r3, #0
 800d616:	b510      	push	{r4, lr}
 800d618:	4604      	mov	r4, r0
 800d61a:	e9c0 3300 	strd	r3, r3, [r0]
 800d61e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d622:	6083      	str	r3, [r0, #8]
 800d624:	8181      	strh	r1, [r0, #12]
 800d626:	6643      	str	r3, [r0, #100]	; 0x64
 800d628:	81c2      	strh	r2, [r0, #14]
 800d62a:	6183      	str	r3, [r0, #24]
 800d62c:	4619      	mov	r1, r3
 800d62e:	2208      	movs	r2, #8
 800d630:	305c      	adds	r0, #92	; 0x5c
 800d632:	f000 f91a 	bl	800d86a <memset>
 800d636:	4b05      	ldr	r3, [pc, #20]	; (800d64c <std+0x38>)
 800d638:	6263      	str	r3, [r4, #36]	; 0x24
 800d63a:	4b05      	ldr	r3, [pc, #20]	; (800d650 <std+0x3c>)
 800d63c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d63e:	4b05      	ldr	r3, [pc, #20]	; (800d654 <std+0x40>)
 800d640:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d642:	4b05      	ldr	r3, [pc, #20]	; (800d658 <std+0x44>)
 800d644:	6224      	str	r4, [r4, #32]
 800d646:	6323      	str	r3, [r4, #48]	; 0x30
 800d648:	bd10      	pop	{r4, pc}
 800d64a:	bf00      	nop
 800d64c:	0800df05 	.word	0x0800df05
 800d650:	0800df27 	.word	0x0800df27
 800d654:	0800df5f 	.word	0x0800df5f
 800d658:	0800df83 	.word	0x0800df83

0800d65c <_cleanup_r>:
 800d65c:	4901      	ldr	r1, [pc, #4]	; (800d664 <_cleanup_r+0x8>)
 800d65e:	f000 b8af 	b.w	800d7c0 <_fwalk_reent>
 800d662:	bf00      	nop
 800d664:	0800ee39 	.word	0x0800ee39

0800d668 <__sfmoreglue>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	2268      	movs	r2, #104	; 0x68
 800d66c:	1e4d      	subs	r5, r1, #1
 800d66e:	4355      	muls	r5, r2
 800d670:	460e      	mov	r6, r1
 800d672:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d676:	f000 f921 	bl	800d8bc <_malloc_r>
 800d67a:	4604      	mov	r4, r0
 800d67c:	b140      	cbz	r0, 800d690 <__sfmoreglue+0x28>
 800d67e:	2100      	movs	r1, #0
 800d680:	e9c0 1600 	strd	r1, r6, [r0]
 800d684:	300c      	adds	r0, #12
 800d686:	60a0      	str	r0, [r4, #8]
 800d688:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d68c:	f000 f8ed 	bl	800d86a <memset>
 800d690:	4620      	mov	r0, r4
 800d692:	bd70      	pop	{r4, r5, r6, pc}

0800d694 <__sfp_lock_acquire>:
 800d694:	4801      	ldr	r0, [pc, #4]	; (800d69c <__sfp_lock_acquire+0x8>)
 800d696:	f000 b8d8 	b.w	800d84a <__retarget_lock_acquire_recursive>
 800d69a:	bf00      	nop
 800d69c:	20008129 	.word	0x20008129

0800d6a0 <__sfp_lock_release>:
 800d6a0:	4801      	ldr	r0, [pc, #4]	; (800d6a8 <__sfp_lock_release+0x8>)
 800d6a2:	f000 b8d3 	b.w	800d84c <__retarget_lock_release_recursive>
 800d6a6:	bf00      	nop
 800d6a8:	20008129 	.word	0x20008129

0800d6ac <__sinit_lock_acquire>:
 800d6ac:	4801      	ldr	r0, [pc, #4]	; (800d6b4 <__sinit_lock_acquire+0x8>)
 800d6ae:	f000 b8cc 	b.w	800d84a <__retarget_lock_acquire_recursive>
 800d6b2:	bf00      	nop
 800d6b4:	2000812a 	.word	0x2000812a

0800d6b8 <__sinit_lock_release>:
 800d6b8:	4801      	ldr	r0, [pc, #4]	; (800d6c0 <__sinit_lock_release+0x8>)
 800d6ba:	f000 b8c7 	b.w	800d84c <__retarget_lock_release_recursive>
 800d6be:	bf00      	nop
 800d6c0:	2000812a 	.word	0x2000812a

0800d6c4 <__sinit>:
 800d6c4:	b510      	push	{r4, lr}
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	f7ff fff0 	bl	800d6ac <__sinit_lock_acquire>
 800d6cc:	69a3      	ldr	r3, [r4, #24]
 800d6ce:	b11b      	cbz	r3, 800d6d8 <__sinit+0x14>
 800d6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6d4:	f7ff bff0 	b.w	800d6b8 <__sinit_lock_release>
 800d6d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d6dc:	6523      	str	r3, [r4, #80]	; 0x50
 800d6de:	4b13      	ldr	r3, [pc, #76]	; (800d72c <__sinit+0x68>)
 800d6e0:	4a13      	ldr	r2, [pc, #76]	; (800d730 <__sinit+0x6c>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d6e6:	42a3      	cmp	r3, r4
 800d6e8:	bf04      	itt	eq
 800d6ea:	2301      	moveq	r3, #1
 800d6ec:	61a3      	streq	r3, [r4, #24]
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f000 f820 	bl	800d734 <__sfp>
 800d6f4:	6060      	str	r0, [r4, #4]
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f000 f81c 	bl	800d734 <__sfp>
 800d6fc:	60a0      	str	r0, [r4, #8]
 800d6fe:	4620      	mov	r0, r4
 800d700:	f000 f818 	bl	800d734 <__sfp>
 800d704:	2200      	movs	r2, #0
 800d706:	60e0      	str	r0, [r4, #12]
 800d708:	2104      	movs	r1, #4
 800d70a:	6860      	ldr	r0, [r4, #4]
 800d70c:	f7ff ff82 	bl	800d614 <std>
 800d710:	68a0      	ldr	r0, [r4, #8]
 800d712:	2201      	movs	r2, #1
 800d714:	2109      	movs	r1, #9
 800d716:	f7ff ff7d 	bl	800d614 <std>
 800d71a:	68e0      	ldr	r0, [r4, #12]
 800d71c:	2202      	movs	r2, #2
 800d71e:	2112      	movs	r1, #18
 800d720:	f7ff ff78 	bl	800d614 <std>
 800d724:	2301      	movs	r3, #1
 800d726:	61a3      	str	r3, [r4, #24]
 800d728:	e7d2      	b.n	800d6d0 <__sinit+0xc>
 800d72a:	bf00      	nop
 800d72c:	0801107c 	.word	0x0801107c
 800d730:	0800d65d 	.word	0x0800d65d

0800d734 <__sfp>:
 800d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d736:	4607      	mov	r7, r0
 800d738:	f7ff ffac 	bl	800d694 <__sfp_lock_acquire>
 800d73c:	4b1e      	ldr	r3, [pc, #120]	; (800d7b8 <__sfp+0x84>)
 800d73e:	681e      	ldr	r6, [r3, #0]
 800d740:	69b3      	ldr	r3, [r6, #24]
 800d742:	b913      	cbnz	r3, 800d74a <__sfp+0x16>
 800d744:	4630      	mov	r0, r6
 800d746:	f7ff ffbd 	bl	800d6c4 <__sinit>
 800d74a:	3648      	adds	r6, #72	; 0x48
 800d74c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d750:	3b01      	subs	r3, #1
 800d752:	d503      	bpl.n	800d75c <__sfp+0x28>
 800d754:	6833      	ldr	r3, [r6, #0]
 800d756:	b30b      	cbz	r3, 800d79c <__sfp+0x68>
 800d758:	6836      	ldr	r6, [r6, #0]
 800d75a:	e7f7      	b.n	800d74c <__sfp+0x18>
 800d75c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d760:	b9d5      	cbnz	r5, 800d798 <__sfp+0x64>
 800d762:	4b16      	ldr	r3, [pc, #88]	; (800d7bc <__sfp+0x88>)
 800d764:	60e3      	str	r3, [r4, #12]
 800d766:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d76a:	6665      	str	r5, [r4, #100]	; 0x64
 800d76c:	f000 f86c 	bl	800d848 <__retarget_lock_init_recursive>
 800d770:	f7ff ff96 	bl	800d6a0 <__sfp_lock_release>
 800d774:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d778:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d77c:	6025      	str	r5, [r4, #0]
 800d77e:	61a5      	str	r5, [r4, #24]
 800d780:	2208      	movs	r2, #8
 800d782:	4629      	mov	r1, r5
 800d784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d788:	f000 f86f 	bl	800d86a <memset>
 800d78c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d794:	4620      	mov	r0, r4
 800d796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d798:	3468      	adds	r4, #104	; 0x68
 800d79a:	e7d9      	b.n	800d750 <__sfp+0x1c>
 800d79c:	2104      	movs	r1, #4
 800d79e:	4638      	mov	r0, r7
 800d7a0:	f7ff ff62 	bl	800d668 <__sfmoreglue>
 800d7a4:	4604      	mov	r4, r0
 800d7a6:	6030      	str	r0, [r6, #0]
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d1d5      	bne.n	800d758 <__sfp+0x24>
 800d7ac:	f7ff ff78 	bl	800d6a0 <__sfp_lock_release>
 800d7b0:	230c      	movs	r3, #12
 800d7b2:	603b      	str	r3, [r7, #0]
 800d7b4:	e7ee      	b.n	800d794 <__sfp+0x60>
 800d7b6:	bf00      	nop
 800d7b8:	0801107c 	.word	0x0801107c
 800d7bc:	ffff0001 	.word	0xffff0001

0800d7c0 <_fwalk_reent>:
 800d7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c4:	4606      	mov	r6, r0
 800d7c6:	4688      	mov	r8, r1
 800d7c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d7cc:	2700      	movs	r7, #0
 800d7ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d7d2:	f1b9 0901 	subs.w	r9, r9, #1
 800d7d6:	d505      	bpl.n	800d7e4 <_fwalk_reent+0x24>
 800d7d8:	6824      	ldr	r4, [r4, #0]
 800d7da:	2c00      	cmp	r4, #0
 800d7dc:	d1f7      	bne.n	800d7ce <_fwalk_reent+0xe>
 800d7de:	4638      	mov	r0, r7
 800d7e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7e4:	89ab      	ldrh	r3, [r5, #12]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d907      	bls.n	800d7fa <_fwalk_reent+0x3a>
 800d7ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	d003      	beq.n	800d7fa <_fwalk_reent+0x3a>
 800d7f2:	4629      	mov	r1, r5
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	47c0      	blx	r8
 800d7f8:	4307      	orrs	r7, r0
 800d7fa:	3568      	adds	r5, #104	; 0x68
 800d7fc:	e7e9      	b.n	800d7d2 <_fwalk_reent+0x12>
	...

0800d800 <__libc_init_array>:
 800d800:	b570      	push	{r4, r5, r6, lr}
 800d802:	4d0d      	ldr	r5, [pc, #52]	; (800d838 <__libc_init_array+0x38>)
 800d804:	4c0d      	ldr	r4, [pc, #52]	; (800d83c <__libc_init_array+0x3c>)
 800d806:	1b64      	subs	r4, r4, r5
 800d808:	10a4      	asrs	r4, r4, #2
 800d80a:	2600      	movs	r6, #0
 800d80c:	42a6      	cmp	r6, r4
 800d80e:	d109      	bne.n	800d824 <__libc_init_array+0x24>
 800d810:	4d0b      	ldr	r5, [pc, #44]	; (800d840 <__libc_init_array+0x40>)
 800d812:	4c0c      	ldr	r4, [pc, #48]	; (800d844 <__libc_init_array+0x44>)
 800d814:	f003 fab2 	bl	8010d7c <_init>
 800d818:	1b64      	subs	r4, r4, r5
 800d81a:	10a4      	asrs	r4, r4, #2
 800d81c:	2600      	movs	r6, #0
 800d81e:	42a6      	cmp	r6, r4
 800d820:	d105      	bne.n	800d82e <__libc_init_array+0x2e>
 800d822:	bd70      	pop	{r4, r5, r6, pc}
 800d824:	f855 3b04 	ldr.w	r3, [r5], #4
 800d828:	4798      	blx	r3
 800d82a:	3601      	adds	r6, #1
 800d82c:	e7ee      	b.n	800d80c <__libc_init_array+0xc>
 800d82e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d832:	4798      	blx	r3
 800d834:	3601      	adds	r6, #1
 800d836:	e7f2      	b.n	800d81e <__libc_init_array+0x1e>
 800d838:	0801145c 	.word	0x0801145c
 800d83c:	0801145c 	.word	0x0801145c
 800d840:	0801145c 	.word	0x0801145c
 800d844:	08011460 	.word	0x08011460

0800d848 <__retarget_lock_init_recursive>:
 800d848:	4770      	bx	lr

0800d84a <__retarget_lock_acquire_recursive>:
 800d84a:	4770      	bx	lr

0800d84c <__retarget_lock_release_recursive>:
 800d84c:	4770      	bx	lr

0800d84e <memcpy>:
 800d84e:	440a      	add	r2, r1
 800d850:	4291      	cmp	r1, r2
 800d852:	f100 33ff 	add.w	r3, r0, #4294967295
 800d856:	d100      	bne.n	800d85a <memcpy+0xc>
 800d858:	4770      	bx	lr
 800d85a:	b510      	push	{r4, lr}
 800d85c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d860:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d864:	4291      	cmp	r1, r2
 800d866:	d1f9      	bne.n	800d85c <memcpy+0xe>
 800d868:	bd10      	pop	{r4, pc}

0800d86a <memset>:
 800d86a:	4402      	add	r2, r0
 800d86c:	4603      	mov	r3, r0
 800d86e:	4293      	cmp	r3, r2
 800d870:	d100      	bne.n	800d874 <memset+0xa>
 800d872:	4770      	bx	lr
 800d874:	f803 1b01 	strb.w	r1, [r3], #1
 800d878:	e7f9      	b.n	800d86e <memset+0x4>
	...

0800d87c <sbrk_aligned>:
 800d87c:	b570      	push	{r4, r5, r6, lr}
 800d87e:	4e0e      	ldr	r6, [pc, #56]	; (800d8b8 <sbrk_aligned+0x3c>)
 800d880:	460c      	mov	r4, r1
 800d882:	6831      	ldr	r1, [r6, #0]
 800d884:	4605      	mov	r5, r0
 800d886:	b911      	cbnz	r1, 800d88e <sbrk_aligned+0x12>
 800d888:	f000 fb06 	bl	800de98 <_sbrk_r>
 800d88c:	6030      	str	r0, [r6, #0]
 800d88e:	4621      	mov	r1, r4
 800d890:	4628      	mov	r0, r5
 800d892:	f000 fb01 	bl	800de98 <_sbrk_r>
 800d896:	1c43      	adds	r3, r0, #1
 800d898:	d00a      	beq.n	800d8b0 <sbrk_aligned+0x34>
 800d89a:	1cc4      	adds	r4, r0, #3
 800d89c:	f024 0403 	bic.w	r4, r4, #3
 800d8a0:	42a0      	cmp	r0, r4
 800d8a2:	d007      	beq.n	800d8b4 <sbrk_aligned+0x38>
 800d8a4:	1a21      	subs	r1, r4, r0
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	f000 faf6 	bl	800de98 <_sbrk_r>
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d101      	bne.n	800d8b4 <sbrk_aligned+0x38>
 800d8b0:	f04f 34ff 	mov.w	r4, #4294967295
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	20008130 	.word	0x20008130

0800d8bc <_malloc_r>:
 800d8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8c0:	1ccd      	adds	r5, r1, #3
 800d8c2:	f025 0503 	bic.w	r5, r5, #3
 800d8c6:	3508      	adds	r5, #8
 800d8c8:	2d0c      	cmp	r5, #12
 800d8ca:	bf38      	it	cc
 800d8cc:	250c      	movcc	r5, #12
 800d8ce:	2d00      	cmp	r5, #0
 800d8d0:	4607      	mov	r7, r0
 800d8d2:	db01      	blt.n	800d8d8 <_malloc_r+0x1c>
 800d8d4:	42a9      	cmp	r1, r5
 800d8d6:	d905      	bls.n	800d8e4 <_malloc_r+0x28>
 800d8d8:	230c      	movs	r3, #12
 800d8da:	603b      	str	r3, [r7, #0]
 800d8dc:	2600      	movs	r6, #0
 800d8de:	4630      	mov	r0, r6
 800d8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e4:	4e2e      	ldr	r6, [pc, #184]	; (800d9a0 <_malloc_r+0xe4>)
 800d8e6:	f001 fe77 	bl	800f5d8 <__malloc_lock>
 800d8ea:	6833      	ldr	r3, [r6, #0]
 800d8ec:	461c      	mov	r4, r3
 800d8ee:	bb34      	cbnz	r4, 800d93e <_malloc_r+0x82>
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	f7ff ffc2 	bl	800d87c <sbrk_aligned>
 800d8f8:	1c43      	adds	r3, r0, #1
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	d14d      	bne.n	800d99a <_malloc_r+0xde>
 800d8fe:	6834      	ldr	r4, [r6, #0]
 800d900:	4626      	mov	r6, r4
 800d902:	2e00      	cmp	r6, #0
 800d904:	d140      	bne.n	800d988 <_malloc_r+0xcc>
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	4631      	mov	r1, r6
 800d90a:	4638      	mov	r0, r7
 800d90c:	eb04 0803 	add.w	r8, r4, r3
 800d910:	f000 fac2 	bl	800de98 <_sbrk_r>
 800d914:	4580      	cmp	r8, r0
 800d916:	d13a      	bne.n	800d98e <_malloc_r+0xd2>
 800d918:	6821      	ldr	r1, [r4, #0]
 800d91a:	3503      	adds	r5, #3
 800d91c:	1a6d      	subs	r5, r5, r1
 800d91e:	f025 0503 	bic.w	r5, r5, #3
 800d922:	3508      	adds	r5, #8
 800d924:	2d0c      	cmp	r5, #12
 800d926:	bf38      	it	cc
 800d928:	250c      	movcc	r5, #12
 800d92a:	4629      	mov	r1, r5
 800d92c:	4638      	mov	r0, r7
 800d92e:	f7ff ffa5 	bl	800d87c <sbrk_aligned>
 800d932:	3001      	adds	r0, #1
 800d934:	d02b      	beq.n	800d98e <_malloc_r+0xd2>
 800d936:	6823      	ldr	r3, [r4, #0]
 800d938:	442b      	add	r3, r5
 800d93a:	6023      	str	r3, [r4, #0]
 800d93c:	e00e      	b.n	800d95c <_malloc_r+0xa0>
 800d93e:	6822      	ldr	r2, [r4, #0]
 800d940:	1b52      	subs	r2, r2, r5
 800d942:	d41e      	bmi.n	800d982 <_malloc_r+0xc6>
 800d944:	2a0b      	cmp	r2, #11
 800d946:	d916      	bls.n	800d976 <_malloc_r+0xba>
 800d948:	1961      	adds	r1, r4, r5
 800d94a:	42a3      	cmp	r3, r4
 800d94c:	6025      	str	r5, [r4, #0]
 800d94e:	bf18      	it	ne
 800d950:	6059      	strne	r1, [r3, #4]
 800d952:	6863      	ldr	r3, [r4, #4]
 800d954:	bf08      	it	eq
 800d956:	6031      	streq	r1, [r6, #0]
 800d958:	5162      	str	r2, [r4, r5]
 800d95a:	604b      	str	r3, [r1, #4]
 800d95c:	4638      	mov	r0, r7
 800d95e:	f104 060b 	add.w	r6, r4, #11
 800d962:	f001 fe3f 	bl	800f5e4 <__malloc_unlock>
 800d966:	f026 0607 	bic.w	r6, r6, #7
 800d96a:	1d23      	adds	r3, r4, #4
 800d96c:	1af2      	subs	r2, r6, r3
 800d96e:	d0b6      	beq.n	800d8de <_malloc_r+0x22>
 800d970:	1b9b      	subs	r3, r3, r6
 800d972:	50a3      	str	r3, [r4, r2]
 800d974:	e7b3      	b.n	800d8de <_malloc_r+0x22>
 800d976:	6862      	ldr	r2, [r4, #4]
 800d978:	42a3      	cmp	r3, r4
 800d97a:	bf0c      	ite	eq
 800d97c:	6032      	streq	r2, [r6, #0]
 800d97e:	605a      	strne	r2, [r3, #4]
 800d980:	e7ec      	b.n	800d95c <_malloc_r+0xa0>
 800d982:	4623      	mov	r3, r4
 800d984:	6864      	ldr	r4, [r4, #4]
 800d986:	e7b2      	b.n	800d8ee <_malloc_r+0x32>
 800d988:	4634      	mov	r4, r6
 800d98a:	6876      	ldr	r6, [r6, #4]
 800d98c:	e7b9      	b.n	800d902 <_malloc_r+0x46>
 800d98e:	230c      	movs	r3, #12
 800d990:	603b      	str	r3, [r7, #0]
 800d992:	4638      	mov	r0, r7
 800d994:	f001 fe26 	bl	800f5e4 <__malloc_unlock>
 800d998:	e7a1      	b.n	800d8de <_malloc_r+0x22>
 800d99a:	6025      	str	r5, [r4, #0]
 800d99c:	e7de      	b.n	800d95c <_malloc_r+0xa0>
 800d99e:	bf00      	nop
 800d9a0:	2000812c 	.word	0x2000812c

0800d9a4 <_scanf_float>:
 800d9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a8:	b087      	sub	sp, #28
 800d9aa:	4617      	mov	r7, r2
 800d9ac:	9303      	str	r3, [sp, #12]
 800d9ae:	688b      	ldr	r3, [r1, #8]
 800d9b0:	1e5a      	subs	r2, r3, #1
 800d9b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d9b6:	bf83      	ittte	hi
 800d9b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d9bc:	195b      	addhi	r3, r3, r5
 800d9be:	9302      	strhi	r3, [sp, #8]
 800d9c0:	2300      	movls	r3, #0
 800d9c2:	bf86      	itte	hi
 800d9c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d9c8:	608b      	strhi	r3, [r1, #8]
 800d9ca:	9302      	strls	r3, [sp, #8]
 800d9cc:	680b      	ldr	r3, [r1, #0]
 800d9ce:	468b      	mov	fp, r1
 800d9d0:	2500      	movs	r5, #0
 800d9d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d9d6:	f84b 3b1c 	str.w	r3, [fp], #28
 800d9da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d9de:	4680      	mov	r8, r0
 800d9e0:	460c      	mov	r4, r1
 800d9e2:	465e      	mov	r6, fp
 800d9e4:	46aa      	mov	sl, r5
 800d9e6:	46a9      	mov	r9, r5
 800d9e8:	9501      	str	r5, [sp, #4]
 800d9ea:	68a2      	ldr	r2, [r4, #8]
 800d9ec:	b152      	cbz	r2, 800da04 <_scanf_float+0x60>
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	2b4e      	cmp	r3, #78	; 0x4e
 800d9f4:	d864      	bhi.n	800dac0 <_scanf_float+0x11c>
 800d9f6:	2b40      	cmp	r3, #64	; 0x40
 800d9f8:	d83c      	bhi.n	800da74 <_scanf_float+0xd0>
 800d9fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d9fe:	b2c8      	uxtb	r0, r1
 800da00:	280e      	cmp	r0, #14
 800da02:	d93a      	bls.n	800da7a <_scanf_float+0xd6>
 800da04:	f1b9 0f00 	cmp.w	r9, #0
 800da08:	d003      	beq.n	800da12 <_scanf_float+0x6e>
 800da0a:	6823      	ldr	r3, [r4, #0]
 800da0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da10:	6023      	str	r3, [r4, #0]
 800da12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da16:	f1ba 0f01 	cmp.w	sl, #1
 800da1a:	f200 8113 	bhi.w	800dc44 <_scanf_float+0x2a0>
 800da1e:	455e      	cmp	r6, fp
 800da20:	f200 8105 	bhi.w	800dc2e <_scanf_float+0x28a>
 800da24:	2501      	movs	r5, #1
 800da26:	4628      	mov	r0, r5
 800da28:	b007      	add	sp, #28
 800da2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800da32:	2a0d      	cmp	r2, #13
 800da34:	d8e6      	bhi.n	800da04 <_scanf_float+0x60>
 800da36:	a101      	add	r1, pc, #4	; (adr r1, 800da3c <_scanf_float+0x98>)
 800da38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800da3c:	0800db7b 	.word	0x0800db7b
 800da40:	0800da05 	.word	0x0800da05
 800da44:	0800da05 	.word	0x0800da05
 800da48:	0800da05 	.word	0x0800da05
 800da4c:	0800dbdb 	.word	0x0800dbdb
 800da50:	0800dbb3 	.word	0x0800dbb3
 800da54:	0800da05 	.word	0x0800da05
 800da58:	0800da05 	.word	0x0800da05
 800da5c:	0800db89 	.word	0x0800db89
 800da60:	0800da05 	.word	0x0800da05
 800da64:	0800da05 	.word	0x0800da05
 800da68:	0800da05 	.word	0x0800da05
 800da6c:	0800da05 	.word	0x0800da05
 800da70:	0800db41 	.word	0x0800db41
 800da74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800da78:	e7db      	b.n	800da32 <_scanf_float+0x8e>
 800da7a:	290e      	cmp	r1, #14
 800da7c:	d8c2      	bhi.n	800da04 <_scanf_float+0x60>
 800da7e:	a001      	add	r0, pc, #4	; (adr r0, 800da84 <_scanf_float+0xe0>)
 800da80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800da84:	0800db33 	.word	0x0800db33
 800da88:	0800da05 	.word	0x0800da05
 800da8c:	0800db33 	.word	0x0800db33
 800da90:	0800dbc7 	.word	0x0800dbc7
 800da94:	0800da05 	.word	0x0800da05
 800da98:	0800dae1 	.word	0x0800dae1
 800da9c:	0800db1d 	.word	0x0800db1d
 800daa0:	0800db1d 	.word	0x0800db1d
 800daa4:	0800db1d 	.word	0x0800db1d
 800daa8:	0800db1d 	.word	0x0800db1d
 800daac:	0800db1d 	.word	0x0800db1d
 800dab0:	0800db1d 	.word	0x0800db1d
 800dab4:	0800db1d 	.word	0x0800db1d
 800dab8:	0800db1d 	.word	0x0800db1d
 800dabc:	0800db1d 	.word	0x0800db1d
 800dac0:	2b6e      	cmp	r3, #110	; 0x6e
 800dac2:	d809      	bhi.n	800dad8 <_scanf_float+0x134>
 800dac4:	2b60      	cmp	r3, #96	; 0x60
 800dac6:	d8b2      	bhi.n	800da2e <_scanf_float+0x8a>
 800dac8:	2b54      	cmp	r3, #84	; 0x54
 800daca:	d077      	beq.n	800dbbc <_scanf_float+0x218>
 800dacc:	2b59      	cmp	r3, #89	; 0x59
 800dace:	d199      	bne.n	800da04 <_scanf_float+0x60>
 800dad0:	2d07      	cmp	r5, #7
 800dad2:	d197      	bne.n	800da04 <_scanf_float+0x60>
 800dad4:	2508      	movs	r5, #8
 800dad6:	e029      	b.n	800db2c <_scanf_float+0x188>
 800dad8:	2b74      	cmp	r3, #116	; 0x74
 800dada:	d06f      	beq.n	800dbbc <_scanf_float+0x218>
 800dadc:	2b79      	cmp	r3, #121	; 0x79
 800dade:	e7f6      	b.n	800dace <_scanf_float+0x12a>
 800dae0:	6821      	ldr	r1, [r4, #0]
 800dae2:	05c8      	lsls	r0, r1, #23
 800dae4:	d51a      	bpl.n	800db1c <_scanf_float+0x178>
 800dae6:	9b02      	ldr	r3, [sp, #8]
 800dae8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800daec:	6021      	str	r1, [r4, #0]
 800daee:	f109 0901 	add.w	r9, r9, #1
 800daf2:	b11b      	cbz	r3, 800dafc <_scanf_float+0x158>
 800daf4:	3b01      	subs	r3, #1
 800daf6:	3201      	adds	r2, #1
 800daf8:	9302      	str	r3, [sp, #8]
 800dafa:	60a2      	str	r2, [r4, #8]
 800dafc:	68a3      	ldr	r3, [r4, #8]
 800dafe:	3b01      	subs	r3, #1
 800db00:	60a3      	str	r3, [r4, #8]
 800db02:	6923      	ldr	r3, [r4, #16]
 800db04:	3301      	adds	r3, #1
 800db06:	6123      	str	r3, [r4, #16]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	3b01      	subs	r3, #1
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	607b      	str	r3, [r7, #4]
 800db10:	f340 8084 	ble.w	800dc1c <_scanf_float+0x278>
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	3301      	adds	r3, #1
 800db18:	603b      	str	r3, [r7, #0]
 800db1a:	e766      	b.n	800d9ea <_scanf_float+0x46>
 800db1c:	eb1a 0f05 	cmn.w	sl, r5
 800db20:	f47f af70 	bne.w	800da04 <_scanf_float+0x60>
 800db24:	6822      	ldr	r2, [r4, #0]
 800db26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800db2a:	6022      	str	r2, [r4, #0]
 800db2c:	f806 3b01 	strb.w	r3, [r6], #1
 800db30:	e7e4      	b.n	800dafc <_scanf_float+0x158>
 800db32:	6822      	ldr	r2, [r4, #0]
 800db34:	0610      	lsls	r0, r2, #24
 800db36:	f57f af65 	bpl.w	800da04 <_scanf_float+0x60>
 800db3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db3e:	e7f4      	b.n	800db2a <_scanf_float+0x186>
 800db40:	f1ba 0f00 	cmp.w	sl, #0
 800db44:	d10e      	bne.n	800db64 <_scanf_float+0x1c0>
 800db46:	f1b9 0f00 	cmp.w	r9, #0
 800db4a:	d10e      	bne.n	800db6a <_scanf_float+0x1c6>
 800db4c:	6822      	ldr	r2, [r4, #0]
 800db4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800db52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800db56:	d108      	bne.n	800db6a <_scanf_float+0x1c6>
 800db58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800db5c:	6022      	str	r2, [r4, #0]
 800db5e:	f04f 0a01 	mov.w	sl, #1
 800db62:	e7e3      	b.n	800db2c <_scanf_float+0x188>
 800db64:	f1ba 0f02 	cmp.w	sl, #2
 800db68:	d055      	beq.n	800dc16 <_scanf_float+0x272>
 800db6a:	2d01      	cmp	r5, #1
 800db6c:	d002      	beq.n	800db74 <_scanf_float+0x1d0>
 800db6e:	2d04      	cmp	r5, #4
 800db70:	f47f af48 	bne.w	800da04 <_scanf_float+0x60>
 800db74:	3501      	adds	r5, #1
 800db76:	b2ed      	uxtb	r5, r5
 800db78:	e7d8      	b.n	800db2c <_scanf_float+0x188>
 800db7a:	f1ba 0f01 	cmp.w	sl, #1
 800db7e:	f47f af41 	bne.w	800da04 <_scanf_float+0x60>
 800db82:	f04f 0a02 	mov.w	sl, #2
 800db86:	e7d1      	b.n	800db2c <_scanf_float+0x188>
 800db88:	b97d      	cbnz	r5, 800dbaa <_scanf_float+0x206>
 800db8a:	f1b9 0f00 	cmp.w	r9, #0
 800db8e:	f47f af3c 	bne.w	800da0a <_scanf_float+0x66>
 800db92:	6822      	ldr	r2, [r4, #0]
 800db94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800db98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800db9c:	f47f af39 	bne.w	800da12 <_scanf_float+0x6e>
 800dba0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dba4:	6022      	str	r2, [r4, #0]
 800dba6:	2501      	movs	r5, #1
 800dba8:	e7c0      	b.n	800db2c <_scanf_float+0x188>
 800dbaa:	2d03      	cmp	r5, #3
 800dbac:	d0e2      	beq.n	800db74 <_scanf_float+0x1d0>
 800dbae:	2d05      	cmp	r5, #5
 800dbb0:	e7de      	b.n	800db70 <_scanf_float+0x1cc>
 800dbb2:	2d02      	cmp	r5, #2
 800dbb4:	f47f af26 	bne.w	800da04 <_scanf_float+0x60>
 800dbb8:	2503      	movs	r5, #3
 800dbba:	e7b7      	b.n	800db2c <_scanf_float+0x188>
 800dbbc:	2d06      	cmp	r5, #6
 800dbbe:	f47f af21 	bne.w	800da04 <_scanf_float+0x60>
 800dbc2:	2507      	movs	r5, #7
 800dbc4:	e7b2      	b.n	800db2c <_scanf_float+0x188>
 800dbc6:	6822      	ldr	r2, [r4, #0]
 800dbc8:	0591      	lsls	r1, r2, #22
 800dbca:	f57f af1b 	bpl.w	800da04 <_scanf_float+0x60>
 800dbce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dbd2:	6022      	str	r2, [r4, #0]
 800dbd4:	f8cd 9004 	str.w	r9, [sp, #4]
 800dbd8:	e7a8      	b.n	800db2c <_scanf_float+0x188>
 800dbda:	6822      	ldr	r2, [r4, #0]
 800dbdc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dbe0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dbe4:	d006      	beq.n	800dbf4 <_scanf_float+0x250>
 800dbe6:	0550      	lsls	r0, r2, #21
 800dbe8:	f57f af0c 	bpl.w	800da04 <_scanf_float+0x60>
 800dbec:	f1b9 0f00 	cmp.w	r9, #0
 800dbf0:	f43f af0f 	beq.w	800da12 <_scanf_float+0x6e>
 800dbf4:	0591      	lsls	r1, r2, #22
 800dbf6:	bf58      	it	pl
 800dbf8:	9901      	ldrpl	r1, [sp, #4]
 800dbfa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dbfe:	bf58      	it	pl
 800dc00:	eba9 0101 	subpl.w	r1, r9, r1
 800dc04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dc08:	bf58      	it	pl
 800dc0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dc0e:	6022      	str	r2, [r4, #0]
 800dc10:	f04f 0900 	mov.w	r9, #0
 800dc14:	e78a      	b.n	800db2c <_scanf_float+0x188>
 800dc16:	f04f 0a03 	mov.w	sl, #3
 800dc1a:	e787      	b.n	800db2c <_scanf_float+0x188>
 800dc1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dc20:	4639      	mov	r1, r7
 800dc22:	4640      	mov	r0, r8
 800dc24:	4798      	blx	r3
 800dc26:	2800      	cmp	r0, #0
 800dc28:	f43f aedf 	beq.w	800d9ea <_scanf_float+0x46>
 800dc2c:	e6ea      	b.n	800da04 <_scanf_float+0x60>
 800dc2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc36:	463a      	mov	r2, r7
 800dc38:	4640      	mov	r0, r8
 800dc3a:	4798      	blx	r3
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	6123      	str	r3, [r4, #16]
 800dc42:	e6ec      	b.n	800da1e <_scanf_float+0x7a>
 800dc44:	1e6b      	subs	r3, r5, #1
 800dc46:	2b06      	cmp	r3, #6
 800dc48:	d825      	bhi.n	800dc96 <_scanf_float+0x2f2>
 800dc4a:	2d02      	cmp	r5, #2
 800dc4c:	d836      	bhi.n	800dcbc <_scanf_float+0x318>
 800dc4e:	455e      	cmp	r6, fp
 800dc50:	f67f aee8 	bls.w	800da24 <_scanf_float+0x80>
 800dc54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc5c:	463a      	mov	r2, r7
 800dc5e:	4640      	mov	r0, r8
 800dc60:	4798      	blx	r3
 800dc62:	6923      	ldr	r3, [r4, #16]
 800dc64:	3b01      	subs	r3, #1
 800dc66:	6123      	str	r3, [r4, #16]
 800dc68:	e7f1      	b.n	800dc4e <_scanf_float+0x2aa>
 800dc6a:	9802      	ldr	r0, [sp, #8]
 800dc6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dc74:	9002      	str	r0, [sp, #8]
 800dc76:	463a      	mov	r2, r7
 800dc78:	4640      	mov	r0, r8
 800dc7a:	4798      	blx	r3
 800dc7c:	6923      	ldr	r3, [r4, #16]
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	6123      	str	r3, [r4, #16]
 800dc82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc86:	fa5f fa8a 	uxtb.w	sl, sl
 800dc8a:	f1ba 0f02 	cmp.w	sl, #2
 800dc8e:	d1ec      	bne.n	800dc6a <_scanf_float+0x2c6>
 800dc90:	3d03      	subs	r5, #3
 800dc92:	b2ed      	uxtb	r5, r5
 800dc94:	1b76      	subs	r6, r6, r5
 800dc96:	6823      	ldr	r3, [r4, #0]
 800dc98:	05da      	lsls	r2, r3, #23
 800dc9a:	d52f      	bpl.n	800dcfc <_scanf_float+0x358>
 800dc9c:	055b      	lsls	r3, r3, #21
 800dc9e:	d510      	bpl.n	800dcc2 <_scanf_float+0x31e>
 800dca0:	455e      	cmp	r6, fp
 800dca2:	f67f aebf 	bls.w	800da24 <_scanf_float+0x80>
 800dca6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dcae:	463a      	mov	r2, r7
 800dcb0:	4640      	mov	r0, r8
 800dcb2:	4798      	blx	r3
 800dcb4:	6923      	ldr	r3, [r4, #16]
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	6123      	str	r3, [r4, #16]
 800dcba:	e7f1      	b.n	800dca0 <_scanf_float+0x2fc>
 800dcbc:	46aa      	mov	sl, r5
 800dcbe:	9602      	str	r6, [sp, #8]
 800dcc0:	e7df      	b.n	800dc82 <_scanf_float+0x2de>
 800dcc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dcc6:	6923      	ldr	r3, [r4, #16]
 800dcc8:	2965      	cmp	r1, #101	; 0x65
 800dcca:	f103 33ff 	add.w	r3, r3, #4294967295
 800dcce:	f106 35ff 	add.w	r5, r6, #4294967295
 800dcd2:	6123      	str	r3, [r4, #16]
 800dcd4:	d00c      	beq.n	800dcf0 <_scanf_float+0x34c>
 800dcd6:	2945      	cmp	r1, #69	; 0x45
 800dcd8:	d00a      	beq.n	800dcf0 <_scanf_float+0x34c>
 800dcda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcde:	463a      	mov	r2, r7
 800dce0:	4640      	mov	r0, r8
 800dce2:	4798      	blx	r3
 800dce4:	6923      	ldr	r3, [r4, #16]
 800dce6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	1eb5      	subs	r5, r6, #2
 800dcee:	6123      	str	r3, [r4, #16]
 800dcf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcf4:	463a      	mov	r2, r7
 800dcf6:	4640      	mov	r0, r8
 800dcf8:	4798      	blx	r3
 800dcfa:	462e      	mov	r6, r5
 800dcfc:	6825      	ldr	r5, [r4, #0]
 800dcfe:	f015 0510 	ands.w	r5, r5, #16
 800dd02:	d159      	bne.n	800ddb8 <_scanf_float+0x414>
 800dd04:	7035      	strb	r5, [r6, #0]
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dd0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd10:	d11b      	bne.n	800dd4a <_scanf_float+0x3a6>
 800dd12:	9b01      	ldr	r3, [sp, #4]
 800dd14:	454b      	cmp	r3, r9
 800dd16:	eba3 0209 	sub.w	r2, r3, r9
 800dd1a:	d123      	bne.n	800dd64 <_scanf_float+0x3c0>
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	4659      	mov	r1, fp
 800dd20:	4640      	mov	r0, r8
 800dd22:	f000 ff57 	bl	800ebd4 <_strtod_r>
 800dd26:	6822      	ldr	r2, [r4, #0]
 800dd28:	9b03      	ldr	r3, [sp, #12]
 800dd2a:	f012 0f02 	tst.w	r2, #2
 800dd2e:	ec57 6b10 	vmov	r6, r7, d0
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	d021      	beq.n	800dd7a <_scanf_float+0x3d6>
 800dd36:	9903      	ldr	r1, [sp, #12]
 800dd38:	1d1a      	adds	r2, r3, #4
 800dd3a:	600a      	str	r2, [r1, #0]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	e9c3 6700 	strd	r6, r7, [r3]
 800dd42:	68e3      	ldr	r3, [r4, #12]
 800dd44:	3301      	adds	r3, #1
 800dd46:	60e3      	str	r3, [r4, #12]
 800dd48:	e66d      	b.n	800da26 <_scanf_float+0x82>
 800dd4a:	9b04      	ldr	r3, [sp, #16]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0e5      	beq.n	800dd1c <_scanf_float+0x378>
 800dd50:	9905      	ldr	r1, [sp, #20]
 800dd52:	230a      	movs	r3, #10
 800dd54:	462a      	mov	r2, r5
 800dd56:	3101      	adds	r1, #1
 800dd58:	4640      	mov	r0, r8
 800dd5a:	f000 ffc3 	bl	800ece4 <_strtol_r>
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	9e05      	ldr	r6, [sp, #20]
 800dd62:	1ac2      	subs	r2, r0, r3
 800dd64:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800dd68:	429e      	cmp	r6, r3
 800dd6a:	bf28      	it	cs
 800dd6c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800dd70:	4912      	ldr	r1, [pc, #72]	; (800ddbc <_scanf_float+0x418>)
 800dd72:	4630      	mov	r0, r6
 800dd74:	f000 f8a6 	bl	800dec4 <siprintf>
 800dd78:	e7d0      	b.n	800dd1c <_scanf_float+0x378>
 800dd7a:	9903      	ldr	r1, [sp, #12]
 800dd7c:	f012 0f04 	tst.w	r2, #4
 800dd80:	f103 0204 	add.w	r2, r3, #4
 800dd84:	600a      	str	r2, [r1, #0]
 800dd86:	d1d9      	bne.n	800dd3c <_scanf_float+0x398>
 800dd88:	f8d3 8000 	ldr.w	r8, [r3]
 800dd8c:	ee10 2a10 	vmov	r2, s0
 800dd90:	ee10 0a10 	vmov	r0, s0
 800dd94:	463b      	mov	r3, r7
 800dd96:	4639      	mov	r1, r7
 800dd98:	f7f2 fee8 	bl	8000b6c <__aeabi_dcmpun>
 800dd9c:	b128      	cbz	r0, 800ddaa <_scanf_float+0x406>
 800dd9e:	4808      	ldr	r0, [pc, #32]	; (800ddc0 <_scanf_float+0x41c>)
 800dda0:	f000 f88a 	bl	800deb8 <nanf>
 800dda4:	ed88 0a00 	vstr	s0, [r8]
 800dda8:	e7cb      	b.n	800dd42 <_scanf_float+0x39e>
 800ddaa:	4630      	mov	r0, r6
 800ddac:	4639      	mov	r1, r7
 800ddae:	f7f2 ff13 	bl	8000bd8 <__aeabi_d2f>
 800ddb2:	f8c8 0000 	str.w	r0, [r8]
 800ddb6:	e7c4      	b.n	800dd42 <_scanf_float+0x39e>
 800ddb8:	2500      	movs	r5, #0
 800ddba:	e634      	b.n	800da26 <_scanf_float+0x82>
 800ddbc:	08011080 	.word	0x08011080
 800ddc0:	08011452 	.word	0x08011452

0800ddc4 <cleanup_glue>:
 800ddc4:	b538      	push	{r3, r4, r5, lr}
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	6809      	ldr	r1, [r1, #0]
 800ddca:	4605      	mov	r5, r0
 800ddcc:	b109      	cbz	r1, 800ddd2 <cleanup_glue+0xe>
 800ddce:	f7ff fff9 	bl	800ddc4 <cleanup_glue>
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddda:	f002 b8e1 	b.w	800ffa0 <_free_r>
	...

0800dde0 <_reclaim_reent>:
 800dde0:	4b2c      	ldr	r3, [pc, #176]	; (800de94 <_reclaim_reent+0xb4>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4283      	cmp	r3, r0
 800dde6:	b570      	push	{r4, r5, r6, lr}
 800dde8:	4604      	mov	r4, r0
 800ddea:	d051      	beq.n	800de90 <_reclaim_reent+0xb0>
 800ddec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ddee:	b143      	cbz	r3, 800de02 <_reclaim_reent+0x22>
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d14a      	bne.n	800de8c <_reclaim_reent+0xac>
 800ddf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddf8:	6819      	ldr	r1, [r3, #0]
 800ddfa:	b111      	cbz	r1, 800de02 <_reclaim_reent+0x22>
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f002 f8cf 	bl	800ffa0 <_free_r>
 800de02:	6961      	ldr	r1, [r4, #20]
 800de04:	b111      	cbz	r1, 800de0c <_reclaim_reent+0x2c>
 800de06:	4620      	mov	r0, r4
 800de08:	f002 f8ca 	bl	800ffa0 <_free_r>
 800de0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800de0e:	b111      	cbz	r1, 800de16 <_reclaim_reent+0x36>
 800de10:	4620      	mov	r0, r4
 800de12:	f002 f8c5 	bl	800ffa0 <_free_r>
 800de16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800de18:	b111      	cbz	r1, 800de20 <_reclaim_reent+0x40>
 800de1a:	4620      	mov	r0, r4
 800de1c:	f002 f8c0 	bl	800ffa0 <_free_r>
 800de20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800de22:	b111      	cbz	r1, 800de2a <_reclaim_reent+0x4a>
 800de24:	4620      	mov	r0, r4
 800de26:	f002 f8bb 	bl	800ffa0 <_free_r>
 800de2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800de2c:	b111      	cbz	r1, 800de34 <_reclaim_reent+0x54>
 800de2e:	4620      	mov	r0, r4
 800de30:	f002 f8b6 	bl	800ffa0 <_free_r>
 800de34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800de36:	b111      	cbz	r1, 800de3e <_reclaim_reent+0x5e>
 800de38:	4620      	mov	r0, r4
 800de3a:	f002 f8b1 	bl	800ffa0 <_free_r>
 800de3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800de40:	b111      	cbz	r1, 800de48 <_reclaim_reent+0x68>
 800de42:	4620      	mov	r0, r4
 800de44:	f002 f8ac 	bl	800ffa0 <_free_r>
 800de48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de4a:	b111      	cbz	r1, 800de52 <_reclaim_reent+0x72>
 800de4c:	4620      	mov	r0, r4
 800de4e:	f002 f8a7 	bl	800ffa0 <_free_r>
 800de52:	69a3      	ldr	r3, [r4, #24]
 800de54:	b1e3      	cbz	r3, 800de90 <_reclaim_reent+0xb0>
 800de56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800de58:	4620      	mov	r0, r4
 800de5a:	4798      	blx	r3
 800de5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800de5e:	b1b9      	cbz	r1, 800de90 <_reclaim_reent+0xb0>
 800de60:	4620      	mov	r0, r4
 800de62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de66:	f7ff bfad 	b.w	800ddc4 <cleanup_glue>
 800de6a:	5949      	ldr	r1, [r1, r5]
 800de6c:	b941      	cbnz	r1, 800de80 <_reclaim_reent+0xa0>
 800de6e:	3504      	adds	r5, #4
 800de70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de72:	2d80      	cmp	r5, #128	; 0x80
 800de74:	68d9      	ldr	r1, [r3, #12]
 800de76:	d1f8      	bne.n	800de6a <_reclaim_reent+0x8a>
 800de78:	4620      	mov	r0, r4
 800de7a:	f002 f891 	bl	800ffa0 <_free_r>
 800de7e:	e7ba      	b.n	800ddf6 <_reclaim_reent+0x16>
 800de80:	680e      	ldr	r6, [r1, #0]
 800de82:	4620      	mov	r0, r4
 800de84:	f002 f88c 	bl	800ffa0 <_free_r>
 800de88:	4631      	mov	r1, r6
 800de8a:	e7ef      	b.n	800de6c <_reclaim_reent+0x8c>
 800de8c:	2500      	movs	r5, #0
 800de8e:	e7ef      	b.n	800de70 <_reclaim_reent+0x90>
 800de90:	bd70      	pop	{r4, r5, r6, pc}
 800de92:	bf00      	nop
 800de94:	20000110 	.word	0x20000110

0800de98 <_sbrk_r>:
 800de98:	b538      	push	{r3, r4, r5, lr}
 800de9a:	4d06      	ldr	r5, [pc, #24]	; (800deb4 <_sbrk_r+0x1c>)
 800de9c:	2300      	movs	r3, #0
 800de9e:	4604      	mov	r4, r0
 800dea0:	4608      	mov	r0, r1
 800dea2:	602b      	str	r3, [r5, #0]
 800dea4:	f7f3 fec6 	bl	8001c34 <_sbrk>
 800dea8:	1c43      	adds	r3, r0, #1
 800deaa:	d102      	bne.n	800deb2 <_sbrk_r+0x1a>
 800deac:	682b      	ldr	r3, [r5, #0]
 800deae:	b103      	cbz	r3, 800deb2 <_sbrk_r+0x1a>
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	bd38      	pop	{r3, r4, r5, pc}
 800deb4:	20008134 	.word	0x20008134

0800deb8 <nanf>:
 800deb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dec0 <nanf+0x8>
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	7fc00000 	.word	0x7fc00000

0800dec4 <siprintf>:
 800dec4:	b40e      	push	{r1, r2, r3}
 800dec6:	b500      	push	{lr}
 800dec8:	b09c      	sub	sp, #112	; 0x70
 800deca:	ab1d      	add	r3, sp, #116	; 0x74
 800decc:	9002      	str	r0, [sp, #8]
 800dece:	9006      	str	r0, [sp, #24]
 800ded0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ded4:	4809      	ldr	r0, [pc, #36]	; (800defc <siprintf+0x38>)
 800ded6:	9107      	str	r1, [sp, #28]
 800ded8:	9104      	str	r1, [sp, #16]
 800deda:	4909      	ldr	r1, [pc, #36]	; (800df00 <siprintf+0x3c>)
 800dedc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dee0:	9105      	str	r1, [sp, #20]
 800dee2:	6800      	ldr	r0, [r0, #0]
 800dee4:	9301      	str	r3, [sp, #4]
 800dee6:	a902      	add	r1, sp, #8
 800dee8:	f002 f902 	bl	80100f0 <_svfiprintf_r>
 800deec:	9b02      	ldr	r3, [sp, #8]
 800deee:	2200      	movs	r2, #0
 800def0:	701a      	strb	r2, [r3, #0]
 800def2:	b01c      	add	sp, #112	; 0x70
 800def4:	f85d eb04 	ldr.w	lr, [sp], #4
 800def8:	b003      	add	sp, #12
 800defa:	4770      	bx	lr
 800defc:	20000110 	.word	0x20000110
 800df00:	ffff0208 	.word	0xffff0208

0800df04 <__sread>:
 800df04:	b510      	push	{r4, lr}
 800df06:	460c      	mov	r4, r1
 800df08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df0c:	f002 fb84 	bl	8010618 <_read_r>
 800df10:	2800      	cmp	r0, #0
 800df12:	bfab      	itete	ge
 800df14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df16:	89a3      	ldrhlt	r3, [r4, #12]
 800df18:	181b      	addge	r3, r3, r0
 800df1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df1e:	bfac      	ite	ge
 800df20:	6563      	strge	r3, [r4, #84]	; 0x54
 800df22:	81a3      	strhlt	r3, [r4, #12]
 800df24:	bd10      	pop	{r4, pc}

0800df26 <__swrite>:
 800df26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df2a:	461f      	mov	r7, r3
 800df2c:	898b      	ldrh	r3, [r1, #12]
 800df2e:	05db      	lsls	r3, r3, #23
 800df30:	4605      	mov	r5, r0
 800df32:	460c      	mov	r4, r1
 800df34:	4616      	mov	r6, r2
 800df36:	d505      	bpl.n	800df44 <__swrite+0x1e>
 800df38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df3c:	2302      	movs	r3, #2
 800df3e:	2200      	movs	r2, #0
 800df40:	f001 fb26 	bl	800f590 <_lseek_r>
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df4e:	81a3      	strh	r3, [r4, #12]
 800df50:	4632      	mov	r2, r6
 800df52:	463b      	mov	r3, r7
 800df54:	4628      	mov	r0, r5
 800df56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df5a:	f000 bec5 	b.w	800ece8 <_write_r>

0800df5e <__sseek>:
 800df5e:	b510      	push	{r4, lr}
 800df60:	460c      	mov	r4, r1
 800df62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df66:	f001 fb13 	bl	800f590 <_lseek_r>
 800df6a:	1c43      	adds	r3, r0, #1
 800df6c:	89a3      	ldrh	r3, [r4, #12]
 800df6e:	bf15      	itete	ne
 800df70:	6560      	strne	r0, [r4, #84]	; 0x54
 800df72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df7a:	81a3      	strheq	r3, [r4, #12]
 800df7c:	bf18      	it	ne
 800df7e:	81a3      	strhne	r3, [r4, #12]
 800df80:	bd10      	pop	{r4, pc}

0800df82 <__sclose>:
 800df82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df86:	f000 bec1 	b.w	800ed0c <_close_r>

0800df8a <sulp>:
 800df8a:	b570      	push	{r4, r5, r6, lr}
 800df8c:	4604      	mov	r4, r0
 800df8e:	460d      	mov	r5, r1
 800df90:	ec45 4b10 	vmov	d0, r4, r5
 800df94:	4616      	mov	r6, r2
 800df96:	f001 fe9d 	bl	800fcd4 <__ulp>
 800df9a:	ec51 0b10 	vmov	r0, r1, d0
 800df9e:	b17e      	cbz	r6, 800dfc0 <sulp+0x36>
 800dfa0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dfa4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	dd09      	ble.n	800dfc0 <sulp+0x36>
 800dfac:	051b      	lsls	r3, r3, #20
 800dfae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dfb2:	2400      	movs	r4, #0
 800dfb4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dfb8:	4622      	mov	r2, r4
 800dfba:	462b      	mov	r3, r5
 800dfbc:	f7f2 fb3c 	bl	8000638 <__aeabi_dmul>
 800dfc0:	bd70      	pop	{r4, r5, r6, pc}
 800dfc2:	0000      	movs	r0, r0
 800dfc4:	0000      	movs	r0, r0
	...

0800dfc8 <_strtod_l>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	ed2d 8b02 	vpush	{d8}
 800dfd0:	b09d      	sub	sp, #116	; 0x74
 800dfd2:	461f      	mov	r7, r3
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	9318      	str	r3, [sp, #96]	; 0x60
 800dfd8:	4ba2      	ldr	r3, [pc, #648]	; (800e264 <_strtod_l+0x29c>)
 800dfda:	9213      	str	r2, [sp, #76]	; 0x4c
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	9305      	str	r3, [sp, #20]
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	4688      	mov	r8, r1
 800dfe6:	f7f2 f913 	bl	8000210 <strlen>
 800dfea:	f04f 0a00 	mov.w	sl, #0
 800dfee:	4605      	mov	r5, r0
 800dff0:	f04f 0b00 	mov.w	fp, #0
 800dff4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dffa:	781a      	ldrb	r2, [r3, #0]
 800dffc:	2a2b      	cmp	r2, #43	; 0x2b
 800dffe:	d04e      	beq.n	800e09e <_strtod_l+0xd6>
 800e000:	d83b      	bhi.n	800e07a <_strtod_l+0xb2>
 800e002:	2a0d      	cmp	r2, #13
 800e004:	d834      	bhi.n	800e070 <_strtod_l+0xa8>
 800e006:	2a08      	cmp	r2, #8
 800e008:	d834      	bhi.n	800e074 <_strtod_l+0xac>
 800e00a:	2a00      	cmp	r2, #0
 800e00c:	d03e      	beq.n	800e08c <_strtod_l+0xc4>
 800e00e:	2300      	movs	r3, #0
 800e010:	930a      	str	r3, [sp, #40]	; 0x28
 800e012:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e014:	7833      	ldrb	r3, [r6, #0]
 800e016:	2b30      	cmp	r3, #48	; 0x30
 800e018:	f040 80b0 	bne.w	800e17c <_strtod_l+0x1b4>
 800e01c:	7873      	ldrb	r3, [r6, #1]
 800e01e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e022:	2b58      	cmp	r3, #88	; 0x58
 800e024:	d168      	bne.n	800e0f8 <_strtod_l+0x130>
 800e026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	ab18      	add	r3, sp, #96	; 0x60
 800e02c:	9702      	str	r7, [sp, #8]
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	4a8d      	ldr	r2, [pc, #564]	; (800e268 <_strtod_l+0x2a0>)
 800e032:	ab19      	add	r3, sp, #100	; 0x64
 800e034:	a917      	add	r1, sp, #92	; 0x5c
 800e036:	4620      	mov	r0, r4
 800e038:	f000 ffa2 	bl	800ef80 <__gethex>
 800e03c:	f010 0707 	ands.w	r7, r0, #7
 800e040:	4605      	mov	r5, r0
 800e042:	d005      	beq.n	800e050 <_strtod_l+0x88>
 800e044:	2f06      	cmp	r7, #6
 800e046:	d12c      	bne.n	800e0a2 <_strtod_l+0xda>
 800e048:	3601      	adds	r6, #1
 800e04a:	2300      	movs	r3, #0
 800e04c:	9617      	str	r6, [sp, #92]	; 0x5c
 800e04e:	930a      	str	r3, [sp, #40]	; 0x28
 800e050:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e052:	2b00      	cmp	r3, #0
 800e054:	f040 8590 	bne.w	800eb78 <_strtod_l+0xbb0>
 800e058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e05a:	b1eb      	cbz	r3, 800e098 <_strtod_l+0xd0>
 800e05c:	4652      	mov	r2, sl
 800e05e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e062:	ec43 2b10 	vmov	d0, r2, r3
 800e066:	b01d      	add	sp, #116	; 0x74
 800e068:	ecbd 8b02 	vpop	{d8}
 800e06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e070:	2a20      	cmp	r2, #32
 800e072:	d1cc      	bne.n	800e00e <_strtod_l+0x46>
 800e074:	3301      	adds	r3, #1
 800e076:	9317      	str	r3, [sp, #92]	; 0x5c
 800e078:	e7be      	b.n	800dff8 <_strtod_l+0x30>
 800e07a:	2a2d      	cmp	r2, #45	; 0x2d
 800e07c:	d1c7      	bne.n	800e00e <_strtod_l+0x46>
 800e07e:	2201      	movs	r2, #1
 800e080:	920a      	str	r2, [sp, #40]	; 0x28
 800e082:	1c5a      	adds	r2, r3, #1
 800e084:	9217      	str	r2, [sp, #92]	; 0x5c
 800e086:	785b      	ldrb	r3, [r3, #1]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1c2      	bne.n	800e012 <_strtod_l+0x4a>
 800e08c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e08e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e092:	2b00      	cmp	r3, #0
 800e094:	f040 856e 	bne.w	800eb74 <_strtod_l+0xbac>
 800e098:	4652      	mov	r2, sl
 800e09a:	465b      	mov	r3, fp
 800e09c:	e7e1      	b.n	800e062 <_strtod_l+0x9a>
 800e09e:	2200      	movs	r2, #0
 800e0a0:	e7ee      	b.n	800e080 <_strtod_l+0xb8>
 800e0a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e0a4:	b13a      	cbz	r2, 800e0b6 <_strtod_l+0xee>
 800e0a6:	2135      	movs	r1, #53	; 0x35
 800e0a8:	a81a      	add	r0, sp, #104	; 0x68
 800e0aa:	f001 ff1e 	bl	800feea <__copybits>
 800e0ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f001 fadd 	bl	800f670 <_Bfree>
 800e0b6:	3f01      	subs	r7, #1
 800e0b8:	2f04      	cmp	r7, #4
 800e0ba:	d806      	bhi.n	800e0ca <_strtod_l+0x102>
 800e0bc:	e8df f007 	tbb	[pc, r7]
 800e0c0:	1714030a 	.word	0x1714030a
 800e0c4:	0a          	.byte	0x0a
 800e0c5:	00          	.byte	0x00
 800e0c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e0ca:	0728      	lsls	r0, r5, #28
 800e0cc:	d5c0      	bpl.n	800e050 <_strtod_l+0x88>
 800e0ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e0d2:	e7bd      	b.n	800e050 <_strtod_l+0x88>
 800e0d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e0d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e0da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e0de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e0e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e0e6:	e7f0      	b.n	800e0ca <_strtod_l+0x102>
 800e0e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e26c <_strtod_l+0x2a4>
 800e0ec:	e7ed      	b.n	800e0ca <_strtod_l+0x102>
 800e0ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e0f2:	f04f 3aff 	mov.w	sl, #4294967295
 800e0f6:	e7e8      	b.n	800e0ca <_strtod_l+0x102>
 800e0f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0fa:	1c5a      	adds	r2, r3, #1
 800e0fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800e0fe:	785b      	ldrb	r3, [r3, #1]
 800e100:	2b30      	cmp	r3, #48	; 0x30
 800e102:	d0f9      	beq.n	800e0f8 <_strtod_l+0x130>
 800e104:	2b00      	cmp	r3, #0
 800e106:	d0a3      	beq.n	800e050 <_strtod_l+0x88>
 800e108:	2301      	movs	r3, #1
 800e10a:	f04f 0900 	mov.w	r9, #0
 800e10e:	9304      	str	r3, [sp, #16]
 800e110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e112:	9308      	str	r3, [sp, #32]
 800e114:	f8cd 901c 	str.w	r9, [sp, #28]
 800e118:	464f      	mov	r7, r9
 800e11a:	220a      	movs	r2, #10
 800e11c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e11e:	7806      	ldrb	r6, [r0, #0]
 800e120:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e124:	b2d9      	uxtb	r1, r3
 800e126:	2909      	cmp	r1, #9
 800e128:	d92a      	bls.n	800e180 <_strtod_l+0x1b8>
 800e12a:	9905      	ldr	r1, [sp, #20]
 800e12c:	462a      	mov	r2, r5
 800e12e:	f002 fa8f 	bl	8010650 <strncmp>
 800e132:	b398      	cbz	r0, 800e19c <_strtod_l+0x1d4>
 800e134:	2000      	movs	r0, #0
 800e136:	4632      	mov	r2, r6
 800e138:	463d      	mov	r5, r7
 800e13a:	9005      	str	r0, [sp, #20]
 800e13c:	4603      	mov	r3, r0
 800e13e:	2a65      	cmp	r2, #101	; 0x65
 800e140:	d001      	beq.n	800e146 <_strtod_l+0x17e>
 800e142:	2a45      	cmp	r2, #69	; 0x45
 800e144:	d118      	bne.n	800e178 <_strtod_l+0x1b0>
 800e146:	b91d      	cbnz	r5, 800e150 <_strtod_l+0x188>
 800e148:	9a04      	ldr	r2, [sp, #16]
 800e14a:	4302      	orrs	r2, r0
 800e14c:	d09e      	beq.n	800e08c <_strtod_l+0xc4>
 800e14e:	2500      	movs	r5, #0
 800e150:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e154:	f108 0201 	add.w	r2, r8, #1
 800e158:	9217      	str	r2, [sp, #92]	; 0x5c
 800e15a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e15e:	2a2b      	cmp	r2, #43	; 0x2b
 800e160:	d075      	beq.n	800e24e <_strtod_l+0x286>
 800e162:	2a2d      	cmp	r2, #45	; 0x2d
 800e164:	d07b      	beq.n	800e25e <_strtod_l+0x296>
 800e166:	f04f 0c00 	mov.w	ip, #0
 800e16a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e16e:	2909      	cmp	r1, #9
 800e170:	f240 8082 	bls.w	800e278 <_strtod_l+0x2b0>
 800e174:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e178:	2600      	movs	r6, #0
 800e17a:	e09d      	b.n	800e2b8 <_strtod_l+0x2f0>
 800e17c:	2300      	movs	r3, #0
 800e17e:	e7c4      	b.n	800e10a <_strtod_l+0x142>
 800e180:	2f08      	cmp	r7, #8
 800e182:	bfd8      	it	le
 800e184:	9907      	ldrle	r1, [sp, #28]
 800e186:	f100 0001 	add.w	r0, r0, #1
 800e18a:	bfda      	itte	le
 800e18c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e190:	9307      	strle	r3, [sp, #28]
 800e192:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e196:	3701      	adds	r7, #1
 800e198:	9017      	str	r0, [sp, #92]	; 0x5c
 800e19a:	e7bf      	b.n	800e11c <_strtod_l+0x154>
 800e19c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e19e:	195a      	adds	r2, r3, r5
 800e1a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800e1a2:	5d5a      	ldrb	r2, [r3, r5]
 800e1a4:	2f00      	cmp	r7, #0
 800e1a6:	d037      	beq.n	800e218 <_strtod_l+0x250>
 800e1a8:	9005      	str	r0, [sp, #20]
 800e1aa:	463d      	mov	r5, r7
 800e1ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e1b0:	2b09      	cmp	r3, #9
 800e1b2:	d912      	bls.n	800e1da <_strtod_l+0x212>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e7c2      	b.n	800e13e <_strtod_l+0x176>
 800e1b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e1ba:	1c5a      	adds	r2, r3, #1
 800e1bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800e1be:	785a      	ldrb	r2, [r3, #1]
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	2a30      	cmp	r2, #48	; 0x30
 800e1c4:	d0f8      	beq.n	800e1b8 <_strtod_l+0x1f0>
 800e1c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e1ca:	2b08      	cmp	r3, #8
 800e1cc:	f200 84d9 	bhi.w	800eb82 <_strtod_l+0xbba>
 800e1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e1d2:	9005      	str	r0, [sp, #20]
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	9308      	str	r3, [sp, #32]
 800e1d8:	4605      	mov	r5, r0
 800e1da:	3a30      	subs	r2, #48	; 0x30
 800e1dc:	f100 0301 	add.w	r3, r0, #1
 800e1e0:	d014      	beq.n	800e20c <_strtod_l+0x244>
 800e1e2:	9905      	ldr	r1, [sp, #20]
 800e1e4:	4419      	add	r1, r3
 800e1e6:	9105      	str	r1, [sp, #20]
 800e1e8:	462b      	mov	r3, r5
 800e1ea:	eb00 0e05 	add.w	lr, r0, r5
 800e1ee:	210a      	movs	r1, #10
 800e1f0:	4573      	cmp	r3, lr
 800e1f2:	d113      	bne.n	800e21c <_strtod_l+0x254>
 800e1f4:	182b      	adds	r3, r5, r0
 800e1f6:	2b08      	cmp	r3, #8
 800e1f8:	f105 0501 	add.w	r5, r5, #1
 800e1fc:	4405      	add	r5, r0
 800e1fe:	dc1c      	bgt.n	800e23a <_strtod_l+0x272>
 800e200:	9907      	ldr	r1, [sp, #28]
 800e202:	230a      	movs	r3, #10
 800e204:	fb03 2301 	mla	r3, r3, r1, r2
 800e208:	9307      	str	r3, [sp, #28]
 800e20a:	2300      	movs	r3, #0
 800e20c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e20e:	1c51      	adds	r1, r2, #1
 800e210:	9117      	str	r1, [sp, #92]	; 0x5c
 800e212:	7852      	ldrb	r2, [r2, #1]
 800e214:	4618      	mov	r0, r3
 800e216:	e7c9      	b.n	800e1ac <_strtod_l+0x1e4>
 800e218:	4638      	mov	r0, r7
 800e21a:	e7d2      	b.n	800e1c2 <_strtod_l+0x1fa>
 800e21c:	2b08      	cmp	r3, #8
 800e21e:	dc04      	bgt.n	800e22a <_strtod_l+0x262>
 800e220:	9e07      	ldr	r6, [sp, #28]
 800e222:	434e      	muls	r6, r1
 800e224:	9607      	str	r6, [sp, #28]
 800e226:	3301      	adds	r3, #1
 800e228:	e7e2      	b.n	800e1f0 <_strtod_l+0x228>
 800e22a:	f103 0c01 	add.w	ip, r3, #1
 800e22e:	f1bc 0f10 	cmp.w	ip, #16
 800e232:	bfd8      	it	le
 800e234:	fb01 f909 	mulle.w	r9, r1, r9
 800e238:	e7f5      	b.n	800e226 <_strtod_l+0x25e>
 800e23a:	2d10      	cmp	r5, #16
 800e23c:	bfdc      	itt	le
 800e23e:	230a      	movle	r3, #10
 800e240:	fb03 2909 	mlale	r9, r3, r9, r2
 800e244:	e7e1      	b.n	800e20a <_strtod_l+0x242>
 800e246:	2300      	movs	r3, #0
 800e248:	9305      	str	r3, [sp, #20]
 800e24a:	2301      	movs	r3, #1
 800e24c:	e77c      	b.n	800e148 <_strtod_l+0x180>
 800e24e:	f04f 0c00 	mov.w	ip, #0
 800e252:	f108 0202 	add.w	r2, r8, #2
 800e256:	9217      	str	r2, [sp, #92]	; 0x5c
 800e258:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e25c:	e785      	b.n	800e16a <_strtod_l+0x1a2>
 800e25e:	f04f 0c01 	mov.w	ip, #1
 800e262:	e7f6      	b.n	800e252 <_strtod_l+0x28a>
 800e264:	08011260 	.word	0x08011260
 800e268:	08011094 	.word	0x08011094
 800e26c:	7ff00000 	.word	0x7ff00000
 800e270:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e272:	1c51      	adds	r1, r2, #1
 800e274:	9117      	str	r1, [sp, #92]	; 0x5c
 800e276:	7852      	ldrb	r2, [r2, #1]
 800e278:	2a30      	cmp	r2, #48	; 0x30
 800e27a:	d0f9      	beq.n	800e270 <_strtod_l+0x2a8>
 800e27c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e280:	2908      	cmp	r1, #8
 800e282:	f63f af79 	bhi.w	800e178 <_strtod_l+0x1b0>
 800e286:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e28a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e28c:	9206      	str	r2, [sp, #24]
 800e28e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e290:	1c51      	adds	r1, r2, #1
 800e292:	9117      	str	r1, [sp, #92]	; 0x5c
 800e294:	7852      	ldrb	r2, [r2, #1]
 800e296:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e29a:	2e09      	cmp	r6, #9
 800e29c:	d937      	bls.n	800e30e <_strtod_l+0x346>
 800e29e:	9e06      	ldr	r6, [sp, #24]
 800e2a0:	1b89      	subs	r1, r1, r6
 800e2a2:	2908      	cmp	r1, #8
 800e2a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e2a8:	dc02      	bgt.n	800e2b0 <_strtod_l+0x2e8>
 800e2aa:	4576      	cmp	r6, lr
 800e2ac:	bfa8      	it	ge
 800e2ae:	4676      	movge	r6, lr
 800e2b0:	f1bc 0f00 	cmp.w	ip, #0
 800e2b4:	d000      	beq.n	800e2b8 <_strtod_l+0x2f0>
 800e2b6:	4276      	negs	r6, r6
 800e2b8:	2d00      	cmp	r5, #0
 800e2ba:	d14d      	bne.n	800e358 <_strtod_l+0x390>
 800e2bc:	9904      	ldr	r1, [sp, #16]
 800e2be:	4301      	orrs	r1, r0
 800e2c0:	f47f aec6 	bne.w	800e050 <_strtod_l+0x88>
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f47f aee1 	bne.w	800e08c <_strtod_l+0xc4>
 800e2ca:	2a69      	cmp	r2, #105	; 0x69
 800e2cc:	d027      	beq.n	800e31e <_strtod_l+0x356>
 800e2ce:	dc24      	bgt.n	800e31a <_strtod_l+0x352>
 800e2d0:	2a49      	cmp	r2, #73	; 0x49
 800e2d2:	d024      	beq.n	800e31e <_strtod_l+0x356>
 800e2d4:	2a4e      	cmp	r2, #78	; 0x4e
 800e2d6:	f47f aed9 	bne.w	800e08c <_strtod_l+0xc4>
 800e2da:	499f      	ldr	r1, [pc, #636]	; (800e558 <_strtod_l+0x590>)
 800e2dc:	a817      	add	r0, sp, #92	; 0x5c
 800e2de:	f001 f8a7 	bl	800f430 <__match>
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	f43f aed2 	beq.w	800e08c <_strtod_l+0xc4>
 800e2e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	2b28      	cmp	r3, #40	; 0x28
 800e2ee:	d12d      	bne.n	800e34c <_strtod_l+0x384>
 800e2f0:	499a      	ldr	r1, [pc, #616]	; (800e55c <_strtod_l+0x594>)
 800e2f2:	aa1a      	add	r2, sp, #104	; 0x68
 800e2f4:	a817      	add	r0, sp, #92	; 0x5c
 800e2f6:	f001 f8af 	bl	800f458 <__hexnan>
 800e2fa:	2805      	cmp	r0, #5
 800e2fc:	d126      	bne.n	800e34c <_strtod_l+0x384>
 800e2fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e300:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e304:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e308:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e30c:	e6a0      	b.n	800e050 <_strtod_l+0x88>
 800e30e:	210a      	movs	r1, #10
 800e310:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e314:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e318:	e7b9      	b.n	800e28e <_strtod_l+0x2c6>
 800e31a:	2a6e      	cmp	r2, #110	; 0x6e
 800e31c:	e7db      	b.n	800e2d6 <_strtod_l+0x30e>
 800e31e:	4990      	ldr	r1, [pc, #576]	; (800e560 <_strtod_l+0x598>)
 800e320:	a817      	add	r0, sp, #92	; 0x5c
 800e322:	f001 f885 	bl	800f430 <__match>
 800e326:	2800      	cmp	r0, #0
 800e328:	f43f aeb0 	beq.w	800e08c <_strtod_l+0xc4>
 800e32c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e32e:	498d      	ldr	r1, [pc, #564]	; (800e564 <_strtod_l+0x59c>)
 800e330:	3b01      	subs	r3, #1
 800e332:	a817      	add	r0, sp, #92	; 0x5c
 800e334:	9317      	str	r3, [sp, #92]	; 0x5c
 800e336:	f001 f87b 	bl	800f430 <__match>
 800e33a:	b910      	cbnz	r0, 800e342 <_strtod_l+0x37a>
 800e33c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e33e:	3301      	adds	r3, #1
 800e340:	9317      	str	r3, [sp, #92]	; 0x5c
 800e342:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e574 <_strtod_l+0x5ac>
 800e346:	f04f 0a00 	mov.w	sl, #0
 800e34a:	e681      	b.n	800e050 <_strtod_l+0x88>
 800e34c:	4886      	ldr	r0, [pc, #536]	; (800e568 <_strtod_l+0x5a0>)
 800e34e:	f002 f977 	bl	8010640 <nan>
 800e352:	ec5b ab10 	vmov	sl, fp, d0
 800e356:	e67b      	b.n	800e050 <_strtod_l+0x88>
 800e358:	9b05      	ldr	r3, [sp, #20]
 800e35a:	9807      	ldr	r0, [sp, #28]
 800e35c:	1af3      	subs	r3, r6, r3
 800e35e:	2f00      	cmp	r7, #0
 800e360:	bf08      	it	eq
 800e362:	462f      	moveq	r7, r5
 800e364:	2d10      	cmp	r5, #16
 800e366:	9306      	str	r3, [sp, #24]
 800e368:	46a8      	mov	r8, r5
 800e36a:	bfa8      	it	ge
 800e36c:	f04f 0810 	movge.w	r8, #16
 800e370:	f7f2 f8e8 	bl	8000544 <__aeabi_ui2d>
 800e374:	2d09      	cmp	r5, #9
 800e376:	4682      	mov	sl, r0
 800e378:	468b      	mov	fp, r1
 800e37a:	dd13      	ble.n	800e3a4 <_strtod_l+0x3dc>
 800e37c:	4b7b      	ldr	r3, [pc, #492]	; (800e56c <_strtod_l+0x5a4>)
 800e37e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e382:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e386:	f7f2 f957 	bl	8000638 <__aeabi_dmul>
 800e38a:	4682      	mov	sl, r0
 800e38c:	4648      	mov	r0, r9
 800e38e:	468b      	mov	fp, r1
 800e390:	f7f2 f8d8 	bl	8000544 <__aeabi_ui2d>
 800e394:	4602      	mov	r2, r0
 800e396:	460b      	mov	r3, r1
 800e398:	4650      	mov	r0, sl
 800e39a:	4659      	mov	r1, fp
 800e39c:	f7f1 ff96 	bl	80002cc <__adddf3>
 800e3a0:	4682      	mov	sl, r0
 800e3a2:	468b      	mov	fp, r1
 800e3a4:	2d0f      	cmp	r5, #15
 800e3a6:	dc38      	bgt.n	800e41a <_strtod_l+0x452>
 800e3a8:	9b06      	ldr	r3, [sp, #24]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f43f ae50 	beq.w	800e050 <_strtod_l+0x88>
 800e3b0:	dd24      	ble.n	800e3fc <_strtod_l+0x434>
 800e3b2:	2b16      	cmp	r3, #22
 800e3b4:	dc0b      	bgt.n	800e3ce <_strtod_l+0x406>
 800e3b6:	496d      	ldr	r1, [pc, #436]	; (800e56c <_strtod_l+0x5a4>)
 800e3b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e3bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3c0:	4652      	mov	r2, sl
 800e3c2:	465b      	mov	r3, fp
 800e3c4:	f7f2 f938 	bl	8000638 <__aeabi_dmul>
 800e3c8:	4682      	mov	sl, r0
 800e3ca:	468b      	mov	fp, r1
 800e3cc:	e640      	b.n	800e050 <_strtod_l+0x88>
 800e3ce:	9a06      	ldr	r2, [sp, #24]
 800e3d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	db20      	blt.n	800e41a <_strtod_l+0x452>
 800e3d8:	4c64      	ldr	r4, [pc, #400]	; (800e56c <_strtod_l+0x5a4>)
 800e3da:	f1c5 050f 	rsb	r5, r5, #15
 800e3de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e3e2:	4652      	mov	r2, sl
 800e3e4:	465b      	mov	r3, fp
 800e3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3ea:	f7f2 f925 	bl	8000638 <__aeabi_dmul>
 800e3ee:	9b06      	ldr	r3, [sp, #24]
 800e3f0:	1b5d      	subs	r5, r3, r5
 800e3f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e3f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e3fa:	e7e3      	b.n	800e3c4 <_strtod_l+0x3fc>
 800e3fc:	9b06      	ldr	r3, [sp, #24]
 800e3fe:	3316      	adds	r3, #22
 800e400:	db0b      	blt.n	800e41a <_strtod_l+0x452>
 800e402:	9b05      	ldr	r3, [sp, #20]
 800e404:	1b9e      	subs	r6, r3, r6
 800e406:	4b59      	ldr	r3, [pc, #356]	; (800e56c <_strtod_l+0x5a4>)
 800e408:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e40c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e410:	4650      	mov	r0, sl
 800e412:	4659      	mov	r1, fp
 800e414:	f7f2 fa3a 	bl	800088c <__aeabi_ddiv>
 800e418:	e7d6      	b.n	800e3c8 <_strtod_l+0x400>
 800e41a:	9b06      	ldr	r3, [sp, #24]
 800e41c:	eba5 0808 	sub.w	r8, r5, r8
 800e420:	4498      	add	r8, r3
 800e422:	f1b8 0f00 	cmp.w	r8, #0
 800e426:	dd74      	ble.n	800e512 <_strtod_l+0x54a>
 800e428:	f018 030f 	ands.w	r3, r8, #15
 800e42c:	d00a      	beq.n	800e444 <_strtod_l+0x47c>
 800e42e:	494f      	ldr	r1, [pc, #316]	; (800e56c <_strtod_l+0x5a4>)
 800e430:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e434:	4652      	mov	r2, sl
 800e436:	465b      	mov	r3, fp
 800e438:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e43c:	f7f2 f8fc 	bl	8000638 <__aeabi_dmul>
 800e440:	4682      	mov	sl, r0
 800e442:	468b      	mov	fp, r1
 800e444:	f038 080f 	bics.w	r8, r8, #15
 800e448:	d04f      	beq.n	800e4ea <_strtod_l+0x522>
 800e44a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e44e:	dd22      	ble.n	800e496 <_strtod_l+0x4ce>
 800e450:	2500      	movs	r5, #0
 800e452:	462e      	mov	r6, r5
 800e454:	9507      	str	r5, [sp, #28]
 800e456:	9505      	str	r5, [sp, #20]
 800e458:	2322      	movs	r3, #34	; 0x22
 800e45a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e574 <_strtod_l+0x5ac>
 800e45e:	6023      	str	r3, [r4, #0]
 800e460:	f04f 0a00 	mov.w	sl, #0
 800e464:	9b07      	ldr	r3, [sp, #28]
 800e466:	2b00      	cmp	r3, #0
 800e468:	f43f adf2 	beq.w	800e050 <_strtod_l+0x88>
 800e46c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e46e:	4620      	mov	r0, r4
 800e470:	f001 f8fe 	bl	800f670 <_Bfree>
 800e474:	9905      	ldr	r1, [sp, #20]
 800e476:	4620      	mov	r0, r4
 800e478:	f001 f8fa 	bl	800f670 <_Bfree>
 800e47c:	4631      	mov	r1, r6
 800e47e:	4620      	mov	r0, r4
 800e480:	f001 f8f6 	bl	800f670 <_Bfree>
 800e484:	9907      	ldr	r1, [sp, #28]
 800e486:	4620      	mov	r0, r4
 800e488:	f001 f8f2 	bl	800f670 <_Bfree>
 800e48c:	4629      	mov	r1, r5
 800e48e:	4620      	mov	r0, r4
 800e490:	f001 f8ee 	bl	800f670 <_Bfree>
 800e494:	e5dc      	b.n	800e050 <_strtod_l+0x88>
 800e496:	4b36      	ldr	r3, [pc, #216]	; (800e570 <_strtod_l+0x5a8>)
 800e498:	9304      	str	r3, [sp, #16]
 800e49a:	2300      	movs	r3, #0
 800e49c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e4a0:	4650      	mov	r0, sl
 800e4a2:	4659      	mov	r1, fp
 800e4a4:	4699      	mov	r9, r3
 800e4a6:	f1b8 0f01 	cmp.w	r8, #1
 800e4aa:	dc21      	bgt.n	800e4f0 <_strtod_l+0x528>
 800e4ac:	b10b      	cbz	r3, 800e4b2 <_strtod_l+0x4ea>
 800e4ae:	4682      	mov	sl, r0
 800e4b0:	468b      	mov	fp, r1
 800e4b2:	4b2f      	ldr	r3, [pc, #188]	; (800e570 <_strtod_l+0x5a8>)
 800e4b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e4b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e4bc:	4652      	mov	r2, sl
 800e4be:	465b      	mov	r3, fp
 800e4c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e4c4:	f7f2 f8b8 	bl	8000638 <__aeabi_dmul>
 800e4c8:	4b2a      	ldr	r3, [pc, #168]	; (800e574 <_strtod_l+0x5ac>)
 800e4ca:	460a      	mov	r2, r1
 800e4cc:	400b      	ands	r3, r1
 800e4ce:	492a      	ldr	r1, [pc, #168]	; (800e578 <_strtod_l+0x5b0>)
 800e4d0:	428b      	cmp	r3, r1
 800e4d2:	4682      	mov	sl, r0
 800e4d4:	d8bc      	bhi.n	800e450 <_strtod_l+0x488>
 800e4d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e4da:	428b      	cmp	r3, r1
 800e4dc:	bf86      	itte	hi
 800e4de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e57c <_strtod_l+0x5b4>
 800e4e2:	f04f 3aff 	movhi.w	sl, #4294967295
 800e4e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	9304      	str	r3, [sp, #16]
 800e4ee:	e084      	b.n	800e5fa <_strtod_l+0x632>
 800e4f0:	f018 0f01 	tst.w	r8, #1
 800e4f4:	d005      	beq.n	800e502 <_strtod_l+0x53a>
 800e4f6:	9b04      	ldr	r3, [sp, #16]
 800e4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fc:	f7f2 f89c 	bl	8000638 <__aeabi_dmul>
 800e500:	2301      	movs	r3, #1
 800e502:	9a04      	ldr	r2, [sp, #16]
 800e504:	3208      	adds	r2, #8
 800e506:	f109 0901 	add.w	r9, r9, #1
 800e50a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e50e:	9204      	str	r2, [sp, #16]
 800e510:	e7c9      	b.n	800e4a6 <_strtod_l+0x4de>
 800e512:	d0ea      	beq.n	800e4ea <_strtod_l+0x522>
 800e514:	f1c8 0800 	rsb	r8, r8, #0
 800e518:	f018 020f 	ands.w	r2, r8, #15
 800e51c:	d00a      	beq.n	800e534 <_strtod_l+0x56c>
 800e51e:	4b13      	ldr	r3, [pc, #76]	; (800e56c <_strtod_l+0x5a4>)
 800e520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e524:	4650      	mov	r0, sl
 800e526:	4659      	mov	r1, fp
 800e528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52c:	f7f2 f9ae 	bl	800088c <__aeabi_ddiv>
 800e530:	4682      	mov	sl, r0
 800e532:	468b      	mov	fp, r1
 800e534:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e538:	d0d7      	beq.n	800e4ea <_strtod_l+0x522>
 800e53a:	f1b8 0f1f 	cmp.w	r8, #31
 800e53e:	dd1f      	ble.n	800e580 <_strtod_l+0x5b8>
 800e540:	2500      	movs	r5, #0
 800e542:	462e      	mov	r6, r5
 800e544:	9507      	str	r5, [sp, #28]
 800e546:	9505      	str	r5, [sp, #20]
 800e548:	2322      	movs	r3, #34	; 0x22
 800e54a:	f04f 0a00 	mov.w	sl, #0
 800e54e:	f04f 0b00 	mov.w	fp, #0
 800e552:	6023      	str	r3, [r4, #0]
 800e554:	e786      	b.n	800e464 <_strtod_l+0x49c>
 800e556:	bf00      	nop
 800e558:	0801108e 	.word	0x0801108e
 800e55c:	080110a8 	.word	0x080110a8
 800e560:	08011085 	.word	0x08011085
 800e564:	08011088 	.word	0x08011088
 800e568:	08011452 	.word	0x08011452
 800e56c:	08011310 	.word	0x08011310
 800e570:	080112e8 	.word	0x080112e8
 800e574:	7ff00000 	.word	0x7ff00000
 800e578:	7ca00000 	.word	0x7ca00000
 800e57c:	7fefffff 	.word	0x7fefffff
 800e580:	f018 0310 	ands.w	r3, r8, #16
 800e584:	bf18      	it	ne
 800e586:	236a      	movne	r3, #106	; 0x6a
 800e588:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e938 <_strtod_l+0x970>
 800e58c:	9304      	str	r3, [sp, #16]
 800e58e:	4650      	mov	r0, sl
 800e590:	4659      	mov	r1, fp
 800e592:	2300      	movs	r3, #0
 800e594:	f018 0f01 	tst.w	r8, #1
 800e598:	d004      	beq.n	800e5a4 <_strtod_l+0x5dc>
 800e59a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e59e:	f7f2 f84b 	bl	8000638 <__aeabi_dmul>
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e5a8:	f109 0908 	add.w	r9, r9, #8
 800e5ac:	d1f2      	bne.n	800e594 <_strtod_l+0x5cc>
 800e5ae:	b10b      	cbz	r3, 800e5b4 <_strtod_l+0x5ec>
 800e5b0:	4682      	mov	sl, r0
 800e5b2:	468b      	mov	fp, r1
 800e5b4:	9b04      	ldr	r3, [sp, #16]
 800e5b6:	b1c3      	cbz	r3, 800e5ea <_strtod_l+0x622>
 800e5b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e5bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	4659      	mov	r1, fp
 800e5c4:	dd11      	ble.n	800e5ea <_strtod_l+0x622>
 800e5c6:	2b1f      	cmp	r3, #31
 800e5c8:	f340 8124 	ble.w	800e814 <_strtod_l+0x84c>
 800e5cc:	2b34      	cmp	r3, #52	; 0x34
 800e5ce:	bfde      	ittt	le
 800e5d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e5d4:	f04f 33ff 	movle.w	r3, #4294967295
 800e5d8:	fa03 f202 	lslle.w	r2, r3, r2
 800e5dc:	f04f 0a00 	mov.w	sl, #0
 800e5e0:	bfcc      	ite	gt
 800e5e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e5e6:	ea02 0b01 	andle.w	fp, r2, r1
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	4650      	mov	r0, sl
 800e5f0:	4659      	mov	r1, fp
 800e5f2:	f7f2 fa89 	bl	8000b08 <__aeabi_dcmpeq>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d1a2      	bne.n	800e540 <_strtod_l+0x578>
 800e5fa:	9b07      	ldr	r3, [sp, #28]
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	9908      	ldr	r1, [sp, #32]
 800e600:	462b      	mov	r3, r5
 800e602:	463a      	mov	r2, r7
 800e604:	4620      	mov	r0, r4
 800e606:	f001 f89b 	bl	800f740 <__s2b>
 800e60a:	9007      	str	r0, [sp, #28]
 800e60c:	2800      	cmp	r0, #0
 800e60e:	f43f af1f 	beq.w	800e450 <_strtod_l+0x488>
 800e612:	9b05      	ldr	r3, [sp, #20]
 800e614:	1b9e      	subs	r6, r3, r6
 800e616:	9b06      	ldr	r3, [sp, #24]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	bfb4      	ite	lt
 800e61c:	4633      	movlt	r3, r6
 800e61e:	2300      	movge	r3, #0
 800e620:	930c      	str	r3, [sp, #48]	; 0x30
 800e622:	9b06      	ldr	r3, [sp, #24]
 800e624:	2500      	movs	r5, #0
 800e626:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e62a:	9312      	str	r3, [sp, #72]	; 0x48
 800e62c:	462e      	mov	r6, r5
 800e62e:	9b07      	ldr	r3, [sp, #28]
 800e630:	4620      	mov	r0, r4
 800e632:	6859      	ldr	r1, [r3, #4]
 800e634:	f000 ffdc 	bl	800f5f0 <_Balloc>
 800e638:	9005      	str	r0, [sp, #20]
 800e63a:	2800      	cmp	r0, #0
 800e63c:	f43f af0c 	beq.w	800e458 <_strtod_l+0x490>
 800e640:	9b07      	ldr	r3, [sp, #28]
 800e642:	691a      	ldr	r2, [r3, #16]
 800e644:	3202      	adds	r2, #2
 800e646:	f103 010c 	add.w	r1, r3, #12
 800e64a:	0092      	lsls	r2, r2, #2
 800e64c:	300c      	adds	r0, #12
 800e64e:	f7ff f8fe 	bl	800d84e <memcpy>
 800e652:	ec4b ab10 	vmov	d0, sl, fp
 800e656:	aa1a      	add	r2, sp, #104	; 0x68
 800e658:	a919      	add	r1, sp, #100	; 0x64
 800e65a:	4620      	mov	r0, r4
 800e65c:	f001 fbb6 	bl	800fdcc <__d2b>
 800e660:	ec4b ab18 	vmov	d8, sl, fp
 800e664:	9018      	str	r0, [sp, #96]	; 0x60
 800e666:	2800      	cmp	r0, #0
 800e668:	f43f aef6 	beq.w	800e458 <_strtod_l+0x490>
 800e66c:	2101      	movs	r1, #1
 800e66e:	4620      	mov	r0, r4
 800e670:	f001 f900 	bl	800f874 <__i2b>
 800e674:	4606      	mov	r6, r0
 800e676:	2800      	cmp	r0, #0
 800e678:	f43f aeee 	beq.w	800e458 <_strtod_l+0x490>
 800e67c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e67e:	9904      	ldr	r1, [sp, #16]
 800e680:	2b00      	cmp	r3, #0
 800e682:	bfab      	itete	ge
 800e684:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e686:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e688:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e68a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e68e:	bfac      	ite	ge
 800e690:	eb03 0902 	addge.w	r9, r3, r2
 800e694:	1ad7      	sublt	r7, r2, r3
 800e696:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e698:	eba3 0801 	sub.w	r8, r3, r1
 800e69c:	4490      	add	r8, r2
 800e69e:	4ba1      	ldr	r3, [pc, #644]	; (800e924 <_strtod_l+0x95c>)
 800e6a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6a4:	4598      	cmp	r8, r3
 800e6a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e6aa:	f280 80c7 	bge.w	800e83c <_strtod_l+0x874>
 800e6ae:	eba3 0308 	sub.w	r3, r3, r8
 800e6b2:	2b1f      	cmp	r3, #31
 800e6b4:	eba2 0203 	sub.w	r2, r2, r3
 800e6b8:	f04f 0101 	mov.w	r1, #1
 800e6bc:	f300 80b1 	bgt.w	800e822 <_strtod_l+0x85a>
 800e6c0:	fa01 f303 	lsl.w	r3, r1, r3
 800e6c4:	930d      	str	r3, [sp, #52]	; 0x34
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	9308      	str	r3, [sp, #32]
 800e6ca:	eb09 0802 	add.w	r8, r9, r2
 800e6ce:	9b04      	ldr	r3, [sp, #16]
 800e6d0:	45c1      	cmp	r9, r8
 800e6d2:	4417      	add	r7, r2
 800e6d4:	441f      	add	r7, r3
 800e6d6:	464b      	mov	r3, r9
 800e6d8:	bfa8      	it	ge
 800e6da:	4643      	movge	r3, r8
 800e6dc:	42bb      	cmp	r3, r7
 800e6de:	bfa8      	it	ge
 800e6e0:	463b      	movge	r3, r7
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	bfc2      	ittt	gt
 800e6e6:	eba8 0803 	subgt.w	r8, r8, r3
 800e6ea:	1aff      	subgt	r7, r7, r3
 800e6ec:	eba9 0903 	subgt.w	r9, r9, r3
 800e6f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	dd17      	ble.n	800e726 <_strtod_l+0x75e>
 800e6f6:	4631      	mov	r1, r6
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f001 f97a 	bl	800f9f4 <__pow5mult>
 800e700:	4606      	mov	r6, r0
 800e702:	2800      	cmp	r0, #0
 800e704:	f43f aea8 	beq.w	800e458 <_strtod_l+0x490>
 800e708:	4601      	mov	r1, r0
 800e70a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e70c:	4620      	mov	r0, r4
 800e70e:	f001 f8c7 	bl	800f8a0 <__multiply>
 800e712:	900b      	str	r0, [sp, #44]	; 0x2c
 800e714:	2800      	cmp	r0, #0
 800e716:	f43f ae9f 	beq.w	800e458 <_strtod_l+0x490>
 800e71a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e71c:	4620      	mov	r0, r4
 800e71e:	f000 ffa7 	bl	800f670 <_Bfree>
 800e722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e724:	9318      	str	r3, [sp, #96]	; 0x60
 800e726:	f1b8 0f00 	cmp.w	r8, #0
 800e72a:	f300 808c 	bgt.w	800e846 <_strtod_l+0x87e>
 800e72e:	9b06      	ldr	r3, [sp, #24]
 800e730:	2b00      	cmp	r3, #0
 800e732:	dd08      	ble.n	800e746 <_strtod_l+0x77e>
 800e734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e736:	9905      	ldr	r1, [sp, #20]
 800e738:	4620      	mov	r0, r4
 800e73a:	f001 f95b 	bl	800f9f4 <__pow5mult>
 800e73e:	9005      	str	r0, [sp, #20]
 800e740:	2800      	cmp	r0, #0
 800e742:	f43f ae89 	beq.w	800e458 <_strtod_l+0x490>
 800e746:	2f00      	cmp	r7, #0
 800e748:	dd08      	ble.n	800e75c <_strtod_l+0x794>
 800e74a:	9905      	ldr	r1, [sp, #20]
 800e74c:	463a      	mov	r2, r7
 800e74e:	4620      	mov	r0, r4
 800e750:	f001 f9aa 	bl	800faa8 <__lshift>
 800e754:	9005      	str	r0, [sp, #20]
 800e756:	2800      	cmp	r0, #0
 800e758:	f43f ae7e 	beq.w	800e458 <_strtod_l+0x490>
 800e75c:	f1b9 0f00 	cmp.w	r9, #0
 800e760:	dd08      	ble.n	800e774 <_strtod_l+0x7ac>
 800e762:	4631      	mov	r1, r6
 800e764:	464a      	mov	r2, r9
 800e766:	4620      	mov	r0, r4
 800e768:	f001 f99e 	bl	800faa8 <__lshift>
 800e76c:	4606      	mov	r6, r0
 800e76e:	2800      	cmp	r0, #0
 800e770:	f43f ae72 	beq.w	800e458 <_strtod_l+0x490>
 800e774:	9a05      	ldr	r2, [sp, #20]
 800e776:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e778:	4620      	mov	r0, r4
 800e77a:	f001 fa21 	bl	800fbc0 <__mdiff>
 800e77e:	4605      	mov	r5, r0
 800e780:	2800      	cmp	r0, #0
 800e782:	f43f ae69 	beq.w	800e458 <_strtod_l+0x490>
 800e786:	68c3      	ldr	r3, [r0, #12]
 800e788:	930b      	str	r3, [sp, #44]	; 0x2c
 800e78a:	2300      	movs	r3, #0
 800e78c:	60c3      	str	r3, [r0, #12]
 800e78e:	4631      	mov	r1, r6
 800e790:	f001 f9fa 	bl	800fb88 <__mcmp>
 800e794:	2800      	cmp	r0, #0
 800e796:	da60      	bge.n	800e85a <_strtod_l+0x892>
 800e798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e79a:	ea53 030a 	orrs.w	r3, r3, sl
 800e79e:	f040 8082 	bne.w	800e8a6 <_strtod_l+0x8de>
 800e7a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d17d      	bne.n	800e8a6 <_strtod_l+0x8de>
 800e7aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e7ae:	0d1b      	lsrs	r3, r3, #20
 800e7b0:	051b      	lsls	r3, r3, #20
 800e7b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e7b6:	d976      	bls.n	800e8a6 <_strtod_l+0x8de>
 800e7b8:	696b      	ldr	r3, [r5, #20]
 800e7ba:	b913      	cbnz	r3, 800e7c2 <_strtod_l+0x7fa>
 800e7bc:	692b      	ldr	r3, [r5, #16]
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	dd71      	ble.n	800e8a6 <_strtod_l+0x8de>
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	f001 f96e 	bl	800faa8 <__lshift>
 800e7cc:	4631      	mov	r1, r6
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	f001 f9da 	bl	800fb88 <__mcmp>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	dd66      	ble.n	800e8a6 <_strtod_l+0x8de>
 800e7d8:	9904      	ldr	r1, [sp, #16]
 800e7da:	4a53      	ldr	r2, [pc, #332]	; (800e928 <_strtod_l+0x960>)
 800e7dc:	465b      	mov	r3, fp
 800e7de:	2900      	cmp	r1, #0
 800e7e0:	f000 8081 	beq.w	800e8e6 <_strtod_l+0x91e>
 800e7e4:	ea02 010b 	and.w	r1, r2, fp
 800e7e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e7ec:	dc7b      	bgt.n	800e8e6 <_strtod_l+0x91e>
 800e7ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e7f2:	f77f aea9 	ble.w	800e548 <_strtod_l+0x580>
 800e7f6:	4b4d      	ldr	r3, [pc, #308]	; (800e92c <_strtod_l+0x964>)
 800e7f8:	4650      	mov	r0, sl
 800e7fa:	4659      	mov	r1, fp
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f7f1 ff1b 	bl	8000638 <__aeabi_dmul>
 800e802:	460b      	mov	r3, r1
 800e804:	4303      	orrs	r3, r0
 800e806:	bf08      	it	eq
 800e808:	2322      	moveq	r3, #34	; 0x22
 800e80a:	4682      	mov	sl, r0
 800e80c:	468b      	mov	fp, r1
 800e80e:	bf08      	it	eq
 800e810:	6023      	streq	r3, [r4, #0]
 800e812:	e62b      	b.n	800e46c <_strtod_l+0x4a4>
 800e814:	f04f 32ff 	mov.w	r2, #4294967295
 800e818:	fa02 f303 	lsl.w	r3, r2, r3
 800e81c:	ea03 0a0a 	and.w	sl, r3, sl
 800e820:	e6e3      	b.n	800e5ea <_strtod_l+0x622>
 800e822:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e826:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e82a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e82e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e832:	fa01 f308 	lsl.w	r3, r1, r8
 800e836:	9308      	str	r3, [sp, #32]
 800e838:	910d      	str	r1, [sp, #52]	; 0x34
 800e83a:	e746      	b.n	800e6ca <_strtod_l+0x702>
 800e83c:	2300      	movs	r3, #0
 800e83e:	9308      	str	r3, [sp, #32]
 800e840:	2301      	movs	r3, #1
 800e842:	930d      	str	r3, [sp, #52]	; 0x34
 800e844:	e741      	b.n	800e6ca <_strtod_l+0x702>
 800e846:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e848:	4642      	mov	r2, r8
 800e84a:	4620      	mov	r0, r4
 800e84c:	f001 f92c 	bl	800faa8 <__lshift>
 800e850:	9018      	str	r0, [sp, #96]	; 0x60
 800e852:	2800      	cmp	r0, #0
 800e854:	f47f af6b 	bne.w	800e72e <_strtod_l+0x766>
 800e858:	e5fe      	b.n	800e458 <_strtod_l+0x490>
 800e85a:	465f      	mov	r7, fp
 800e85c:	d16e      	bne.n	800e93c <_strtod_l+0x974>
 800e85e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e860:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e864:	b342      	cbz	r2, 800e8b8 <_strtod_l+0x8f0>
 800e866:	4a32      	ldr	r2, [pc, #200]	; (800e930 <_strtod_l+0x968>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d128      	bne.n	800e8be <_strtod_l+0x8f6>
 800e86c:	9b04      	ldr	r3, [sp, #16]
 800e86e:	4651      	mov	r1, sl
 800e870:	b1eb      	cbz	r3, 800e8ae <_strtod_l+0x8e6>
 800e872:	4b2d      	ldr	r3, [pc, #180]	; (800e928 <_strtod_l+0x960>)
 800e874:	403b      	ands	r3, r7
 800e876:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e87a:	f04f 32ff 	mov.w	r2, #4294967295
 800e87e:	d819      	bhi.n	800e8b4 <_strtod_l+0x8ec>
 800e880:	0d1b      	lsrs	r3, r3, #20
 800e882:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e886:	fa02 f303 	lsl.w	r3, r2, r3
 800e88a:	4299      	cmp	r1, r3
 800e88c:	d117      	bne.n	800e8be <_strtod_l+0x8f6>
 800e88e:	4b29      	ldr	r3, [pc, #164]	; (800e934 <_strtod_l+0x96c>)
 800e890:	429f      	cmp	r7, r3
 800e892:	d102      	bne.n	800e89a <_strtod_l+0x8d2>
 800e894:	3101      	adds	r1, #1
 800e896:	f43f addf 	beq.w	800e458 <_strtod_l+0x490>
 800e89a:	4b23      	ldr	r3, [pc, #140]	; (800e928 <_strtod_l+0x960>)
 800e89c:	403b      	ands	r3, r7
 800e89e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e8a2:	f04f 0a00 	mov.w	sl, #0
 800e8a6:	9b04      	ldr	r3, [sp, #16]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1a4      	bne.n	800e7f6 <_strtod_l+0x82e>
 800e8ac:	e5de      	b.n	800e46c <_strtod_l+0x4a4>
 800e8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b2:	e7ea      	b.n	800e88a <_strtod_l+0x8c2>
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	e7e8      	b.n	800e88a <_strtod_l+0x8c2>
 800e8b8:	ea53 030a 	orrs.w	r3, r3, sl
 800e8bc:	d08c      	beq.n	800e7d8 <_strtod_l+0x810>
 800e8be:	9b08      	ldr	r3, [sp, #32]
 800e8c0:	b1db      	cbz	r3, 800e8fa <_strtod_l+0x932>
 800e8c2:	423b      	tst	r3, r7
 800e8c4:	d0ef      	beq.n	800e8a6 <_strtod_l+0x8de>
 800e8c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8c8:	9a04      	ldr	r2, [sp, #16]
 800e8ca:	4650      	mov	r0, sl
 800e8cc:	4659      	mov	r1, fp
 800e8ce:	b1c3      	cbz	r3, 800e902 <_strtod_l+0x93a>
 800e8d0:	f7ff fb5b 	bl	800df8a <sulp>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	ec51 0b18 	vmov	r0, r1, d8
 800e8dc:	f7f1 fcf6 	bl	80002cc <__adddf3>
 800e8e0:	4682      	mov	sl, r0
 800e8e2:	468b      	mov	fp, r1
 800e8e4:	e7df      	b.n	800e8a6 <_strtod_l+0x8de>
 800e8e6:	4013      	ands	r3, r2
 800e8e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e8ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e8f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e8f4:	f04f 3aff 	mov.w	sl, #4294967295
 800e8f8:	e7d5      	b.n	800e8a6 <_strtod_l+0x8de>
 800e8fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8fc:	ea13 0f0a 	tst.w	r3, sl
 800e900:	e7e0      	b.n	800e8c4 <_strtod_l+0x8fc>
 800e902:	f7ff fb42 	bl	800df8a <sulp>
 800e906:	4602      	mov	r2, r0
 800e908:	460b      	mov	r3, r1
 800e90a:	ec51 0b18 	vmov	r0, r1, d8
 800e90e:	f7f1 fcdb 	bl	80002c8 <__aeabi_dsub>
 800e912:	2200      	movs	r2, #0
 800e914:	2300      	movs	r3, #0
 800e916:	4682      	mov	sl, r0
 800e918:	468b      	mov	fp, r1
 800e91a:	f7f2 f8f5 	bl	8000b08 <__aeabi_dcmpeq>
 800e91e:	2800      	cmp	r0, #0
 800e920:	d0c1      	beq.n	800e8a6 <_strtod_l+0x8de>
 800e922:	e611      	b.n	800e548 <_strtod_l+0x580>
 800e924:	fffffc02 	.word	0xfffffc02
 800e928:	7ff00000 	.word	0x7ff00000
 800e92c:	39500000 	.word	0x39500000
 800e930:	000fffff 	.word	0x000fffff
 800e934:	7fefffff 	.word	0x7fefffff
 800e938:	080110c0 	.word	0x080110c0
 800e93c:	4631      	mov	r1, r6
 800e93e:	4628      	mov	r0, r5
 800e940:	f001 faa0 	bl	800fe84 <__ratio>
 800e944:	ec59 8b10 	vmov	r8, r9, d0
 800e948:	ee10 0a10 	vmov	r0, s0
 800e94c:	2200      	movs	r2, #0
 800e94e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e952:	4649      	mov	r1, r9
 800e954:	f7f2 f8ec 	bl	8000b30 <__aeabi_dcmple>
 800e958:	2800      	cmp	r0, #0
 800e95a:	d07a      	beq.n	800ea52 <_strtod_l+0xa8a>
 800e95c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d04a      	beq.n	800e9f8 <_strtod_l+0xa30>
 800e962:	4b95      	ldr	r3, [pc, #596]	; (800ebb8 <_strtod_l+0xbf0>)
 800e964:	2200      	movs	r2, #0
 800e966:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e96a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ebb8 <_strtod_l+0xbf0>
 800e96e:	f04f 0800 	mov.w	r8, #0
 800e972:	4b92      	ldr	r3, [pc, #584]	; (800ebbc <_strtod_l+0xbf4>)
 800e974:	403b      	ands	r3, r7
 800e976:	930d      	str	r3, [sp, #52]	; 0x34
 800e978:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e97a:	4b91      	ldr	r3, [pc, #580]	; (800ebc0 <_strtod_l+0xbf8>)
 800e97c:	429a      	cmp	r2, r3
 800e97e:	f040 80b0 	bne.w	800eae2 <_strtod_l+0xb1a>
 800e982:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e986:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e98a:	ec4b ab10 	vmov	d0, sl, fp
 800e98e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e992:	f001 f99f 	bl	800fcd4 <__ulp>
 800e996:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e99a:	ec53 2b10 	vmov	r2, r3, d0
 800e99e:	f7f1 fe4b 	bl	8000638 <__aeabi_dmul>
 800e9a2:	4652      	mov	r2, sl
 800e9a4:	465b      	mov	r3, fp
 800e9a6:	f7f1 fc91 	bl	80002cc <__adddf3>
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	4983      	ldr	r1, [pc, #524]	; (800ebbc <_strtod_l+0xbf4>)
 800e9ae:	4a85      	ldr	r2, [pc, #532]	; (800ebc4 <_strtod_l+0xbfc>)
 800e9b0:	4019      	ands	r1, r3
 800e9b2:	4291      	cmp	r1, r2
 800e9b4:	4682      	mov	sl, r0
 800e9b6:	d960      	bls.n	800ea7a <_strtod_l+0xab2>
 800e9b8:	ee18 3a90 	vmov	r3, s17
 800e9bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d104      	bne.n	800e9ce <_strtod_l+0xa06>
 800e9c4:	ee18 3a10 	vmov	r3, s16
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	f43f ad45 	beq.w	800e458 <_strtod_l+0x490>
 800e9ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ebd0 <_strtod_l+0xc08>
 800e9d2:	f04f 3aff 	mov.w	sl, #4294967295
 800e9d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f000 fe49 	bl	800f670 <_Bfree>
 800e9de:	9905      	ldr	r1, [sp, #20]
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f000 fe45 	bl	800f670 <_Bfree>
 800e9e6:	4631      	mov	r1, r6
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f000 fe41 	bl	800f670 <_Bfree>
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f000 fe3d 	bl	800f670 <_Bfree>
 800e9f6:	e61a      	b.n	800e62e <_strtod_l+0x666>
 800e9f8:	f1ba 0f00 	cmp.w	sl, #0
 800e9fc:	d11b      	bne.n	800ea36 <_strtod_l+0xa6e>
 800e9fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea02:	b9f3      	cbnz	r3, 800ea42 <_strtod_l+0xa7a>
 800ea04:	4b6c      	ldr	r3, [pc, #432]	; (800ebb8 <_strtod_l+0xbf0>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	4640      	mov	r0, r8
 800ea0a:	4649      	mov	r1, r9
 800ea0c:	f7f2 f886 	bl	8000b1c <__aeabi_dcmplt>
 800ea10:	b9d0      	cbnz	r0, 800ea48 <_strtod_l+0xa80>
 800ea12:	4640      	mov	r0, r8
 800ea14:	4649      	mov	r1, r9
 800ea16:	4b6c      	ldr	r3, [pc, #432]	; (800ebc8 <_strtod_l+0xc00>)
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f7f1 fe0d 	bl	8000638 <__aeabi_dmul>
 800ea1e:	4680      	mov	r8, r0
 800ea20:	4689      	mov	r9, r1
 800ea22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ea26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ea2a:	9315      	str	r3, [sp, #84]	; 0x54
 800ea2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ea30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ea34:	e79d      	b.n	800e972 <_strtod_l+0x9aa>
 800ea36:	f1ba 0f01 	cmp.w	sl, #1
 800ea3a:	d102      	bne.n	800ea42 <_strtod_l+0xa7a>
 800ea3c:	2f00      	cmp	r7, #0
 800ea3e:	f43f ad83 	beq.w	800e548 <_strtod_l+0x580>
 800ea42:	4b62      	ldr	r3, [pc, #392]	; (800ebcc <_strtod_l+0xc04>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	e78e      	b.n	800e966 <_strtod_l+0x99e>
 800ea48:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ebc8 <_strtod_l+0xc00>
 800ea4c:	f04f 0800 	mov.w	r8, #0
 800ea50:	e7e7      	b.n	800ea22 <_strtod_l+0xa5a>
 800ea52:	4b5d      	ldr	r3, [pc, #372]	; (800ebc8 <_strtod_l+0xc00>)
 800ea54:	4640      	mov	r0, r8
 800ea56:	4649      	mov	r1, r9
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f7f1 fded 	bl	8000638 <__aeabi_dmul>
 800ea5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea60:	4680      	mov	r8, r0
 800ea62:	4689      	mov	r9, r1
 800ea64:	b933      	cbnz	r3, 800ea74 <_strtod_l+0xaac>
 800ea66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea6a:	900e      	str	r0, [sp, #56]	; 0x38
 800ea6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ea72:	e7dd      	b.n	800ea30 <_strtod_l+0xa68>
 800ea74:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ea78:	e7f9      	b.n	800ea6e <_strtod_l+0xaa6>
 800ea7a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ea7e:	9b04      	ldr	r3, [sp, #16]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d1a8      	bne.n	800e9d6 <_strtod_l+0xa0e>
 800ea84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea8a:	0d1b      	lsrs	r3, r3, #20
 800ea8c:	051b      	lsls	r3, r3, #20
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d1a1      	bne.n	800e9d6 <_strtod_l+0xa0e>
 800ea92:	4640      	mov	r0, r8
 800ea94:	4649      	mov	r1, r9
 800ea96:	f7f2 f907 	bl	8000ca8 <__aeabi_d2lz>
 800ea9a:	f7f1 fd9f 	bl	80005dc <__aeabi_l2d>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	4640      	mov	r0, r8
 800eaa4:	4649      	mov	r1, r9
 800eaa6:	f7f1 fc0f 	bl	80002c8 <__aeabi_dsub>
 800eaaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eaac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eab0:	ea43 030a 	orr.w	r3, r3, sl
 800eab4:	4313      	orrs	r3, r2
 800eab6:	4680      	mov	r8, r0
 800eab8:	4689      	mov	r9, r1
 800eaba:	d055      	beq.n	800eb68 <_strtod_l+0xba0>
 800eabc:	a336      	add	r3, pc, #216	; (adr r3, 800eb98 <_strtod_l+0xbd0>)
 800eabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac2:	f7f2 f82b 	bl	8000b1c <__aeabi_dcmplt>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	f47f acd0 	bne.w	800e46c <_strtod_l+0x4a4>
 800eacc:	a334      	add	r3, pc, #208	; (adr r3, 800eba0 <_strtod_l+0xbd8>)
 800eace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead2:	4640      	mov	r0, r8
 800ead4:	4649      	mov	r1, r9
 800ead6:	f7f2 f83f 	bl	8000b58 <__aeabi_dcmpgt>
 800eada:	2800      	cmp	r0, #0
 800eadc:	f43f af7b 	beq.w	800e9d6 <_strtod_l+0xa0e>
 800eae0:	e4c4      	b.n	800e46c <_strtod_l+0x4a4>
 800eae2:	9b04      	ldr	r3, [sp, #16]
 800eae4:	b333      	cbz	r3, 800eb34 <_strtod_l+0xb6c>
 800eae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eae8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eaec:	d822      	bhi.n	800eb34 <_strtod_l+0xb6c>
 800eaee:	a32e      	add	r3, pc, #184	; (adr r3, 800eba8 <_strtod_l+0xbe0>)
 800eaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf4:	4640      	mov	r0, r8
 800eaf6:	4649      	mov	r1, r9
 800eaf8:	f7f2 f81a 	bl	8000b30 <__aeabi_dcmple>
 800eafc:	b1a0      	cbz	r0, 800eb28 <_strtod_l+0xb60>
 800eafe:	4649      	mov	r1, r9
 800eb00:	4640      	mov	r0, r8
 800eb02:	f7f2 f849 	bl	8000b98 <__aeabi_d2uiz>
 800eb06:	2801      	cmp	r0, #1
 800eb08:	bf38      	it	cc
 800eb0a:	2001      	movcc	r0, #1
 800eb0c:	f7f1 fd1a 	bl	8000544 <__aeabi_ui2d>
 800eb10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb12:	4680      	mov	r8, r0
 800eb14:	4689      	mov	r9, r1
 800eb16:	bb23      	cbnz	r3, 800eb62 <_strtod_l+0xb9a>
 800eb18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb1c:	9010      	str	r0, [sp, #64]	; 0x40
 800eb1e:	9311      	str	r3, [sp, #68]	; 0x44
 800eb20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eb24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eb28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb2c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800eb30:	1a9b      	subs	r3, r3, r2
 800eb32:	9309      	str	r3, [sp, #36]	; 0x24
 800eb34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb38:	eeb0 0a48 	vmov.f32	s0, s16
 800eb3c:	eef0 0a68 	vmov.f32	s1, s17
 800eb40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eb44:	f001 f8c6 	bl	800fcd4 <__ulp>
 800eb48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb4c:	ec53 2b10 	vmov	r2, r3, d0
 800eb50:	f7f1 fd72 	bl	8000638 <__aeabi_dmul>
 800eb54:	ec53 2b18 	vmov	r2, r3, d8
 800eb58:	f7f1 fbb8 	bl	80002cc <__adddf3>
 800eb5c:	4682      	mov	sl, r0
 800eb5e:	468b      	mov	fp, r1
 800eb60:	e78d      	b.n	800ea7e <_strtod_l+0xab6>
 800eb62:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800eb66:	e7db      	b.n	800eb20 <_strtod_l+0xb58>
 800eb68:	a311      	add	r3, pc, #68	; (adr r3, 800ebb0 <_strtod_l+0xbe8>)
 800eb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6e:	f7f1 ffd5 	bl	8000b1c <__aeabi_dcmplt>
 800eb72:	e7b2      	b.n	800eada <_strtod_l+0xb12>
 800eb74:	2300      	movs	r3, #0
 800eb76:	930a      	str	r3, [sp, #40]	; 0x28
 800eb78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eb7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb7c:	6013      	str	r3, [r2, #0]
 800eb7e:	f7ff ba6b 	b.w	800e058 <_strtod_l+0x90>
 800eb82:	2a65      	cmp	r2, #101	; 0x65
 800eb84:	f43f ab5f 	beq.w	800e246 <_strtod_l+0x27e>
 800eb88:	2a45      	cmp	r2, #69	; 0x45
 800eb8a:	f43f ab5c 	beq.w	800e246 <_strtod_l+0x27e>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	f7ff bb94 	b.w	800e2bc <_strtod_l+0x2f4>
 800eb94:	f3af 8000 	nop.w
 800eb98:	94a03595 	.word	0x94a03595
 800eb9c:	3fdfffff 	.word	0x3fdfffff
 800eba0:	35afe535 	.word	0x35afe535
 800eba4:	3fe00000 	.word	0x3fe00000
 800eba8:	ffc00000 	.word	0xffc00000
 800ebac:	41dfffff 	.word	0x41dfffff
 800ebb0:	94a03595 	.word	0x94a03595
 800ebb4:	3fcfffff 	.word	0x3fcfffff
 800ebb8:	3ff00000 	.word	0x3ff00000
 800ebbc:	7ff00000 	.word	0x7ff00000
 800ebc0:	7fe00000 	.word	0x7fe00000
 800ebc4:	7c9fffff 	.word	0x7c9fffff
 800ebc8:	3fe00000 	.word	0x3fe00000
 800ebcc:	bff00000 	.word	0xbff00000
 800ebd0:	7fefffff 	.word	0x7fefffff

0800ebd4 <_strtod_r>:
 800ebd4:	4b01      	ldr	r3, [pc, #4]	; (800ebdc <_strtod_r+0x8>)
 800ebd6:	f7ff b9f7 	b.w	800dfc8 <_strtod_l>
 800ebda:	bf00      	nop
 800ebdc:	20000178 	.word	0x20000178

0800ebe0 <_strtol_l.constprop.0>:
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe6:	d001      	beq.n	800ebec <_strtol_l.constprop.0+0xc>
 800ebe8:	2b24      	cmp	r3, #36	; 0x24
 800ebea:	d906      	bls.n	800ebfa <_strtol_l.constprop.0+0x1a>
 800ebec:	f7fe fd0c 	bl	800d608 <__errno>
 800ebf0:	2316      	movs	r3, #22
 800ebf2:	6003      	str	r3, [r0, #0]
 800ebf4:	2000      	movs	r0, #0
 800ebf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebfa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ece0 <_strtol_l.constprop.0+0x100>
 800ebfe:	460d      	mov	r5, r1
 800ec00:	462e      	mov	r6, r5
 800ec02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec06:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ec0a:	f017 0708 	ands.w	r7, r7, #8
 800ec0e:	d1f7      	bne.n	800ec00 <_strtol_l.constprop.0+0x20>
 800ec10:	2c2d      	cmp	r4, #45	; 0x2d
 800ec12:	d132      	bne.n	800ec7a <_strtol_l.constprop.0+0x9a>
 800ec14:	782c      	ldrb	r4, [r5, #0]
 800ec16:	2701      	movs	r7, #1
 800ec18:	1cb5      	adds	r5, r6, #2
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d05b      	beq.n	800ecd6 <_strtol_l.constprop.0+0xf6>
 800ec1e:	2b10      	cmp	r3, #16
 800ec20:	d109      	bne.n	800ec36 <_strtol_l.constprop.0+0x56>
 800ec22:	2c30      	cmp	r4, #48	; 0x30
 800ec24:	d107      	bne.n	800ec36 <_strtol_l.constprop.0+0x56>
 800ec26:	782c      	ldrb	r4, [r5, #0]
 800ec28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ec2c:	2c58      	cmp	r4, #88	; 0x58
 800ec2e:	d14d      	bne.n	800eccc <_strtol_l.constprop.0+0xec>
 800ec30:	786c      	ldrb	r4, [r5, #1]
 800ec32:	2310      	movs	r3, #16
 800ec34:	3502      	adds	r5, #2
 800ec36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ec3a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec3e:	f04f 0c00 	mov.w	ip, #0
 800ec42:	fbb8 f9f3 	udiv	r9, r8, r3
 800ec46:	4666      	mov	r6, ip
 800ec48:	fb03 8a19 	mls	sl, r3, r9, r8
 800ec4c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ec50:	f1be 0f09 	cmp.w	lr, #9
 800ec54:	d816      	bhi.n	800ec84 <_strtol_l.constprop.0+0xa4>
 800ec56:	4674      	mov	r4, lr
 800ec58:	42a3      	cmp	r3, r4
 800ec5a:	dd24      	ble.n	800eca6 <_strtol_l.constprop.0+0xc6>
 800ec5c:	f1bc 0f00 	cmp.w	ip, #0
 800ec60:	db1e      	blt.n	800eca0 <_strtol_l.constprop.0+0xc0>
 800ec62:	45b1      	cmp	r9, r6
 800ec64:	d31c      	bcc.n	800eca0 <_strtol_l.constprop.0+0xc0>
 800ec66:	d101      	bne.n	800ec6c <_strtol_l.constprop.0+0x8c>
 800ec68:	45a2      	cmp	sl, r4
 800ec6a:	db19      	blt.n	800eca0 <_strtol_l.constprop.0+0xc0>
 800ec6c:	fb06 4603 	mla	r6, r6, r3, r4
 800ec70:	f04f 0c01 	mov.w	ip, #1
 800ec74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec78:	e7e8      	b.n	800ec4c <_strtol_l.constprop.0+0x6c>
 800ec7a:	2c2b      	cmp	r4, #43	; 0x2b
 800ec7c:	bf04      	itt	eq
 800ec7e:	782c      	ldrbeq	r4, [r5, #0]
 800ec80:	1cb5      	addeq	r5, r6, #2
 800ec82:	e7ca      	b.n	800ec1a <_strtol_l.constprop.0+0x3a>
 800ec84:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ec88:	f1be 0f19 	cmp.w	lr, #25
 800ec8c:	d801      	bhi.n	800ec92 <_strtol_l.constprop.0+0xb2>
 800ec8e:	3c37      	subs	r4, #55	; 0x37
 800ec90:	e7e2      	b.n	800ec58 <_strtol_l.constprop.0+0x78>
 800ec92:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ec96:	f1be 0f19 	cmp.w	lr, #25
 800ec9a:	d804      	bhi.n	800eca6 <_strtol_l.constprop.0+0xc6>
 800ec9c:	3c57      	subs	r4, #87	; 0x57
 800ec9e:	e7db      	b.n	800ec58 <_strtol_l.constprop.0+0x78>
 800eca0:	f04f 3cff 	mov.w	ip, #4294967295
 800eca4:	e7e6      	b.n	800ec74 <_strtol_l.constprop.0+0x94>
 800eca6:	f1bc 0f00 	cmp.w	ip, #0
 800ecaa:	da05      	bge.n	800ecb8 <_strtol_l.constprop.0+0xd8>
 800ecac:	2322      	movs	r3, #34	; 0x22
 800ecae:	6003      	str	r3, [r0, #0]
 800ecb0:	4646      	mov	r6, r8
 800ecb2:	b942      	cbnz	r2, 800ecc6 <_strtol_l.constprop.0+0xe6>
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	e79e      	b.n	800ebf6 <_strtol_l.constprop.0+0x16>
 800ecb8:	b107      	cbz	r7, 800ecbc <_strtol_l.constprop.0+0xdc>
 800ecba:	4276      	negs	r6, r6
 800ecbc:	2a00      	cmp	r2, #0
 800ecbe:	d0f9      	beq.n	800ecb4 <_strtol_l.constprop.0+0xd4>
 800ecc0:	f1bc 0f00 	cmp.w	ip, #0
 800ecc4:	d000      	beq.n	800ecc8 <_strtol_l.constprop.0+0xe8>
 800ecc6:	1e69      	subs	r1, r5, #1
 800ecc8:	6011      	str	r1, [r2, #0]
 800ecca:	e7f3      	b.n	800ecb4 <_strtol_l.constprop.0+0xd4>
 800eccc:	2430      	movs	r4, #48	; 0x30
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d1b1      	bne.n	800ec36 <_strtol_l.constprop.0+0x56>
 800ecd2:	2308      	movs	r3, #8
 800ecd4:	e7af      	b.n	800ec36 <_strtol_l.constprop.0+0x56>
 800ecd6:	2c30      	cmp	r4, #48	; 0x30
 800ecd8:	d0a5      	beq.n	800ec26 <_strtol_l.constprop.0+0x46>
 800ecda:	230a      	movs	r3, #10
 800ecdc:	e7ab      	b.n	800ec36 <_strtol_l.constprop.0+0x56>
 800ecde:	bf00      	nop
 800ece0:	080110e9 	.word	0x080110e9

0800ece4 <_strtol_r>:
 800ece4:	f7ff bf7c 	b.w	800ebe0 <_strtol_l.constprop.0>

0800ece8 <_write_r>:
 800ece8:	b538      	push	{r3, r4, r5, lr}
 800ecea:	4d07      	ldr	r5, [pc, #28]	; (800ed08 <_write_r+0x20>)
 800ecec:	4604      	mov	r4, r0
 800ecee:	4608      	mov	r0, r1
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	602a      	str	r2, [r5, #0]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	f7f2 ff4b 	bl	8001b92 <_write>
 800ecfc:	1c43      	adds	r3, r0, #1
 800ecfe:	d102      	bne.n	800ed06 <_write_r+0x1e>
 800ed00:	682b      	ldr	r3, [r5, #0]
 800ed02:	b103      	cbz	r3, 800ed06 <_write_r+0x1e>
 800ed04:	6023      	str	r3, [r4, #0]
 800ed06:	bd38      	pop	{r3, r4, r5, pc}
 800ed08:	20008134 	.word	0x20008134

0800ed0c <_close_r>:
 800ed0c:	b538      	push	{r3, r4, r5, lr}
 800ed0e:	4d06      	ldr	r5, [pc, #24]	; (800ed28 <_close_r+0x1c>)
 800ed10:	2300      	movs	r3, #0
 800ed12:	4604      	mov	r4, r0
 800ed14:	4608      	mov	r0, r1
 800ed16:	602b      	str	r3, [r5, #0]
 800ed18:	f7f2 ff57 	bl	8001bca <_close>
 800ed1c:	1c43      	adds	r3, r0, #1
 800ed1e:	d102      	bne.n	800ed26 <_close_r+0x1a>
 800ed20:	682b      	ldr	r3, [r5, #0]
 800ed22:	b103      	cbz	r3, 800ed26 <_close_r+0x1a>
 800ed24:	6023      	str	r3, [r4, #0]
 800ed26:	bd38      	pop	{r3, r4, r5, pc}
 800ed28:	20008134 	.word	0x20008134

0800ed2c <__sflush_r>:
 800ed2c:	898a      	ldrh	r2, [r1, #12]
 800ed2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed32:	4605      	mov	r5, r0
 800ed34:	0710      	lsls	r0, r2, #28
 800ed36:	460c      	mov	r4, r1
 800ed38:	d458      	bmi.n	800edec <__sflush_r+0xc0>
 800ed3a:	684b      	ldr	r3, [r1, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	dc05      	bgt.n	800ed4c <__sflush_r+0x20>
 800ed40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	dc02      	bgt.n	800ed4c <__sflush_r+0x20>
 800ed46:	2000      	movs	r0, #0
 800ed48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed4e:	2e00      	cmp	r6, #0
 800ed50:	d0f9      	beq.n	800ed46 <__sflush_r+0x1a>
 800ed52:	2300      	movs	r3, #0
 800ed54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed58:	682f      	ldr	r7, [r5, #0]
 800ed5a:	602b      	str	r3, [r5, #0]
 800ed5c:	d032      	beq.n	800edc4 <__sflush_r+0x98>
 800ed5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed60:	89a3      	ldrh	r3, [r4, #12]
 800ed62:	075a      	lsls	r2, r3, #29
 800ed64:	d505      	bpl.n	800ed72 <__sflush_r+0x46>
 800ed66:	6863      	ldr	r3, [r4, #4]
 800ed68:	1ac0      	subs	r0, r0, r3
 800ed6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed6c:	b10b      	cbz	r3, 800ed72 <__sflush_r+0x46>
 800ed6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed70:	1ac0      	subs	r0, r0, r3
 800ed72:	2300      	movs	r3, #0
 800ed74:	4602      	mov	r2, r0
 800ed76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed78:	6a21      	ldr	r1, [r4, #32]
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	47b0      	blx	r6
 800ed7e:	1c43      	adds	r3, r0, #1
 800ed80:	89a3      	ldrh	r3, [r4, #12]
 800ed82:	d106      	bne.n	800ed92 <__sflush_r+0x66>
 800ed84:	6829      	ldr	r1, [r5, #0]
 800ed86:	291d      	cmp	r1, #29
 800ed88:	d82c      	bhi.n	800ede4 <__sflush_r+0xb8>
 800ed8a:	4a2a      	ldr	r2, [pc, #168]	; (800ee34 <__sflush_r+0x108>)
 800ed8c:	40ca      	lsrs	r2, r1
 800ed8e:	07d6      	lsls	r6, r2, #31
 800ed90:	d528      	bpl.n	800ede4 <__sflush_r+0xb8>
 800ed92:	2200      	movs	r2, #0
 800ed94:	6062      	str	r2, [r4, #4]
 800ed96:	04d9      	lsls	r1, r3, #19
 800ed98:	6922      	ldr	r2, [r4, #16]
 800ed9a:	6022      	str	r2, [r4, #0]
 800ed9c:	d504      	bpl.n	800eda8 <__sflush_r+0x7c>
 800ed9e:	1c42      	adds	r2, r0, #1
 800eda0:	d101      	bne.n	800eda6 <__sflush_r+0x7a>
 800eda2:	682b      	ldr	r3, [r5, #0]
 800eda4:	b903      	cbnz	r3, 800eda8 <__sflush_r+0x7c>
 800eda6:	6560      	str	r0, [r4, #84]	; 0x54
 800eda8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edaa:	602f      	str	r7, [r5, #0]
 800edac:	2900      	cmp	r1, #0
 800edae:	d0ca      	beq.n	800ed46 <__sflush_r+0x1a>
 800edb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edb4:	4299      	cmp	r1, r3
 800edb6:	d002      	beq.n	800edbe <__sflush_r+0x92>
 800edb8:	4628      	mov	r0, r5
 800edba:	f001 f8f1 	bl	800ffa0 <_free_r>
 800edbe:	2000      	movs	r0, #0
 800edc0:	6360      	str	r0, [r4, #52]	; 0x34
 800edc2:	e7c1      	b.n	800ed48 <__sflush_r+0x1c>
 800edc4:	6a21      	ldr	r1, [r4, #32]
 800edc6:	2301      	movs	r3, #1
 800edc8:	4628      	mov	r0, r5
 800edca:	47b0      	blx	r6
 800edcc:	1c41      	adds	r1, r0, #1
 800edce:	d1c7      	bne.n	800ed60 <__sflush_r+0x34>
 800edd0:	682b      	ldr	r3, [r5, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d0c4      	beq.n	800ed60 <__sflush_r+0x34>
 800edd6:	2b1d      	cmp	r3, #29
 800edd8:	d001      	beq.n	800edde <__sflush_r+0xb2>
 800edda:	2b16      	cmp	r3, #22
 800eddc:	d101      	bne.n	800ede2 <__sflush_r+0xb6>
 800edde:	602f      	str	r7, [r5, #0]
 800ede0:	e7b1      	b.n	800ed46 <__sflush_r+0x1a>
 800ede2:	89a3      	ldrh	r3, [r4, #12]
 800ede4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ede8:	81a3      	strh	r3, [r4, #12]
 800edea:	e7ad      	b.n	800ed48 <__sflush_r+0x1c>
 800edec:	690f      	ldr	r7, [r1, #16]
 800edee:	2f00      	cmp	r7, #0
 800edf0:	d0a9      	beq.n	800ed46 <__sflush_r+0x1a>
 800edf2:	0793      	lsls	r3, r2, #30
 800edf4:	680e      	ldr	r6, [r1, #0]
 800edf6:	bf08      	it	eq
 800edf8:	694b      	ldreq	r3, [r1, #20]
 800edfa:	600f      	str	r7, [r1, #0]
 800edfc:	bf18      	it	ne
 800edfe:	2300      	movne	r3, #0
 800ee00:	eba6 0807 	sub.w	r8, r6, r7
 800ee04:	608b      	str	r3, [r1, #8]
 800ee06:	f1b8 0f00 	cmp.w	r8, #0
 800ee0a:	dd9c      	ble.n	800ed46 <__sflush_r+0x1a>
 800ee0c:	6a21      	ldr	r1, [r4, #32]
 800ee0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee10:	4643      	mov	r3, r8
 800ee12:	463a      	mov	r2, r7
 800ee14:	4628      	mov	r0, r5
 800ee16:	47b0      	blx	r6
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	dc06      	bgt.n	800ee2a <__sflush_r+0xfe>
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee22:	81a3      	strh	r3, [r4, #12]
 800ee24:	f04f 30ff 	mov.w	r0, #4294967295
 800ee28:	e78e      	b.n	800ed48 <__sflush_r+0x1c>
 800ee2a:	4407      	add	r7, r0
 800ee2c:	eba8 0800 	sub.w	r8, r8, r0
 800ee30:	e7e9      	b.n	800ee06 <__sflush_r+0xda>
 800ee32:	bf00      	nop
 800ee34:	20400001 	.word	0x20400001

0800ee38 <_fflush_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	690b      	ldr	r3, [r1, #16]
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	460c      	mov	r4, r1
 800ee40:	b913      	cbnz	r3, 800ee48 <_fflush_r+0x10>
 800ee42:	2500      	movs	r5, #0
 800ee44:	4628      	mov	r0, r5
 800ee46:	bd38      	pop	{r3, r4, r5, pc}
 800ee48:	b118      	cbz	r0, 800ee52 <_fflush_r+0x1a>
 800ee4a:	6983      	ldr	r3, [r0, #24]
 800ee4c:	b90b      	cbnz	r3, 800ee52 <_fflush_r+0x1a>
 800ee4e:	f7fe fc39 	bl	800d6c4 <__sinit>
 800ee52:	4b14      	ldr	r3, [pc, #80]	; (800eea4 <_fflush_r+0x6c>)
 800ee54:	429c      	cmp	r4, r3
 800ee56:	d11b      	bne.n	800ee90 <_fflush_r+0x58>
 800ee58:	686c      	ldr	r4, [r5, #4]
 800ee5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d0ef      	beq.n	800ee42 <_fflush_r+0xa>
 800ee62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee64:	07d0      	lsls	r0, r2, #31
 800ee66:	d404      	bmi.n	800ee72 <_fflush_r+0x3a>
 800ee68:	0599      	lsls	r1, r3, #22
 800ee6a:	d402      	bmi.n	800ee72 <_fflush_r+0x3a>
 800ee6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee6e:	f7fe fcec 	bl	800d84a <__retarget_lock_acquire_recursive>
 800ee72:	4628      	mov	r0, r5
 800ee74:	4621      	mov	r1, r4
 800ee76:	f7ff ff59 	bl	800ed2c <__sflush_r>
 800ee7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee7c:	07da      	lsls	r2, r3, #31
 800ee7e:	4605      	mov	r5, r0
 800ee80:	d4e0      	bmi.n	800ee44 <_fflush_r+0xc>
 800ee82:	89a3      	ldrh	r3, [r4, #12]
 800ee84:	059b      	lsls	r3, r3, #22
 800ee86:	d4dd      	bmi.n	800ee44 <_fflush_r+0xc>
 800ee88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee8a:	f7fe fcdf 	bl	800d84c <__retarget_lock_release_recursive>
 800ee8e:	e7d9      	b.n	800ee44 <_fflush_r+0xc>
 800ee90:	4b05      	ldr	r3, [pc, #20]	; (800eea8 <_fflush_r+0x70>)
 800ee92:	429c      	cmp	r4, r3
 800ee94:	d101      	bne.n	800ee9a <_fflush_r+0x62>
 800ee96:	68ac      	ldr	r4, [r5, #8]
 800ee98:	e7df      	b.n	800ee5a <_fflush_r+0x22>
 800ee9a:	4b04      	ldr	r3, [pc, #16]	; (800eeac <_fflush_r+0x74>)
 800ee9c:	429c      	cmp	r4, r3
 800ee9e:	bf08      	it	eq
 800eea0:	68ec      	ldreq	r4, [r5, #12]
 800eea2:	e7da      	b.n	800ee5a <_fflush_r+0x22>
 800eea4:	0801103c 	.word	0x0801103c
 800eea8:	0801105c 	.word	0x0801105c
 800eeac:	0801101c 	.word	0x0801101c

0800eeb0 <rshift>:
 800eeb0:	6903      	ldr	r3, [r0, #16]
 800eeb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eeb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eebe:	f100 0414 	add.w	r4, r0, #20
 800eec2:	dd45      	ble.n	800ef50 <rshift+0xa0>
 800eec4:	f011 011f 	ands.w	r1, r1, #31
 800eec8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eecc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eed0:	d10c      	bne.n	800eeec <rshift+0x3c>
 800eed2:	f100 0710 	add.w	r7, r0, #16
 800eed6:	4629      	mov	r1, r5
 800eed8:	42b1      	cmp	r1, r6
 800eeda:	d334      	bcc.n	800ef46 <rshift+0x96>
 800eedc:	1a9b      	subs	r3, r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	1eea      	subs	r2, r5, #3
 800eee2:	4296      	cmp	r6, r2
 800eee4:	bf38      	it	cc
 800eee6:	2300      	movcc	r3, #0
 800eee8:	4423      	add	r3, r4
 800eeea:	e015      	b.n	800ef18 <rshift+0x68>
 800eeec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eef0:	f1c1 0820 	rsb	r8, r1, #32
 800eef4:	40cf      	lsrs	r7, r1
 800eef6:	f105 0e04 	add.w	lr, r5, #4
 800eefa:	46a1      	mov	r9, r4
 800eefc:	4576      	cmp	r6, lr
 800eefe:	46f4      	mov	ip, lr
 800ef00:	d815      	bhi.n	800ef2e <rshift+0x7e>
 800ef02:	1a9a      	subs	r2, r3, r2
 800ef04:	0092      	lsls	r2, r2, #2
 800ef06:	3a04      	subs	r2, #4
 800ef08:	3501      	adds	r5, #1
 800ef0a:	42ae      	cmp	r6, r5
 800ef0c:	bf38      	it	cc
 800ef0e:	2200      	movcc	r2, #0
 800ef10:	18a3      	adds	r3, r4, r2
 800ef12:	50a7      	str	r7, [r4, r2]
 800ef14:	b107      	cbz	r7, 800ef18 <rshift+0x68>
 800ef16:	3304      	adds	r3, #4
 800ef18:	1b1a      	subs	r2, r3, r4
 800ef1a:	42a3      	cmp	r3, r4
 800ef1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef20:	bf08      	it	eq
 800ef22:	2300      	moveq	r3, #0
 800ef24:	6102      	str	r2, [r0, #16]
 800ef26:	bf08      	it	eq
 800ef28:	6143      	streq	r3, [r0, #20]
 800ef2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef2e:	f8dc c000 	ldr.w	ip, [ip]
 800ef32:	fa0c fc08 	lsl.w	ip, ip, r8
 800ef36:	ea4c 0707 	orr.w	r7, ip, r7
 800ef3a:	f849 7b04 	str.w	r7, [r9], #4
 800ef3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef42:	40cf      	lsrs	r7, r1
 800ef44:	e7da      	b.n	800eefc <rshift+0x4c>
 800ef46:	f851 cb04 	ldr.w	ip, [r1], #4
 800ef4a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ef4e:	e7c3      	b.n	800eed8 <rshift+0x28>
 800ef50:	4623      	mov	r3, r4
 800ef52:	e7e1      	b.n	800ef18 <rshift+0x68>

0800ef54 <__hexdig_fun>:
 800ef54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ef58:	2b09      	cmp	r3, #9
 800ef5a:	d802      	bhi.n	800ef62 <__hexdig_fun+0xe>
 800ef5c:	3820      	subs	r0, #32
 800ef5e:	b2c0      	uxtb	r0, r0
 800ef60:	4770      	bx	lr
 800ef62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ef66:	2b05      	cmp	r3, #5
 800ef68:	d801      	bhi.n	800ef6e <__hexdig_fun+0x1a>
 800ef6a:	3847      	subs	r0, #71	; 0x47
 800ef6c:	e7f7      	b.n	800ef5e <__hexdig_fun+0xa>
 800ef6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ef72:	2b05      	cmp	r3, #5
 800ef74:	d801      	bhi.n	800ef7a <__hexdig_fun+0x26>
 800ef76:	3827      	subs	r0, #39	; 0x27
 800ef78:	e7f1      	b.n	800ef5e <__hexdig_fun+0xa>
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	4770      	bx	lr
	...

0800ef80 <__gethex>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	ed2d 8b02 	vpush	{d8}
 800ef88:	b089      	sub	sp, #36	; 0x24
 800ef8a:	ee08 0a10 	vmov	s16, r0
 800ef8e:	9304      	str	r3, [sp, #16]
 800ef90:	4bb4      	ldr	r3, [pc, #720]	; (800f264 <__gethex+0x2e4>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	9301      	str	r3, [sp, #4]
 800ef96:	4618      	mov	r0, r3
 800ef98:	468b      	mov	fp, r1
 800ef9a:	4690      	mov	r8, r2
 800ef9c:	f7f1 f938 	bl	8000210 <strlen>
 800efa0:	9b01      	ldr	r3, [sp, #4]
 800efa2:	f8db 2000 	ldr.w	r2, [fp]
 800efa6:	4403      	add	r3, r0
 800efa8:	4682      	mov	sl, r0
 800efaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800efae:	9305      	str	r3, [sp, #20]
 800efb0:	1c93      	adds	r3, r2, #2
 800efb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800efb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800efba:	32fe      	adds	r2, #254	; 0xfe
 800efbc:	18d1      	adds	r1, r2, r3
 800efbe:	461f      	mov	r7, r3
 800efc0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800efc4:	9100      	str	r1, [sp, #0]
 800efc6:	2830      	cmp	r0, #48	; 0x30
 800efc8:	d0f8      	beq.n	800efbc <__gethex+0x3c>
 800efca:	f7ff ffc3 	bl	800ef54 <__hexdig_fun>
 800efce:	4604      	mov	r4, r0
 800efd0:	2800      	cmp	r0, #0
 800efd2:	d13a      	bne.n	800f04a <__gethex+0xca>
 800efd4:	9901      	ldr	r1, [sp, #4]
 800efd6:	4652      	mov	r2, sl
 800efd8:	4638      	mov	r0, r7
 800efda:	f001 fb39 	bl	8010650 <strncmp>
 800efde:	4605      	mov	r5, r0
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d168      	bne.n	800f0b6 <__gethex+0x136>
 800efe4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800efe8:	eb07 060a 	add.w	r6, r7, sl
 800efec:	f7ff ffb2 	bl	800ef54 <__hexdig_fun>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d062      	beq.n	800f0ba <__gethex+0x13a>
 800eff4:	4633      	mov	r3, r6
 800eff6:	7818      	ldrb	r0, [r3, #0]
 800eff8:	2830      	cmp	r0, #48	; 0x30
 800effa:	461f      	mov	r7, r3
 800effc:	f103 0301 	add.w	r3, r3, #1
 800f000:	d0f9      	beq.n	800eff6 <__gethex+0x76>
 800f002:	f7ff ffa7 	bl	800ef54 <__hexdig_fun>
 800f006:	2301      	movs	r3, #1
 800f008:	fab0 f480 	clz	r4, r0
 800f00c:	0964      	lsrs	r4, r4, #5
 800f00e:	4635      	mov	r5, r6
 800f010:	9300      	str	r3, [sp, #0]
 800f012:	463a      	mov	r2, r7
 800f014:	4616      	mov	r6, r2
 800f016:	3201      	adds	r2, #1
 800f018:	7830      	ldrb	r0, [r6, #0]
 800f01a:	f7ff ff9b 	bl	800ef54 <__hexdig_fun>
 800f01e:	2800      	cmp	r0, #0
 800f020:	d1f8      	bne.n	800f014 <__gethex+0x94>
 800f022:	9901      	ldr	r1, [sp, #4]
 800f024:	4652      	mov	r2, sl
 800f026:	4630      	mov	r0, r6
 800f028:	f001 fb12 	bl	8010650 <strncmp>
 800f02c:	b980      	cbnz	r0, 800f050 <__gethex+0xd0>
 800f02e:	b94d      	cbnz	r5, 800f044 <__gethex+0xc4>
 800f030:	eb06 050a 	add.w	r5, r6, sl
 800f034:	462a      	mov	r2, r5
 800f036:	4616      	mov	r6, r2
 800f038:	3201      	adds	r2, #1
 800f03a:	7830      	ldrb	r0, [r6, #0]
 800f03c:	f7ff ff8a 	bl	800ef54 <__hexdig_fun>
 800f040:	2800      	cmp	r0, #0
 800f042:	d1f8      	bne.n	800f036 <__gethex+0xb6>
 800f044:	1bad      	subs	r5, r5, r6
 800f046:	00ad      	lsls	r5, r5, #2
 800f048:	e004      	b.n	800f054 <__gethex+0xd4>
 800f04a:	2400      	movs	r4, #0
 800f04c:	4625      	mov	r5, r4
 800f04e:	e7e0      	b.n	800f012 <__gethex+0x92>
 800f050:	2d00      	cmp	r5, #0
 800f052:	d1f7      	bne.n	800f044 <__gethex+0xc4>
 800f054:	7833      	ldrb	r3, [r6, #0]
 800f056:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f05a:	2b50      	cmp	r3, #80	; 0x50
 800f05c:	d13b      	bne.n	800f0d6 <__gethex+0x156>
 800f05e:	7873      	ldrb	r3, [r6, #1]
 800f060:	2b2b      	cmp	r3, #43	; 0x2b
 800f062:	d02c      	beq.n	800f0be <__gethex+0x13e>
 800f064:	2b2d      	cmp	r3, #45	; 0x2d
 800f066:	d02e      	beq.n	800f0c6 <__gethex+0x146>
 800f068:	1c71      	adds	r1, r6, #1
 800f06a:	f04f 0900 	mov.w	r9, #0
 800f06e:	7808      	ldrb	r0, [r1, #0]
 800f070:	f7ff ff70 	bl	800ef54 <__hexdig_fun>
 800f074:	1e43      	subs	r3, r0, #1
 800f076:	b2db      	uxtb	r3, r3
 800f078:	2b18      	cmp	r3, #24
 800f07a:	d82c      	bhi.n	800f0d6 <__gethex+0x156>
 800f07c:	f1a0 0210 	sub.w	r2, r0, #16
 800f080:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f084:	f7ff ff66 	bl	800ef54 <__hexdig_fun>
 800f088:	1e43      	subs	r3, r0, #1
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	2b18      	cmp	r3, #24
 800f08e:	d91d      	bls.n	800f0cc <__gethex+0x14c>
 800f090:	f1b9 0f00 	cmp.w	r9, #0
 800f094:	d000      	beq.n	800f098 <__gethex+0x118>
 800f096:	4252      	negs	r2, r2
 800f098:	4415      	add	r5, r2
 800f09a:	f8cb 1000 	str.w	r1, [fp]
 800f09e:	b1e4      	cbz	r4, 800f0da <__gethex+0x15a>
 800f0a0:	9b00      	ldr	r3, [sp, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	bf14      	ite	ne
 800f0a6:	2700      	movne	r7, #0
 800f0a8:	2706      	moveq	r7, #6
 800f0aa:	4638      	mov	r0, r7
 800f0ac:	b009      	add	sp, #36	; 0x24
 800f0ae:	ecbd 8b02 	vpop	{d8}
 800f0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b6:	463e      	mov	r6, r7
 800f0b8:	4625      	mov	r5, r4
 800f0ba:	2401      	movs	r4, #1
 800f0bc:	e7ca      	b.n	800f054 <__gethex+0xd4>
 800f0be:	f04f 0900 	mov.w	r9, #0
 800f0c2:	1cb1      	adds	r1, r6, #2
 800f0c4:	e7d3      	b.n	800f06e <__gethex+0xee>
 800f0c6:	f04f 0901 	mov.w	r9, #1
 800f0ca:	e7fa      	b.n	800f0c2 <__gethex+0x142>
 800f0cc:	230a      	movs	r3, #10
 800f0ce:	fb03 0202 	mla	r2, r3, r2, r0
 800f0d2:	3a10      	subs	r2, #16
 800f0d4:	e7d4      	b.n	800f080 <__gethex+0x100>
 800f0d6:	4631      	mov	r1, r6
 800f0d8:	e7df      	b.n	800f09a <__gethex+0x11a>
 800f0da:	1bf3      	subs	r3, r6, r7
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	4621      	mov	r1, r4
 800f0e0:	2b07      	cmp	r3, #7
 800f0e2:	dc0b      	bgt.n	800f0fc <__gethex+0x17c>
 800f0e4:	ee18 0a10 	vmov	r0, s16
 800f0e8:	f000 fa82 	bl	800f5f0 <_Balloc>
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	b940      	cbnz	r0, 800f102 <__gethex+0x182>
 800f0f0:	4b5d      	ldr	r3, [pc, #372]	; (800f268 <__gethex+0x2e8>)
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	21de      	movs	r1, #222	; 0xde
 800f0f6:	485d      	ldr	r0, [pc, #372]	; (800f26c <__gethex+0x2ec>)
 800f0f8:	f001 facc 	bl	8010694 <__assert_func>
 800f0fc:	3101      	adds	r1, #1
 800f0fe:	105b      	asrs	r3, r3, #1
 800f100:	e7ee      	b.n	800f0e0 <__gethex+0x160>
 800f102:	f100 0914 	add.w	r9, r0, #20
 800f106:	f04f 0b00 	mov.w	fp, #0
 800f10a:	f1ca 0301 	rsb	r3, sl, #1
 800f10e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f112:	f8cd b000 	str.w	fp, [sp]
 800f116:	9306      	str	r3, [sp, #24]
 800f118:	42b7      	cmp	r7, r6
 800f11a:	d340      	bcc.n	800f19e <__gethex+0x21e>
 800f11c:	9802      	ldr	r0, [sp, #8]
 800f11e:	9b00      	ldr	r3, [sp, #0]
 800f120:	f840 3b04 	str.w	r3, [r0], #4
 800f124:	eba0 0009 	sub.w	r0, r0, r9
 800f128:	1080      	asrs	r0, r0, #2
 800f12a:	0146      	lsls	r6, r0, #5
 800f12c:	6120      	str	r0, [r4, #16]
 800f12e:	4618      	mov	r0, r3
 800f130:	f000 fb50 	bl	800f7d4 <__hi0bits>
 800f134:	1a30      	subs	r0, r6, r0
 800f136:	f8d8 6000 	ldr.w	r6, [r8]
 800f13a:	42b0      	cmp	r0, r6
 800f13c:	dd63      	ble.n	800f206 <__gethex+0x286>
 800f13e:	1b87      	subs	r7, r0, r6
 800f140:	4639      	mov	r1, r7
 800f142:	4620      	mov	r0, r4
 800f144:	f000 fef4 	bl	800ff30 <__any_on>
 800f148:	4682      	mov	sl, r0
 800f14a:	b1a8      	cbz	r0, 800f178 <__gethex+0x1f8>
 800f14c:	1e7b      	subs	r3, r7, #1
 800f14e:	1159      	asrs	r1, r3, #5
 800f150:	f003 021f 	and.w	r2, r3, #31
 800f154:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f158:	f04f 0a01 	mov.w	sl, #1
 800f15c:	fa0a f202 	lsl.w	r2, sl, r2
 800f160:	420a      	tst	r2, r1
 800f162:	d009      	beq.n	800f178 <__gethex+0x1f8>
 800f164:	4553      	cmp	r3, sl
 800f166:	dd05      	ble.n	800f174 <__gethex+0x1f4>
 800f168:	1eb9      	subs	r1, r7, #2
 800f16a:	4620      	mov	r0, r4
 800f16c:	f000 fee0 	bl	800ff30 <__any_on>
 800f170:	2800      	cmp	r0, #0
 800f172:	d145      	bne.n	800f200 <__gethex+0x280>
 800f174:	f04f 0a02 	mov.w	sl, #2
 800f178:	4639      	mov	r1, r7
 800f17a:	4620      	mov	r0, r4
 800f17c:	f7ff fe98 	bl	800eeb0 <rshift>
 800f180:	443d      	add	r5, r7
 800f182:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f186:	42ab      	cmp	r3, r5
 800f188:	da4c      	bge.n	800f224 <__gethex+0x2a4>
 800f18a:	ee18 0a10 	vmov	r0, s16
 800f18e:	4621      	mov	r1, r4
 800f190:	f000 fa6e 	bl	800f670 <_Bfree>
 800f194:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f196:	2300      	movs	r3, #0
 800f198:	6013      	str	r3, [r2, #0]
 800f19a:	27a3      	movs	r7, #163	; 0xa3
 800f19c:	e785      	b.n	800f0aa <__gethex+0x12a>
 800f19e:	1e73      	subs	r3, r6, #1
 800f1a0:	9a05      	ldr	r2, [sp, #20]
 800f1a2:	9303      	str	r3, [sp, #12]
 800f1a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d019      	beq.n	800f1e0 <__gethex+0x260>
 800f1ac:	f1bb 0f20 	cmp.w	fp, #32
 800f1b0:	d107      	bne.n	800f1c2 <__gethex+0x242>
 800f1b2:	9b02      	ldr	r3, [sp, #8]
 800f1b4:	9a00      	ldr	r2, [sp, #0]
 800f1b6:	f843 2b04 	str.w	r2, [r3], #4
 800f1ba:	9302      	str	r3, [sp, #8]
 800f1bc:	2300      	movs	r3, #0
 800f1be:	9300      	str	r3, [sp, #0]
 800f1c0:	469b      	mov	fp, r3
 800f1c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f1c6:	f7ff fec5 	bl	800ef54 <__hexdig_fun>
 800f1ca:	9b00      	ldr	r3, [sp, #0]
 800f1cc:	f000 000f 	and.w	r0, r0, #15
 800f1d0:	fa00 f00b 	lsl.w	r0, r0, fp
 800f1d4:	4303      	orrs	r3, r0
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	f10b 0b04 	add.w	fp, fp, #4
 800f1dc:	9b03      	ldr	r3, [sp, #12]
 800f1de:	e00d      	b.n	800f1fc <__gethex+0x27c>
 800f1e0:	9b03      	ldr	r3, [sp, #12]
 800f1e2:	9a06      	ldr	r2, [sp, #24]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	42bb      	cmp	r3, r7
 800f1e8:	d3e0      	bcc.n	800f1ac <__gethex+0x22c>
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	9901      	ldr	r1, [sp, #4]
 800f1ee:	9307      	str	r3, [sp, #28]
 800f1f0:	4652      	mov	r2, sl
 800f1f2:	f001 fa2d 	bl	8010650 <strncmp>
 800f1f6:	9b07      	ldr	r3, [sp, #28]
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d1d7      	bne.n	800f1ac <__gethex+0x22c>
 800f1fc:	461e      	mov	r6, r3
 800f1fe:	e78b      	b.n	800f118 <__gethex+0x198>
 800f200:	f04f 0a03 	mov.w	sl, #3
 800f204:	e7b8      	b.n	800f178 <__gethex+0x1f8>
 800f206:	da0a      	bge.n	800f21e <__gethex+0x29e>
 800f208:	1a37      	subs	r7, r6, r0
 800f20a:	4621      	mov	r1, r4
 800f20c:	ee18 0a10 	vmov	r0, s16
 800f210:	463a      	mov	r2, r7
 800f212:	f000 fc49 	bl	800faa8 <__lshift>
 800f216:	1bed      	subs	r5, r5, r7
 800f218:	4604      	mov	r4, r0
 800f21a:	f100 0914 	add.w	r9, r0, #20
 800f21e:	f04f 0a00 	mov.w	sl, #0
 800f222:	e7ae      	b.n	800f182 <__gethex+0x202>
 800f224:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f228:	42a8      	cmp	r0, r5
 800f22a:	dd72      	ble.n	800f312 <__gethex+0x392>
 800f22c:	1b45      	subs	r5, r0, r5
 800f22e:	42ae      	cmp	r6, r5
 800f230:	dc36      	bgt.n	800f2a0 <__gethex+0x320>
 800f232:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f236:	2b02      	cmp	r3, #2
 800f238:	d02a      	beq.n	800f290 <__gethex+0x310>
 800f23a:	2b03      	cmp	r3, #3
 800f23c:	d02c      	beq.n	800f298 <__gethex+0x318>
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d11c      	bne.n	800f27c <__gethex+0x2fc>
 800f242:	42ae      	cmp	r6, r5
 800f244:	d11a      	bne.n	800f27c <__gethex+0x2fc>
 800f246:	2e01      	cmp	r6, #1
 800f248:	d112      	bne.n	800f270 <__gethex+0x2f0>
 800f24a:	9a04      	ldr	r2, [sp, #16]
 800f24c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f250:	6013      	str	r3, [r2, #0]
 800f252:	2301      	movs	r3, #1
 800f254:	6123      	str	r3, [r4, #16]
 800f256:	f8c9 3000 	str.w	r3, [r9]
 800f25a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f25c:	2762      	movs	r7, #98	; 0x62
 800f25e:	601c      	str	r4, [r3, #0]
 800f260:	e723      	b.n	800f0aa <__gethex+0x12a>
 800f262:	bf00      	nop
 800f264:	08011260 	.word	0x08011260
 800f268:	080111e9 	.word	0x080111e9
 800f26c:	080111fa 	.word	0x080111fa
 800f270:	1e71      	subs	r1, r6, #1
 800f272:	4620      	mov	r0, r4
 800f274:	f000 fe5c 	bl	800ff30 <__any_on>
 800f278:	2800      	cmp	r0, #0
 800f27a:	d1e6      	bne.n	800f24a <__gethex+0x2ca>
 800f27c:	ee18 0a10 	vmov	r0, s16
 800f280:	4621      	mov	r1, r4
 800f282:	f000 f9f5 	bl	800f670 <_Bfree>
 800f286:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f288:	2300      	movs	r3, #0
 800f28a:	6013      	str	r3, [r2, #0]
 800f28c:	2750      	movs	r7, #80	; 0x50
 800f28e:	e70c      	b.n	800f0aa <__gethex+0x12a>
 800f290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f292:	2b00      	cmp	r3, #0
 800f294:	d1f2      	bne.n	800f27c <__gethex+0x2fc>
 800f296:	e7d8      	b.n	800f24a <__gethex+0x2ca>
 800f298:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1d5      	bne.n	800f24a <__gethex+0x2ca>
 800f29e:	e7ed      	b.n	800f27c <__gethex+0x2fc>
 800f2a0:	1e6f      	subs	r7, r5, #1
 800f2a2:	f1ba 0f00 	cmp.w	sl, #0
 800f2a6:	d131      	bne.n	800f30c <__gethex+0x38c>
 800f2a8:	b127      	cbz	r7, 800f2b4 <__gethex+0x334>
 800f2aa:	4639      	mov	r1, r7
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f000 fe3f 	bl	800ff30 <__any_on>
 800f2b2:	4682      	mov	sl, r0
 800f2b4:	117b      	asrs	r3, r7, #5
 800f2b6:	2101      	movs	r1, #1
 800f2b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f2bc:	f007 071f 	and.w	r7, r7, #31
 800f2c0:	fa01 f707 	lsl.w	r7, r1, r7
 800f2c4:	421f      	tst	r7, r3
 800f2c6:	4629      	mov	r1, r5
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	bf18      	it	ne
 800f2cc:	f04a 0a02 	orrne.w	sl, sl, #2
 800f2d0:	1b76      	subs	r6, r6, r5
 800f2d2:	f7ff fded 	bl	800eeb0 <rshift>
 800f2d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f2da:	2702      	movs	r7, #2
 800f2dc:	f1ba 0f00 	cmp.w	sl, #0
 800f2e0:	d048      	beq.n	800f374 <__gethex+0x3f4>
 800f2e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2e6:	2b02      	cmp	r3, #2
 800f2e8:	d015      	beq.n	800f316 <__gethex+0x396>
 800f2ea:	2b03      	cmp	r3, #3
 800f2ec:	d017      	beq.n	800f31e <__gethex+0x39e>
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d109      	bne.n	800f306 <__gethex+0x386>
 800f2f2:	f01a 0f02 	tst.w	sl, #2
 800f2f6:	d006      	beq.n	800f306 <__gethex+0x386>
 800f2f8:	f8d9 0000 	ldr.w	r0, [r9]
 800f2fc:	ea4a 0a00 	orr.w	sl, sl, r0
 800f300:	f01a 0f01 	tst.w	sl, #1
 800f304:	d10e      	bne.n	800f324 <__gethex+0x3a4>
 800f306:	f047 0710 	orr.w	r7, r7, #16
 800f30a:	e033      	b.n	800f374 <__gethex+0x3f4>
 800f30c:	f04f 0a01 	mov.w	sl, #1
 800f310:	e7d0      	b.n	800f2b4 <__gethex+0x334>
 800f312:	2701      	movs	r7, #1
 800f314:	e7e2      	b.n	800f2dc <__gethex+0x35c>
 800f316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f318:	f1c3 0301 	rsb	r3, r3, #1
 800f31c:	9315      	str	r3, [sp, #84]	; 0x54
 800f31e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f320:	2b00      	cmp	r3, #0
 800f322:	d0f0      	beq.n	800f306 <__gethex+0x386>
 800f324:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f328:	f104 0314 	add.w	r3, r4, #20
 800f32c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f330:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f334:	f04f 0c00 	mov.w	ip, #0
 800f338:	4618      	mov	r0, r3
 800f33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f33e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f342:	d01c      	beq.n	800f37e <__gethex+0x3fe>
 800f344:	3201      	adds	r2, #1
 800f346:	6002      	str	r2, [r0, #0]
 800f348:	2f02      	cmp	r7, #2
 800f34a:	f104 0314 	add.w	r3, r4, #20
 800f34e:	d13f      	bne.n	800f3d0 <__gethex+0x450>
 800f350:	f8d8 2000 	ldr.w	r2, [r8]
 800f354:	3a01      	subs	r2, #1
 800f356:	42b2      	cmp	r2, r6
 800f358:	d10a      	bne.n	800f370 <__gethex+0x3f0>
 800f35a:	1171      	asrs	r1, r6, #5
 800f35c:	2201      	movs	r2, #1
 800f35e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f362:	f006 061f 	and.w	r6, r6, #31
 800f366:	fa02 f606 	lsl.w	r6, r2, r6
 800f36a:	421e      	tst	r6, r3
 800f36c:	bf18      	it	ne
 800f36e:	4617      	movne	r7, r2
 800f370:	f047 0720 	orr.w	r7, r7, #32
 800f374:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f376:	601c      	str	r4, [r3, #0]
 800f378:	9b04      	ldr	r3, [sp, #16]
 800f37a:	601d      	str	r5, [r3, #0]
 800f37c:	e695      	b.n	800f0aa <__gethex+0x12a>
 800f37e:	4299      	cmp	r1, r3
 800f380:	f843 cc04 	str.w	ip, [r3, #-4]
 800f384:	d8d8      	bhi.n	800f338 <__gethex+0x3b8>
 800f386:	68a3      	ldr	r3, [r4, #8]
 800f388:	459b      	cmp	fp, r3
 800f38a:	db19      	blt.n	800f3c0 <__gethex+0x440>
 800f38c:	6861      	ldr	r1, [r4, #4]
 800f38e:	ee18 0a10 	vmov	r0, s16
 800f392:	3101      	adds	r1, #1
 800f394:	f000 f92c 	bl	800f5f0 <_Balloc>
 800f398:	4681      	mov	r9, r0
 800f39a:	b918      	cbnz	r0, 800f3a4 <__gethex+0x424>
 800f39c:	4b1a      	ldr	r3, [pc, #104]	; (800f408 <__gethex+0x488>)
 800f39e:	4602      	mov	r2, r0
 800f3a0:	2184      	movs	r1, #132	; 0x84
 800f3a2:	e6a8      	b.n	800f0f6 <__gethex+0x176>
 800f3a4:	6922      	ldr	r2, [r4, #16]
 800f3a6:	3202      	adds	r2, #2
 800f3a8:	f104 010c 	add.w	r1, r4, #12
 800f3ac:	0092      	lsls	r2, r2, #2
 800f3ae:	300c      	adds	r0, #12
 800f3b0:	f7fe fa4d 	bl	800d84e <memcpy>
 800f3b4:	4621      	mov	r1, r4
 800f3b6:	ee18 0a10 	vmov	r0, s16
 800f3ba:	f000 f959 	bl	800f670 <_Bfree>
 800f3be:	464c      	mov	r4, r9
 800f3c0:	6923      	ldr	r3, [r4, #16]
 800f3c2:	1c5a      	adds	r2, r3, #1
 800f3c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f3c8:	6122      	str	r2, [r4, #16]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	615a      	str	r2, [r3, #20]
 800f3ce:	e7bb      	b.n	800f348 <__gethex+0x3c8>
 800f3d0:	6922      	ldr	r2, [r4, #16]
 800f3d2:	455a      	cmp	r2, fp
 800f3d4:	dd0b      	ble.n	800f3ee <__gethex+0x46e>
 800f3d6:	2101      	movs	r1, #1
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f7ff fd69 	bl	800eeb0 <rshift>
 800f3de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3e2:	3501      	adds	r5, #1
 800f3e4:	42ab      	cmp	r3, r5
 800f3e6:	f6ff aed0 	blt.w	800f18a <__gethex+0x20a>
 800f3ea:	2701      	movs	r7, #1
 800f3ec:	e7c0      	b.n	800f370 <__gethex+0x3f0>
 800f3ee:	f016 061f 	ands.w	r6, r6, #31
 800f3f2:	d0fa      	beq.n	800f3ea <__gethex+0x46a>
 800f3f4:	4453      	add	r3, sl
 800f3f6:	f1c6 0620 	rsb	r6, r6, #32
 800f3fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f3fe:	f000 f9e9 	bl	800f7d4 <__hi0bits>
 800f402:	42b0      	cmp	r0, r6
 800f404:	dbe7      	blt.n	800f3d6 <__gethex+0x456>
 800f406:	e7f0      	b.n	800f3ea <__gethex+0x46a>
 800f408:	080111e9 	.word	0x080111e9

0800f40c <L_shift>:
 800f40c:	f1c2 0208 	rsb	r2, r2, #8
 800f410:	0092      	lsls	r2, r2, #2
 800f412:	b570      	push	{r4, r5, r6, lr}
 800f414:	f1c2 0620 	rsb	r6, r2, #32
 800f418:	6843      	ldr	r3, [r0, #4]
 800f41a:	6804      	ldr	r4, [r0, #0]
 800f41c:	fa03 f506 	lsl.w	r5, r3, r6
 800f420:	432c      	orrs	r4, r5
 800f422:	40d3      	lsrs	r3, r2
 800f424:	6004      	str	r4, [r0, #0]
 800f426:	f840 3f04 	str.w	r3, [r0, #4]!
 800f42a:	4288      	cmp	r0, r1
 800f42c:	d3f4      	bcc.n	800f418 <L_shift+0xc>
 800f42e:	bd70      	pop	{r4, r5, r6, pc}

0800f430 <__match>:
 800f430:	b530      	push	{r4, r5, lr}
 800f432:	6803      	ldr	r3, [r0, #0]
 800f434:	3301      	adds	r3, #1
 800f436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f43a:	b914      	cbnz	r4, 800f442 <__match+0x12>
 800f43c:	6003      	str	r3, [r0, #0]
 800f43e:	2001      	movs	r0, #1
 800f440:	bd30      	pop	{r4, r5, pc}
 800f442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f446:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f44a:	2d19      	cmp	r5, #25
 800f44c:	bf98      	it	ls
 800f44e:	3220      	addls	r2, #32
 800f450:	42a2      	cmp	r2, r4
 800f452:	d0f0      	beq.n	800f436 <__match+0x6>
 800f454:	2000      	movs	r0, #0
 800f456:	e7f3      	b.n	800f440 <__match+0x10>

0800f458 <__hexnan>:
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	680b      	ldr	r3, [r1, #0]
 800f45e:	115e      	asrs	r6, r3, #5
 800f460:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f464:	f013 031f 	ands.w	r3, r3, #31
 800f468:	b087      	sub	sp, #28
 800f46a:	bf18      	it	ne
 800f46c:	3604      	addne	r6, #4
 800f46e:	2500      	movs	r5, #0
 800f470:	1f37      	subs	r7, r6, #4
 800f472:	4690      	mov	r8, r2
 800f474:	6802      	ldr	r2, [r0, #0]
 800f476:	9301      	str	r3, [sp, #4]
 800f478:	4682      	mov	sl, r0
 800f47a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f47e:	46b9      	mov	r9, r7
 800f480:	463c      	mov	r4, r7
 800f482:	9502      	str	r5, [sp, #8]
 800f484:	46ab      	mov	fp, r5
 800f486:	7851      	ldrb	r1, [r2, #1]
 800f488:	1c53      	adds	r3, r2, #1
 800f48a:	9303      	str	r3, [sp, #12]
 800f48c:	b341      	cbz	r1, 800f4e0 <__hexnan+0x88>
 800f48e:	4608      	mov	r0, r1
 800f490:	9205      	str	r2, [sp, #20]
 800f492:	9104      	str	r1, [sp, #16]
 800f494:	f7ff fd5e 	bl	800ef54 <__hexdig_fun>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d14f      	bne.n	800f53c <__hexnan+0xe4>
 800f49c:	9904      	ldr	r1, [sp, #16]
 800f49e:	9a05      	ldr	r2, [sp, #20]
 800f4a0:	2920      	cmp	r1, #32
 800f4a2:	d818      	bhi.n	800f4d6 <__hexnan+0x7e>
 800f4a4:	9b02      	ldr	r3, [sp, #8]
 800f4a6:	459b      	cmp	fp, r3
 800f4a8:	dd13      	ble.n	800f4d2 <__hexnan+0x7a>
 800f4aa:	454c      	cmp	r4, r9
 800f4ac:	d206      	bcs.n	800f4bc <__hexnan+0x64>
 800f4ae:	2d07      	cmp	r5, #7
 800f4b0:	dc04      	bgt.n	800f4bc <__hexnan+0x64>
 800f4b2:	462a      	mov	r2, r5
 800f4b4:	4649      	mov	r1, r9
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f7ff ffa8 	bl	800f40c <L_shift>
 800f4bc:	4544      	cmp	r4, r8
 800f4be:	d950      	bls.n	800f562 <__hexnan+0x10a>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	f1a4 0904 	sub.w	r9, r4, #4
 800f4c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4ca:	f8cd b008 	str.w	fp, [sp, #8]
 800f4ce:	464c      	mov	r4, r9
 800f4d0:	461d      	mov	r5, r3
 800f4d2:	9a03      	ldr	r2, [sp, #12]
 800f4d4:	e7d7      	b.n	800f486 <__hexnan+0x2e>
 800f4d6:	2929      	cmp	r1, #41	; 0x29
 800f4d8:	d156      	bne.n	800f588 <__hexnan+0x130>
 800f4da:	3202      	adds	r2, #2
 800f4dc:	f8ca 2000 	str.w	r2, [sl]
 800f4e0:	f1bb 0f00 	cmp.w	fp, #0
 800f4e4:	d050      	beq.n	800f588 <__hexnan+0x130>
 800f4e6:	454c      	cmp	r4, r9
 800f4e8:	d206      	bcs.n	800f4f8 <__hexnan+0xa0>
 800f4ea:	2d07      	cmp	r5, #7
 800f4ec:	dc04      	bgt.n	800f4f8 <__hexnan+0xa0>
 800f4ee:	462a      	mov	r2, r5
 800f4f0:	4649      	mov	r1, r9
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f7ff ff8a 	bl	800f40c <L_shift>
 800f4f8:	4544      	cmp	r4, r8
 800f4fa:	d934      	bls.n	800f566 <__hexnan+0x10e>
 800f4fc:	f1a8 0204 	sub.w	r2, r8, #4
 800f500:	4623      	mov	r3, r4
 800f502:	f853 1b04 	ldr.w	r1, [r3], #4
 800f506:	f842 1f04 	str.w	r1, [r2, #4]!
 800f50a:	429f      	cmp	r7, r3
 800f50c:	d2f9      	bcs.n	800f502 <__hexnan+0xaa>
 800f50e:	1b3b      	subs	r3, r7, r4
 800f510:	f023 0303 	bic.w	r3, r3, #3
 800f514:	3304      	adds	r3, #4
 800f516:	3401      	adds	r4, #1
 800f518:	3e03      	subs	r6, #3
 800f51a:	42b4      	cmp	r4, r6
 800f51c:	bf88      	it	hi
 800f51e:	2304      	movhi	r3, #4
 800f520:	4443      	add	r3, r8
 800f522:	2200      	movs	r2, #0
 800f524:	f843 2b04 	str.w	r2, [r3], #4
 800f528:	429f      	cmp	r7, r3
 800f52a:	d2fb      	bcs.n	800f524 <__hexnan+0xcc>
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	b91b      	cbnz	r3, 800f538 <__hexnan+0xe0>
 800f530:	4547      	cmp	r7, r8
 800f532:	d127      	bne.n	800f584 <__hexnan+0x12c>
 800f534:	2301      	movs	r3, #1
 800f536:	603b      	str	r3, [r7, #0]
 800f538:	2005      	movs	r0, #5
 800f53a:	e026      	b.n	800f58a <__hexnan+0x132>
 800f53c:	3501      	adds	r5, #1
 800f53e:	2d08      	cmp	r5, #8
 800f540:	f10b 0b01 	add.w	fp, fp, #1
 800f544:	dd06      	ble.n	800f554 <__hexnan+0xfc>
 800f546:	4544      	cmp	r4, r8
 800f548:	d9c3      	bls.n	800f4d2 <__hexnan+0x7a>
 800f54a:	2300      	movs	r3, #0
 800f54c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f550:	2501      	movs	r5, #1
 800f552:	3c04      	subs	r4, #4
 800f554:	6822      	ldr	r2, [r4, #0]
 800f556:	f000 000f 	and.w	r0, r0, #15
 800f55a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f55e:	6022      	str	r2, [r4, #0]
 800f560:	e7b7      	b.n	800f4d2 <__hexnan+0x7a>
 800f562:	2508      	movs	r5, #8
 800f564:	e7b5      	b.n	800f4d2 <__hexnan+0x7a>
 800f566:	9b01      	ldr	r3, [sp, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d0df      	beq.n	800f52c <__hexnan+0xd4>
 800f56c:	f04f 32ff 	mov.w	r2, #4294967295
 800f570:	f1c3 0320 	rsb	r3, r3, #32
 800f574:	fa22 f303 	lsr.w	r3, r2, r3
 800f578:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f57c:	401a      	ands	r2, r3
 800f57e:	f846 2c04 	str.w	r2, [r6, #-4]
 800f582:	e7d3      	b.n	800f52c <__hexnan+0xd4>
 800f584:	3f04      	subs	r7, #4
 800f586:	e7d1      	b.n	800f52c <__hexnan+0xd4>
 800f588:	2004      	movs	r0, #4
 800f58a:	b007      	add	sp, #28
 800f58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f590 <_lseek_r>:
 800f590:	b538      	push	{r3, r4, r5, lr}
 800f592:	4d07      	ldr	r5, [pc, #28]	; (800f5b0 <_lseek_r+0x20>)
 800f594:	4604      	mov	r4, r0
 800f596:	4608      	mov	r0, r1
 800f598:	4611      	mov	r1, r2
 800f59a:	2200      	movs	r2, #0
 800f59c:	602a      	str	r2, [r5, #0]
 800f59e:	461a      	mov	r2, r3
 800f5a0:	f7f2 fb3a 	bl	8001c18 <_lseek>
 800f5a4:	1c43      	adds	r3, r0, #1
 800f5a6:	d102      	bne.n	800f5ae <_lseek_r+0x1e>
 800f5a8:	682b      	ldr	r3, [r5, #0]
 800f5aa:	b103      	cbz	r3, 800f5ae <_lseek_r+0x1e>
 800f5ac:	6023      	str	r3, [r4, #0]
 800f5ae:	bd38      	pop	{r3, r4, r5, pc}
 800f5b0:	20008134 	.word	0x20008134

0800f5b4 <__ascii_mbtowc>:
 800f5b4:	b082      	sub	sp, #8
 800f5b6:	b901      	cbnz	r1, 800f5ba <__ascii_mbtowc+0x6>
 800f5b8:	a901      	add	r1, sp, #4
 800f5ba:	b142      	cbz	r2, 800f5ce <__ascii_mbtowc+0x1a>
 800f5bc:	b14b      	cbz	r3, 800f5d2 <__ascii_mbtowc+0x1e>
 800f5be:	7813      	ldrb	r3, [r2, #0]
 800f5c0:	600b      	str	r3, [r1, #0]
 800f5c2:	7812      	ldrb	r2, [r2, #0]
 800f5c4:	1e10      	subs	r0, r2, #0
 800f5c6:	bf18      	it	ne
 800f5c8:	2001      	movne	r0, #1
 800f5ca:	b002      	add	sp, #8
 800f5cc:	4770      	bx	lr
 800f5ce:	4610      	mov	r0, r2
 800f5d0:	e7fb      	b.n	800f5ca <__ascii_mbtowc+0x16>
 800f5d2:	f06f 0001 	mvn.w	r0, #1
 800f5d6:	e7f8      	b.n	800f5ca <__ascii_mbtowc+0x16>

0800f5d8 <__malloc_lock>:
 800f5d8:	4801      	ldr	r0, [pc, #4]	; (800f5e0 <__malloc_lock+0x8>)
 800f5da:	f7fe b936 	b.w	800d84a <__retarget_lock_acquire_recursive>
 800f5de:	bf00      	nop
 800f5e0:	20008128 	.word	0x20008128

0800f5e4 <__malloc_unlock>:
 800f5e4:	4801      	ldr	r0, [pc, #4]	; (800f5ec <__malloc_unlock+0x8>)
 800f5e6:	f7fe b931 	b.w	800d84c <__retarget_lock_release_recursive>
 800f5ea:	bf00      	nop
 800f5ec:	20008128 	.word	0x20008128

0800f5f0 <_Balloc>:
 800f5f0:	b570      	push	{r4, r5, r6, lr}
 800f5f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	460d      	mov	r5, r1
 800f5f8:	b976      	cbnz	r6, 800f618 <_Balloc+0x28>
 800f5fa:	2010      	movs	r0, #16
 800f5fc:	f001 f87a 	bl	80106f4 <malloc>
 800f600:	4602      	mov	r2, r0
 800f602:	6260      	str	r0, [r4, #36]	; 0x24
 800f604:	b920      	cbnz	r0, 800f610 <_Balloc+0x20>
 800f606:	4b18      	ldr	r3, [pc, #96]	; (800f668 <_Balloc+0x78>)
 800f608:	4818      	ldr	r0, [pc, #96]	; (800f66c <_Balloc+0x7c>)
 800f60a:	2166      	movs	r1, #102	; 0x66
 800f60c:	f001 f842 	bl	8010694 <__assert_func>
 800f610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f614:	6006      	str	r6, [r0, #0]
 800f616:	60c6      	str	r6, [r0, #12]
 800f618:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f61a:	68f3      	ldr	r3, [r6, #12]
 800f61c:	b183      	cbz	r3, 800f640 <_Balloc+0x50>
 800f61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f626:	b9b8      	cbnz	r0, 800f658 <_Balloc+0x68>
 800f628:	2101      	movs	r1, #1
 800f62a:	fa01 f605 	lsl.w	r6, r1, r5
 800f62e:	1d72      	adds	r2, r6, #5
 800f630:	0092      	lsls	r2, r2, #2
 800f632:	4620      	mov	r0, r4
 800f634:	f000 fc9d 	bl	800ff72 <_calloc_r>
 800f638:	b160      	cbz	r0, 800f654 <_Balloc+0x64>
 800f63a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f63e:	e00e      	b.n	800f65e <_Balloc+0x6e>
 800f640:	2221      	movs	r2, #33	; 0x21
 800f642:	2104      	movs	r1, #4
 800f644:	4620      	mov	r0, r4
 800f646:	f000 fc94 	bl	800ff72 <_calloc_r>
 800f64a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f64c:	60f0      	str	r0, [r6, #12]
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1e4      	bne.n	800f61e <_Balloc+0x2e>
 800f654:	2000      	movs	r0, #0
 800f656:	bd70      	pop	{r4, r5, r6, pc}
 800f658:	6802      	ldr	r2, [r0, #0]
 800f65a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f65e:	2300      	movs	r3, #0
 800f660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f664:	e7f7      	b.n	800f656 <_Balloc+0x66>
 800f666:	bf00      	nop
 800f668:	08011274 	.word	0x08011274
 800f66c:	0801128b 	.word	0x0801128b

0800f670 <_Bfree>:
 800f670:	b570      	push	{r4, r5, r6, lr}
 800f672:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f674:	4605      	mov	r5, r0
 800f676:	460c      	mov	r4, r1
 800f678:	b976      	cbnz	r6, 800f698 <_Bfree+0x28>
 800f67a:	2010      	movs	r0, #16
 800f67c:	f001 f83a 	bl	80106f4 <malloc>
 800f680:	4602      	mov	r2, r0
 800f682:	6268      	str	r0, [r5, #36]	; 0x24
 800f684:	b920      	cbnz	r0, 800f690 <_Bfree+0x20>
 800f686:	4b09      	ldr	r3, [pc, #36]	; (800f6ac <_Bfree+0x3c>)
 800f688:	4809      	ldr	r0, [pc, #36]	; (800f6b0 <_Bfree+0x40>)
 800f68a:	218a      	movs	r1, #138	; 0x8a
 800f68c:	f001 f802 	bl	8010694 <__assert_func>
 800f690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f694:	6006      	str	r6, [r0, #0]
 800f696:	60c6      	str	r6, [r0, #12]
 800f698:	b13c      	cbz	r4, 800f6aa <_Bfree+0x3a>
 800f69a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f69c:	6862      	ldr	r2, [r4, #4]
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6a4:	6021      	str	r1, [r4, #0]
 800f6a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6aa:	bd70      	pop	{r4, r5, r6, pc}
 800f6ac:	08011274 	.word	0x08011274
 800f6b0:	0801128b 	.word	0x0801128b

0800f6b4 <__multadd>:
 800f6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b8:	690d      	ldr	r5, [r1, #16]
 800f6ba:	4607      	mov	r7, r0
 800f6bc:	460c      	mov	r4, r1
 800f6be:	461e      	mov	r6, r3
 800f6c0:	f101 0c14 	add.w	ip, r1, #20
 800f6c4:	2000      	movs	r0, #0
 800f6c6:	f8dc 3000 	ldr.w	r3, [ip]
 800f6ca:	b299      	uxth	r1, r3
 800f6cc:	fb02 6101 	mla	r1, r2, r1, r6
 800f6d0:	0c1e      	lsrs	r6, r3, #16
 800f6d2:	0c0b      	lsrs	r3, r1, #16
 800f6d4:	fb02 3306 	mla	r3, r2, r6, r3
 800f6d8:	b289      	uxth	r1, r1
 800f6da:	3001      	adds	r0, #1
 800f6dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f6e0:	4285      	cmp	r5, r0
 800f6e2:	f84c 1b04 	str.w	r1, [ip], #4
 800f6e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f6ea:	dcec      	bgt.n	800f6c6 <__multadd+0x12>
 800f6ec:	b30e      	cbz	r6, 800f732 <__multadd+0x7e>
 800f6ee:	68a3      	ldr	r3, [r4, #8]
 800f6f0:	42ab      	cmp	r3, r5
 800f6f2:	dc19      	bgt.n	800f728 <__multadd+0x74>
 800f6f4:	6861      	ldr	r1, [r4, #4]
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	3101      	adds	r1, #1
 800f6fa:	f7ff ff79 	bl	800f5f0 <_Balloc>
 800f6fe:	4680      	mov	r8, r0
 800f700:	b928      	cbnz	r0, 800f70e <__multadd+0x5a>
 800f702:	4602      	mov	r2, r0
 800f704:	4b0c      	ldr	r3, [pc, #48]	; (800f738 <__multadd+0x84>)
 800f706:	480d      	ldr	r0, [pc, #52]	; (800f73c <__multadd+0x88>)
 800f708:	21b5      	movs	r1, #181	; 0xb5
 800f70a:	f000 ffc3 	bl	8010694 <__assert_func>
 800f70e:	6922      	ldr	r2, [r4, #16]
 800f710:	3202      	adds	r2, #2
 800f712:	f104 010c 	add.w	r1, r4, #12
 800f716:	0092      	lsls	r2, r2, #2
 800f718:	300c      	adds	r0, #12
 800f71a:	f7fe f898 	bl	800d84e <memcpy>
 800f71e:	4621      	mov	r1, r4
 800f720:	4638      	mov	r0, r7
 800f722:	f7ff ffa5 	bl	800f670 <_Bfree>
 800f726:	4644      	mov	r4, r8
 800f728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f72c:	3501      	adds	r5, #1
 800f72e:	615e      	str	r6, [r3, #20]
 800f730:	6125      	str	r5, [r4, #16]
 800f732:	4620      	mov	r0, r4
 800f734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f738:	080111e9 	.word	0x080111e9
 800f73c:	0801128b 	.word	0x0801128b

0800f740 <__s2b>:
 800f740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f744:	460c      	mov	r4, r1
 800f746:	4615      	mov	r5, r2
 800f748:	461f      	mov	r7, r3
 800f74a:	2209      	movs	r2, #9
 800f74c:	3308      	adds	r3, #8
 800f74e:	4606      	mov	r6, r0
 800f750:	fb93 f3f2 	sdiv	r3, r3, r2
 800f754:	2100      	movs	r1, #0
 800f756:	2201      	movs	r2, #1
 800f758:	429a      	cmp	r2, r3
 800f75a:	db09      	blt.n	800f770 <__s2b+0x30>
 800f75c:	4630      	mov	r0, r6
 800f75e:	f7ff ff47 	bl	800f5f0 <_Balloc>
 800f762:	b940      	cbnz	r0, 800f776 <__s2b+0x36>
 800f764:	4602      	mov	r2, r0
 800f766:	4b19      	ldr	r3, [pc, #100]	; (800f7cc <__s2b+0x8c>)
 800f768:	4819      	ldr	r0, [pc, #100]	; (800f7d0 <__s2b+0x90>)
 800f76a:	21ce      	movs	r1, #206	; 0xce
 800f76c:	f000 ff92 	bl	8010694 <__assert_func>
 800f770:	0052      	lsls	r2, r2, #1
 800f772:	3101      	adds	r1, #1
 800f774:	e7f0      	b.n	800f758 <__s2b+0x18>
 800f776:	9b08      	ldr	r3, [sp, #32]
 800f778:	6143      	str	r3, [r0, #20]
 800f77a:	2d09      	cmp	r5, #9
 800f77c:	f04f 0301 	mov.w	r3, #1
 800f780:	6103      	str	r3, [r0, #16]
 800f782:	dd16      	ble.n	800f7b2 <__s2b+0x72>
 800f784:	f104 0909 	add.w	r9, r4, #9
 800f788:	46c8      	mov	r8, r9
 800f78a:	442c      	add	r4, r5
 800f78c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f790:	4601      	mov	r1, r0
 800f792:	3b30      	subs	r3, #48	; 0x30
 800f794:	220a      	movs	r2, #10
 800f796:	4630      	mov	r0, r6
 800f798:	f7ff ff8c 	bl	800f6b4 <__multadd>
 800f79c:	45a0      	cmp	r8, r4
 800f79e:	d1f5      	bne.n	800f78c <__s2b+0x4c>
 800f7a0:	f1a5 0408 	sub.w	r4, r5, #8
 800f7a4:	444c      	add	r4, r9
 800f7a6:	1b2d      	subs	r5, r5, r4
 800f7a8:	1963      	adds	r3, r4, r5
 800f7aa:	42bb      	cmp	r3, r7
 800f7ac:	db04      	blt.n	800f7b8 <__s2b+0x78>
 800f7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7b2:	340a      	adds	r4, #10
 800f7b4:	2509      	movs	r5, #9
 800f7b6:	e7f6      	b.n	800f7a6 <__s2b+0x66>
 800f7b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f7bc:	4601      	mov	r1, r0
 800f7be:	3b30      	subs	r3, #48	; 0x30
 800f7c0:	220a      	movs	r2, #10
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f7ff ff76 	bl	800f6b4 <__multadd>
 800f7c8:	e7ee      	b.n	800f7a8 <__s2b+0x68>
 800f7ca:	bf00      	nop
 800f7cc:	080111e9 	.word	0x080111e9
 800f7d0:	0801128b 	.word	0x0801128b

0800f7d4 <__hi0bits>:
 800f7d4:	0c03      	lsrs	r3, r0, #16
 800f7d6:	041b      	lsls	r3, r3, #16
 800f7d8:	b9d3      	cbnz	r3, 800f810 <__hi0bits+0x3c>
 800f7da:	0400      	lsls	r0, r0, #16
 800f7dc:	2310      	movs	r3, #16
 800f7de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f7e2:	bf04      	itt	eq
 800f7e4:	0200      	lsleq	r0, r0, #8
 800f7e6:	3308      	addeq	r3, #8
 800f7e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f7ec:	bf04      	itt	eq
 800f7ee:	0100      	lsleq	r0, r0, #4
 800f7f0:	3304      	addeq	r3, #4
 800f7f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f7f6:	bf04      	itt	eq
 800f7f8:	0080      	lsleq	r0, r0, #2
 800f7fa:	3302      	addeq	r3, #2
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	db05      	blt.n	800f80c <__hi0bits+0x38>
 800f800:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f804:	f103 0301 	add.w	r3, r3, #1
 800f808:	bf08      	it	eq
 800f80a:	2320      	moveq	r3, #32
 800f80c:	4618      	mov	r0, r3
 800f80e:	4770      	bx	lr
 800f810:	2300      	movs	r3, #0
 800f812:	e7e4      	b.n	800f7de <__hi0bits+0xa>

0800f814 <__lo0bits>:
 800f814:	6803      	ldr	r3, [r0, #0]
 800f816:	f013 0207 	ands.w	r2, r3, #7
 800f81a:	4601      	mov	r1, r0
 800f81c:	d00b      	beq.n	800f836 <__lo0bits+0x22>
 800f81e:	07da      	lsls	r2, r3, #31
 800f820:	d423      	bmi.n	800f86a <__lo0bits+0x56>
 800f822:	0798      	lsls	r0, r3, #30
 800f824:	bf49      	itett	mi
 800f826:	085b      	lsrmi	r3, r3, #1
 800f828:	089b      	lsrpl	r3, r3, #2
 800f82a:	2001      	movmi	r0, #1
 800f82c:	600b      	strmi	r3, [r1, #0]
 800f82e:	bf5c      	itt	pl
 800f830:	600b      	strpl	r3, [r1, #0]
 800f832:	2002      	movpl	r0, #2
 800f834:	4770      	bx	lr
 800f836:	b298      	uxth	r0, r3
 800f838:	b9a8      	cbnz	r0, 800f866 <__lo0bits+0x52>
 800f83a:	0c1b      	lsrs	r3, r3, #16
 800f83c:	2010      	movs	r0, #16
 800f83e:	b2da      	uxtb	r2, r3
 800f840:	b90a      	cbnz	r2, 800f846 <__lo0bits+0x32>
 800f842:	3008      	adds	r0, #8
 800f844:	0a1b      	lsrs	r3, r3, #8
 800f846:	071a      	lsls	r2, r3, #28
 800f848:	bf04      	itt	eq
 800f84a:	091b      	lsreq	r3, r3, #4
 800f84c:	3004      	addeq	r0, #4
 800f84e:	079a      	lsls	r2, r3, #30
 800f850:	bf04      	itt	eq
 800f852:	089b      	lsreq	r3, r3, #2
 800f854:	3002      	addeq	r0, #2
 800f856:	07da      	lsls	r2, r3, #31
 800f858:	d403      	bmi.n	800f862 <__lo0bits+0x4e>
 800f85a:	085b      	lsrs	r3, r3, #1
 800f85c:	f100 0001 	add.w	r0, r0, #1
 800f860:	d005      	beq.n	800f86e <__lo0bits+0x5a>
 800f862:	600b      	str	r3, [r1, #0]
 800f864:	4770      	bx	lr
 800f866:	4610      	mov	r0, r2
 800f868:	e7e9      	b.n	800f83e <__lo0bits+0x2a>
 800f86a:	2000      	movs	r0, #0
 800f86c:	4770      	bx	lr
 800f86e:	2020      	movs	r0, #32
 800f870:	4770      	bx	lr
	...

0800f874 <__i2b>:
 800f874:	b510      	push	{r4, lr}
 800f876:	460c      	mov	r4, r1
 800f878:	2101      	movs	r1, #1
 800f87a:	f7ff feb9 	bl	800f5f0 <_Balloc>
 800f87e:	4602      	mov	r2, r0
 800f880:	b928      	cbnz	r0, 800f88e <__i2b+0x1a>
 800f882:	4b05      	ldr	r3, [pc, #20]	; (800f898 <__i2b+0x24>)
 800f884:	4805      	ldr	r0, [pc, #20]	; (800f89c <__i2b+0x28>)
 800f886:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f88a:	f000 ff03 	bl	8010694 <__assert_func>
 800f88e:	2301      	movs	r3, #1
 800f890:	6144      	str	r4, [r0, #20]
 800f892:	6103      	str	r3, [r0, #16]
 800f894:	bd10      	pop	{r4, pc}
 800f896:	bf00      	nop
 800f898:	080111e9 	.word	0x080111e9
 800f89c:	0801128b 	.word	0x0801128b

0800f8a0 <__multiply>:
 800f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a4:	4691      	mov	r9, r2
 800f8a6:	690a      	ldr	r2, [r1, #16]
 800f8a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	bfb8      	it	lt
 800f8b0:	460b      	movlt	r3, r1
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	bfbc      	itt	lt
 800f8b6:	464c      	movlt	r4, r9
 800f8b8:	4699      	movlt	r9, r3
 800f8ba:	6927      	ldr	r7, [r4, #16]
 800f8bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f8c0:	68a3      	ldr	r3, [r4, #8]
 800f8c2:	6861      	ldr	r1, [r4, #4]
 800f8c4:	eb07 060a 	add.w	r6, r7, sl
 800f8c8:	42b3      	cmp	r3, r6
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	bfb8      	it	lt
 800f8ce:	3101      	addlt	r1, #1
 800f8d0:	f7ff fe8e 	bl	800f5f0 <_Balloc>
 800f8d4:	b930      	cbnz	r0, 800f8e4 <__multiply+0x44>
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	4b44      	ldr	r3, [pc, #272]	; (800f9ec <__multiply+0x14c>)
 800f8da:	4845      	ldr	r0, [pc, #276]	; (800f9f0 <__multiply+0x150>)
 800f8dc:	f240 115d 	movw	r1, #349	; 0x15d
 800f8e0:	f000 fed8 	bl	8010694 <__assert_func>
 800f8e4:	f100 0514 	add.w	r5, r0, #20
 800f8e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f8ec:	462b      	mov	r3, r5
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	4543      	cmp	r3, r8
 800f8f2:	d321      	bcc.n	800f938 <__multiply+0x98>
 800f8f4:	f104 0314 	add.w	r3, r4, #20
 800f8f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f8fc:	f109 0314 	add.w	r3, r9, #20
 800f900:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f904:	9202      	str	r2, [sp, #8]
 800f906:	1b3a      	subs	r2, r7, r4
 800f908:	3a15      	subs	r2, #21
 800f90a:	f022 0203 	bic.w	r2, r2, #3
 800f90e:	3204      	adds	r2, #4
 800f910:	f104 0115 	add.w	r1, r4, #21
 800f914:	428f      	cmp	r7, r1
 800f916:	bf38      	it	cc
 800f918:	2204      	movcc	r2, #4
 800f91a:	9201      	str	r2, [sp, #4]
 800f91c:	9a02      	ldr	r2, [sp, #8]
 800f91e:	9303      	str	r3, [sp, #12]
 800f920:	429a      	cmp	r2, r3
 800f922:	d80c      	bhi.n	800f93e <__multiply+0x9e>
 800f924:	2e00      	cmp	r6, #0
 800f926:	dd03      	ble.n	800f930 <__multiply+0x90>
 800f928:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d05a      	beq.n	800f9e6 <__multiply+0x146>
 800f930:	6106      	str	r6, [r0, #16]
 800f932:	b005      	add	sp, #20
 800f934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f938:	f843 2b04 	str.w	r2, [r3], #4
 800f93c:	e7d8      	b.n	800f8f0 <__multiply+0x50>
 800f93e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f942:	f1ba 0f00 	cmp.w	sl, #0
 800f946:	d024      	beq.n	800f992 <__multiply+0xf2>
 800f948:	f104 0e14 	add.w	lr, r4, #20
 800f94c:	46a9      	mov	r9, r5
 800f94e:	f04f 0c00 	mov.w	ip, #0
 800f952:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f956:	f8d9 1000 	ldr.w	r1, [r9]
 800f95a:	fa1f fb82 	uxth.w	fp, r2
 800f95e:	b289      	uxth	r1, r1
 800f960:	fb0a 110b 	mla	r1, sl, fp, r1
 800f964:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f968:	f8d9 2000 	ldr.w	r2, [r9]
 800f96c:	4461      	add	r1, ip
 800f96e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f972:	fb0a c20b 	mla	r2, sl, fp, ip
 800f976:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f97a:	b289      	uxth	r1, r1
 800f97c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f980:	4577      	cmp	r7, lr
 800f982:	f849 1b04 	str.w	r1, [r9], #4
 800f986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f98a:	d8e2      	bhi.n	800f952 <__multiply+0xb2>
 800f98c:	9a01      	ldr	r2, [sp, #4]
 800f98e:	f845 c002 	str.w	ip, [r5, r2]
 800f992:	9a03      	ldr	r2, [sp, #12]
 800f994:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f998:	3304      	adds	r3, #4
 800f99a:	f1b9 0f00 	cmp.w	r9, #0
 800f99e:	d020      	beq.n	800f9e2 <__multiply+0x142>
 800f9a0:	6829      	ldr	r1, [r5, #0]
 800f9a2:	f104 0c14 	add.w	ip, r4, #20
 800f9a6:	46ae      	mov	lr, r5
 800f9a8:	f04f 0a00 	mov.w	sl, #0
 800f9ac:	f8bc b000 	ldrh.w	fp, [ip]
 800f9b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f9b4:	fb09 220b 	mla	r2, r9, fp, r2
 800f9b8:	4492      	add	sl, r2
 800f9ba:	b289      	uxth	r1, r1
 800f9bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f9c0:	f84e 1b04 	str.w	r1, [lr], #4
 800f9c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f9c8:	f8be 1000 	ldrh.w	r1, [lr]
 800f9cc:	0c12      	lsrs	r2, r2, #16
 800f9ce:	fb09 1102 	mla	r1, r9, r2, r1
 800f9d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f9d6:	4567      	cmp	r7, ip
 800f9d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f9dc:	d8e6      	bhi.n	800f9ac <__multiply+0x10c>
 800f9de:	9a01      	ldr	r2, [sp, #4]
 800f9e0:	50a9      	str	r1, [r5, r2]
 800f9e2:	3504      	adds	r5, #4
 800f9e4:	e79a      	b.n	800f91c <__multiply+0x7c>
 800f9e6:	3e01      	subs	r6, #1
 800f9e8:	e79c      	b.n	800f924 <__multiply+0x84>
 800f9ea:	bf00      	nop
 800f9ec:	080111e9 	.word	0x080111e9
 800f9f0:	0801128b 	.word	0x0801128b

0800f9f4 <__pow5mult>:
 800f9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9f8:	4615      	mov	r5, r2
 800f9fa:	f012 0203 	ands.w	r2, r2, #3
 800f9fe:	4606      	mov	r6, r0
 800fa00:	460f      	mov	r7, r1
 800fa02:	d007      	beq.n	800fa14 <__pow5mult+0x20>
 800fa04:	4c25      	ldr	r4, [pc, #148]	; (800fa9c <__pow5mult+0xa8>)
 800fa06:	3a01      	subs	r2, #1
 800fa08:	2300      	movs	r3, #0
 800fa0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa0e:	f7ff fe51 	bl	800f6b4 <__multadd>
 800fa12:	4607      	mov	r7, r0
 800fa14:	10ad      	asrs	r5, r5, #2
 800fa16:	d03d      	beq.n	800fa94 <__pow5mult+0xa0>
 800fa18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa1a:	b97c      	cbnz	r4, 800fa3c <__pow5mult+0x48>
 800fa1c:	2010      	movs	r0, #16
 800fa1e:	f000 fe69 	bl	80106f4 <malloc>
 800fa22:	4602      	mov	r2, r0
 800fa24:	6270      	str	r0, [r6, #36]	; 0x24
 800fa26:	b928      	cbnz	r0, 800fa34 <__pow5mult+0x40>
 800fa28:	4b1d      	ldr	r3, [pc, #116]	; (800faa0 <__pow5mult+0xac>)
 800fa2a:	481e      	ldr	r0, [pc, #120]	; (800faa4 <__pow5mult+0xb0>)
 800fa2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fa30:	f000 fe30 	bl	8010694 <__assert_func>
 800fa34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa38:	6004      	str	r4, [r0, #0]
 800fa3a:	60c4      	str	r4, [r0, #12]
 800fa3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa44:	b94c      	cbnz	r4, 800fa5a <__pow5mult+0x66>
 800fa46:	f240 2171 	movw	r1, #625	; 0x271
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	f7ff ff12 	bl	800f874 <__i2b>
 800fa50:	2300      	movs	r3, #0
 800fa52:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa56:	4604      	mov	r4, r0
 800fa58:	6003      	str	r3, [r0, #0]
 800fa5a:	f04f 0900 	mov.w	r9, #0
 800fa5e:	07eb      	lsls	r3, r5, #31
 800fa60:	d50a      	bpl.n	800fa78 <__pow5mult+0x84>
 800fa62:	4639      	mov	r1, r7
 800fa64:	4622      	mov	r2, r4
 800fa66:	4630      	mov	r0, r6
 800fa68:	f7ff ff1a 	bl	800f8a0 <__multiply>
 800fa6c:	4639      	mov	r1, r7
 800fa6e:	4680      	mov	r8, r0
 800fa70:	4630      	mov	r0, r6
 800fa72:	f7ff fdfd 	bl	800f670 <_Bfree>
 800fa76:	4647      	mov	r7, r8
 800fa78:	106d      	asrs	r5, r5, #1
 800fa7a:	d00b      	beq.n	800fa94 <__pow5mult+0xa0>
 800fa7c:	6820      	ldr	r0, [r4, #0]
 800fa7e:	b938      	cbnz	r0, 800fa90 <__pow5mult+0x9c>
 800fa80:	4622      	mov	r2, r4
 800fa82:	4621      	mov	r1, r4
 800fa84:	4630      	mov	r0, r6
 800fa86:	f7ff ff0b 	bl	800f8a0 <__multiply>
 800fa8a:	6020      	str	r0, [r4, #0]
 800fa8c:	f8c0 9000 	str.w	r9, [r0]
 800fa90:	4604      	mov	r4, r0
 800fa92:	e7e4      	b.n	800fa5e <__pow5mult+0x6a>
 800fa94:	4638      	mov	r0, r7
 800fa96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa9a:	bf00      	nop
 800fa9c:	080113d8 	.word	0x080113d8
 800faa0:	08011274 	.word	0x08011274
 800faa4:	0801128b 	.word	0x0801128b

0800faa8 <__lshift>:
 800faa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faac:	460c      	mov	r4, r1
 800faae:	6849      	ldr	r1, [r1, #4]
 800fab0:	6923      	ldr	r3, [r4, #16]
 800fab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fab6:	68a3      	ldr	r3, [r4, #8]
 800fab8:	4607      	mov	r7, r0
 800faba:	4691      	mov	r9, r2
 800fabc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fac0:	f108 0601 	add.w	r6, r8, #1
 800fac4:	42b3      	cmp	r3, r6
 800fac6:	db0b      	blt.n	800fae0 <__lshift+0x38>
 800fac8:	4638      	mov	r0, r7
 800faca:	f7ff fd91 	bl	800f5f0 <_Balloc>
 800face:	4605      	mov	r5, r0
 800fad0:	b948      	cbnz	r0, 800fae6 <__lshift+0x3e>
 800fad2:	4602      	mov	r2, r0
 800fad4:	4b2a      	ldr	r3, [pc, #168]	; (800fb80 <__lshift+0xd8>)
 800fad6:	482b      	ldr	r0, [pc, #172]	; (800fb84 <__lshift+0xdc>)
 800fad8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fadc:	f000 fdda 	bl	8010694 <__assert_func>
 800fae0:	3101      	adds	r1, #1
 800fae2:	005b      	lsls	r3, r3, #1
 800fae4:	e7ee      	b.n	800fac4 <__lshift+0x1c>
 800fae6:	2300      	movs	r3, #0
 800fae8:	f100 0114 	add.w	r1, r0, #20
 800faec:	f100 0210 	add.w	r2, r0, #16
 800faf0:	4618      	mov	r0, r3
 800faf2:	4553      	cmp	r3, sl
 800faf4:	db37      	blt.n	800fb66 <__lshift+0xbe>
 800faf6:	6920      	ldr	r0, [r4, #16]
 800faf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fafc:	f104 0314 	add.w	r3, r4, #20
 800fb00:	f019 091f 	ands.w	r9, r9, #31
 800fb04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fb0c:	d02f      	beq.n	800fb6e <__lshift+0xc6>
 800fb0e:	f1c9 0e20 	rsb	lr, r9, #32
 800fb12:	468a      	mov	sl, r1
 800fb14:	f04f 0c00 	mov.w	ip, #0
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	fa02 f209 	lsl.w	r2, r2, r9
 800fb1e:	ea42 020c 	orr.w	r2, r2, ip
 800fb22:	f84a 2b04 	str.w	r2, [sl], #4
 800fb26:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb2a:	4298      	cmp	r0, r3
 800fb2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fb30:	d8f2      	bhi.n	800fb18 <__lshift+0x70>
 800fb32:	1b03      	subs	r3, r0, r4
 800fb34:	3b15      	subs	r3, #21
 800fb36:	f023 0303 	bic.w	r3, r3, #3
 800fb3a:	3304      	adds	r3, #4
 800fb3c:	f104 0215 	add.w	r2, r4, #21
 800fb40:	4290      	cmp	r0, r2
 800fb42:	bf38      	it	cc
 800fb44:	2304      	movcc	r3, #4
 800fb46:	f841 c003 	str.w	ip, [r1, r3]
 800fb4a:	f1bc 0f00 	cmp.w	ip, #0
 800fb4e:	d001      	beq.n	800fb54 <__lshift+0xac>
 800fb50:	f108 0602 	add.w	r6, r8, #2
 800fb54:	3e01      	subs	r6, #1
 800fb56:	4638      	mov	r0, r7
 800fb58:	612e      	str	r6, [r5, #16]
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	f7ff fd88 	bl	800f670 <_Bfree>
 800fb60:	4628      	mov	r0, r5
 800fb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb66:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	e7c1      	b.n	800faf2 <__lshift+0x4a>
 800fb6e:	3904      	subs	r1, #4
 800fb70:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb74:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb78:	4298      	cmp	r0, r3
 800fb7a:	d8f9      	bhi.n	800fb70 <__lshift+0xc8>
 800fb7c:	e7ea      	b.n	800fb54 <__lshift+0xac>
 800fb7e:	bf00      	nop
 800fb80:	080111e9 	.word	0x080111e9
 800fb84:	0801128b 	.word	0x0801128b

0800fb88 <__mcmp>:
 800fb88:	b530      	push	{r4, r5, lr}
 800fb8a:	6902      	ldr	r2, [r0, #16]
 800fb8c:	690c      	ldr	r4, [r1, #16]
 800fb8e:	1b12      	subs	r2, r2, r4
 800fb90:	d10e      	bne.n	800fbb0 <__mcmp+0x28>
 800fb92:	f100 0314 	add.w	r3, r0, #20
 800fb96:	3114      	adds	r1, #20
 800fb98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fb9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fba0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fba4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fba8:	42a5      	cmp	r5, r4
 800fbaa:	d003      	beq.n	800fbb4 <__mcmp+0x2c>
 800fbac:	d305      	bcc.n	800fbba <__mcmp+0x32>
 800fbae:	2201      	movs	r2, #1
 800fbb0:	4610      	mov	r0, r2
 800fbb2:	bd30      	pop	{r4, r5, pc}
 800fbb4:	4283      	cmp	r3, r0
 800fbb6:	d3f3      	bcc.n	800fba0 <__mcmp+0x18>
 800fbb8:	e7fa      	b.n	800fbb0 <__mcmp+0x28>
 800fbba:	f04f 32ff 	mov.w	r2, #4294967295
 800fbbe:	e7f7      	b.n	800fbb0 <__mcmp+0x28>

0800fbc0 <__mdiff>:
 800fbc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	460c      	mov	r4, r1
 800fbc6:	4606      	mov	r6, r0
 800fbc8:	4611      	mov	r1, r2
 800fbca:	4620      	mov	r0, r4
 800fbcc:	4690      	mov	r8, r2
 800fbce:	f7ff ffdb 	bl	800fb88 <__mcmp>
 800fbd2:	1e05      	subs	r5, r0, #0
 800fbd4:	d110      	bne.n	800fbf8 <__mdiff+0x38>
 800fbd6:	4629      	mov	r1, r5
 800fbd8:	4630      	mov	r0, r6
 800fbda:	f7ff fd09 	bl	800f5f0 <_Balloc>
 800fbde:	b930      	cbnz	r0, 800fbee <__mdiff+0x2e>
 800fbe0:	4b3a      	ldr	r3, [pc, #232]	; (800fccc <__mdiff+0x10c>)
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	f240 2132 	movw	r1, #562	; 0x232
 800fbe8:	4839      	ldr	r0, [pc, #228]	; (800fcd0 <__mdiff+0x110>)
 800fbea:	f000 fd53 	bl	8010694 <__assert_func>
 800fbee:	2301      	movs	r3, #1
 800fbf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fbf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf8:	bfa4      	itt	ge
 800fbfa:	4643      	movge	r3, r8
 800fbfc:	46a0      	movge	r8, r4
 800fbfe:	4630      	mov	r0, r6
 800fc00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fc04:	bfa6      	itte	ge
 800fc06:	461c      	movge	r4, r3
 800fc08:	2500      	movge	r5, #0
 800fc0a:	2501      	movlt	r5, #1
 800fc0c:	f7ff fcf0 	bl	800f5f0 <_Balloc>
 800fc10:	b920      	cbnz	r0, 800fc1c <__mdiff+0x5c>
 800fc12:	4b2e      	ldr	r3, [pc, #184]	; (800fccc <__mdiff+0x10c>)
 800fc14:	4602      	mov	r2, r0
 800fc16:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fc1a:	e7e5      	b.n	800fbe8 <__mdiff+0x28>
 800fc1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fc20:	6926      	ldr	r6, [r4, #16]
 800fc22:	60c5      	str	r5, [r0, #12]
 800fc24:	f104 0914 	add.w	r9, r4, #20
 800fc28:	f108 0514 	add.w	r5, r8, #20
 800fc2c:	f100 0e14 	add.w	lr, r0, #20
 800fc30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fc34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fc38:	f108 0210 	add.w	r2, r8, #16
 800fc3c:	46f2      	mov	sl, lr
 800fc3e:	2100      	movs	r1, #0
 800fc40:	f859 3b04 	ldr.w	r3, [r9], #4
 800fc44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fc48:	fa1f f883 	uxth.w	r8, r3
 800fc4c:	fa11 f18b 	uxtah	r1, r1, fp
 800fc50:	0c1b      	lsrs	r3, r3, #16
 800fc52:	eba1 0808 	sub.w	r8, r1, r8
 800fc56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc5e:	fa1f f888 	uxth.w	r8, r8
 800fc62:	1419      	asrs	r1, r3, #16
 800fc64:	454e      	cmp	r6, r9
 800fc66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc6a:	f84a 3b04 	str.w	r3, [sl], #4
 800fc6e:	d8e7      	bhi.n	800fc40 <__mdiff+0x80>
 800fc70:	1b33      	subs	r3, r6, r4
 800fc72:	3b15      	subs	r3, #21
 800fc74:	f023 0303 	bic.w	r3, r3, #3
 800fc78:	3304      	adds	r3, #4
 800fc7a:	3415      	adds	r4, #21
 800fc7c:	42a6      	cmp	r6, r4
 800fc7e:	bf38      	it	cc
 800fc80:	2304      	movcc	r3, #4
 800fc82:	441d      	add	r5, r3
 800fc84:	4473      	add	r3, lr
 800fc86:	469e      	mov	lr, r3
 800fc88:	462e      	mov	r6, r5
 800fc8a:	4566      	cmp	r6, ip
 800fc8c:	d30e      	bcc.n	800fcac <__mdiff+0xec>
 800fc8e:	f10c 0203 	add.w	r2, ip, #3
 800fc92:	1b52      	subs	r2, r2, r5
 800fc94:	f022 0203 	bic.w	r2, r2, #3
 800fc98:	3d03      	subs	r5, #3
 800fc9a:	45ac      	cmp	ip, r5
 800fc9c:	bf38      	it	cc
 800fc9e:	2200      	movcc	r2, #0
 800fca0:	441a      	add	r2, r3
 800fca2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fca6:	b17b      	cbz	r3, 800fcc8 <__mdiff+0x108>
 800fca8:	6107      	str	r7, [r0, #16]
 800fcaa:	e7a3      	b.n	800fbf4 <__mdiff+0x34>
 800fcac:	f856 8b04 	ldr.w	r8, [r6], #4
 800fcb0:	fa11 f288 	uxtah	r2, r1, r8
 800fcb4:	1414      	asrs	r4, r2, #16
 800fcb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fcba:	b292      	uxth	r2, r2
 800fcbc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fcc0:	f84e 2b04 	str.w	r2, [lr], #4
 800fcc4:	1421      	asrs	r1, r4, #16
 800fcc6:	e7e0      	b.n	800fc8a <__mdiff+0xca>
 800fcc8:	3f01      	subs	r7, #1
 800fcca:	e7ea      	b.n	800fca2 <__mdiff+0xe2>
 800fccc:	080111e9 	.word	0x080111e9
 800fcd0:	0801128b 	.word	0x0801128b

0800fcd4 <__ulp>:
 800fcd4:	b082      	sub	sp, #8
 800fcd6:	ed8d 0b00 	vstr	d0, [sp]
 800fcda:	9b01      	ldr	r3, [sp, #4]
 800fcdc:	4912      	ldr	r1, [pc, #72]	; (800fd28 <__ulp+0x54>)
 800fcde:	4019      	ands	r1, r3
 800fce0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fce4:	2900      	cmp	r1, #0
 800fce6:	dd05      	ble.n	800fcf4 <__ulp+0x20>
 800fce8:	2200      	movs	r2, #0
 800fcea:	460b      	mov	r3, r1
 800fcec:	ec43 2b10 	vmov	d0, r2, r3
 800fcf0:	b002      	add	sp, #8
 800fcf2:	4770      	bx	lr
 800fcf4:	4249      	negs	r1, r1
 800fcf6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fcfa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fcfe:	f04f 0200 	mov.w	r2, #0
 800fd02:	f04f 0300 	mov.w	r3, #0
 800fd06:	da04      	bge.n	800fd12 <__ulp+0x3e>
 800fd08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fd0c:	fa41 f300 	asr.w	r3, r1, r0
 800fd10:	e7ec      	b.n	800fcec <__ulp+0x18>
 800fd12:	f1a0 0114 	sub.w	r1, r0, #20
 800fd16:	291e      	cmp	r1, #30
 800fd18:	bfda      	itte	le
 800fd1a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fd1e:	fa20 f101 	lsrle.w	r1, r0, r1
 800fd22:	2101      	movgt	r1, #1
 800fd24:	460a      	mov	r2, r1
 800fd26:	e7e1      	b.n	800fcec <__ulp+0x18>
 800fd28:	7ff00000 	.word	0x7ff00000

0800fd2c <__b2d>:
 800fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2e:	6905      	ldr	r5, [r0, #16]
 800fd30:	f100 0714 	add.w	r7, r0, #20
 800fd34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fd38:	1f2e      	subs	r6, r5, #4
 800fd3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fd3e:	4620      	mov	r0, r4
 800fd40:	f7ff fd48 	bl	800f7d4 <__hi0bits>
 800fd44:	f1c0 0320 	rsb	r3, r0, #32
 800fd48:	280a      	cmp	r0, #10
 800fd4a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fdc8 <__b2d+0x9c>
 800fd4e:	600b      	str	r3, [r1, #0]
 800fd50:	dc14      	bgt.n	800fd7c <__b2d+0x50>
 800fd52:	f1c0 0e0b 	rsb	lr, r0, #11
 800fd56:	fa24 f10e 	lsr.w	r1, r4, lr
 800fd5a:	42b7      	cmp	r7, r6
 800fd5c:	ea41 030c 	orr.w	r3, r1, ip
 800fd60:	bf34      	ite	cc
 800fd62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd66:	2100      	movcs	r1, #0
 800fd68:	3015      	adds	r0, #21
 800fd6a:	fa04 f000 	lsl.w	r0, r4, r0
 800fd6e:	fa21 f10e 	lsr.w	r1, r1, lr
 800fd72:	ea40 0201 	orr.w	r2, r0, r1
 800fd76:	ec43 2b10 	vmov	d0, r2, r3
 800fd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd7c:	42b7      	cmp	r7, r6
 800fd7e:	bf3a      	itte	cc
 800fd80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd84:	f1a5 0608 	subcc.w	r6, r5, #8
 800fd88:	2100      	movcs	r1, #0
 800fd8a:	380b      	subs	r0, #11
 800fd8c:	d017      	beq.n	800fdbe <__b2d+0x92>
 800fd8e:	f1c0 0c20 	rsb	ip, r0, #32
 800fd92:	fa04 f500 	lsl.w	r5, r4, r0
 800fd96:	42be      	cmp	r6, r7
 800fd98:	fa21 f40c 	lsr.w	r4, r1, ip
 800fd9c:	ea45 0504 	orr.w	r5, r5, r4
 800fda0:	bf8c      	ite	hi
 800fda2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fda6:	2400      	movls	r4, #0
 800fda8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fdac:	fa01 f000 	lsl.w	r0, r1, r0
 800fdb0:	fa24 f40c 	lsr.w	r4, r4, ip
 800fdb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fdb8:	ea40 0204 	orr.w	r2, r0, r4
 800fdbc:	e7db      	b.n	800fd76 <__b2d+0x4a>
 800fdbe:	ea44 030c 	orr.w	r3, r4, ip
 800fdc2:	460a      	mov	r2, r1
 800fdc4:	e7d7      	b.n	800fd76 <__b2d+0x4a>
 800fdc6:	bf00      	nop
 800fdc8:	3ff00000 	.word	0x3ff00000

0800fdcc <__d2b>:
 800fdcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fdd0:	4689      	mov	r9, r1
 800fdd2:	2101      	movs	r1, #1
 800fdd4:	ec57 6b10 	vmov	r6, r7, d0
 800fdd8:	4690      	mov	r8, r2
 800fdda:	f7ff fc09 	bl	800f5f0 <_Balloc>
 800fdde:	4604      	mov	r4, r0
 800fde0:	b930      	cbnz	r0, 800fdf0 <__d2b+0x24>
 800fde2:	4602      	mov	r2, r0
 800fde4:	4b25      	ldr	r3, [pc, #148]	; (800fe7c <__d2b+0xb0>)
 800fde6:	4826      	ldr	r0, [pc, #152]	; (800fe80 <__d2b+0xb4>)
 800fde8:	f240 310a 	movw	r1, #778	; 0x30a
 800fdec:	f000 fc52 	bl	8010694 <__assert_func>
 800fdf0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fdf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fdf8:	bb35      	cbnz	r5, 800fe48 <__d2b+0x7c>
 800fdfa:	2e00      	cmp	r6, #0
 800fdfc:	9301      	str	r3, [sp, #4]
 800fdfe:	d028      	beq.n	800fe52 <__d2b+0x86>
 800fe00:	4668      	mov	r0, sp
 800fe02:	9600      	str	r6, [sp, #0]
 800fe04:	f7ff fd06 	bl	800f814 <__lo0bits>
 800fe08:	9900      	ldr	r1, [sp, #0]
 800fe0a:	b300      	cbz	r0, 800fe4e <__d2b+0x82>
 800fe0c:	9a01      	ldr	r2, [sp, #4]
 800fe0e:	f1c0 0320 	rsb	r3, r0, #32
 800fe12:	fa02 f303 	lsl.w	r3, r2, r3
 800fe16:	430b      	orrs	r3, r1
 800fe18:	40c2      	lsrs	r2, r0
 800fe1a:	6163      	str	r3, [r4, #20]
 800fe1c:	9201      	str	r2, [sp, #4]
 800fe1e:	9b01      	ldr	r3, [sp, #4]
 800fe20:	61a3      	str	r3, [r4, #24]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	bf14      	ite	ne
 800fe26:	2202      	movne	r2, #2
 800fe28:	2201      	moveq	r2, #1
 800fe2a:	6122      	str	r2, [r4, #16]
 800fe2c:	b1d5      	cbz	r5, 800fe64 <__d2b+0x98>
 800fe2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe32:	4405      	add	r5, r0
 800fe34:	f8c9 5000 	str.w	r5, [r9]
 800fe38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe3c:	f8c8 0000 	str.w	r0, [r8]
 800fe40:	4620      	mov	r0, r4
 800fe42:	b003      	add	sp, #12
 800fe44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe4c:	e7d5      	b.n	800fdfa <__d2b+0x2e>
 800fe4e:	6161      	str	r1, [r4, #20]
 800fe50:	e7e5      	b.n	800fe1e <__d2b+0x52>
 800fe52:	a801      	add	r0, sp, #4
 800fe54:	f7ff fcde 	bl	800f814 <__lo0bits>
 800fe58:	9b01      	ldr	r3, [sp, #4]
 800fe5a:	6163      	str	r3, [r4, #20]
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	6122      	str	r2, [r4, #16]
 800fe60:	3020      	adds	r0, #32
 800fe62:	e7e3      	b.n	800fe2c <__d2b+0x60>
 800fe64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe6c:	f8c9 0000 	str.w	r0, [r9]
 800fe70:	6918      	ldr	r0, [r3, #16]
 800fe72:	f7ff fcaf 	bl	800f7d4 <__hi0bits>
 800fe76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe7a:	e7df      	b.n	800fe3c <__d2b+0x70>
 800fe7c:	080111e9 	.word	0x080111e9
 800fe80:	0801128b 	.word	0x0801128b

0800fe84 <__ratio>:
 800fe84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe88:	4688      	mov	r8, r1
 800fe8a:	4669      	mov	r1, sp
 800fe8c:	4681      	mov	r9, r0
 800fe8e:	f7ff ff4d 	bl	800fd2c <__b2d>
 800fe92:	a901      	add	r1, sp, #4
 800fe94:	4640      	mov	r0, r8
 800fe96:	ec55 4b10 	vmov	r4, r5, d0
 800fe9a:	f7ff ff47 	bl	800fd2c <__b2d>
 800fe9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fea2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fea6:	eba3 0c02 	sub.w	ip, r3, r2
 800feaa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800feae:	1a9b      	subs	r3, r3, r2
 800feb0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800feb4:	ec51 0b10 	vmov	r0, r1, d0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	bfd6      	itet	le
 800febc:	460a      	movle	r2, r1
 800febe:	462a      	movgt	r2, r5
 800fec0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fec4:	468b      	mov	fp, r1
 800fec6:	462f      	mov	r7, r5
 800fec8:	bfd4      	ite	le
 800feca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fece:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fed2:	4620      	mov	r0, r4
 800fed4:	ee10 2a10 	vmov	r2, s0
 800fed8:	465b      	mov	r3, fp
 800feda:	4639      	mov	r1, r7
 800fedc:	f7f0 fcd6 	bl	800088c <__aeabi_ddiv>
 800fee0:	ec41 0b10 	vmov	d0, r0, r1
 800fee4:	b003      	add	sp, #12
 800fee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800feea <__copybits>:
 800feea:	3901      	subs	r1, #1
 800feec:	b570      	push	{r4, r5, r6, lr}
 800feee:	1149      	asrs	r1, r1, #5
 800fef0:	6914      	ldr	r4, [r2, #16]
 800fef2:	3101      	adds	r1, #1
 800fef4:	f102 0314 	add.w	r3, r2, #20
 800fef8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fefc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ff00:	1f05      	subs	r5, r0, #4
 800ff02:	42a3      	cmp	r3, r4
 800ff04:	d30c      	bcc.n	800ff20 <__copybits+0x36>
 800ff06:	1aa3      	subs	r3, r4, r2
 800ff08:	3b11      	subs	r3, #17
 800ff0a:	f023 0303 	bic.w	r3, r3, #3
 800ff0e:	3211      	adds	r2, #17
 800ff10:	42a2      	cmp	r2, r4
 800ff12:	bf88      	it	hi
 800ff14:	2300      	movhi	r3, #0
 800ff16:	4418      	add	r0, r3
 800ff18:	2300      	movs	r3, #0
 800ff1a:	4288      	cmp	r0, r1
 800ff1c:	d305      	bcc.n	800ff2a <__copybits+0x40>
 800ff1e:	bd70      	pop	{r4, r5, r6, pc}
 800ff20:	f853 6b04 	ldr.w	r6, [r3], #4
 800ff24:	f845 6f04 	str.w	r6, [r5, #4]!
 800ff28:	e7eb      	b.n	800ff02 <__copybits+0x18>
 800ff2a:	f840 3b04 	str.w	r3, [r0], #4
 800ff2e:	e7f4      	b.n	800ff1a <__copybits+0x30>

0800ff30 <__any_on>:
 800ff30:	f100 0214 	add.w	r2, r0, #20
 800ff34:	6900      	ldr	r0, [r0, #16]
 800ff36:	114b      	asrs	r3, r1, #5
 800ff38:	4298      	cmp	r0, r3
 800ff3a:	b510      	push	{r4, lr}
 800ff3c:	db11      	blt.n	800ff62 <__any_on+0x32>
 800ff3e:	dd0a      	ble.n	800ff56 <__any_on+0x26>
 800ff40:	f011 011f 	ands.w	r1, r1, #31
 800ff44:	d007      	beq.n	800ff56 <__any_on+0x26>
 800ff46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ff4a:	fa24 f001 	lsr.w	r0, r4, r1
 800ff4e:	fa00 f101 	lsl.w	r1, r0, r1
 800ff52:	428c      	cmp	r4, r1
 800ff54:	d10b      	bne.n	800ff6e <__any_on+0x3e>
 800ff56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d803      	bhi.n	800ff66 <__any_on+0x36>
 800ff5e:	2000      	movs	r0, #0
 800ff60:	bd10      	pop	{r4, pc}
 800ff62:	4603      	mov	r3, r0
 800ff64:	e7f7      	b.n	800ff56 <__any_on+0x26>
 800ff66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff6a:	2900      	cmp	r1, #0
 800ff6c:	d0f5      	beq.n	800ff5a <__any_on+0x2a>
 800ff6e:	2001      	movs	r0, #1
 800ff70:	e7f6      	b.n	800ff60 <__any_on+0x30>

0800ff72 <_calloc_r>:
 800ff72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff74:	fba1 2402 	umull	r2, r4, r1, r2
 800ff78:	b94c      	cbnz	r4, 800ff8e <_calloc_r+0x1c>
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	9201      	str	r2, [sp, #4]
 800ff7e:	f7fd fc9d 	bl	800d8bc <_malloc_r>
 800ff82:	9a01      	ldr	r2, [sp, #4]
 800ff84:	4605      	mov	r5, r0
 800ff86:	b930      	cbnz	r0, 800ff96 <_calloc_r+0x24>
 800ff88:	4628      	mov	r0, r5
 800ff8a:	b003      	add	sp, #12
 800ff8c:	bd30      	pop	{r4, r5, pc}
 800ff8e:	220c      	movs	r2, #12
 800ff90:	6002      	str	r2, [r0, #0]
 800ff92:	2500      	movs	r5, #0
 800ff94:	e7f8      	b.n	800ff88 <_calloc_r+0x16>
 800ff96:	4621      	mov	r1, r4
 800ff98:	f7fd fc67 	bl	800d86a <memset>
 800ff9c:	e7f4      	b.n	800ff88 <_calloc_r+0x16>
	...

0800ffa0 <_free_r>:
 800ffa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffa2:	2900      	cmp	r1, #0
 800ffa4:	d044      	beq.n	8010030 <_free_r+0x90>
 800ffa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffaa:	9001      	str	r0, [sp, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f1a1 0404 	sub.w	r4, r1, #4
 800ffb2:	bfb8      	it	lt
 800ffb4:	18e4      	addlt	r4, r4, r3
 800ffb6:	f7ff fb0f 	bl	800f5d8 <__malloc_lock>
 800ffba:	4a1e      	ldr	r2, [pc, #120]	; (8010034 <_free_r+0x94>)
 800ffbc:	9801      	ldr	r0, [sp, #4]
 800ffbe:	6813      	ldr	r3, [r2, #0]
 800ffc0:	b933      	cbnz	r3, 800ffd0 <_free_r+0x30>
 800ffc2:	6063      	str	r3, [r4, #4]
 800ffc4:	6014      	str	r4, [r2, #0]
 800ffc6:	b003      	add	sp, #12
 800ffc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffcc:	f7ff bb0a 	b.w	800f5e4 <__malloc_unlock>
 800ffd0:	42a3      	cmp	r3, r4
 800ffd2:	d908      	bls.n	800ffe6 <_free_r+0x46>
 800ffd4:	6825      	ldr	r5, [r4, #0]
 800ffd6:	1961      	adds	r1, r4, r5
 800ffd8:	428b      	cmp	r3, r1
 800ffda:	bf01      	itttt	eq
 800ffdc:	6819      	ldreq	r1, [r3, #0]
 800ffde:	685b      	ldreq	r3, [r3, #4]
 800ffe0:	1949      	addeq	r1, r1, r5
 800ffe2:	6021      	streq	r1, [r4, #0]
 800ffe4:	e7ed      	b.n	800ffc2 <_free_r+0x22>
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	b10b      	cbz	r3, 800fff0 <_free_r+0x50>
 800ffec:	42a3      	cmp	r3, r4
 800ffee:	d9fa      	bls.n	800ffe6 <_free_r+0x46>
 800fff0:	6811      	ldr	r1, [r2, #0]
 800fff2:	1855      	adds	r5, r2, r1
 800fff4:	42a5      	cmp	r5, r4
 800fff6:	d10b      	bne.n	8010010 <_free_r+0x70>
 800fff8:	6824      	ldr	r4, [r4, #0]
 800fffa:	4421      	add	r1, r4
 800fffc:	1854      	adds	r4, r2, r1
 800fffe:	42a3      	cmp	r3, r4
 8010000:	6011      	str	r1, [r2, #0]
 8010002:	d1e0      	bne.n	800ffc6 <_free_r+0x26>
 8010004:	681c      	ldr	r4, [r3, #0]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	6053      	str	r3, [r2, #4]
 801000a:	4421      	add	r1, r4
 801000c:	6011      	str	r1, [r2, #0]
 801000e:	e7da      	b.n	800ffc6 <_free_r+0x26>
 8010010:	d902      	bls.n	8010018 <_free_r+0x78>
 8010012:	230c      	movs	r3, #12
 8010014:	6003      	str	r3, [r0, #0]
 8010016:	e7d6      	b.n	800ffc6 <_free_r+0x26>
 8010018:	6825      	ldr	r5, [r4, #0]
 801001a:	1961      	adds	r1, r4, r5
 801001c:	428b      	cmp	r3, r1
 801001e:	bf04      	itt	eq
 8010020:	6819      	ldreq	r1, [r3, #0]
 8010022:	685b      	ldreq	r3, [r3, #4]
 8010024:	6063      	str	r3, [r4, #4]
 8010026:	bf04      	itt	eq
 8010028:	1949      	addeq	r1, r1, r5
 801002a:	6021      	streq	r1, [r4, #0]
 801002c:	6054      	str	r4, [r2, #4]
 801002e:	e7ca      	b.n	800ffc6 <_free_r+0x26>
 8010030:	b003      	add	sp, #12
 8010032:	bd30      	pop	{r4, r5, pc}
 8010034:	2000812c 	.word	0x2000812c

08010038 <__ssputs_r>:
 8010038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801003c:	688e      	ldr	r6, [r1, #8]
 801003e:	429e      	cmp	r6, r3
 8010040:	4682      	mov	sl, r0
 8010042:	460c      	mov	r4, r1
 8010044:	4690      	mov	r8, r2
 8010046:	461f      	mov	r7, r3
 8010048:	d838      	bhi.n	80100bc <__ssputs_r+0x84>
 801004a:	898a      	ldrh	r2, [r1, #12]
 801004c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010050:	d032      	beq.n	80100b8 <__ssputs_r+0x80>
 8010052:	6825      	ldr	r5, [r4, #0]
 8010054:	6909      	ldr	r1, [r1, #16]
 8010056:	eba5 0901 	sub.w	r9, r5, r1
 801005a:	6965      	ldr	r5, [r4, #20]
 801005c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010060:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010064:	3301      	adds	r3, #1
 8010066:	444b      	add	r3, r9
 8010068:	106d      	asrs	r5, r5, #1
 801006a:	429d      	cmp	r5, r3
 801006c:	bf38      	it	cc
 801006e:	461d      	movcc	r5, r3
 8010070:	0553      	lsls	r3, r2, #21
 8010072:	d531      	bpl.n	80100d8 <__ssputs_r+0xa0>
 8010074:	4629      	mov	r1, r5
 8010076:	f7fd fc21 	bl	800d8bc <_malloc_r>
 801007a:	4606      	mov	r6, r0
 801007c:	b950      	cbnz	r0, 8010094 <__ssputs_r+0x5c>
 801007e:	230c      	movs	r3, #12
 8010080:	f8ca 3000 	str.w	r3, [sl]
 8010084:	89a3      	ldrh	r3, [r4, #12]
 8010086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801008a:	81a3      	strh	r3, [r4, #12]
 801008c:	f04f 30ff 	mov.w	r0, #4294967295
 8010090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010094:	6921      	ldr	r1, [r4, #16]
 8010096:	464a      	mov	r2, r9
 8010098:	f7fd fbd9 	bl	800d84e <memcpy>
 801009c:	89a3      	ldrh	r3, [r4, #12]
 801009e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100a6:	81a3      	strh	r3, [r4, #12]
 80100a8:	6126      	str	r6, [r4, #16]
 80100aa:	6165      	str	r5, [r4, #20]
 80100ac:	444e      	add	r6, r9
 80100ae:	eba5 0509 	sub.w	r5, r5, r9
 80100b2:	6026      	str	r6, [r4, #0]
 80100b4:	60a5      	str	r5, [r4, #8]
 80100b6:	463e      	mov	r6, r7
 80100b8:	42be      	cmp	r6, r7
 80100ba:	d900      	bls.n	80100be <__ssputs_r+0x86>
 80100bc:	463e      	mov	r6, r7
 80100be:	6820      	ldr	r0, [r4, #0]
 80100c0:	4632      	mov	r2, r6
 80100c2:	4641      	mov	r1, r8
 80100c4:	f000 fb1e 	bl	8010704 <memmove>
 80100c8:	68a3      	ldr	r3, [r4, #8]
 80100ca:	1b9b      	subs	r3, r3, r6
 80100cc:	60a3      	str	r3, [r4, #8]
 80100ce:	6823      	ldr	r3, [r4, #0]
 80100d0:	4433      	add	r3, r6
 80100d2:	6023      	str	r3, [r4, #0]
 80100d4:	2000      	movs	r0, #0
 80100d6:	e7db      	b.n	8010090 <__ssputs_r+0x58>
 80100d8:	462a      	mov	r2, r5
 80100da:	f000 fb2d 	bl	8010738 <_realloc_r>
 80100de:	4606      	mov	r6, r0
 80100e0:	2800      	cmp	r0, #0
 80100e2:	d1e1      	bne.n	80100a8 <__ssputs_r+0x70>
 80100e4:	6921      	ldr	r1, [r4, #16]
 80100e6:	4650      	mov	r0, sl
 80100e8:	f7ff ff5a 	bl	800ffa0 <_free_r>
 80100ec:	e7c7      	b.n	801007e <__ssputs_r+0x46>
	...

080100f0 <_svfiprintf_r>:
 80100f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f4:	4698      	mov	r8, r3
 80100f6:	898b      	ldrh	r3, [r1, #12]
 80100f8:	061b      	lsls	r3, r3, #24
 80100fa:	b09d      	sub	sp, #116	; 0x74
 80100fc:	4607      	mov	r7, r0
 80100fe:	460d      	mov	r5, r1
 8010100:	4614      	mov	r4, r2
 8010102:	d50e      	bpl.n	8010122 <_svfiprintf_r+0x32>
 8010104:	690b      	ldr	r3, [r1, #16]
 8010106:	b963      	cbnz	r3, 8010122 <_svfiprintf_r+0x32>
 8010108:	2140      	movs	r1, #64	; 0x40
 801010a:	f7fd fbd7 	bl	800d8bc <_malloc_r>
 801010e:	6028      	str	r0, [r5, #0]
 8010110:	6128      	str	r0, [r5, #16]
 8010112:	b920      	cbnz	r0, 801011e <_svfiprintf_r+0x2e>
 8010114:	230c      	movs	r3, #12
 8010116:	603b      	str	r3, [r7, #0]
 8010118:	f04f 30ff 	mov.w	r0, #4294967295
 801011c:	e0d1      	b.n	80102c2 <_svfiprintf_r+0x1d2>
 801011e:	2340      	movs	r3, #64	; 0x40
 8010120:	616b      	str	r3, [r5, #20]
 8010122:	2300      	movs	r3, #0
 8010124:	9309      	str	r3, [sp, #36]	; 0x24
 8010126:	2320      	movs	r3, #32
 8010128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801012c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010130:	2330      	movs	r3, #48	; 0x30
 8010132:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102dc <_svfiprintf_r+0x1ec>
 8010136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801013a:	f04f 0901 	mov.w	r9, #1
 801013e:	4623      	mov	r3, r4
 8010140:	469a      	mov	sl, r3
 8010142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010146:	b10a      	cbz	r2, 801014c <_svfiprintf_r+0x5c>
 8010148:	2a25      	cmp	r2, #37	; 0x25
 801014a:	d1f9      	bne.n	8010140 <_svfiprintf_r+0x50>
 801014c:	ebba 0b04 	subs.w	fp, sl, r4
 8010150:	d00b      	beq.n	801016a <_svfiprintf_r+0x7a>
 8010152:	465b      	mov	r3, fp
 8010154:	4622      	mov	r2, r4
 8010156:	4629      	mov	r1, r5
 8010158:	4638      	mov	r0, r7
 801015a:	f7ff ff6d 	bl	8010038 <__ssputs_r>
 801015e:	3001      	adds	r0, #1
 8010160:	f000 80aa 	beq.w	80102b8 <_svfiprintf_r+0x1c8>
 8010164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010166:	445a      	add	r2, fp
 8010168:	9209      	str	r2, [sp, #36]	; 0x24
 801016a:	f89a 3000 	ldrb.w	r3, [sl]
 801016e:	2b00      	cmp	r3, #0
 8010170:	f000 80a2 	beq.w	80102b8 <_svfiprintf_r+0x1c8>
 8010174:	2300      	movs	r3, #0
 8010176:	f04f 32ff 	mov.w	r2, #4294967295
 801017a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801017e:	f10a 0a01 	add.w	sl, sl, #1
 8010182:	9304      	str	r3, [sp, #16]
 8010184:	9307      	str	r3, [sp, #28]
 8010186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801018a:	931a      	str	r3, [sp, #104]	; 0x68
 801018c:	4654      	mov	r4, sl
 801018e:	2205      	movs	r2, #5
 8010190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010194:	4851      	ldr	r0, [pc, #324]	; (80102dc <_svfiprintf_r+0x1ec>)
 8010196:	f7f0 f843 	bl	8000220 <memchr>
 801019a:	9a04      	ldr	r2, [sp, #16]
 801019c:	b9d8      	cbnz	r0, 80101d6 <_svfiprintf_r+0xe6>
 801019e:	06d0      	lsls	r0, r2, #27
 80101a0:	bf44      	itt	mi
 80101a2:	2320      	movmi	r3, #32
 80101a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101a8:	0711      	lsls	r1, r2, #28
 80101aa:	bf44      	itt	mi
 80101ac:	232b      	movmi	r3, #43	; 0x2b
 80101ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101b2:	f89a 3000 	ldrb.w	r3, [sl]
 80101b6:	2b2a      	cmp	r3, #42	; 0x2a
 80101b8:	d015      	beq.n	80101e6 <_svfiprintf_r+0xf6>
 80101ba:	9a07      	ldr	r2, [sp, #28]
 80101bc:	4654      	mov	r4, sl
 80101be:	2000      	movs	r0, #0
 80101c0:	f04f 0c0a 	mov.w	ip, #10
 80101c4:	4621      	mov	r1, r4
 80101c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101ca:	3b30      	subs	r3, #48	; 0x30
 80101cc:	2b09      	cmp	r3, #9
 80101ce:	d94e      	bls.n	801026e <_svfiprintf_r+0x17e>
 80101d0:	b1b0      	cbz	r0, 8010200 <_svfiprintf_r+0x110>
 80101d2:	9207      	str	r2, [sp, #28]
 80101d4:	e014      	b.n	8010200 <_svfiprintf_r+0x110>
 80101d6:	eba0 0308 	sub.w	r3, r0, r8
 80101da:	fa09 f303 	lsl.w	r3, r9, r3
 80101de:	4313      	orrs	r3, r2
 80101e0:	9304      	str	r3, [sp, #16]
 80101e2:	46a2      	mov	sl, r4
 80101e4:	e7d2      	b.n	801018c <_svfiprintf_r+0x9c>
 80101e6:	9b03      	ldr	r3, [sp, #12]
 80101e8:	1d19      	adds	r1, r3, #4
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	9103      	str	r1, [sp, #12]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	bfbb      	ittet	lt
 80101f2:	425b      	neglt	r3, r3
 80101f4:	f042 0202 	orrlt.w	r2, r2, #2
 80101f8:	9307      	strge	r3, [sp, #28]
 80101fa:	9307      	strlt	r3, [sp, #28]
 80101fc:	bfb8      	it	lt
 80101fe:	9204      	strlt	r2, [sp, #16]
 8010200:	7823      	ldrb	r3, [r4, #0]
 8010202:	2b2e      	cmp	r3, #46	; 0x2e
 8010204:	d10c      	bne.n	8010220 <_svfiprintf_r+0x130>
 8010206:	7863      	ldrb	r3, [r4, #1]
 8010208:	2b2a      	cmp	r3, #42	; 0x2a
 801020a:	d135      	bne.n	8010278 <_svfiprintf_r+0x188>
 801020c:	9b03      	ldr	r3, [sp, #12]
 801020e:	1d1a      	adds	r2, r3, #4
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	9203      	str	r2, [sp, #12]
 8010214:	2b00      	cmp	r3, #0
 8010216:	bfb8      	it	lt
 8010218:	f04f 33ff 	movlt.w	r3, #4294967295
 801021c:	3402      	adds	r4, #2
 801021e:	9305      	str	r3, [sp, #20]
 8010220:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80102ec <_svfiprintf_r+0x1fc>
 8010224:	7821      	ldrb	r1, [r4, #0]
 8010226:	2203      	movs	r2, #3
 8010228:	4650      	mov	r0, sl
 801022a:	f7ef fff9 	bl	8000220 <memchr>
 801022e:	b140      	cbz	r0, 8010242 <_svfiprintf_r+0x152>
 8010230:	2340      	movs	r3, #64	; 0x40
 8010232:	eba0 000a 	sub.w	r0, r0, sl
 8010236:	fa03 f000 	lsl.w	r0, r3, r0
 801023a:	9b04      	ldr	r3, [sp, #16]
 801023c:	4303      	orrs	r3, r0
 801023e:	3401      	adds	r4, #1
 8010240:	9304      	str	r3, [sp, #16]
 8010242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010246:	4826      	ldr	r0, [pc, #152]	; (80102e0 <_svfiprintf_r+0x1f0>)
 8010248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801024c:	2206      	movs	r2, #6
 801024e:	f7ef ffe7 	bl	8000220 <memchr>
 8010252:	2800      	cmp	r0, #0
 8010254:	d038      	beq.n	80102c8 <_svfiprintf_r+0x1d8>
 8010256:	4b23      	ldr	r3, [pc, #140]	; (80102e4 <_svfiprintf_r+0x1f4>)
 8010258:	bb1b      	cbnz	r3, 80102a2 <_svfiprintf_r+0x1b2>
 801025a:	9b03      	ldr	r3, [sp, #12]
 801025c:	3307      	adds	r3, #7
 801025e:	f023 0307 	bic.w	r3, r3, #7
 8010262:	3308      	adds	r3, #8
 8010264:	9303      	str	r3, [sp, #12]
 8010266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010268:	4433      	add	r3, r6
 801026a:	9309      	str	r3, [sp, #36]	; 0x24
 801026c:	e767      	b.n	801013e <_svfiprintf_r+0x4e>
 801026e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010272:	460c      	mov	r4, r1
 8010274:	2001      	movs	r0, #1
 8010276:	e7a5      	b.n	80101c4 <_svfiprintf_r+0xd4>
 8010278:	2300      	movs	r3, #0
 801027a:	3401      	adds	r4, #1
 801027c:	9305      	str	r3, [sp, #20]
 801027e:	4619      	mov	r1, r3
 8010280:	f04f 0c0a 	mov.w	ip, #10
 8010284:	4620      	mov	r0, r4
 8010286:	f810 2b01 	ldrb.w	r2, [r0], #1
 801028a:	3a30      	subs	r2, #48	; 0x30
 801028c:	2a09      	cmp	r2, #9
 801028e:	d903      	bls.n	8010298 <_svfiprintf_r+0x1a8>
 8010290:	2b00      	cmp	r3, #0
 8010292:	d0c5      	beq.n	8010220 <_svfiprintf_r+0x130>
 8010294:	9105      	str	r1, [sp, #20]
 8010296:	e7c3      	b.n	8010220 <_svfiprintf_r+0x130>
 8010298:	fb0c 2101 	mla	r1, ip, r1, r2
 801029c:	4604      	mov	r4, r0
 801029e:	2301      	movs	r3, #1
 80102a0:	e7f0      	b.n	8010284 <_svfiprintf_r+0x194>
 80102a2:	ab03      	add	r3, sp, #12
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	462a      	mov	r2, r5
 80102a8:	4b0f      	ldr	r3, [pc, #60]	; (80102e8 <_svfiprintf_r+0x1f8>)
 80102aa:	a904      	add	r1, sp, #16
 80102ac:	4638      	mov	r0, r7
 80102ae:	f3af 8000 	nop.w
 80102b2:	1c42      	adds	r2, r0, #1
 80102b4:	4606      	mov	r6, r0
 80102b6:	d1d6      	bne.n	8010266 <_svfiprintf_r+0x176>
 80102b8:	89ab      	ldrh	r3, [r5, #12]
 80102ba:	065b      	lsls	r3, r3, #25
 80102bc:	f53f af2c 	bmi.w	8010118 <_svfiprintf_r+0x28>
 80102c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102c2:	b01d      	add	sp, #116	; 0x74
 80102c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c8:	ab03      	add	r3, sp, #12
 80102ca:	9300      	str	r3, [sp, #0]
 80102cc:	462a      	mov	r2, r5
 80102ce:	4b06      	ldr	r3, [pc, #24]	; (80102e8 <_svfiprintf_r+0x1f8>)
 80102d0:	a904      	add	r1, sp, #16
 80102d2:	4638      	mov	r0, r7
 80102d4:	f000 f87a 	bl	80103cc <_printf_i>
 80102d8:	e7eb      	b.n	80102b2 <_svfiprintf_r+0x1c2>
 80102da:	bf00      	nop
 80102dc:	080113e4 	.word	0x080113e4
 80102e0:	080113ee 	.word	0x080113ee
 80102e4:	00000000 	.word	0x00000000
 80102e8:	08010039 	.word	0x08010039
 80102ec:	080113ea 	.word	0x080113ea

080102f0 <_printf_common>:
 80102f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102f4:	4616      	mov	r6, r2
 80102f6:	4699      	mov	r9, r3
 80102f8:	688a      	ldr	r2, [r1, #8]
 80102fa:	690b      	ldr	r3, [r1, #16]
 80102fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010300:	4293      	cmp	r3, r2
 8010302:	bfb8      	it	lt
 8010304:	4613      	movlt	r3, r2
 8010306:	6033      	str	r3, [r6, #0]
 8010308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801030c:	4607      	mov	r7, r0
 801030e:	460c      	mov	r4, r1
 8010310:	b10a      	cbz	r2, 8010316 <_printf_common+0x26>
 8010312:	3301      	adds	r3, #1
 8010314:	6033      	str	r3, [r6, #0]
 8010316:	6823      	ldr	r3, [r4, #0]
 8010318:	0699      	lsls	r1, r3, #26
 801031a:	bf42      	ittt	mi
 801031c:	6833      	ldrmi	r3, [r6, #0]
 801031e:	3302      	addmi	r3, #2
 8010320:	6033      	strmi	r3, [r6, #0]
 8010322:	6825      	ldr	r5, [r4, #0]
 8010324:	f015 0506 	ands.w	r5, r5, #6
 8010328:	d106      	bne.n	8010338 <_printf_common+0x48>
 801032a:	f104 0a19 	add.w	sl, r4, #25
 801032e:	68e3      	ldr	r3, [r4, #12]
 8010330:	6832      	ldr	r2, [r6, #0]
 8010332:	1a9b      	subs	r3, r3, r2
 8010334:	42ab      	cmp	r3, r5
 8010336:	dc26      	bgt.n	8010386 <_printf_common+0x96>
 8010338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801033c:	1e13      	subs	r3, r2, #0
 801033e:	6822      	ldr	r2, [r4, #0]
 8010340:	bf18      	it	ne
 8010342:	2301      	movne	r3, #1
 8010344:	0692      	lsls	r2, r2, #26
 8010346:	d42b      	bmi.n	80103a0 <_printf_common+0xb0>
 8010348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801034c:	4649      	mov	r1, r9
 801034e:	4638      	mov	r0, r7
 8010350:	47c0      	blx	r8
 8010352:	3001      	adds	r0, #1
 8010354:	d01e      	beq.n	8010394 <_printf_common+0xa4>
 8010356:	6823      	ldr	r3, [r4, #0]
 8010358:	68e5      	ldr	r5, [r4, #12]
 801035a:	6832      	ldr	r2, [r6, #0]
 801035c:	f003 0306 	and.w	r3, r3, #6
 8010360:	2b04      	cmp	r3, #4
 8010362:	bf08      	it	eq
 8010364:	1aad      	subeq	r5, r5, r2
 8010366:	68a3      	ldr	r3, [r4, #8]
 8010368:	6922      	ldr	r2, [r4, #16]
 801036a:	bf0c      	ite	eq
 801036c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010370:	2500      	movne	r5, #0
 8010372:	4293      	cmp	r3, r2
 8010374:	bfc4      	itt	gt
 8010376:	1a9b      	subgt	r3, r3, r2
 8010378:	18ed      	addgt	r5, r5, r3
 801037a:	2600      	movs	r6, #0
 801037c:	341a      	adds	r4, #26
 801037e:	42b5      	cmp	r5, r6
 8010380:	d11a      	bne.n	80103b8 <_printf_common+0xc8>
 8010382:	2000      	movs	r0, #0
 8010384:	e008      	b.n	8010398 <_printf_common+0xa8>
 8010386:	2301      	movs	r3, #1
 8010388:	4652      	mov	r2, sl
 801038a:	4649      	mov	r1, r9
 801038c:	4638      	mov	r0, r7
 801038e:	47c0      	blx	r8
 8010390:	3001      	adds	r0, #1
 8010392:	d103      	bne.n	801039c <_printf_common+0xac>
 8010394:	f04f 30ff 	mov.w	r0, #4294967295
 8010398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801039c:	3501      	adds	r5, #1
 801039e:	e7c6      	b.n	801032e <_printf_common+0x3e>
 80103a0:	18e1      	adds	r1, r4, r3
 80103a2:	1c5a      	adds	r2, r3, #1
 80103a4:	2030      	movs	r0, #48	; 0x30
 80103a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103aa:	4422      	add	r2, r4
 80103ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80103b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80103b4:	3302      	adds	r3, #2
 80103b6:	e7c7      	b.n	8010348 <_printf_common+0x58>
 80103b8:	2301      	movs	r3, #1
 80103ba:	4622      	mov	r2, r4
 80103bc:	4649      	mov	r1, r9
 80103be:	4638      	mov	r0, r7
 80103c0:	47c0      	blx	r8
 80103c2:	3001      	adds	r0, #1
 80103c4:	d0e6      	beq.n	8010394 <_printf_common+0xa4>
 80103c6:	3601      	adds	r6, #1
 80103c8:	e7d9      	b.n	801037e <_printf_common+0x8e>
	...

080103cc <_printf_i>:
 80103cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103d0:	7e0f      	ldrb	r7, [r1, #24]
 80103d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103d4:	2f78      	cmp	r7, #120	; 0x78
 80103d6:	4691      	mov	r9, r2
 80103d8:	4680      	mov	r8, r0
 80103da:	460c      	mov	r4, r1
 80103dc:	469a      	mov	sl, r3
 80103de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80103e2:	d807      	bhi.n	80103f4 <_printf_i+0x28>
 80103e4:	2f62      	cmp	r7, #98	; 0x62
 80103e6:	d80a      	bhi.n	80103fe <_printf_i+0x32>
 80103e8:	2f00      	cmp	r7, #0
 80103ea:	f000 80d8 	beq.w	801059e <_printf_i+0x1d2>
 80103ee:	2f58      	cmp	r7, #88	; 0x58
 80103f0:	f000 80a3 	beq.w	801053a <_printf_i+0x16e>
 80103f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80103fc:	e03a      	b.n	8010474 <_printf_i+0xa8>
 80103fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010402:	2b15      	cmp	r3, #21
 8010404:	d8f6      	bhi.n	80103f4 <_printf_i+0x28>
 8010406:	a101      	add	r1, pc, #4	; (adr r1, 801040c <_printf_i+0x40>)
 8010408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801040c:	08010465 	.word	0x08010465
 8010410:	08010479 	.word	0x08010479
 8010414:	080103f5 	.word	0x080103f5
 8010418:	080103f5 	.word	0x080103f5
 801041c:	080103f5 	.word	0x080103f5
 8010420:	080103f5 	.word	0x080103f5
 8010424:	08010479 	.word	0x08010479
 8010428:	080103f5 	.word	0x080103f5
 801042c:	080103f5 	.word	0x080103f5
 8010430:	080103f5 	.word	0x080103f5
 8010434:	080103f5 	.word	0x080103f5
 8010438:	08010585 	.word	0x08010585
 801043c:	080104a9 	.word	0x080104a9
 8010440:	08010567 	.word	0x08010567
 8010444:	080103f5 	.word	0x080103f5
 8010448:	080103f5 	.word	0x080103f5
 801044c:	080105a7 	.word	0x080105a7
 8010450:	080103f5 	.word	0x080103f5
 8010454:	080104a9 	.word	0x080104a9
 8010458:	080103f5 	.word	0x080103f5
 801045c:	080103f5 	.word	0x080103f5
 8010460:	0801056f 	.word	0x0801056f
 8010464:	682b      	ldr	r3, [r5, #0]
 8010466:	1d1a      	adds	r2, r3, #4
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	602a      	str	r2, [r5, #0]
 801046c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010474:	2301      	movs	r3, #1
 8010476:	e0a3      	b.n	80105c0 <_printf_i+0x1f4>
 8010478:	6820      	ldr	r0, [r4, #0]
 801047a:	6829      	ldr	r1, [r5, #0]
 801047c:	0606      	lsls	r6, r0, #24
 801047e:	f101 0304 	add.w	r3, r1, #4
 8010482:	d50a      	bpl.n	801049a <_printf_i+0xce>
 8010484:	680e      	ldr	r6, [r1, #0]
 8010486:	602b      	str	r3, [r5, #0]
 8010488:	2e00      	cmp	r6, #0
 801048a:	da03      	bge.n	8010494 <_printf_i+0xc8>
 801048c:	232d      	movs	r3, #45	; 0x2d
 801048e:	4276      	negs	r6, r6
 8010490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010494:	485e      	ldr	r0, [pc, #376]	; (8010610 <_printf_i+0x244>)
 8010496:	230a      	movs	r3, #10
 8010498:	e019      	b.n	80104ce <_printf_i+0x102>
 801049a:	680e      	ldr	r6, [r1, #0]
 801049c:	602b      	str	r3, [r5, #0]
 801049e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80104a2:	bf18      	it	ne
 80104a4:	b236      	sxthne	r6, r6
 80104a6:	e7ef      	b.n	8010488 <_printf_i+0xbc>
 80104a8:	682b      	ldr	r3, [r5, #0]
 80104aa:	6820      	ldr	r0, [r4, #0]
 80104ac:	1d19      	adds	r1, r3, #4
 80104ae:	6029      	str	r1, [r5, #0]
 80104b0:	0601      	lsls	r1, r0, #24
 80104b2:	d501      	bpl.n	80104b8 <_printf_i+0xec>
 80104b4:	681e      	ldr	r6, [r3, #0]
 80104b6:	e002      	b.n	80104be <_printf_i+0xf2>
 80104b8:	0646      	lsls	r6, r0, #25
 80104ba:	d5fb      	bpl.n	80104b4 <_printf_i+0xe8>
 80104bc:	881e      	ldrh	r6, [r3, #0]
 80104be:	4854      	ldr	r0, [pc, #336]	; (8010610 <_printf_i+0x244>)
 80104c0:	2f6f      	cmp	r7, #111	; 0x6f
 80104c2:	bf0c      	ite	eq
 80104c4:	2308      	moveq	r3, #8
 80104c6:	230a      	movne	r3, #10
 80104c8:	2100      	movs	r1, #0
 80104ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104ce:	6865      	ldr	r5, [r4, #4]
 80104d0:	60a5      	str	r5, [r4, #8]
 80104d2:	2d00      	cmp	r5, #0
 80104d4:	bfa2      	ittt	ge
 80104d6:	6821      	ldrge	r1, [r4, #0]
 80104d8:	f021 0104 	bicge.w	r1, r1, #4
 80104dc:	6021      	strge	r1, [r4, #0]
 80104de:	b90e      	cbnz	r6, 80104e4 <_printf_i+0x118>
 80104e0:	2d00      	cmp	r5, #0
 80104e2:	d04d      	beq.n	8010580 <_printf_i+0x1b4>
 80104e4:	4615      	mov	r5, r2
 80104e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80104ea:	fb03 6711 	mls	r7, r3, r1, r6
 80104ee:	5dc7      	ldrb	r7, [r0, r7]
 80104f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80104f4:	4637      	mov	r7, r6
 80104f6:	42bb      	cmp	r3, r7
 80104f8:	460e      	mov	r6, r1
 80104fa:	d9f4      	bls.n	80104e6 <_printf_i+0x11a>
 80104fc:	2b08      	cmp	r3, #8
 80104fe:	d10b      	bne.n	8010518 <_printf_i+0x14c>
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	07de      	lsls	r6, r3, #31
 8010504:	d508      	bpl.n	8010518 <_printf_i+0x14c>
 8010506:	6923      	ldr	r3, [r4, #16]
 8010508:	6861      	ldr	r1, [r4, #4]
 801050a:	4299      	cmp	r1, r3
 801050c:	bfde      	ittt	le
 801050e:	2330      	movle	r3, #48	; 0x30
 8010510:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010514:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010518:	1b52      	subs	r2, r2, r5
 801051a:	6122      	str	r2, [r4, #16]
 801051c:	f8cd a000 	str.w	sl, [sp]
 8010520:	464b      	mov	r3, r9
 8010522:	aa03      	add	r2, sp, #12
 8010524:	4621      	mov	r1, r4
 8010526:	4640      	mov	r0, r8
 8010528:	f7ff fee2 	bl	80102f0 <_printf_common>
 801052c:	3001      	adds	r0, #1
 801052e:	d14c      	bne.n	80105ca <_printf_i+0x1fe>
 8010530:	f04f 30ff 	mov.w	r0, #4294967295
 8010534:	b004      	add	sp, #16
 8010536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801053a:	4835      	ldr	r0, [pc, #212]	; (8010610 <_printf_i+0x244>)
 801053c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010540:	6829      	ldr	r1, [r5, #0]
 8010542:	6823      	ldr	r3, [r4, #0]
 8010544:	f851 6b04 	ldr.w	r6, [r1], #4
 8010548:	6029      	str	r1, [r5, #0]
 801054a:	061d      	lsls	r5, r3, #24
 801054c:	d514      	bpl.n	8010578 <_printf_i+0x1ac>
 801054e:	07df      	lsls	r7, r3, #31
 8010550:	bf44      	itt	mi
 8010552:	f043 0320 	orrmi.w	r3, r3, #32
 8010556:	6023      	strmi	r3, [r4, #0]
 8010558:	b91e      	cbnz	r6, 8010562 <_printf_i+0x196>
 801055a:	6823      	ldr	r3, [r4, #0]
 801055c:	f023 0320 	bic.w	r3, r3, #32
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	2310      	movs	r3, #16
 8010564:	e7b0      	b.n	80104c8 <_printf_i+0xfc>
 8010566:	6823      	ldr	r3, [r4, #0]
 8010568:	f043 0320 	orr.w	r3, r3, #32
 801056c:	6023      	str	r3, [r4, #0]
 801056e:	2378      	movs	r3, #120	; 0x78
 8010570:	4828      	ldr	r0, [pc, #160]	; (8010614 <_printf_i+0x248>)
 8010572:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010576:	e7e3      	b.n	8010540 <_printf_i+0x174>
 8010578:	0659      	lsls	r1, r3, #25
 801057a:	bf48      	it	mi
 801057c:	b2b6      	uxthmi	r6, r6
 801057e:	e7e6      	b.n	801054e <_printf_i+0x182>
 8010580:	4615      	mov	r5, r2
 8010582:	e7bb      	b.n	80104fc <_printf_i+0x130>
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	6826      	ldr	r6, [r4, #0]
 8010588:	6961      	ldr	r1, [r4, #20]
 801058a:	1d18      	adds	r0, r3, #4
 801058c:	6028      	str	r0, [r5, #0]
 801058e:	0635      	lsls	r5, r6, #24
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	d501      	bpl.n	8010598 <_printf_i+0x1cc>
 8010594:	6019      	str	r1, [r3, #0]
 8010596:	e002      	b.n	801059e <_printf_i+0x1d2>
 8010598:	0670      	lsls	r0, r6, #25
 801059a:	d5fb      	bpl.n	8010594 <_printf_i+0x1c8>
 801059c:	8019      	strh	r1, [r3, #0]
 801059e:	2300      	movs	r3, #0
 80105a0:	6123      	str	r3, [r4, #16]
 80105a2:	4615      	mov	r5, r2
 80105a4:	e7ba      	b.n	801051c <_printf_i+0x150>
 80105a6:	682b      	ldr	r3, [r5, #0]
 80105a8:	1d1a      	adds	r2, r3, #4
 80105aa:	602a      	str	r2, [r5, #0]
 80105ac:	681d      	ldr	r5, [r3, #0]
 80105ae:	6862      	ldr	r2, [r4, #4]
 80105b0:	2100      	movs	r1, #0
 80105b2:	4628      	mov	r0, r5
 80105b4:	f7ef fe34 	bl	8000220 <memchr>
 80105b8:	b108      	cbz	r0, 80105be <_printf_i+0x1f2>
 80105ba:	1b40      	subs	r0, r0, r5
 80105bc:	6060      	str	r0, [r4, #4]
 80105be:	6863      	ldr	r3, [r4, #4]
 80105c0:	6123      	str	r3, [r4, #16]
 80105c2:	2300      	movs	r3, #0
 80105c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105c8:	e7a8      	b.n	801051c <_printf_i+0x150>
 80105ca:	6923      	ldr	r3, [r4, #16]
 80105cc:	462a      	mov	r2, r5
 80105ce:	4649      	mov	r1, r9
 80105d0:	4640      	mov	r0, r8
 80105d2:	47d0      	blx	sl
 80105d4:	3001      	adds	r0, #1
 80105d6:	d0ab      	beq.n	8010530 <_printf_i+0x164>
 80105d8:	6823      	ldr	r3, [r4, #0]
 80105da:	079b      	lsls	r3, r3, #30
 80105dc:	d413      	bmi.n	8010606 <_printf_i+0x23a>
 80105de:	68e0      	ldr	r0, [r4, #12]
 80105e0:	9b03      	ldr	r3, [sp, #12]
 80105e2:	4298      	cmp	r0, r3
 80105e4:	bfb8      	it	lt
 80105e6:	4618      	movlt	r0, r3
 80105e8:	e7a4      	b.n	8010534 <_printf_i+0x168>
 80105ea:	2301      	movs	r3, #1
 80105ec:	4632      	mov	r2, r6
 80105ee:	4649      	mov	r1, r9
 80105f0:	4640      	mov	r0, r8
 80105f2:	47d0      	blx	sl
 80105f4:	3001      	adds	r0, #1
 80105f6:	d09b      	beq.n	8010530 <_printf_i+0x164>
 80105f8:	3501      	adds	r5, #1
 80105fa:	68e3      	ldr	r3, [r4, #12]
 80105fc:	9903      	ldr	r1, [sp, #12]
 80105fe:	1a5b      	subs	r3, r3, r1
 8010600:	42ab      	cmp	r3, r5
 8010602:	dcf2      	bgt.n	80105ea <_printf_i+0x21e>
 8010604:	e7eb      	b.n	80105de <_printf_i+0x212>
 8010606:	2500      	movs	r5, #0
 8010608:	f104 0619 	add.w	r6, r4, #25
 801060c:	e7f5      	b.n	80105fa <_printf_i+0x22e>
 801060e:	bf00      	nop
 8010610:	080113f5 	.word	0x080113f5
 8010614:	08011406 	.word	0x08011406

08010618 <_read_r>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	4d07      	ldr	r5, [pc, #28]	; (8010638 <_read_r+0x20>)
 801061c:	4604      	mov	r4, r0
 801061e:	4608      	mov	r0, r1
 8010620:	4611      	mov	r1, r2
 8010622:	2200      	movs	r2, #0
 8010624:	602a      	str	r2, [r5, #0]
 8010626:	461a      	mov	r2, r3
 8010628:	f7f1 fa96 	bl	8001b58 <_read>
 801062c:	1c43      	adds	r3, r0, #1
 801062e:	d102      	bne.n	8010636 <_read_r+0x1e>
 8010630:	682b      	ldr	r3, [r5, #0]
 8010632:	b103      	cbz	r3, 8010636 <_read_r+0x1e>
 8010634:	6023      	str	r3, [r4, #0]
 8010636:	bd38      	pop	{r3, r4, r5, pc}
 8010638:	20008134 	.word	0x20008134
 801063c:	00000000 	.word	0x00000000

08010640 <nan>:
 8010640:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010648 <nan+0x8>
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	00000000 	.word	0x00000000
 801064c:	7ff80000 	.word	0x7ff80000

08010650 <strncmp>:
 8010650:	b510      	push	{r4, lr}
 8010652:	b17a      	cbz	r2, 8010674 <strncmp+0x24>
 8010654:	4603      	mov	r3, r0
 8010656:	3901      	subs	r1, #1
 8010658:	1884      	adds	r4, r0, r2
 801065a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801065e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010662:	4290      	cmp	r0, r2
 8010664:	d101      	bne.n	801066a <strncmp+0x1a>
 8010666:	42a3      	cmp	r3, r4
 8010668:	d101      	bne.n	801066e <strncmp+0x1e>
 801066a:	1a80      	subs	r0, r0, r2
 801066c:	bd10      	pop	{r4, pc}
 801066e:	2800      	cmp	r0, #0
 8010670:	d1f3      	bne.n	801065a <strncmp+0xa>
 8010672:	e7fa      	b.n	801066a <strncmp+0x1a>
 8010674:	4610      	mov	r0, r2
 8010676:	e7f9      	b.n	801066c <strncmp+0x1c>

08010678 <__ascii_wctomb>:
 8010678:	b149      	cbz	r1, 801068e <__ascii_wctomb+0x16>
 801067a:	2aff      	cmp	r2, #255	; 0xff
 801067c:	bf85      	ittet	hi
 801067e:	238a      	movhi	r3, #138	; 0x8a
 8010680:	6003      	strhi	r3, [r0, #0]
 8010682:	700a      	strbls	r2, [r1, #0]
 8010684:	f04f 30ff 	movhi.w	r0, #4294967295
 8010688:	bf98      	it	ls
 801068a:	2001      	movls	r0, #1
 801068c:	4770      	bx	lr
 801068e:	4608      	mov	r0, r1
 8010690:	4770      	bx	lr
	...

08010694 <__assert_func>:
 8010694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010696:	4614      	mov	r4, r2
 8010698:	461a      	mov	r2, r3
 801069a:	4b09      	ldr	r3, [pc, #36]	; (80106c0 <__assert_func+0x2c>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	4605      	mov	r5, r0
 80106a0:	68d8      	ldr	r0, [r3, #12]
 80106a2:	b14c      	cbz	r4, 80106b8 <__assert_func+0x24>
 80106a4:	4b07      	ldr	r3, [pc, #28]	; (80106c4 <__assert_func+0x30>)
 80106a6:	9100      	str	r1, [sp, #0]
 80106a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80106ac:	4906      	ldr	r1, [pc, #24]	; (80106c8 <__assert_func+0x34>)
 80106ae:	462b      	mov	r3, r5
 80106b0:	f000 f80e 	bl	80106d0 <fiprintf>
 80106b4:	f000 fa88 	bl	8010bc8 <abort>
 80106b8:	4b04      	ldr	r3, [pc, #16]	; (80106cc <__assert_func+0x38>)
 80106ba:	461c      	mov	r4, r3
 80106bc:	e7f3      	b.n	80106a6 <__assert_func+0x12>
 80106be:	bf00      	nop
 80106c0:	20000110 	.word	0x20000110
 80106c4:	08011417 	.word	0x08011417
 80106c8:	08011424 	.word	0x08011424
 80106cc:	08011452 	.word	0x08011452

080106d0 <fiprintf>:
 80106d0:	b40e      	push	{r1, r2, r3}
 80106d2:	b503      	push	{r0, r1, lr}
 80106d4:	4601      	mov	r1, r0
 80106d6:	ab03      	add	r3, sp, #12
 80106d8:	4805      	ldr	r0, [pc, #20]	; (80106f0 <fiprintf+0x20>)
 80106da:	f853 2b04 	ldr.w	r2, [r3], #4
 80106de:	6800      	ldr	r0, [r0, #0]
 80106e0:	9301      	str	r3, [sp, #4]
 80106e2:	f000 f881 	bl	80107e8 <_vfiprintf_r>
 80106e6:	b002      	add	sp, #8
 80106e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80106ec:	b003      	add	sp, #12
 80106ee:	4770      	bx	lr
 80106f0:	20000110 	.word	0x20000110

080106f4 <malloc>:
 80106f4:	4b02      	ldr	r3, [pc, #8]	; (8010700 <malloc+0xc>)
 80106f6:	4601      	mov	r1, r0
 80106f8:	6818      	ldr	r0, [r3, #0]
 80106fa:	f7fd b8df 	b.w	800d8bc <_malloc_r>
 80106fe:	bf00      	nop
 8010700:	20000110 	.word	0x20000110

08010704 <memmove>:
 8010704:	4288      	cmp	r0, r1
 8010706:	b510      	push	{r4, lr}
 8010708:	eb01 0402 	add.w	r4, r1, r2
 801070c:	d902      	bls.n	8010714 <memmove+0x10>
 801070e:	4284      	cmp	r4, r0
 8010710:	4623      	mov	r3, r4
 8010712:	d807      	bhi.n	8010724 <memmove+0x20>
 8010714:	1e43      	subs	r3, r0, #1
 8010716:	42a1      	cmp	r1, r4
 8010718:	d008      	beq.n	801072c <memmove+0x28>
 801071a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801071e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010722:	e7f8      	b.n	8010716 <memmove+0x12>
 8010724:	4402      	add	r2, r0
 8010726:	4601      	mov	r1, r0
 8010728:	428a      	cmp	r2, r1
 801072a:	d100      	bne.n	801072e <memmove+0x2a>
 801072c:	bd10      	pop	{r4, pc}
 801072e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010736:	e7f7      	b.n	8010728 <memmove+0x24>

08010738 <_realloc_r>:
 8010738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801073c:	4680      	mov	r8, r0
 801073e:	4614      	mov	r4, r2
 8010740:	460e      	mov	r6, r1
 8010742:	b921      	cbnz	r1, 801074e <_realloc_r+0x16>
 8010744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010748:	4611      	mov	r1, r2
 801074a:	f7fd b8b7 	b.w	800d8bc <_malloc_r>
 801074e:	b92a      	cbnz	r2, 801075c <_realloc_r+0x24>
 8010750:	f7ff fc26 	bl	800ffa0 <_free_r>
 8010754:	4625      	mov	r5, r4
 8010756:	4628      	mov	r0, r5
 8010758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801075c:	f000 faa0 	bl	8010ca0 <_malloc_usable_size_r>
 8010760:	4284      	cmp	r4, r0
 8010762:	4607      	mov	r7, r0
 8010764:	d802      	bhi.n	801076c <_realloc_r+0x34>
 8010766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801076a:	d812      	bhi.n	8010792 <_realloc_r+0x5a>
 801076c:	4621      	mov	r1, r4
 801076e:	4640      	mov	r0, r8
 8010770:	f7fd f8a4 	bl	800d8bc <_malloc_r>
 8010774:	4605      	mov	r5, r0
 8010776:	2800      	cmp	r0, #0
 8010778:	d0ed      	beq.n	8010756 <_realloc_r+0x1e>
 801077a:	42bc      	cmp	r4, r7
 801077c:	4622      	mov	r2, r4
 801077e:	4631      	mov	r1, r6
 8010780:	bf28      	it	cs
 8010782:	463a      	movcs	r2, r7
 8010784:	f7fd f863 	bl	800d84e <memcpy>
 8010788:	4631      	mov	r1, r6
 801078a:	4640      	mov	r0, r8
 801078c:	f7ff fc08 	bl	800ffa0 <_free_r>
 8010790:	e7e1      	b.n	8010756 <_realloc_r+0x1e>
 8010792:	4635      	mov	r5, r6
 8010794:	e7df      	b.n	8010756 <_realloc_r+0x1e>

08010796 <__sfputc_r>:
 8010796:	6893      	ldr	r3, [r2, #8]
 8010798:	3b01      	subs	r3, #1
 801079a:	2b00      	cmp	r3, #0
 801079c:	b410      	push	{r4}
 801079e:	6093      	str	r3, [r2, #8]
 80107a0:	da08      	bge.n	80107b4 <__sfputc_r+0x1e>
 80107a2:	6994      	ldr	r4, [r2, #24]
 80107a4:	42a3      	cmp	r3, r4
 80107a6:	db01      	blt.n	80107ac <__sfputc_r+0x16>
 80107a8:	290a      	cmp	r1, #10
 80107aa:	d103      	bne.n	80107b4 <__sfputc_r+0x1e>
 80107ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107b0:	f000 b94a 	b.w	8010a48 <__swbuf_r>
 80107b4:	6813      	ldr	r3, [r2, #0]
 80107b6:	1c58      	adds	r0, r3, #1
 80107b8:	6010      	str	r0, [r2, #0]
 80107ba:	7019      	strb	r1, [r3, #0]
 80107bc:	4608      	mov	r0, r1
 80107be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107c2:	4770      	bx	lr

080107c4 <__sfputs_r>:
 80107c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107c6:	4606      	mov	r6, r0
 80107c8:	460f      	mov	r7, r1
 80107ca:	4614      	mov	r4, r2
 80107cc:	18d5      	adds	r5, r2, r3
 80107ce:	42ac      	cmp	r4, r5
 80107d0:	d101      	bne.n	80107d6 <__sfputs_r+0x12>
 80107d2:	2000      	movs	r0, #0
 80107d4:	e007      	b.n	80107e6 <__sfputs_r+0x22>
 80107d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107da:	463a      	mov	r2, r7
 80107dc:	4630      	mov	r0, r6
 80107de:	f7ff ffda 	bl	8010796 <__sfputc_r>
 80107e2:	1c43      	adds	r3, r0, #1
 80107e4:	d1f3      	bne.n	80107ce <__sfputs_r+0xa>
 80107e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080107e8 <_vfiprintf_r>:
 80107e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ec:	460d      	mov	r5, r1
 80107ee:	b09d      	sub	sp, #116	; 0x74
 80107f0:	4614      	mov	r4, r2
 80107f2:	4698      	mov	r8, r3
 80107f4:	4606      	mov	r6, r0
 80107f6:	b118      	cbz	r0, 8010800 <_vfiprintf_r+0x18>
 80107f8:	6983      	ldr	r3, [r0, #24]
 80107fa:	b90b      	cbnz	r3, 8010800 <_vfiprintf_r+0x18>
 80107fc:	f7fc ff62 	bl	800d6c4 <__sinit>
 8010800:	4b89      	ldr	r3, [pc, #548]	; (8010a28 <_vfiprintf_r+0x240>)
 8010802:	429d      	cmp	r5, r3
 8010804:	d11b      	bne.n	801083e <_vfiprintf_r+0x56>
 8010806:	6875      	ldr	r5, [r6, #4]
 8010808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801080a:	07d9      	lsls	r1, r3, #31
 801080c:	d405      	bmi.n	801081a <_vfiprintf_r+0x32>
 801080e:	89ab      	ldrh	r3, [r5, #12]
 8010810:	059a      	lsls	r2, r3, #22
 8010812:	d402      	bmi.n	801081a <_vfiprintf_r+0x32>
 8010814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010816:	f7fd f818 	bl	800d84a <__retarget_lock_acquire_recursive>
 801081a:	89ab      	ldrh	r3, [r5, #12]
 801081c:	071b      	lsls	r3, r3, #28
 801081e:	d501      	bpl.n	8010824 <_vfiprintf_r+0x3c>
 8010820:	692b      	ldr	r3, [r5, #16]
 8010822:	b9eb      	cbnz	r3, 8010860 <_vfiprintf_r+0x78>
 8010824:	4629      	mov	r1, r5
 8010826:	4630      	mov	r0, r6
 8010828:	f000 f960 	bl	8010aec <__swsetup_r>
 801082c:	b1c0      	cbz	r0, 8010860 <_vfiprintf_r+0x78>
 801082e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010830:	07dc      	lsls	r4, r3, #31
 8010832:	d50e      	bpl.n	8010852 <_vfiprintf_r+0x6a>
 8010834:	f04f 30ff 	mov.w	r0, #4294967295
 8010838:	b01d      	add	sp, #116	; 0x74
 801083a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801083e:	4b7b      	ldr	r3, [pc, #492]	; (8010a2c <_vfiprintf_r+0x244>)
 8010840:	429d      	cmp	r5, r3
 8010842:	d101      	bne.n	8010848 <_vfiprintf_r+0x60>
 8010844:	68b5      	ldr	r5, [r6, #8]
 8010846:	e7df      	b.n	8010808 <_vfiprintf_r+0x20>
 8010848:	4b79      	ldr	r3, [pc, #484]	; (8010a30 <_vfiprintf_r+0x248>)
 801084a:	429d      	cmp	r5, r3
 801084c:	bf08      	it	eq
 801084e:	68f5      	ldreq	r5, [r6, #12]
 8010850:	e7da      	b.n	8010808 <_vfiprintf_r+0x20>
 8010852:	89ab      	ldrh	r3, [r5, #12]
 8010854:	0598      	lsls	r0, r3, #22
 8010856:	d4ed      	bmi.n	8010834 <_vfiprintf_r+0x4c>
 8010858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801085a:	f7fc fff7 	bl	800d84c <__retarget_lock_release_recursive>
 801085e:	e7e9      	b.n	8010834 <_vfiprintf_r+0x4c>
 8010860:	2300      	movs	r3, #0
 8010862:	9309      	str	r3, [sp, #36]	; 0x24
 8010864:	2320      	movs	r3, #32
 8010866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801086a:	f8cd 800c 	str.w	r8, [sp, #12]
 801086e:	2330      	movs	r3, #48	; 0x30
 8010870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010a34 <_vfiprintf_r+0x24c>
 8010874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010878:	f04f 0901 	mov.w	r9, #1
 801087c:	4623      	mov	r3, r4
 801087e:	469a      	mov	sl, r3
 8010880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010884:	b10a      	cbz	r2, 801088a <_vfiprintf_r+0xa2>
 8010886:	2a25      	cmp	r2, #37	; 0x25
 8010888:	d1f9      	bne.n	801087e <_vfiprintf_r+0x96>
 801088a:	ebba 0b04 	subs.w	fp, sl, r4
 801088e:	d00b      	beq.n	80108a8 <_vfiprintf_r+0xc0>
 8010890:	465b      	mov	r3, fp
 8010892:	4622      	mov	r2, r4
 8010894:	4629      	mov	r1, r5
 8010896:	4630      	mov	r0, r6
 8010898:	f7ff ff94 	bl	80107c4 <__sfputs_r>
 801089c:	3001      	adds	r0, #1
 801089e:	f000 80aa 	beq.w	80109f6 <_vfiprintf_r+0x20e>
 80108a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108a4:	445a      	add	r2, fp
 80108a6:	9209      	str	r2, [sp, #36]	; 0x24
 80108a8:	f89a 3000 	ldrb.w	r3, [sl]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	f000 80a2 	beq.w	80109f6 <_vfiprintf_r+0x20e>
 80108b2:	2300      	movs	r3, #0
 80108b4:	f04f 32ff 	mov.w	r2, #4294967295
 80108b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108bc:	f10a 0a01 	add.w	sl, sl, #1
 80108c0:	9304      	str	r3, [sp, #16]
 80108c2:	9307      	str	r3, [sp, #28]
 80108c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108c8:	931a      	str	r3, [sp, #104]	; 0x68
 80108ca:	4654      	mov	r4, sl
 80108cc:	2205      	movs	r2, #5
 80108ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108d2:	4858      	ldr	r0, [pc, #352]	; (8010a34 <_vfiprintf_r+0x24c>)
 80108d4:	f7ef fca4 	bl	8000220 <memchr>
 80108d8:	9a04      	ldr	r2, [sp, #16]
 80108da:	b9d8      	cbnz	r0, 8010914 <_vfiprintf_r+0x12c>
 80108dc:	06d1      	lsls	r1, r2, #27
 80108de:	bf44      	itt	mi
 80108e0:	2320      	movmi	r3, #32
 80108e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108e6:	0713      	lsls	r3, r2, #28
 80108e8:	bf44      	itt	mi
 80108ea:	232b      	movmi	r3, #43	; 0x2b
 80108ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108f0:	f89a 3000 	ldrb.w	r3, [sl]
 80108f4:	2b2a      	cmp	r3, #42	; 0x2a
 80108f6:	d015      	beq.n	8010924 <_vfiprintf_r+0x13c>
 80108f8:	9a07      	ldr	r2, [sp, #28]
 80108fa:	4654      	mov	r4, sl
 80108fc:	2000      	movs	r0, #0
 80108fe:	f04f 0c0a 	mov.w	ip, #10
 8010902:	4621      	mov	r1, r4
 8010904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010908:	3b30      	subs	r3, #48	; 0x30
 801090a:	2b09      	cmp	r3, #9
 801090c:	d94e      	bls.n	80109ac <_vfiprintf_r+0x1c4>
 801090e:	b1b0      	cbz	r0, 801093e <_vfiprintf_r+0x156>
 8010910:	9207      	str	r2, [sp, #28]
 8010912:	e014      	b.n	801093e <_vfiprintf_r+0x156>
 8010914:	eba0 0308 	sub.w	r3, r0, r8
 8010918:	fa09 f303 	lsl.w	r3, r9, r3
 801091c:	4313      	orrs	r3, r2
 801091e:	9304      	str	r3, [sp, #16]
 8010920:	46a2      	mov	sl, r4
 8010922:	e7d2      	b.n	80108ca <_vfiprintf_r+0xe2>
 8010924:	9b03      	ldr	r3, [sp, #12]
 8010926:	1d19      	adds	r1, r3, #4
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	9103      	str	r1, [sp, #12]
 801092c:	2b00      	cmp	r3, #0
 801092e:	bfbb      	ittet	lt
 8010930:	425b      	neglt	r3, r3
 8010932:	f042 0202 	orrlt.w	r2, r2, #2
 8010936:	9307      	strge	r3, [sp, #28]
 8010938:	9307      	strlt	r3, [sp, #28]
 801093a:	bfb8      	it	lt
 801093c:	9204      	strlt	r2, [sp, #16]
 801093e:	7823      	ldrb	r3, [r4, #0]
 8010940:	2b2e      	cmp	r3, #46	; 0x2e
 8010942:	d10c      	bne.n	801095e <_vfiprintf_r+0x176>
 8010944:	7863      	ldrb	r3, [r4, #1]
 8010946:	2b2a      	cmp	r3, #42	; 0x2a
 8010948:	d135      	bne.n	80109b6 <_vfiprintf_r+0x1ce>
 801094a:	9b03      	ldr	r3, [sp, #12]
 801094c:	1d1a      	adds	r2, r3, #4
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	9203      	str	r2, [sp, #12]
 8010952:	2b00      	cmp	r3, #0
 8010954:	bfb8      	it	lt
 8010956:	f04f 33ff 	movlt.w	r3, #4294967295
 801095a:	3402      	adds	r4, #2
 801095c:	9305      	str	r3, [sp, #20]
 801095e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a44 <_vfiprintf_r+0x25c>
 8010962:	7821      	ldrb	r1, [r4, #0]
 8010964:	2203      	movs	r2, #3
 8010966:	4650      	mov	r0, sl
 8010968:	f7ef fc5a 	bl	8000220 <memchr>
 801096c:	b140      	cbz	r0, 8010980 <_vfiprintf_r+0x198>
 801096e:	2340      	movs	r3, #64	; 0x40
 8010970:	eba0 000a 	sub.w	r0, r0, sl
 8010974:	fa03 f000 	lsl.w	r0, r3, r0
 8010978:	9b04      	ldr	r3, [sp, #16]
 801097a:	4303      	orrs	r3, r0
 801097c:	3401      	adds	r4, #1
 801097e:	9304      	str	r3, [sp, #16]
 8010980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010984:	482c      	ldr	r0, [pc, #176]	; (8010a38 <_vfiprintf_r+0x250>)
 8010986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801098a:	2206      	movs	r2, #6
 801098c:	f7ef fc48 	bl	8000220 <memchr>
 8010990:	2800      	cmp	r0, #0
 8010992:	d03f      	beq.n	8010a14 <_vfiprintf_r+0x22c>
 8010994:	4b29      	ldr	r3, [pc, #164]	; (8010a3c <_vfiprintf_r+0x254>)
 8010996:	bb1b      	cbnz	r3, 80109e0 <_vfiprintf_r+0x1f8>
 8010998:	9b03      	ldr	r3, [sp, #12]
 801099a:	3307      	adds	r3, #7
 801099c:	f023 0307 	bic.w	r3, r3, #7
 80109a0:	3308      	adds	r3, #8
 80109a2:	9303      	str	r3, [sp, #12]
 80109a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109a6:	443b      	add	r3, r7
 80109a8:	9309      	str	r3, [sp, #36]	; 0x24
 80109aa:	e767      	b.n	801087c <_vfiprintf_r+0x94>
 80109ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80109b0:	460c      	mov	r4, r1
 80109b2:	2001      	movs	r0, #1
 80109b4:	e7a5      	b.n	8010902 <_vfiprintf_r+0x11a>
 80109b6:	2300      	movs	r3, #0
 80109b8:	3401      	adds	r4, #1
 80109ba:	9305      	str	r3, [sp, #20]
 80109bc:	4619      	mov	r1, r3
 80109be:	f04f 0c0a 	mov.w	ip, #10
 80109c2:	4620      	mov	r0, r4
 80109c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109c8:	3a30      	subs	r2, #48	; 0x30
 80109ca:	2a09      	cmp	r2, #9
 80109cc:	d903      	bls.n	80109d6 <_vfiprintf_r+0x1ee>
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d0c5      	beq.n	801095e <_vfiprintf_r+0x176>
 80109d2:	9105      	str	r1, [sp, #20]
 80109d4:	e7c3      	b.n	801095e <_vfiprintf_r+0x176>
 80109d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80109da:	4604      	mov	r4, r0
 80109dc:	2301      	movs	r3, #1
 80109de:	e7f0      	b.n	80109c2 <_vfiprintf_r+0x1da>
 80109e0:	ab03      	add	r3, sp, #12
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	462a      	mov	r2, r5
 80109e6:	4b16      	ldr	r3, [pc, #88]	; (8010a40 <_vfiprintf_r+0x258>)
 80109e8:	a904      	add	r1, sp, #16
 80109ea:	4630      	mov	r0, r6
 80109ec:	f3af 8000 	nop.w
 80109f0:	4607      	mov	r7, r0
 80109f2:	1c78      	adds	r0, r7, #1
 80109f4:	d1d6      	bne.n	80109a4 <_vfiprintf_r+0x1bc>
 80109f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109f8:	07d9      	lsls	r1, r3, #31
 80109fa:	d405      	bmi.n	8010a08 <_vfiprintf_r+0x220>
 80109fc:	89ab      	ldrh	r3, [r5, #12]
 80109fe:	059a      	lsls	r2, r3, #22
 8010a00:	d402      	bmi.n	8010a08 <_vfiprintf_r+0x220>
 8010a02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a04:	f7fc ff22 	bl	800d84c <__retarget_lock_release_recursive>
 8010a08:	89ab      	ldrh	r3, [r5, #12]
 8010a0a:	065b      	lsls	r3, r3, #25
 8010a0c:	f53f af12 	bmi.w	8010834 <_vfiprintf_r+0x4c>
 8010a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a12:	e711      	b.n	8010838 <_vfiprintf_r+0x50>
 8010a14:	ab03      	add	r3, sp, #12
 8010a16:	9300      	str	r3, [sp, #0]
 8010a18:	462a      	mov	r2, r5
 8010a1a:	4b09      	ldr	r3, [pc, #36]	; (8010a40 <_vfiprintf_r+0x258>)
 8010a1c:	a904      	add	r1, sp, #16
 8010a1e:	4630      	mov	r0, r6
 8010a20:	f7ff fcd4 	bl	80103cc <_printf_i>
 8010a24:	e7e4      	b.n	80109f0 <_vfiprintf_r+0x208>
 8010a26:	bf00      	nop
 8010a28:	0801103c 	.word	0x0801103c
 8010a2c:	0801105c 	.word	0x0801105c
 8010a30:	0801101c 	.word	0x0801101c
 8010a34:	080113e4 	.word	0x080113e4
 8010a38:	080113ee 	.word	0x080113ee
 8010a3c:	00000000 	.word	0x00000000
 8010a40:	080107c5 	.word	0x080107c5
 8010a44:	080113ea 	.word	0x080113ea

08010a48 <__swbuf_r>:
 8010a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4a:	460e      	mov	r6, r1
 8010a4c:	4614      	mov	r4, r2
 8010a4e:	4605      	mov	r5, r0
 8010a50:	b118      	cbz	r0, 8010a5a <__swbuf_r+0x12>
 8010a52:	6983      	ldr	r3, [r0, #24]
 8010a54:	b90b      	cbnz	r3, 8010a5a <__swbuf_r+0x12>
 8010a56:	f7fc fe35 	bl	800d6c4 <__sinit>
 8010a5a:	4b21      	ldr	r3, [pc, #132]	; (8010ae0 <__swbuf_r+0x98>)
 8010a5c:	429c      	cmp	r4, r3
 8010a5e:	d12b      	bne.n	8010ab8 <__swbuf_r+0x70>
 8010a60:	686c      	ldr	r4, [r5, #4]
 8010a62:	69a3      	ldr	r3, [r4, #24]
 8010a64:	60a3      	str	r3, [r4, #8]
 8010a66:	89a3      	ldrh	r3, [r4, #12]
 8010a68:	071a      	lsls	r2, r3, #28
 8010a6a:	d52f      	bpl.n	8010acc <__swbuf_r+0x84>
 8010a6c:	6923      	ldr	r3, [r4, #16]
 8010a6e:	b36b      	cbz	r3, 8010acc <__swbuf_r+0x84>
 8010a70:	6923      	ldr	r3, [r4, #16]
 8010a72:	6820      	ldr	r0, [r4, #0]
 8010a74:	1ac0      	subs	r0, r0, r3
 8010a76:	6963      	ldr	r3, [r4, #20]
 8010a78:	b2f6      	uxtb	r6, r6
 8010a7a:	4283      	cmp	r3, r0
 8010a7c:	4637      	mov	r7, r6
 8010a7e:	dc04      	bgt.n	8010a8a <__swbuf_r+0x42>
 8010a80:	4621      	mov	r1, r4
 8010a82:	4628      	mov	r0, r5
 8010a84:	f7fe f9d8 	bl	800ee38 <_fflush_r>
 8010a88:	bb30      	cbnz	r0, 8010ad8 <__swbuf_r+0x90>
 8010a8a:	68a3      	ldr	r3, [r4, #8]
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	60a3      	str	r3, [r4, #8]
 8010a90:	6823      	ldr	r3, [r4, #0]
 8010a92:	1c5a      	adds	r2, r3, #1
 8010a94:	6022      	str	r2, [r4, #0]
 8010a96:	701e      	strb	r6, [r3, #0]
 8010a98:	6963      	ldr	r3, [r4, #20]
 8010a9a:	3001      	adds	r0, #1
 8010a9c:	4283      	cmp	r3, r0
 8010a9e:	d004      	beq.n	8010aaa <__swbuf_r+0x62>
 8010aa0:	89a3      	ldrh	r3, [r4, #12]
 8010aa2:	07db      	lsls	r3, r3, #31
 8010aa4:	d506      	bpl.n	8010ab4 <__swbuf_r+0x6c>
 8010aa6:	2e0a      	cmp	r6, #10
 8010aa8:	d104      	bne.n	8010ab4 <__swbuf_r+0x6c>
 8010aaa:	4621      	mov	r1, r4
 8010aac:	4628      	mov	r0, r5
 8010aae:	f7fe f9c3 	bl	800ee38 <_fflush_r>
 8010ab2:	b988      	cbnz	r0, 8010ad8 <__swbuf_r+0x90>
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ab8:	4b0a      	ldr	r3, [pc, #40]	; (8010ae4 <__swbuf_r+0x9c>)
 8010aba:	429c      	cmp	r4, r3
 8010abc:	d101      	bne.n	8010ac2 <__swbuf_r+0x7a>
 8010abe:	68ac      	ldr	r4, [r5, #8]
 8010ac0:	e7cf      	b.n	8010a62 <__swbuf_r+0x1a>
 8010ac2:	4b09      	ldr	r3, [pc, #36]	; (8010ae8 <__swbuf_r+0xa0>)
 8010ac4:	429c      	cmp	r4, r3
 8010ac6:	bf08      	it	eq
 8010ac8:	68ec      	ldreq	r4, [r5, #12]
 8010aca:	e7ca      	b.n	8010a62 <__swbuf_r+0x1a>
 8010acc:	4621      	mov	r1, r4
 8010ace:	4628      	mov	r0, r5
 8010ad0:	f000 f80c 	bl	8010aec <__swsetup_r>
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d0cb      	beq.n	8010a70 <__swbuf_r+0x28>
 8010ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8010adc:	e7ea      	b.n	8010ab4 <__swbuf_r+0x6c>
 8010ade:	bf00      	nop
 8010ae0:	0801103c 	.word	0x0801103c
 8010ae4:	0801105c 	.word	0x0801105c
 8010ae8:	0801101c 	.word	0x0801101c

08010aec <__swsetup_r>:
 8010aec:	4b32      	ldr	r3, [pc, #200]	; (8010bb8 <__swsetup_r+0xcc>)
 8010aee:	b570      	push	{r4, r5, r6, lr}
 8010af0:	681d      	ldr	r5, [r3, #0]
 8010af2:	4606      	mov	r6, r0
 8010af4:	460c      	mov	r4, r1
 8010af6:	b125      	cbz	r5, 8010b02 <__swsetup_r+0x16>
 8010af8:	69ab      	ldr	r3, [r5, #24]
 8010afa:	b913      	cbnz	r3, 8010b02 <__swsetup_r+0x16>
 8010afc:	4628      	mov	r0, r5
 8010afe:	f7fc fde1 	bl	800d6c4 <__sinit>
 8010b02:	4b2e      	ldr	r3, [pc, #184]	; (8010bbc <__swsetup_r+0xd0>)
 8010b04:	429c      	cmp	r4, r3
 8010b06:	d10f      	bne.n	8010b28 <__swsetup_r+0x3c>
 8010b08:	686c      	ldr	r4, [r5, #4]
 8010b0a:	89a3      	ldrh	r3, [r4, #12]
 8010b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b10:	0719      	lsls	r1, r3, #28
 8010b12:	d42c      	bmi.n	8010b6e <__swsetup_r+0x82>
 8010b14:	06dd      	lsls	r5, r3, #27
 8010b16:	d411      	bmi.n	8010b3c <__swsetup_r+0x50>
 8010b18:	2309      	movs	r3, #9
 8010b1a:	6033      	str	r3, [r6, #0]
 8010b1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b20:	81a3      	strh	r3, [r4, #12]
 8010b22:	f04f 30ff 	mov.w	r0, #4294967295
 8010b26:	e03e      	b.n	8010ba6 <__swsetup_r+0xba>
 8010b28:	4b25      	ldr	r3, [pc, #148]	; (8010bc0 <__swsetup_r+0xd4>)
 8010b2a:	429c      	cmp	r4, r3
 8010b2c:	d101      	bne.n	8010b32 <__swsetup_r+0x46>
 8010b2e:	68ac      	ldr	r4, [r5, #8]
 8010b30:	e7eb      	b.n	8010b0a <__swsetup_r+0x1e>
 8010b32:	4b24      	ldr	r3, [pc, #144]	; (8010bc4 <__swsetup_r+0xd8>)
 8010b34:	429c      	cmp	r4, r3
 8010b36:	bf08      	it	eq
 8010b38:	68ec      	ldreq	r4, [r5, #12]
 8010b3a:	e7e6      	b.n	8010b0a <__swsetup_r+0x1e>
 8010b3c:	0758      	lsls	r0, r3, #29
 8010b3e:	d512      	bpl.n	8010b66 <__swsetup_r+0x7a>
 8010b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b42:	b141      	cbz	r1, 8010b56 <__swsetup_r+0x6a>
 8010b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b48:	4299      	cmp	r1, r3
 8010b4a:	d002      	beq.n	8010b52 <__swsetup_r+0x66>
 8010b4c:	4630      	mov	r0, r6
 8010b4e:	f7ff fa27 	bl	800ffa0 <_free_r>
 8010b52:	2300      	movs	r3, #0
 8010b54:	6363      	str	r3, [r4, #52]	; 0x34
 8010b56:	89a3      	ldrh	r3, [r4, #12]
 8010b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b5c:	81a3      	strh	r3, [r4, #12]
 8010b5e:	2300      	movs	r3, #0
 8010b60:	6063      	str	r3, [r4, #4]
 8010b62:	6923      	ldr	r3, [r4, #16]
 8010b64:	6023      	str	r3, [r4, #0]
 8010b66:	89a3      	ldrh	r3, [r4, #12]
 8010b68:	f043 0308 	orr.w	r3, r3, #8
 8010b6c:	81a3      	strh	r3, [r4, #12]
 8010b6e:	6923      	ldr	r3, [r4, #16]
 8010b70:	b94b      	cbnz	r3, 8010b86 <__swsetup_r+0x9a>
 8010b72:	89a3      	ldrh	r3, [r4, #12]
 8010b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b7c:	d003      	beq.n	8010b86 <__swsetup_r+0x9a>
 8010b7e:	4621      	mov	r1, r4
 8010b80:	4630      	mov	r0, r6
 8010b82:	f000 f84d 	bl	8010c20 <__smakebuf_r>
 8010b86:	89a0      	ldrh	r0, [r4, #12]
 8010b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b8c:	f010 0301 	ands.w	r3, r0, #1
 8010b90:	d00a      	beq.n	8010ba8 <__swsetup_r+0xbc>
 8010b92:	2300      	movs	r3, #0
 8010b94:	60a3      	str	r3, [r4, #8]
 8010b96:	6963      	ldr	r3, [r4, #20]
 8010b98:	425b      	negs	r3, r3
 8010b9a:	61a3      	str	r3, [r4, #24]
 8010b9c:	6923      	ldr	r3, [r4, #16]
 8010b9e:	b943      	cbnz	r3, 8010bb2 <__swsetup_r+0xc6>
 8010ba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010ba4:	d1ba      	bne.n	8010b1c <__swsetup_r+0x30>
 8010ba6:	bd70      	pop	{r4, r5, r6, pc}
 8010ba8:	0781      	lsls	r1, r0, #30
 8010baa:	bf58      	it	pl
 8010bac:	6963      	ldrpl	r3, [r4, #20]
 8010bae:	60a3      	str	r3, [r4, #8]
 8010bb0:	e7f4      	b.n	8010b9c <__swsetup_r+0xb0>
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	e7f7      	b.n	8010ba6 <__swsetup_r+0xba>
 8010bb6:	bf00      	nop
 8010bb8:	20000110 	.word	0x20000110
 8010bbc:	0801103c 	.word	0x0801103c
 8010bc0:	0801105c 	.word	0x0801105c
 8010bc4:	0801101c 	.word	0x0801101c

08010bc8 <abort>:
 8010bc8:	b508      	push	{r3, lr}
 8010bca:	2006      	movs	r0, #6
 8010bcc:	f000 f898 	bl	8010d00 <raise>
 8010bd0:	2001      	movs	r0, #1
 8010bd2:	f7f0 ffb7 	bl	8001b44 <_exit>

08010bd6 <__swhatbuf_r>:
 8010bd6:	b570      	push	{r4, r5, r6, lr}
 8010bd8:	460e      	mov	r6, r1
 8010bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bde:	2900      	cmp	r1, #0
 8010be0:	b096      	sub	sp, #88	; 0x58
 8010be2:	4614      	mov	r4, r2
 8010be4:	461d      	mov	r5, r3
 8010be6:	da08      	bge.n	8010bfa <__swhatbuf_r+0x24>
 8010be8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010bec:	2200      	movs	r2, #0
 8010bee:	602a      	str	r2, [r5, #0]
 8010bf0:	061a      	lsls	r2, r3, #24
 8010bf2:	d410      	bmi.n	8010c16 <__swhatbuf_r+0x40>
 8010bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bf8:	e00e      	b.n	8010c18 <__swhatbuf_r+0x42>
 8010bfa:	466a      	mov	r2, sp
 8010bfc:	f000 f89c 	bl	8010d38 <_fstat_r>
 8010c00:	2800      	cmp	r0, #0
 8010c02:	dbf1      	blt.n	8010be8 <__swhatbuf_r+0x12>
 8010c04:	9a01      	ldr	r2, [sp, #4]
 8010c06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c0e:	425a      	negs	r2, r3
 8010c10:	415a      	adcs	r2, r3
 8010c12:	602a      	str	r2, [r5, #0]
 8010c14:	e7ee      	b.n	8010bf4 <__swhatbuf_r+0x1e>
 8010c16:	2340      	movs	r3, #64	; 0x40
 8010c18:	2000      	movs	r0, #0
 8010c1a:	6023      	str	r3, [r4, #0]
 8010c1c:	b016      	add	sp, #88	; 0x58
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}

08010c20 <__smakebuf_r>:
 8010c20:	898b      	ldrh	r3, [r1, #12]
 8010c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c24:	079d      	lsls	r5, r3, #30
 8010c26:	4606      	mov	r6, r0
 8010c28:	460c      	mov	r4, r1
 8010c2a:	d507      	bpl.n	8010c3c <__smakebuf_r+0x1c>
 8010c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c30:	6023      	str	r3, [r4, #0]
 8010c32:	6123      	str	r3, [r4, #16]
 8010c34:	2301      	movs	r3, #1
 8010c36:	6163      	str	r3, [r4, #20]
 8010c38:	b002      	add	sp, #8
 8010c3a:	bd70      	pop	{r4, r5, r6, pc}
 8010c3c:	ab01      	add	r3, sp, #4
 8010c3e:	466a      	mov	r2, sp
 8010c40:	f7ff ffc9 	bl	8010bd6 <__swhatbuf_r>
 8010c44:	9900      	ldr	r1, [sp, #0]
 8010c46:	4605      	mov	r5, r0
 8010c48:	4630      	mov	r0, r6
 8010c4a:	f7fc fe37 	bl	800d8bc <_malloc_r>
 8010c4e:	b948      	cbnz	r0, 8010c64 <__smakebuf_r+0x44>
 8010c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c54:	059a      	lsls	r2, r3, #22
 8010c56:	d4ef      	bmi.n	8010c38 <__smakebuf_r+0x18>
 8010c58:	f023 0303 	bic.w	r3, r3, #3
 8010c5c:	f043 0302 	orr.w	r3, r3, #2
 8010c60:	81a3      	strh	r3, [r4, #12]
 8010c62:	e7e3      	b.n	8010c2c <__smakebuf_r+0xc>
 8010c64:	4b0d      	ldr	r3, [pc, #52]	; (8010c9c <__smakebuf_r+0x7c>)
 8010c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8010c68:	89a3      	ldrh	r3, [r4, #12]
 8010c6a:	6020      	str	r0, [r4, #0]
 8010c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c70:	81a3      	strh	r3, [r4, #12]
 8010c72:	9b00      	ldr	r3, [sp, #0]
 8010c74:	6163      	str	r3, [r4, #20]
 8010c76:	9b01      	ldr	r3, [sp, #4]
 8010c78:	6120      	str	r0, [r4, #16]
 8010c7a:	b15b      	cbz	r3, 8010c94 <__smakebuf_r+0x74>
 8010c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c80:	4630      	mov	r0, r6
 8010c82:	f000 f86b 	bl	8010d5c <_isatty_r>
 8010c86:	b128      	cbz	r0, 8010c94 <__smakebuf_r+0x74>
 8010c88:	89a3      	ldrh	r3, [r4, #12]
 8010c8a:	f023 0303 	bic.w	r3, r3, #3
 8010c8e:	f043 0301 	orr.w	r3, r3, #1
 8010c92:	81a3      	strh	r3, [r4, #12]
 8010c94:	89a0      	ldrh	r0, [r4, #12]
 8010c96:	4305      	orrs	r5, r0
 8010c98:	81a5      	strh	r5, [r4, #12]
 8010c9a:	e7cd      	b.n	8010c38 <__smakebuf_r+0x18>
 8010c9c:	0800d65d 	.word	0x0800d65d

08010ca0 <_malloc_usable_size_r>:
 8010ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ca4:	1f18      	subs	r0, r3, #4
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	bfbc      	itt	lt
 8010caa:	580b      	ldrlt	r3, [r1, r0]
 8010cac:	18c0      	addlt	r0, r0, r3
 8010cae:	4770      	bx	lr

08010cb0 <_raise_r>:
 8010cb0:	291f      	cmp	r1, #31
 8010cb2:	b538      	push	{r3, r4, r5, lr}
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	460d      	mov	r5, r1
 8010cb8:	d904      	bls.n	8010cc4 <_raise_r+0x14>
 8010cba:	2316      	movs	r3, #22
 8010cbc:	6003      	str	r3, [r0, #0]
 8010cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8010cc2:	bd38      	pop	{r3, r4, r5, pc}
 8010cc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010cc6:	b112      	cbz	r2, 8010cce <_raise_r+0x1e>
 8010cc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ccc:	b94b      	cbnz	r3, 8010ce2 <_raise_r+0x32>
 8010cce:	4620      	mov	r0, r4
 8010cd0:	f000 f830 	bl	8010d34 <_getpid_r>
 8010cd4:	462a      	mov	r2, r5
 8010cd6:	4601      	mov	r1, r0
 8010cd8:	4620      	mov	r0, r4
 8010cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cde:	f000 b817 	b.w	8010d10 <_kill_r>
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	d00a      	beq.n	8010cfc <_raise_r+0x4c>
 8010ce6:	1c59      	adds	r1, r3, #1
 8010ce8:	d103      	bne.n	8010cf2 <_raise_r+0x42>
 8010cea:	2316      	movs	r3, #22
 8010cec:	6003      	str	r3, [r0, #0]
 8010cee:	2001      	movs	r0, #1
 8010cf0:	e7e7      	b.n	8010cc2 <_raise_r+0x12>
 8010cf2:	2400      	movs	r4, #0
 8010cf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010cf8:	4628      	mov	r0, r5
 8010cfa:	4798      	blx	r3
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	e7e0      	b.n	8010cc2 <_raise_r+0x12>

08010d00 <raise>:
 8010d00:	4b02      	ldr	r3, [pc, #8]	; (8010d0c <raise+0xc>)
 8010d02:	4601      	mov	r1, r0
 8010d04:	6818      	ldr	r0, [r3, #0]
 8010d06:	f7ff bfd3 	b.w	8010cb0 <_raise_r>
 8010d0a:	bf00      	nop
 8010d0c:	20000110 	.word	0x20000110

08010d10 <_kill_r>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	4d07      	ldr	r5, [pc, #28]	; (8010d30 <_kill_r+0x20>)
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	4608      	mov	r0, r1
 8010d1a:	4611      	mov	r1, r2
 8010d1c:	602b      	str	r3, [r5, #0]
 8010d1e:	f7f0 ff01 	bl	8001b24 <_kill>
 8010d22:	1c43      	adds	r3, r0, #1
 8010d24:	d102      	bne.n	8010d2c <_kill_r+0x1c>
 8010d26:	682b      	ldr	r3, [r5, #0]
 8010d28:	b103      	cbz	r3, 8010d2c <_kill_r+0x1c>
 8010d2a:	6023      	str	r3, [r4, #0]
 8010d2c:	bd38      	pop	{r3, r4, r5, pc}
 8010d2e:	bf00      	nop
 8010d30:	20008134 	.word	0x20008134

08010d34 <_getpid_r>:
 8010d34:	f7f0 beee 	b.w	8001b14 <_getpid>

08010d38 <_fstat_r>:
 8010d38:	b538      	push	{r3, r4, r5, lr}
 8010d3a:	4d07      	ldr	r5, [pc, #28]	; (8010d58 <_fstat_r+0x20>)
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	4604      	mov	r4, r0
 8010d40:	4608      	mov	r0, r1
 8010d42:	4611      	mov	r1, r2
 8010d44:	602b      	str	r3, [r5, #0]
 8010d46:	f7f0 ff4c 	bl	8001be2 <_fstat>
 8010d4a:	1c43      	adds	r3, r0, #1
 8010d4c:	d102      	bne.n	8010d54 <_fstat_r+0x1c>
 8010d4e:	682b      	ldr	r3, [r5, #0]
 8010d50:	b103      	cbz	r3, 8010d54 <_fstat_r+0x1c>
 8010d52:	6023      	str	r3, [r4, #0]
 8010d54:	bd38      	pop	{r3, r4, r5, pc}
 8010d56:	bf00      	nop
 8010d58:	20008134 	.word	0x20008134

08010d5c <_isatty_r>:
 8010d5c:	b538      	push	{r3, r4, r5, lr}
 8010d5e:	4d06      	ldr	r5, [pc, #24]	; (8010d78 <_isatty_r+0x1c>)
 8010d60:	2300      	movs	r3, #0
 8010d62:	4604      	mov	r4, r0
 8010d64:	4608      	mov	r0, r1
 8010d66:	602b      	str	r3, [r5, #0]
 8010d68:	f7f0 ff4b 	bl	8001c02 <_isatty>
 8010d6c:	1c43      	adds	r3, r0, #1
 8010d6e:	d102      	bne.n	8010d76 <_isatty_r+0x1a>
 8010d70:	682b      	ldr	r3, [r5, #0]
 8010d72:	b103      	cbz	r3, 8010d76 <_isatty_r+0x1a>
 8010d74:	6023      	str	r3, [r4, #0]
 8010d76:	bd38      	pop	{r3, r4, r5, pc}
 8010d78:	20008134 	.word	0x20008134

08010d7c <_init>:
 8010d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d7e:	bf00      	nop
 8010d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d82:	bc08      	pop	{r3}
 8010d84:	469e      	mov	lr, r3
 8010d86:	4770      	bx	lr

08010d88 <_fini>:
 8010d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d8a:	bf00      	nop
 8010d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d8e:	bc08      	pop	{r3}
 8010d90:	469e      	mov	lr, r3
 8010d92:	4770      	bx	lr
