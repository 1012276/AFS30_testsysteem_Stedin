
Integratie_test_User_interface_GUI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  080113b8  080113b8  000213b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ae8  08011ae8  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011ae8  08011ae8  00021ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011af0  08011af0  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011af0  08011af0  00021af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011af4  08011af4  00021af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08011af8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c38  200002e4  08011ddc  000302e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006f1c  08011ddc  00036f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027935  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005255  00000000  00000000  00057c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f98  00000000  00000000  0005cea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da0  00000000  00000000  0005ee38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007ed8  00000000  00000000  00060bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024bfc  00000000  00000000  00068ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4411  00000000  00000000  0008d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c0c  00000000  00000000  00171b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080113a0 	.word	0x080113a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002e8 	.word	0x200002e8
 800020c:	080113a0 	.word	0x080113a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9aa 	b.w	8000fe4 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468e      	mov	lr, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d14d      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d22:	428a      	cmp	r2, r1
 8000d24:	4694      	mov	ip, r2
 8000d26:	d969      	bls.n	8000dfc <__udivmoddi4+0xe8>
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	b152      	cbz	r2, 8000d44 <__udivmoddi4+0x30>
 8000d2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d32:	f1c2 0120 	rsb	r1, r2, #32
 8000d36:	fa20 f101 	lsr.w	r1, r0, r1
 8000d3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d42:	4094      	lsls	r4, r2
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	0c21      	lsrs	r1, r4, #16
 8000d4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d4e:	fa1f f78c 	uxth.w	r7, ip
 8000d52:	fb08 e316 	mls	r3, r8, r6, lr
 8000d56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d5a:	fb06 f107 	mul.w	r1, r6, r7
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6a:	f080 811f 	bcs.w	8000fac <__udivmoddi4+0x298>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 811c 	bls.w	8000fac <__udivmoddi4+0x298>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 f707 	mul.w	r7, r0, r7
 8000d8c:	42a7      	cmp	r7, r4
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x92>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	f080 810a 	bcs.w	8000fb0 <__udivmoddi4+0x29c>
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	f240 8107 	bls.w	8000fb0 <__udivmoddi4+0x29c>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000daa:	1be4      	subs	r4, r4, r7
 8000dac:	2600      	movs	r6, #0
 8000dae:	b11d      	cbz	r5, 8000db8 <__udivmoddi4+0xa4>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c5 4300 	strd	r4, r3, [r5]
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xc2>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80ef 	beq.w	8000fa6 <__udivmoddi4+0x292>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x160>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd4>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80f9 	bhi.w	8000fda <__udivmoddi4+0x2c6>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	469e      	mov	lr, r3
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa4>
 8000df6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xec>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 8092 	bne.w	8000f2e <__udivmoddi4+0x21a>
 8000e0a:	eba1 010c 	sub.w	r1, r1, ip
 8000e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	2601      	movs	r6, #1
 8000e18:	0c20      	lsrs	r0, r4, #16
 8000e1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e26:	fb0e f003 	mul.w	r0, lr, r3
 8000e2a:	4288      	cmp	r0, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x12c>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x12a>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f200 80cb 	bhi.w	8000fd4 <__udivmoddi4+0x2c0>
 8000e3e:	4643      	mov	r3, r8
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e50:	fb0e fe00 	mul.w	lr, lr, r0
 8000e54:	45a6      	cmp	lr, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x156>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e60:	d202      	bcs.n	8000e68 <__udivmoddi4+0x154>
 8000e62:	45a6      	cmp	lr, r4
 8000e64:	f200 80bb 	bhi.w	8000fde <__udivmoddi4+0x2ca>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e72:	e79c      	b.n	8000dae <__udivmoddi4+0x9a>
 8000e74:	f1c6 0720 	rsb	r7, r6, #32
 8000e78:	40b3      	lsls	r3, r6
 8000e7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e82:	fa20 f407 	lsr.w	r4, r0, r7
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	431c      	orrs	r4, r3
 8000e8c:	40f9      	lsrs	r1, r7
 8000e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e92:	fa00 f306 	lsl.w	r3, r0, r6
 8000e96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e9a:	0c20      	lsrs	r0, r4, #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eac:	4288      	cmp	r0, r1
 8000eae:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb2:	d90b      	bls.n	8000ecc <__udivmoddi4+0x1b8>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ebc:	f080 8088 	bcs.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f240 8085 	bls.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	1a09      	subs	r1, r1, r0
 8000ece:	b2a4      	uxth	r4, r4
 8000ed0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ed4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ed8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000edc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee0:	458e      	cmp	lr, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1e2>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eec:	d26c      	bcs.n	8000fc8 <__udivmoddi4+0x2b4>
 8000eee:	458e      	cmp	lr, r1
 8000ef0:	d96a      	bls.n	8000fc8 <__udivmoddi4+0x2b4>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efa:	fba0 9402 	umull	r9, r4, r0, r2
 8000efe:	eba1 010e 	sub.w	r1, r1, lr
 8000f02:	42a1      	cmp	r1, r4
 8000f04:	46c8      	mov	r8, r9
 8000f06:	46a6      	mov	lr, r4
 8000f08:	d356      	bcc.n	8000fb8 <__udivmoddi4+0x2a4>
 8000f0a:	d053      	beq.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x212>
 8000f0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f12:	eb61 010e 	sbc.w	r1, r1, lr
 8000f16:	fa01 f707 	lsl.w	r7, r1, r7
 8000f1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f1e:	40f1      	lsrs	r1, r6
 8000f20:	431f      	orrs	r7, r3
 8000f22:	e9c5 7100 	strd	r7, r1, [r5]
 8000f26:	2600      	movs	r6, #0
 8000f28:	4631      	mov	r1, r6
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	f1c2 0320 	rsb	r3, r2, #32
 8000f32:	40d8      	lsrs	r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	4301      	orrs	r1, r0
 8000f40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f50:	0c0b      	lsrs	r3, r1, #16
 8000f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f56:	fb00 f60e 	mul.w	r6, r0, lr
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x260>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f6a:	d22f      	bcs.n	8000fcc <__udivmoddi4+0x2b8>
 8000f6c:	429e      	cmp	r6, r3
 8000f6e:	d92d      	bls.n	8000fcc <__udivmoddi4+0x2b8>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1b9b      	subs	r3, r3, r6
 8000f76:	b289      	uxth	r1, r1
 8000f78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f84:	fb06 f30e 	mul.w	r3, r6, lr
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x28a>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f94:	d216      	bcs.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d914      	bls.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f9a:	3e02      	subs	r6, #2
 8000f9c:	4461      	add	r1, ip
 8000f9e:	1ac9      	subs	r1, r1, r3
 8000fa0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fa4:	e738      	b.n	8000e18 <__udivmoddi4+0x104>
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e705      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e3      	b.n	8000d78 <__udivmoddi4+0x64>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6f8      	b.n	8000da6 <__udivmoddi4+0x92>
 8000fb4:	454b      	cmp	r3, r9
 8000fb6:	d2a9      	bcs.n	8000f0c <__udivmoddi4+0x1f8>
 8000fb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7a3      	b.n	8000f0c <__udivmoddi4+0x1f8>
 8000fc4:	4646      	mov	r6, r8
 8000fc6:	e7ea      	b.n	8000f9e <__udivmoddi4+0x28a>
 8000fc8:	4620      	mov	r0, r4
 8000fca:	e794      	b.n	8000ef6 <__udivmoddi4+0x1e2>
 8000fcc:	4640      	mov	r0, r8
 8000fce:	e7d1      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fd0:	46d0      	mov	r8, sl
 8000fd2:	e77b      	b.n	8000ecc <__udivmoddi4+0x1b8>
 8000fd4:	3b02      	subs	r3, #2
 8000fd6:	4461      	add	r1, ip
 8000fd8:	e732      	b.n	8000e40 <__udivmoddi4+0x12c>
 8000fda:	4630      	mov	r0, r6
 8000fdc:	e709      	b.n	8000df2 <__udivmoddi4+0xde>
 8000fde:	4464      	add	r4, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e742      	b.n	8000e6a <__udivmoddi4+0x156>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <zet_blauw_licht_aan>:
/* USER CODE BEGIN 0 */


/*  Functies voor user interface */
/* Userinterface CODE BEGIN*/
void zet_blauw_licht_aan() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <zet_blauw_licht_aan+0x28>)
 8000ff2:	f001 fae7 	bl	80025c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <zet_blauw_licht_aan+0x28>)
 8000ffc:	f001 fae2 	bl	80025c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2108      	movs	r1, #8
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <zet_blauw_licht_aan+0x28>)
 8001006:	f001 fadd 	bl	80025c4 <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021400 	.word	0x40021400

08001014 <zet_groen_licht_aan>:

void zet_groen_licht_aan() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2102      	movs	r1, #2
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <zet_groen_licht_aan+0x28>)
 800101e:	f001 fad1 	bl	80025c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2104      	movs	r1, #4
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <zet_groen_licht_aan+0x28>)
 8001028:	f001 facc 	bl	80025c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2108      	movs	r1, #8
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <zet_groen_licht_aan+0x28>)
 8001032:	f001 fac7 	bl	80025c4 <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021400 	.word	0x40021400

08001040 <zet_rood_licht_aan>:

void zet_rood_licht_aan() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2102      	movs	r1, #2
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <zet_rood_licht_aan+0x28>)
 800104a:	f001 fabb 	bl	80025c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2104      	movs	r1, #4
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <zet_rood_licht_aan+0x28>)
 8001054:	f001 fab6 	bl	80025c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2108      	movs	r1, #8
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <zet_rood_licht_aan+0x28>)
 800105e:	f001 fab1 	bl	80025c4 <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021400 	.word	0x40021400

0800106c <groen_knipperend>:

void groen_knipperend() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2102      	movs	r1, #2
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <groen_knipperend+0x24>)
 8001076:	f001 faa5 	bl	80025c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2108      	movs	r1, #8
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <groen_knipperend+0x24>)
 8001080:	f001 faa0 	bl	80025c4 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GROENE_LED_PORT, GROENE_LED_PIN);
 8001084:	2104      	movs	r1, #4
 8001086:	4802      	ldr	r0, [pc, #8]	; (8001090 <groen_knipperend+0x24>)
 8001088:	f001 fab5 	bl	80025f6 <HAL_GPIO_TogglePin>


}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021400 	.word	0x40021400

08001094 <blauw_knipperend>:

void blauw_knipperend() {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2104      	movs	r1, #4
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <blauw_knipperend+0x24>)
 800109e:	f001 fa91 	bl	80025c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2108      	movs	r1, #8
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <blauw_knipperend+0x24>)
 80010a8:	f001 fa8c 	bl	80025c4 <HAL_GPIO_WritePin>
    HAL_GPIO_TogglePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN);
 80010ac:	2102      	movs	r1, #2
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <blauw_knipperend+0x24>)
 80010b0:	f001 faa1 	bl	80025f6 <HAL_GPIO_TogglePin>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021400 	.word	0x40021400

080010bc <update_status>:

void update_status(TestStatus nieuwe_status) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    huidig_status = nieuwe_status;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <update_status+0x1c>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	7013      	strb	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	200008e4 	.word	0x200008e4

080010dc <send_active_scenario_to_gui>:
/* Userinterface CODE END*/



/* USB_GUI_ CODE BEGIN*/
void send_active_scenario_to_gui(int scenario_number) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b092      	sub	sp, #72	; 0x48
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    char scenario_message[64];
    sprintf(scenario_message, "ACTIEF_SCENARIO=%d\n", scenario_number);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4906      	ldr	r1, [pc, #24]	; (8001104 <send_active_scenario_to_gui+0x28>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00c fdb9 	bl	800dc64 <siprintf>
    send_status_to_gui(scenario_message);  // Verstuur het scenario
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f806 	bl	8001108 <send_status_to_gui>


}
 80010fc:	bf00      	nop
 80010fe:	3748      	adds	r7, #72	; 0x48
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	080113e4 	.word	0x080113e4

08001108 <send_status_to_gui>:


void send_status_to_gui(char* status_message) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t *)status_message, strlen(status_message));
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f87d 	bl	8000210 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f00b fc5c 	bl	800c9d8 <CDC_Transmit_FS>

}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <receive_settings_and_update_status>:

// Functie om te checken of de knoppen voor starten, pauzeren of stoppen zijn ingedrukt


// Simuleer de ontvangst van instellingen en stuur statusupdates naar de GUI
void receive_settings_and_update_status(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
    // Wachten op instellingen
	update_status (STATUS_WACHTEN_OP_INSTELLINGEN);
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff ffc5 	bl	80010bc <update_status>

    // Simuleer een vertraging voor het ontvangen van instellingen

    // Zodra instellingen zijn ontvangen, stuur de status "Gereed"

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <CheckReceivedData>:

    // Simuleer het uitvoeren van de test

}
void CheckReceivedData(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  // Simuleer het ontvangen van data (normaliter via USB/UART)
  if (receivedLength > 0) {
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <CheckReceivedData+0x28>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00b      	beq.n	800115c <CheckReceivedData+0x24>
    parse_received_data(receivedData);  // Verwerk de ontvangen gegevens
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <CheckReceivedData+0x2c>)
 8001146:	f000 f80f 	bl	8001168 <parse_received_data>
    memset(receivedData, 0, BUFFER_SIZE);  // Clear de buffer na verwerking
 800114a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800114e:	2100      	movs	r1, #0
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <CheckReceivedData+0x2c>)
 8001152:	f00c fa5a 	bl	800d60a <memset>
    receivedLength = 0;
 8001156:	4b02      	ldr	r3, [pc, #8]	; (8001160 <CheckReceivedData+0x28>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
  }
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000880 	.word	0x20000880
 8001164:	20000480 	.word	0x20000480

08001168 <parse_received_data>:

// Functie om de ontvangen data te parsen
void parse_received_data(char* data)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b098      	sub	sp, #96	; 0x60
 800116c:	af16      	add	r7, sp, #88	; 0x58
 800116e:	6078      	str	r0, [r7, #4]
    // Verwacht dataformaat: "STROOM_S1=100.000;STROOM_S2=200.000;THD_S1_RMS=50.000;..."
    // Verwacht dataformaat:
    // "STROOM_S1=100.000;STROOM_S2=200.000;STROOM_S3=300.000;THD_S1_RMS=50.000;THD_S1_3H=15;...THD_S3_13H=10;"

    sscanf(data,
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <parse_received_data+0x7c>)
 8001172:	9315      	str	r3, [sp, #84]	; 0x54
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <parse_received_data+0x80>)
 8001176:	9314      	str	r3, [sp, #80]	; 0x50
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <parse_received_data+0x84>)
 800117a:	9313      	str	r3, [sp, #76]	; 0x4c
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <parse_received_data+0x88>)
 800117e:	9312      	str	r3, [sp, #72]	; 0x48
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <parse_received_data+0x8c>)
 8001182:	9311      	str	r3, [sp, #68]	; 0x44
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <parse_received_data+0x90>)
 8001186:	9310      	str	r3, [sp, #64]	; 0x40
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <parse_received_data+0x94>)
 800118a:	930f      	str	r3, [sp, #60]	; 0x3c
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <parse_received_data+0x98>)
 800118e:	930e      	str	r3, [sp, #56]	; 0x38
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <parse_received_data+0x9c>)
 8001192:	930d      	str	r3, [sp, #52]	; 0x34
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <parse_received_data+0xa0>)
 8001196:	930c      	str	r3, [sp, #48]	; 0x30
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <parse_received_data+0xa4>)
 800119a:	930b      	str	r3, [sp, #44]	; 0x2c
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <parse_received_data+0xa8>)
 800119e:	930a      	str	r3, [sp, #40]	; 0x28
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <parse_received_data+0xac>)
 80011a2:	9309      	str	r3, [sp, #36]	; 0x24
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <parse_received_data+0xb0>)
 80011a6:	9308      	str	r3, [sp, #32]
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <parse_received_data+0xb4>)
 80011aa:	9307      	str	r3, [sp, #28]
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <parse_received_data+0xb8>)
 80011ae:	9306      	str	r3, [sp, #24]
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <parse_received_data+0xbc>)
 80011b2:	9305      	str	r3, [sp, #20]
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <parse_received_data+0xc0>)
 80011b6:	9304      	str	r3, [sp, #16]
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <parse_received_data+0xc4>)
 80011ba:	9303      	str	r3, [sp, #12]
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <parse_received_data+0xc8>)
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <parse_received_data+0xcc>)
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <parse_received_data+0xd0>)
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <parse_received_data+0xd4>)
 80011ca:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <parse_received_data+0xd8>)
 80011cc:	491d      	ldr	r1, [pc, #116]	; (8001244 <parse_received_data+0xdc>)
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f00c fd68 	bl	800dca4 <siscanf>
           &stroom_s1, &stroom_s2, &stroom_s3,
           &thd_s1_rms, &thd_s1_3h, &thd_s1_5h, &thd_s1_7h, &thd_s1_9h, &thd_s1_11h, &thd_s1_13h,
           &thd_s2_rms, &thd_s2_3h, &thd_s2_5h, &thd_s2_7h, &thd_s2_9h, &thd_s2_11h, &thd_s2_13h,
           &thd_s3_rms, &thd_s3_3h, &thd_s3_5h, &thd_s3_7h, &thd_s3_9h, &thd_s3_11h, &thd_s3_13h);

    update_status(STATUS_GEREED);
 80011d4:	2002      	movs	r0, #2
 80011d6:	f7ff ff71 	bl	80010bc <update_status>


}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200008e0 	.word	0x200008e0
 80011e8:	200008dc 	.word	0x200008dc
 80011ec:	200008d8 	.word	0x200008d8
 80011f0:	200008d4 	.word	0x200008d4
 80011f4:	200008d0 	.word	0x200008d0
 80011f8:	200008cc 	.word	0x200008cc
 80011fc:	200008c8 	.word	0x200008c8
 8001200:	200008c4 	.word	0x200008c4
 8001204:	200008c0 	.word	0x200008c0
 8001208:	200008bc 	.word	0x200008bc
 800120c:	200008b8 	.word	0x200008b8
 8001210:	200008b4 	.word	0x200008b4
 8001214:	200008b0 	.word	0x200008b0
 8001218:	200008ac 	.word	0x200008ac
 800121c:	200008a8 	.word	0x200008a8
 8001220:	200008a4 	.word	0x200008a4
 8001224:	200008a0 	.word	0x200008a0
 8001228:	2000089c 	.word	0x2000089c
 800122c:	20000898 	.word	0x20000898
 8001230:	20000894 	.word	0x20000894
 8001234:	20000890 	.word	0x20000890
 8001238:	2000088c 	.word	0x2000088c
 800123c:	20000888 	.word	0x20000888
 8001240:	20000884 	.word	0x20000884
 8001244:	080113f8 	.word	0x080113f8

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f000 fe66 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f862 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f000 f9d2 	bl	80015fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001258:	f000 f97c 	bl	8001554 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800125c:	f000 f9a4 	bl	80015a8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001260:	f000 f92c 	bl	80014bc <MX_TIM2_Init>
  MX_I2S1_Init();
 8001264:	f000 f8c4 	bl	80013f0 <MX_I2S1_Init>
  MX_SPI2_Init();
 8001268:	f000 f8f0 	bl	800144c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  MX_USB_DEVICE_Init();
 800126c:	f00b fac6 	bl	800c7fc <MX_USB_DEVICE_Init>

  usb_busy = true;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <main+0x98>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]

  while (!(HAL_GPIO_ReadPin(GPIO_PORT_VBUS, GPIO_PIN_VBUS) == GPIO_PIN_SET));
 8001276:	bf00      	nop
 8001278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127c:	4819      	ldr	r0, [pc, #100]	; (80012e4 <main+0x9c>)
 800127e:	f001 f989 	bl	8002594 <HAL_GPIO_ReadPin>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d1f7      	bne.n	8001278 <main+0x30>
  receive_settings_and_update_status();
 8001288:	f7ff ff4e 	bl	8001128 <receive_settings_and_update_status>
  HAL_Delay (3000);
 800128c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001290:	f000 feb6 	bl	8002000 <HAL_Delay>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001294:	f008 fd38 	bl	8009d08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <main+0xa0>)
 800129a:	2100      	movs	r1, #0
 800129c:	4813      	ldr	r0, [pc, #76]	; (80012ec <main+0xa4>)
 800129e:	f008 fd7d 	bl	8009d9c <osThreadNew>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <main+0xa8>)
 80012a6:	6013      	str	r3, [r2, #0]

  /* creation of KnopTASK */
  KnopTASKHandle = osThreadNew(StartKnopThread, NULL, &KnopTASK_attributes);
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <main+0xac>)
 80012aa:	2100      	movs	r1, #0
 80012ac:	4812      	ldr	r0, [pc, #72]	; (80012f8 <main+0xb0>)
 80012ae:	f008 fd75 	bl	8009d9c <osThreadNew>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <main+0xb4>)
 80012b6:	6013      	str	r3, [r2, #0]

  /* creation of LedTASK */
  LedTASKHandle = osThreadNew(StartLEDThread, NULL, &LedTASK_attributes);
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <main+0xb8>)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4811      	ldr	r0, [pc, #68]	; (8001304 <main+0xbc>)
 80012be:	f008 fd6d 	bl	8009d9c <osThreadNew>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a10      	ldr	r2, [pc, #64]	; (8001308 <main+0xc0>)
 80012c6:	6013      	str	r3, [r2, #0]

  /* creation of Dac_TASK */
  Dac_TASKHandle = osThreadNew(Simulate_DAC, NULL, &Dac_TASK_attributes);
 80012c8:	4a10      	ldr	r2, [pc, #64]	; (800130c <main+0xc4>)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4810      	ldr	r0, [pc, #64]	; (8001310 <main+0xc8>)
 80012ce:	f008 fd65 	bl	8009d9c <osThreadNew>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <main+0xcc>)
 80012d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012d8:	f008 fd3a 	bl	8009d50 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <main+0x94>
 80012de:	bf00      	nop
 80012e0:	200008e5 	.word	0x200008e5
 80012e4:	40020000 	.word	0x40020000
 80012e8:	080115f0 	.word	0x080115f0
 80012ec:	0800176d 	.word	0x0800176d
 80012f0:	20000470 	.word	0x20000470
 80012f4:	08011614 	.word	0x08011614
 80012f8:	08001781 	.word	0x08001781
 80012fc:	20000474 	.word	0x20000474
 8001300:	08011638 	.word	0x08011638
 8001304:	080017dd 	.word	0x080017dd
 8001308:	20000478 	.word	0x20000478
 800130c:	0801165c 	.word	0x0801165c
 8001310:	080018b5 	.word	0x080018b5
 8001314:	2000047c 	.word	0x2000047c

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	; 0x50
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2234      	movs	r2, #52	; 0x34
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f00c f96f 	bl	800d60a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <SystemClock_Config+0xd0>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <SystemClock_Config+0xd0>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	; 0x40
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <SystemClock_Config+0xd0>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <SystemClock_Config+0xd4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <SystemClock_Config+0xd4>)
 8001362:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <SystemClock_Config+0xd4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001374:	2301      	movs	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137e:	2302      	movs	r3, #2
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001382:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001388:	2306      	movs	r3, #6
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800138c:	23a8      	movs	r3, #168	; 0xa8
 800138e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001394:	2307      	movs	r3, #7
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001398:	2302      	movs	r3, #2
 800139a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fe3f 	bl	8005024 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013ac:	f000 fad4 	bl	8001958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80013b4:	2303      	movs	r3, #3
 80013b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	2105      	movs	r1, #5
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fdf2 	bl	8003fb8 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013da:	f000 fabd 	bl	8001958 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	; 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_I2S1_Init+0x54>)
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <MX_I2S1_Init+0x58>)
 80013f8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2S1_Init+0x54>)
 80013fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001400:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_I2S1_Init+0x54>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_I2S1_Init+0x54>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <MX_I2S1_Init+0x54>)
 8001410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001414:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_I2S1_Init+0x54>)
 8001418:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800141c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_I2S1_Init+0x54>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_I2S1_Init+0x54>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_I2S1_Init+0x54>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2S1_Init+0x54>)
 8001432:	f001 f8fb 	bl	800262c <HAL_I2S_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 800143c:	f000 fa8c 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000300 	.word	0x20000300
 8001448:	40013000 	.word	0x40013000

0800144c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_SPI2_Init+0x68>)
 8001452:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <MX_SPI2_Init+0x6c>)
 8001454:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_SPI2_Init+0x68>)
 8001458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800145c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_SPI2_Init+0x68>)
 8001460:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001464:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_SPI2_Init+0x68>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_SPI2_Init+0x68>)
 800146e:	2202      	movs	r2, #2
 8001470:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_SPI2_Init+0x68>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_SPI2_Init+0x68>)
 800147a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_SPI2_Init+0x68>)
 8001482:	2218      	movs	r2, #24
 8001484:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <MX_SPI2_Init+0x68>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_SPI2_Init+0x68>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <MX_SPI2_Init+0x68>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_SPI2_Init+0x68>)
 800149a:	220a      	movs	r2, #10
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_SPI2_Init+0x68>)
 80014a0:	f004 f85e 	bl	8005560 <HAL_SPI_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80014aa:	f000 fa55 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000348 	.word	0x20000348
 80014b8:	40003800 	.word	0x40003800

080014bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_TIM2_Init+0x94>)
 80014da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_TIM2_Init+0x94>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_TIM2_Init+0x94>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1749;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_TIM2_Init+0x94>)
 80014ee:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80014f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_TIM2_Init+0x94>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_TIM2_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001500:	4813      	ldr	r0, [pc, #76]	; (8001550 <MX_TIM2_Init+0x94>)
 8001502:	f004 f8b6 	bl	8005672 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800150c:	f000 fa24 	bl	8001958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_TIM2_Init+0x94>)
 800151e:	f004 f9ff 	bl	8005920 <HAL_TIM_ConfigClockSource>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001528:	f000 fa16 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_TIM2_Init+0x94>)
 800153a:	f004 fc25 	bl	8005d88 <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001544:	f000 fa08 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200003a0 	.word	0x200003a0

08001554 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_USART1_UART_Init+0x4c>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_USART1_UART_Init+0x50>)
 800155c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_USART1_UART_Init+0x4c>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART1_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USART1_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_USART1_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USART1_UART_Init+0x4c>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_USART1_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USART1_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_USART1_UART_Init+0x4c>)
 800158c:	f004 fc8c 	bl	8005ea8 <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001596:	f000 f9df 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200003e8 	.word	0x200003e8
 80015a4:	40011000 	.word	0x40011000

080015a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_USART3_UART_Init+0x50>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART3_UART_Init+0x4c>)
 80015e0:	f004 fc62 	bl	8005ea8 <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015ea:	f000 f9b5 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000042c 	.word	0x2000042c
 80015f8:	40004800 	.word	0x40004800

080015fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	4b50      	ldr	r3, [pc, #320]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <MX_GPIO_Init+0x15c>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b4d      	ldr	r3, [pc, #308]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	4b49      	ldr	r3, [pc, #292]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a48      	ldr	r2, [pc, #288]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b46      	ldr	r3, [pc, #280]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b42      	ldr	r3, [pc, #264]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a41      	ldr	r2, [pc, #260]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <MX_GPIO_Init+0x15c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <MX_GPIO_Init+0x15c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a3a      	ldr	r2, [pc, #232]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a33      	ldr	r2, [pc, #204]	; (8001758 <MX_GPIO_Init+0x15c>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <MX_GPIO_Init+0x15c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <MX_GPIO_Init+0x15c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a2c      	ldr	r2, [pc, #176]	; (8001758 <MX_GPIO_Init+0x15c>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <MX_GPIO_Init+0x15c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	210e      	movs	r1, #14
 80016be:	4827      	ldr	r0, [pc, #156]	; (800175c <MX_GPIO_Init+0x160>)
 80016c0:	f000 ff80 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin|RE_tranceiver_Pin|DE_tranceiver_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f241 0130 	movw	r1, #4144	; 0x1030
 80016ca:	4825      	ldr	r0, [pc, #148]	; (8001760 <MX_GPIO_Init+0x164>)
 80016cc:	f000 ff7a 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016d6:	4823      	ldr	r0, [pc, #140]	; (8001764 <MX_GPIO_Init+0x168>)
 80016d8:	f000 ff74 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Start_knop_Pin Pauzeer_knop_Pin Stop_knop_Pin */
  GPIO_InitStruct.Pin = Start_knop_Pin|Pauzeer_knop_Pin|Stop_knop_Pin;
 80016dc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	481d      	ldr	r0, [pc, #116]	; (8001768 <MX_GPIO_Init+0x16c>)
 80016f2:	f000 fdbb 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : Blauwe_LED_Pin Groene_LED_Pin Rode_LED_Pin */
  GPIO_InitStruct.Pin = Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin;
 80016f6:	230e      	movs	r3, #14
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <MX_GPIO_Init+0x160>)
 800170e:	f000 fdad 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SYNC_Pin RE_tranceiver_Pin DE_tranceiver_Pin */
  GPIO_InitStruct.Pin = SPI_SYNC_Pin|RE_tranceiver_Pin|DE_tranceiver_Pin;
 8001712:	f241 0330 	movw	r3, #4144	; 0x1030
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <MX_GPIO_Init+0x164>)
 800172c:	f000 fd9e 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : LDAC_Pin */
  GPIO_InitStruct.Pin = LDAC_Pin;
 8001730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDAC_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	4806      	ldr	r0, [pc, #24]	; (8001764 <MX_GPIO_Init+0x168>)
 800174a:	f000 fd8f 	bl	800226c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800174e:	bf00      	nop
 8001750:	3730      	adds	r7, #48	; 0x30
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40021400 	.word	0x40021400
 8001760:	40020400 	.word	0x40020400
 8001764:	40020c00 	.word	0x40020c00
 8001768:	40020800 	.word	0x40020800

0800176c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

    osDelay(100000);
 8001774:	4801      	ldr	r0, [pc, #4]	; (800177c <StartDefaultTask+0x10>)
 8001776:	f008 fba3 	bl	8009ec0 <osDelay>
 800177a:	e7fb      	b.n	8001774 <StartDefaultTask+0x8>
 800177c:	000186a0 	.word	0x000186a0

08001780 <StartKnopThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKnopThread */
void StartKnopThread(void *argument)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKnopThread */
  /* Infinite loop */
	for(;;) {
		if (HAL_GPIO_ReadPin(START_KNOP_PORT, START_KNOP_PIN) == GPIO_PIN_RESET) {
 8001788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178c:	4812      	ldr	r0, [pc, #72]	; (80017d8 <StartKnopThread+0x58>)
 800178e:	f000 ff01 	bl	8002594 <HAL_GPIO_ReadPin>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <StartKnopThread+0x20>
		update_status(STATUS_TEST_GESTART);
 8001798:	2003      	movs	r0, #3
 800179a:	f7ff fc8f 	bl	80010bc <update_status>
 800179e:	e016      	b.n	80017ce <StartKnopThread+0x4e>
		} else if (HAL_GPIO_ReadPin(PAUZEER_KNOP_PORT, PAUZEER_KNOP_PIN) == GPIO_PIN_RESET) {
 80017a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <StartKnopThread+0x58>)
 80017a6:	f000 fef5 	bl	8002594 <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <StartKnopThread+0x38>
		update_status(STATUS_TEST_GEPAUZEERD);
 80017b0:	2004      	movs	r0, #4
 80017b2:	f7ff fc83 	bl	80010bc <update_status>
 80017b6:	e00a      	b.n	80017ce <StartKnopThread+0x4e>
		} else if (HAL_GPIO_ReadPin(STOP_KNOP_PORT, STOP_KNOP_PIN) == GPIO_PIN_RESET) {
 80017b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017bc:	4806      	ldr	r0, [pc, #24]	; (80017d8 <StartKnopThread+0x58>)
 80017be:	f000 fee9 	bl	8002594 <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <StartKnopThread+0x4e>
		update_status(STATUS_TEST_GESTOPT);
 80017c8:	2005      	movs	r0, #5
 80017ca:	f7ff fc77 	bl	80010bc <update_status>
		}

	   osDelay(100);
 80017ce:	2064      	movs	r0, #100	; 0x64
 80017d0:	f008 fb76 	bl	8009ec0 <osDelay>
		if (HAL_GPIO_ReadPin(START_KNOP_PORT, START_KNOP_PIN) == GPIO_PIN_RESET) {
 80017d4:	e7d8      	b.n	8001788 <StartKnopThread+0x8>
 80017d6:	bf00      	nop
 80017d8:	40020800 	.word	0x40020800

080017dc <StartLEDThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDThread */
void StartLEDThread(void *argument)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDThread */
  TestStatus vorige_status = STATUS_IDLE;  // Houdt de vorige stat
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
    for(;;) {
    	 if (huidig_status != vorige_status) {
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <StartLEDThread+0xb8>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d03e      	beq.n	8001870 <StartLEDThread+0x94>


    	      // Zet de vlag op true om de USB-communicatie te reserveren
    		 usb_busy = true;
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <StartLEDThread+0xbc>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]

    	          // De status is veranderd, voer de eenmalige acties uit
    	          switch (huidig_status) {
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <StartLEDThread+0xb8>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d82f      	bhi.n	8001862 <StartLEDThread+0x86>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <StartLEDThread+0x2c>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001821 	.word	0x08001821
 800180c:	08001829 	.word	0x08001829
 8001810:	08001835 	.word	0x08001835
 8001814:	08001847 	.word	0x08001847
 8001818:	0800184f 	.word	0x0800184f
 800181c:	0800185b 	.word	0x0800185b
    	              case STATUS_WACHTEN_OP_INSTELLINGEN:
    	                  send_status_to_gui(WAITING_FOR_SETTINGS);  // Verstuur slechts één keer
 8001820:	481e      	ldr	r0, [pc, #120]	; (800189c <StartLEDThread+0xc0>)
 8001822:	f7ff fc71 	bl	8001108 <send_status_to_gui>
    	                  break;
 8001826:	e01d      	b.n	8001864 <StartLEDThread+0x88>
    	              case STATUS_GEREED:
    	                  send_status_to_gui(READY_STATUS);
 8001828:	481d      	ldr	r0, [pc, #116]	; (80018a0 <StartLEDThread+0xc4>)
 800182a:	f7ff fc6d 	bl	8001108 <send_status_to_gui>
    	                  zet_blauw_licht_aan();
 800182e:	f7ff fbdb 	bl	8000fe8 <zet_blauw_licht_aan>
    	                  break;
 8001832:	e017      	b.n	8001864 <StartLEDThread+0x88>
    	              case STATUS_TEST_GESTART:
    	                  send_status_to_gui(TEST_RUNNING);
 8001834:	481b      	ldr	r0, [pc, #108]	; (80018a4 <StartLEDThread+0xc8>)
 8001836:	f7ff fc67 	bl	8001108 <send_status_to_gui>
    	                  zet_groen_licht_aan();  // Groene LED aan, maar niet knipperend
 800183a:	f7ff fbeb 	bl	8001014 <zet_groen_licht_aan>
    	                  usb_busy =false;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <StartLEDThread+0xbc>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
    	                  break;
 8001844:	e00e      	b.n	8001864 <StartLEDThread+0x88>
    	              case STATUS_TEST_GEPAUZEERD:
    	                  send_status_to_gui(TEST_PAUSED);  // Verstuur status slechts één keer
 8001846:	4818      	ldr	r0, [pc, #96]	; (80018a8 <StartLEDThread+0xcc>)
 8001848:	f7ff fc5e 	bl	8001108 <send_status_to_gui>
    	                  // Knipperende actie wordt hieronder periodiek uitgevoerd
    	                  break;
 800184c:	e00a      	b.n	8001864 <StartLEDThread+0x88>
    	              case STATUS_TEST_GESTOPT:
    	                  send_status_to_gui(TEST_STOPPED);
 800184e:	4817      	ldr	r0, [pc, #92]	; (80018ac <StartLEDThread+0xd0>)
 8001850:	f7ff fc5a 	bl	8001108 <send_status_to_gui>
    	                  zet_rood_licht_aan();  // Rode LED aan
 8001854:	f7ff fbf4 	bl	8001040 <zet_rood_licht_aan>
    	                  break;
 8001858:	e004      	b.n	8001864 <StartLEDThread+0x88>
    	              case STATUS_TEST_VOLTOOID:
    	                  send_status_to_gui(TEST_COMPLETED);  // Verstuur status slechts één keer
 800185a:	4815      	ldr	r0, [pc, #84]	; (80018b0 <StartLEDThread+0xd4>)
 800185c:	f7ff fc54 	bl	8001108 <send_status_to_gui>
    	                  // Knipperende actie wordt hieronder periodiek uitgevoerd
    	                  break;
 8001860:	e000      	b.n	8001864 <StartLEDThread+0x88>
    	              default:
    	                  break;
 8001862:	bf00      	nop
    	          }

    	          // Update de vorige status na het uitvoeren van de actie
    	          vorige_status = huidig_status;
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <StartLEDThread+0xb8>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	73fb      	strb	r3, [r7, #15]
    	          usb_busy = false;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <StartLEDThread+0xbc>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]

    	      }

    	      // Periodieke acties (knipperende LEDs) blijven elke 100 ms draaien, ongeacht statusverandering
    	      switch (huidig_status) {
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <StartLEDThread+0xb8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b04      	cmp	r3, #4
 8001876:	d002      	beq.n	800187e <StartLEDThread+0xa2>
 8001878:	2b06      	cmp	r3, #6
 800187a:	d003      	beq.n	8001884 <StartLEDThread+0xa8>
    	          case STATUS_TEST_VOLTOOID:
    	              blauw_knipperend();  // Blauw knipperen als voltooid
    	              break;
    	          default:
    	              // Geen knipperende LED's in andere statussen
    	              break;
 800187c:	e005      	b.n	800188a <StartLEDThread+0xae>
    	              groen_knipperend();  // Groen knipperen terwijl gepauzeerd
 800187e:	f7ff fbf5 	bl	800106c <groen_knipperend>
    	              break;
 8001882:	e002      	b.n	800188a <StartLEDThread+0xae>
    	              blauw_knipperend();  // Blauw knipperen als voltooid
 8001884:	f7ff fc06 	bl	8001094 <blauw_knipperend>
    	              break;
 8001888:	bf00      	nop
    	      }

    	      // Delay van 100 ms om knipperen te laten werken en CPU te sparen
    	      osDelay(100);
 800188a:	2064      	movs	r0, #100	; 0x64
 800188c:	f008 fb18 	bl	8009ec0 <osDelay>
    	 if (huidig_status != vorige_status) {
 8001890:	e7aa      	b.n	80017e8 <StartLEDThread+0xc>
 8001892:	bf00      	nop
 8001894:	200008e4 	.word	0x200008e4
 8001898:	200008e5 	.word	0x200008e5
 800189c:	0801153c 	.word	0x0801153c
 80018a0:	08011554 	.word	0x08011554
 80018a4:	0801155c 	.word	0x0801155c
 80018a8:	0801156c 	.word	0x0801156c
 80018ac:	08011578 	.word	0x08011578
 80018b0:	08011580 	.word	0x08011580

080018b4 <Simulate_DAC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Simulate_DAC */
void Simulate_DAC(void *argument)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Simulate_DAC */
  /* Infinite loop */

  int scenario=1;
 80018bc:	2301      	movs	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
  {




	    while ((huidig_status == STATUS_TEST_GESTART && usb_busy == false)  || huidig_status == STATUS_TEST_GEPAUZEERD) {
 80018c0:	e031      	b.n	8001926 <Simulate_DAC+0x72>
			   // Deze Delay is noodzakkelijk anders voert hij de send_status_to_gui(TEST_RUNNING);niet uit in de status thread.
	    	   osDelay(10);
 80018c2:	200a      	movs	r0, #10
 80018c4:	f008 fafc 	bl	8009ec0 <osDelay>


			  // Stuur het actieve scenario naar de GUI
				usb_busy = true;
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <Simulate_DAC+0x9c>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
				send_active_scenario_to_gui(scenario);
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f7ff fc04 	bl	80010dc <send_active_scenario_to_gui>
				usb_busy = false;
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <Simulate_DAC+0x9c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
				// Zet de vlag weer op false zodat andere threads de USB kunnen gebruiken


			  // Simuleer een vertraging tijdens het draaien van dit scenario
			  for (int i = 0; i < 5000; i++) { // Delay van 5 seconden
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	e011      	b.n	8001904 <Simulate_DAC+0x50>
			   // Controleer tijdens de delay of de test gepauzeerd is
					if (huidig_status == STATUS_TEST_GEPAUZEERD) {
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <Simulate_DAC+0xa0>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d107      	bne.n	80018f8 <Simulate_DAC+0x44>
					  // Als de test gepauzeerd is, blijf in deze lus totdat de status verandert
						  while (huidig_status == STATUS_TEST_GEPAUZEERD) {
 80018e8:	e002      	b.n	80018f0 <Simulate_DAC+0x3c>
							osDelay(1); // Wacht kleine intervallen en check status continu
 80018ea:	2001      	movs	r0, #1
 80018ec:	f008 fae8 	bl	8009ec0 <osDelay>
						  while (huidig_status == STATUS_TEST_GEPAUZEERD) {
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <Simulate_DAC+0xa0>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d0f8      	beq.n	80018ea <Simulate_DAC+0x36>
						  }
					}
					osDelay(1);  // Dit vervangt de HAL_Delay met osDelay
 80018f8:	2001      	movs	r0, #1
 80018fa:	f008 fae1 	bl	8009ec0 <osDelay>
			  for (int i = 0; i < 5000; i++) { // Delay van 5 seconden
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	3301      	adds	r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f241 3287 	movw	r2, #4999	; 0x1387
 800190a:	4293      	cmp	r3, r2
 800190c:	dde8      	ble.n	80018e0 <Simulate_DAC+0x2c>
			  }

			  // Verhoog het scenario
			  scenario++;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3301      	adds	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
			  if (scenario > 6) {
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b06      	cmp	r3, #6
 8001918:	dd05      	ble.n	8001926 <Simulate_DAC+0x72>
				// Als alle scenario's zijn afgerond, stel de status in op voltooid
				huidig_status = STATUS_TEST_VOLTOOID;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <Simulate_DAC+0xa0>)
 800191c:	2206      	movs	r2, #6
 800191e:	701a      	strb	r2, [r3, #0]
				scenario = 1;
 8001920:	2301      	movs	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
				break;  // Breek de while-loop
 8001924:	e00f      	b.n	8001946 <Simulate_DAC+0x92>
	    while ((huidig_status == STATUS_TEST_GESTART && usb_busy == false)  || huidig_status == STATUS_TEST_GEPAUZEERD) {
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <Simulate_DAC+0xa0>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d107      	bne.n	800193e <Simulate_DAC+0x8a>
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <Simulate_DAC+0x9c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	f083 0301 	eor.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1c1      	bne.n	80018c2 <Simulate_DAC+0xe>
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <Simulate_DAC+0xa0>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b04      	cmp	r3, #4
 8001944:	d0bd      	beq.n	80018c2 <Simulate_DAC+0xe>

	    }


	// Kleine vertraging om CPU te besparen
	osDelay(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f008 faba 	bl	8009ec0 <osDelay>
	    while ((huidig_status == STATUS_TEST_GESTART && usb_busy == false)  || huidig_status == STATUS_TEST_GEPAUZEERD) {
 800194c:	e7eb      	b.n	8001926 <Simulate_DAC+0x72>
 800194e:	bf00      	nop
 8001950:	200008e5 	.word	0x200008e5
 8001954:	200008e4 	.word	0x200008e4

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
}
 800195e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001960:	e7fe      	b.n	8001960 <Error_Handler+0x8>
	...

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_MspInit+0x54>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_MspInit+0x54>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_MspInit+0x54>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_MspInit+0x54>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_MspInit+0x54>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_MspInit+0x54>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	210f      	movs	r1, #15
 80019a6:	f06f 0001 	mvn.w	r0, #1
 80019aa:	f000 fc28 	bl	80021fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0a2      	sub	sp, #136	; 0x88
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	225c      	movs	r2, #92	; 0x5c
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f00b fe14 	bl	800d60a <memset>
  if(hi2s->Instance==SPI1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a37      	ldr	r2, [pc, #220]	; (8001ac4 <HAL_I2S_MspInit+0x108>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d167      	bne.n	8001abc <HAL_I2S_MspInit+0x100>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80019f0:	2332      	movs	r3, #50	; 0x32
 80019f2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 6;
 80019f8:	2306      	movs	r3, #6
 80019fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 fbeb 	bl	80041ec <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8001a1c:	f7ff ff9c 	bl	8001958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_I2S_MspInit+0x10c>)
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	4a27      	ldr	r2, [pc, #156]	; (8001ac8 <HAL_I2S_MspInit+0x10c>)
 8001a2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_I2S_MspInit+0x10c>)
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_I2S_MspInit+0x10c>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <HAL_I2S_MspInit+0x10c>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_I2S_MspInit+0x10c>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_I2S_MspInit+0x10c>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <HAL_I2S_MspInit+0x10c>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6313      	str	r3, [r2, #48]	; 0x30
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_I2S_MspInit+0x10c>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001a74:	23b0      	movs	r3, #176	; 0xb0
 8001a76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a86:	2305      	movs	r3, #5
 8001a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a90:	4619      	mov	r1, r3
 8001a92:	480e      	ldr	r0, [pc, #56]	; (8001acc <HAL_I2S_MspInit+0x110>)
 8001a94:	f000 fbea 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aaa:	2305      	movs	r3, #5
 8001aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <HAL_I2S_MspInit+0x114>)
 8001ab8:	f000 fbd8 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	3788      	adds	r7, #136	; 0x88
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013000 	.word	0x40013000
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020800 	.word	0x40020800

08001ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_SPI_MspInit+0x84>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d12c      	bne.n	8001b50 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_SPI_MspInit+0x88>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_SPI_MspInit+0x88>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_SPI_MspInit+0x88>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_SPI_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_SPI_MspInit+0x88>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_SPI_MspInit+0x88>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b2e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b40:	2305      	movs	r3, #5
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_SPI_MspInit+0x8c>)
 8001b4c:	f000 fb8e 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40003800 	.word	0x40003800
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020400 	.word	0x40020400

08001b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b74:	d115      	bne.n	8001ba2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_TIM_Base_MspInit+0x48>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_TIM_Base_MspInit+0x48>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_TIM_Base_MspInit+0x48>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2105      	movs	r1, #5
 8001b96:	201c      	movs	r0, #28
 8001b98:	f000 fb31 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b9c:	201c      	movs	r0, #28
 8001b9e:	f000 fb4a 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a32      	ldr	r2, [pc, #200]	; (8001c98 <HAL_UART_MspInit+0xe8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12c      	bne.n	8001c2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001bdc:	f043 0310 	orr.w	r3, r3, #16
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c0a:	23c0      	movs	r3, #192	; 0xc0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	481e      	ldr	r0, [pc, #120]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c26:	f000 fb21 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c2a:	e031      	b.n	8001c90 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_UART_MspInit+0xf4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d12c      	bne.n	8001c90 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCOM_TX_STLINK_Pin|VCOM_RX_ST_LINK_Pin;
 8001c6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c80:	2307      	movs	r3, #7
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c8c:	f000 faee 	bl	800226c <HAL_GPIO_Init>
}
 8001c90:	bf00      	nop
 8001c92:	3730      	adds	r7, #48	; 0x30
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40011000 	.word	0x40011000
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40004800 	.word	0x40004800

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler+0x4>

08001cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f000 f972 	bl	8001fc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001cdc:	f009 fd28 	bl	800b730 <xTaskGetSchedulerState>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ce6:	f00a fb0f 	bl	800c308 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <TIM2_IRQHandler+0x10>)
 8001cf6:	f003 fd0b 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200003a0 	.word	0x200003a0

08001d04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <OTG_FS_IRQHandler+0x10>)
 8001d0a:	f000 ffe3 	bl	8002cd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200067e0 	.word	0x200067e0

08001d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_kill>:

int _kill(int pid, int sig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d32:	f00b fb39 	bl	800d3a8 <__errno>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2216      	movs	r2, #22
 8001d3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe7 	bl	8001d28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5a:	e7fe      	b.n	8001d5a <_exit+0x12>

08001d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e00a      	b.n	8001d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d6e:	f3af 8000 	nop.w
 8001d72:	4601      	mov	r1, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60ba      	str	r2, [r7, #8]
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf0      	blt.n	8001d6e <_read+0x12>
  }

  return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e009      	b.n	8001dbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	60ba      	str	r2, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbf1      	blt.n	8001da8 <_write+0x12>
  }
  return len;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_close>:

int _close(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df6:	605a      	str	r2, [r3, #4]
  return 0;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <_isatty>:

int _isatty(int file)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f00b fa9e 	bl	800d3a8 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20020000 	.word	0x20020000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	200008e8 	.word	0x200008e8
 8001ea0:	20006f20 	.word	0x20006f20

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ece:	490e      	ldr	r1, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee4:	4c0b      	ldr	r4, [pc, #44]	; (8001f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef2:	f7ff ffd7 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f00b fb53 	bl	800d5a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7ff f9a5 	bl	8001248 <main>
  bx  lr    
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8001f0c:	08011af8 	.word	0x08011af8
  ldr r2, =_sbss
 8001f10:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8001f14:	20006f1c 	.word	0x20006f1c

08001f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f94f 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	200f      	movs	r0, #15
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fd08 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f967 	bl	8002252 <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 f92f 	bl	80021fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	200008ec 	.word	0x200008ec

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	200008ec 	.word	0x200008ec

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <__NVIC_EnableIRQ+0x38>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	; (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b4:	d301      	bcc.n	80021ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00f      	b.n	80021da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <SysTick_Config+0x40>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c2:	210f      	movs	r1, #15
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f7ff ff8e 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <SysTick_Config+0x40>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <SysTick_Config+0x40>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff29 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff3e 	bl	8002090 <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff8e 	bl	800213c <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5d 	bl	80020e8 <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff31 	bl	80020ac <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffa2 	bl	80021a4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e165      	b.n	8002554 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f040 8154 	bne.w	800254e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d005      	beq.n	80022be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d130      	bne.n	8002320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 0201 	and.w	r2, r3, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b03      	cmp	r3, #3
 800232a:	d017      	beq.n	800235c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80ae 	beq.w	800254e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_GPIO_Init+0x300>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a5c      	ldr	r2, [pc, #368]	; (800256c <HAL_GPIO_Init+0x300>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b5a      	ldr	r3, [pc, #360]	; (800256c <HAL_GPIO_Init+0x300>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240e:	4a58      	ldr	r2, [pc, #352]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4f      	ldr	r2, [pc, #316]	; (8002574 <HAL_GPIO_Init+0x308>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d025      	beq.n	8002486 <HAL_GPIO_Init+0x21a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4e      	ldr	r2, [pc, #312]	; (8002578 <HAL_GPIO_Init+0x30c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d01f      	beq.n	8002482 <HAL_GPIO_Init+0x216>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4d      	ldr	r2, [pc, #308]	; (800257c <HAL_GPIO_Init+0x310>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d019      	beq.n	800247e <HAL_GPIO_Init+0x212>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4c      	ldr	r2, [pc, #304]	; (8002580 <HAL_GPIO_Init+0x314>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_GPIO_Init+0x20e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4b      	ldr	r2, [pc, #300]	; (8002584 <HAL_GPIO_Init+0x318>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00d      	beq.n	8002476 <HAL_GPIO_Init+0x20a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4a      	ldr	r2, [pc, #296]	; (8002588 <HAL_GPIO_Init+0x31c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <HAL_GPIO_Init+0x206>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a49      	ldr	r2, [pc, #292]	; (800258c <HAL_GPIO_Init+0x320>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_GPIO_Init+0x202>
 800246a:	2306      	movs	r3, #6
 800246c:	e00c      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 800246e:	2307      	movs	r3, #7
 8002470:	e00a      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 8002472:	2305      	movs	r3, #5
 8002474:	e008      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 8002476:	2304      	movs	r3, #4
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 800247a:	2303      	movs	r3, #3
 800247c:	e004      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 800247e:	2302      	movs	r3, #2
 8002480:	e002      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 8002486:	2300      	movs	r3, #0
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	f002 0203 	and.w	r2, r2, #3
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	4093      	lsls	r3, r2
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002498:	4935      	ldr	r1, [pc, #212]	; (8002570 <HAL_GPIO_Init+0x304>)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a6:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <HAL_GPIO_Init+0x324>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ca:	4a31      	ldr	r2, [pc, #196]	; (8002590 <HAL_GPIO_Init+0x324>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d0:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <HAL_GPIO_Init+0x324>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f4:	4a26      	ldr	r2, [pc, #152]	; (8002590 <HAL_GPIO_Init+0x324>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024fa:	4b25      	ldr	r3, [pc, #148]	; (8002590 <HAL_GPIO_Init+0x324>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_GPIO_Init+0x324>)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_GPIO_Init+0x324>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <HAL_GPIO_Init+0x324>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b0f      	cmp	r3, #15
 8002558:	f67f ae96 	bls.w	8002288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	40013800 	.word	0x40013800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020400 	.word	0x40020400
 800257c:	40020800 	.word	0x40020800
 8002580:	40020c00 	.word	0x40020c00
 8002584:	40021000 	.word	0x40021000
 8002588:	40021400 	.word	0x40021400
 800258c:	40021800 	.word	0x40021800
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	041a      	lsls	r2, r3, #16
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43d9      	mvns	r1, r3
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	400b      	ands	r3, r1
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0e1      	b.n	8002802 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a6d      	ldr	r2, [pc, #436]	; (800280c <HAL_I2S_Init+0x1e0>)
 8002656:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff f9af 	bl	80019bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002674:	f023 030f 	bic.w	r3, r3, #15
 8002678:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2202      	movs	r2, #2
 8002680:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d06f      	beq.n	800276a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002692:	2310      	movs	r3, #16
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e001      	b.n	800269c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d802      	bhi.n	80026aa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_I2S_Init+0x1e4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d004      	beq.n	80026be <HAL_I2S_Init+0x92>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a56      	ldr	r2, [pc, #344]	; (8002814 <HAL_I2S_Init+0x1e8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d104      	bne.n	80026c8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80026be:	2001      	movs	r0, #1
 80026c0:	f002 f8be 	bl	8004840 <HAL_RCCEx_GetPeriphCLKFreq>
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	e003      	b.n	80026d0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80026c8:	2002      	movs	r0, #2
 80026ca:	f002 f8b9 	bl	8004840 <HAL_RCCEx_GetPeriphCLKFreq>
 80026ce:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d8:	d125      	bne.n	8002726 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d010      	beq.n	8002704 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	461a      	mov	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	3305      	adds	r3, #5
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	e01f      	b.n	8002744 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	fbb2 f2f3 	udiv	r2, r2, r3
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	3305      	adds	r3, #5
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	e00e      	b.n	8002744 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fbb2 f2f3 	udiv	r2, r2, r3
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	461a      	mov	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	3305      	adds	r3, #5
 8002742:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_I2S_Init+0x1ec>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e003      	b.n	8002772 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800276a:	2302      	movs	r3, #2
 800276c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d902      	bls.n	800277e <HAL_I2S_Init+0x152>
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2bff      	cmp	r3, #255	; 0xff
 800277c:	d907      	bls.n	800278e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f043 0210 	orr.w	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e039      	b.n	8002802 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	ea42 0103 	orr.w	r1, r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	430a      	orrs	r2, r1
 80027a0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027ac:	f023 030f 	bic.w	r3, r3, #15
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6851      	ldr	r1, [r2, #4]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6892      	ldr	r2, [r2, #8]
 80027b8:	4311      	orrs	r1, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	4311      	orrs	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6992      	ldr	r2, [r2, #24]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b30      	cmp	r3, #48	; 0x30
 80027d8:	d003      	beq.n	80027e2 <HAL_I2S_Init+0x1b6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2bb0      	cmp	r3, #176	; 0xb0
 80027e0:	d107      	bne.n	80027f2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027f0:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	08002913 	.word	0x08002913
 8002810:	40003800 	.word	0x40003800
 8002814:	40003c00 	.word	0x40003c00
 8002818:	cccccccd 	.word	0xcccccccd

0800281c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	881a      	ldrh	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c9a      	adds	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10e      	bne.n	80028ac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800289c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ffb8 	bl	800281c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	b292      	uxth	r2, r2
 80028c8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	1c9a      	adds	r2, r3, #2
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10e      	bne.n	800290a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028fa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff93 	bl	8002830 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b04      	cmp	r3, #4
 800292c:	d13a      	bne.n	80029a4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d109      	bne.n	800294c <I2S_IRQHandler+0x3a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d102      	bne.n	800294c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ffb4 	bl	80028b4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d126      	bne.n	80029a4 <I2S_IRQHandler+0x92>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b20      	cmp	r3, #32
 8002962:	d11f      	bne.n	80029a4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002972:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f043 0202 	orr.w	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ff50 	bl	8002844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d136      	bne.n	8002a1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d109      	bne.n	80029ce <I2S_IRQHandler+0xbc>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c4:	2b80      	cmp	r3, #128	; 0x80
 80029c6:	d102      	bne.n	80029ce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff45 	bl	8002858 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d122      	bne.n	8002a1e <I2S_IRQHandler+0x10c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d11b      	bne.n	8002a1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029f4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	f043 0204 	orr.w	r2, r3, #4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff13 	bl	8002844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a28:	b08f      	sub	sp, #60	; 0x3c
 8002a2a:	af0a      	add	r7, sp, #40	; 0x28
 8002a2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e116      	b.n	8002c66 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f00a f922 	bl	800cc9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fded 	bl	8006656 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	687e      	ldr	r6, [r7, #4]
 8002a84:	466d      	mov	r5, sp
 8002a86:	f106 0410 	add.w	r4, r6, #16
 8002a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a96:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a9a:	1d33      	adds	r3, r6, #4
 8002a9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a9e:	6838      	ldr	r0, [r7, #0]
 8002aa0:	f003 fcc4 	bl	800642c <USB_CoreInit>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0d7      	b.n	8002c66 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 fddb 	bl	8006678 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e04a      	b.n	8002b5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	333d      	adds	r3, #61	; 0x3d
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	333c      	adds	r3, #60	; 0x3c
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	b298      	uxth	r0, r3
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	3344      	adds	r3, #68	; 0x44
 8002b04:	4602      	mov	r2, r0
 8002b06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3340      	adds	r3, #64	; 0x40
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	3348      	adds	r3, #72	; 0x48
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	334c      	adds	r3, #76	; 0x4c
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	3354      	adds	r3, #84	; 0x54
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d3af      	bcc.n	8002ac8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e044      	b.n	8002bf8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d3b5      	bcc.n	8002b6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	687e      	ldr	r6, [r7, #4]
 8002c0a:	466d      	mov	r5, sp
 8002c0c:	f106 0410 	add.w	r4, r6, #16
 8002c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c20:	1d33      	adds	r3, r6, #4
 8002c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c24:	6838      	ldr	r0, [r7, #0]
 8002c26:	f003 fd73 	bl	8006710 <USB_DevInit>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e014      	b.n	8002c66 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d102      	bne.n	8002c5a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f001 f98b 	bl	8003f70 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 feb5 	bl	80079ce <USB_DevDisconnect>

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_PCD_Start+0x1c>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e020      	b.n	8002ccc <HAL_PCD_Start+0x5e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d109      	bne.n	8002cae <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d005      	beq.n	8002cae <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fcbe 	bl	8006634 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f004 fe65 	bl	800798c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b08d      	sub	sp, #52	; 0x34
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 ff23 	bl	8007b36 <USB_GetMode>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 84b7 	bne.w	8003666 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f004 fe87 	bl	8007a10 <USB_ReadInterrupts>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 84ad 	beq.w	8003664 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 fe74 	bl	8007a10 <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d107      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f002 0202 	and.w	r2, r2, #2
 8002d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f004 fe62 	bl	8007a10 <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d161      	bne.n	8002e1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0210 	bic.w	r2, r2, #16
 8002d64:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	0c5b      	lsrs	r3, r3, #17
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d124      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d035      	beq.n	8002e0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6a38      	ldr	r0, [r7, #32]
 8002db2:	f004 fc99 	bl	80076e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc2:	441a      	add	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	6a1a      	ldr	r2, [r3, #32]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd4:	441a      	add	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	621a      	str	r2, [r3, #32]
 8002dda:	e016      	b.n	8002e0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	0c5b      	lsrs	r3, r3, #17
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d110      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dee:	2208      	movs	r2, #8
 8002df0:	4619      	mov	r1, r3
 8002df2:	6a38      	ldr	r0, [r7, #32]
 8002df4:	f004 fc78 	bl	80076e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e04:	441a      	add	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0210 	orr.w	r2, r2, #16
 8002e18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f004 fdf6 	bl	8007a10 <USB_ReadInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e2e:	f040 80a7 	bne.w	8002f80 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 fdfb 	bl	8007a36 <USB_ReadDevAllOutEpInterrupt>
 8002e40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e42:	e099      	b.n	8002f78 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 808e 	beq.w	8002f6c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f004 fe1f 	bl	8007a9e <USB_ReadDevOutEPInterrupt>
 8002e60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 feef 	bl	8003c64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00c      	beq.n	8002eaa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 ffc5 	bl	8003e34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2310      	movs	r3, #16
 8002ec4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d030      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed8:	2b80      	cmp	r3, #128	; 0x80
 8002eda:	d109      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	3304      	adds	r3, #4
 8002f04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	78db      	ldrb	r3, [r3, #3]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d108      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f009 ffe8 	bl	800cef0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2302      	movs	r3, #2
 8002f30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f64:	461a      	mov	r2, r3
 8002f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	3301      	adds	r3, #1
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f47f af62 	bne.w	8002e44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f004 fd43 	bl	8007a10 <USB_ReadInterrupts>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f94:	f040 80db 	bne.w	800314e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 fd64 	bl	8007a6a <USB_ReadDevAllInEpInterrupt>
 8002fa2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fa8:	e0cd      	b.n	8003146 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80c2 	beq.w	800313a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 fd8a 	bl	8007ada <USB_ReadDevInEPInterrupt>
 8002fc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d057      	beq.n	8003082 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	2201      	movs	r2, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69f9      	ldr	r1, [r7, #28]
 8002fee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003002:	461a      	mov	r2, r3
 8003004:	2301      	movs	r3, #1
 8003006:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d132      	bne.n	8003076 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	334c      	adds	r3, #76	; 0x4c
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4403      	add	r3, r0
 8003030:	3348      	adds	r3, #72	; 0x48
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4419      	add	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4403      	add	r3, r0
 8003044:	334c      	adds	r3, #76	; 0x4c
 8003046:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d113      	bne.n	8003076 <HAL_PCD_IRQHandler+0x3a2>
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3354      	adds	r3, #84	; 0x54
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d108      	bne.n	8003076 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800306e:	461a      	mov	r2, r3
 8003070:	2101      	movs	r1, #1
 8003072:	f004 fd91 	bl	8007b98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f009 feb2 	bl	800cde6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003098:	461a      	mov	r2, r3
 800309a:	2308      	movs	r3, #8
 800309c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b4:	461a      	mov	r2, r3
 80030b6:	2310      	movs	r3, #16
 80030b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d0:	461a      	mov	r2, r3
 80030d2:	2340      	movs	r3, #64	; 0x40
 80030d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d023      	beq.n	8003128 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e2:	6a38      	ldr	r0, [r7, #32]
 80030e4:	f003 fc72 	bl	80069cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	3338      	adds	r3, #56	; 0x38
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	3304      	adds	r3, #4
 80030fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	78db      	ldrb	r3, [r3, #3]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d108      	bne.n	8003116 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4619      	mov	r1, r3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f009 feff 	bl	800cf14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003122:	461a      	mov	r2, r3
 8003124:	2302      	movs	r3, #2
 8003126:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fd08 	bl	8003b4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	3301      	adds	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	2b00      	cmp	r3, #0
 800314a:	f47f af2e 	bne.w	8002faa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f004 fc5c 	bl	8007a10 <USB_ReadInterrupts>
 8003158:	4603      	mov	r3, r0
 800315a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800315e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003162:	d122      	bne.n	80031aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800317e:	2b01      	cmp	r3, #1
 8003180:	d108      	bne.n	8003194 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800318a:	2100      	movs	r1, #0
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f00a f879 	bl	800d284 <HAL_PCDEx_LPM_Callback>
 8003192:	e002      	b.n	800319a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f009 fe9d 	bl	800ced4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f004 fc2e 	bl	8007a10 <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031be:	d112      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f009 fe59 	bl	800ce88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031e4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 fc10 	bl	8007a10 <USB_ReadInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031fa:	d121      	bne.n	8003240 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800320a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d111      	bne.n	800323a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003230:	2101      	movs	r1, #1
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f00a f826 	bl	800d284 <HAL_PCDEx_LPM_Callback>
 8003238:	e002      	b.n	8003240 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f009 fe24 	bl	800ce88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f004 fbe3 	bl	8007a10 <USB_ReadInterrupts>
 800324a:	4603      	mov	r3, r0
 800324c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003254:	f040 80b7 	bne.w	80033c6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2110      	movs	r1, #16
 8003272:	4618      	mov	r0, r3
 8003274:	f003 fbaa 	bl	80069cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327c:	e046      	b.n	800330c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328a:	461a      	mov	r2, r3
 800328c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003290:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a2:	0151      	lsls	r1, r2, #5
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	440a      	add	r2, r1
 80032a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032be:	461a      	mov	r2, r3
 80032c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d6:	0151      	lsls	r1, r2, #5
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	440a      	add	r2, r1
 80032dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f6:	0151      	lsls	r1, r2, #5
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	440a      	add	r2, r1
 80032fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003300:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003304:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	3301      	adds	r3, #1
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003312:	429a      	cmp	r2, r3
 8003314:	d3b3      	bcc.n	800327e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003324:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003328:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003342:	f043 030b 	orr.w	r3, r3, #11
 8003346:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003358:	f043 030b 	orr.w	r3, r3, #11
 800335c:	6453      	str	r3, [r2, #68]	; 0x44
 800335e:	e015      	b.n	800338c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003372:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003376:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003386:	f043 030b 	orr.w	r3, r3, #11
 800338a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800339e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033b0:	461a      	mov	r2, r3
 80033b2:	f004 fbf1 	bl	8007b98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80033c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f004 fb20 	bl	8007a10 <USB_ReadInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033da:	d124      	bne.n	8003426 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f004 fbb6 	bl	8007b52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fb6b 	bl	8006ac6 <USB_GetDevSpeed>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681c      	ldr	r4, [r3, #0]
 80033fc:	f000 fec2 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 8003400:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003406:	b2db      	uxtb	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	4620      	mov	r0, r4
 800340c:	f003 f870 	bl	80064f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f009 fd10 	bl	800ce36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003424:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f004 faf0 	bl	8007a10 <USB_ReadInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b08      	cmp	r3, #8
 8003438:	d10a      	bne.n	8003450 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f009 fced 	bl	800ce1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f002 0208 	and.w	r2, r2, #8
 800344e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f004 fadb 	bl	8007a10 <USB_ReadInterrupts>
 800345a:	4603      	mov	r3, r0
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d122      	bne.n	80034aa <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003470:	2301      	movs	r3, #1
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
 8003474:	e014      	b.n	80034a0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d105      	bne.n	800349a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fb27 	bl	8003ae8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	3301      	adds	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d3e5      	bcc.n	8003476 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 faae 	bl	8007a10 <USB_ReadInterrupts>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034be:	d13b      	bne.n	8003538 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c0:	2301      	movs	r3, #1
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	e02b      	b.n	800351e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3340      	adds	r3, #64	; 0x40
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d115      	bne.n	8003518 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da12      	bge.n	8003518 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	333f      	adds	r3, #63	; 0x3f
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800350e:	b2db      	uxtb	r3, r3
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fae8 	bl	8003ae8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	3301      	adds	r3, #1
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	429a      	cmp	r2, r3
 8003526:	d3ce      	bcc.n	80034c6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f004 fa67 	bl	8007a10 <USB_ReadInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800354c:	d155      	bne.n	80035fa <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800354e:	2301      	movs	r3, #1
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	e045      	b.n	80035e0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d12e      	bne.n	80035da <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800357c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800357e:	2b00      	cmp	r3, #0
 8003580:	da2b      	bge.n	80035da <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800358e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003592:	429a      	cmp	r2, r3
 8003594:	d121      	bne.n	80035da <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035d6:	6053      	str	r3, [r2, #4]
            break;
 80035d8:	e007      	b.n	80035ea <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	3301      	adds	r3, #1
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d3b4      	bcc.n	8003554 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 fa06 	bl	8007a10 <USB_ReadInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d10a      	bne.n	8003626 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f009 fc91 	bl	800cf38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f004 f9f0 	bl	8007a10 <USB_ReadInterrupts>
 8003630:	4603      	mov	r3, r0
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b04      	cmp	r3, #4
 8003638:	d115      	bne.n	8003666 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f009 fc81 	bl	800cf54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	e000      	b.n	8003666 <HAL_PCD_IRQHandler+0x992>
      return;
 8003664:	bf00      	nop
    }
  }
}
 8003666:	3734      	adds	r7, #52	; 0x34
 8003668:	46bd      	mov	sp, r7
 800366a:	bd90      	pop	{r4, r7, pc}

0800366c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_PCD_SetAddress+0x1a>
 8003682:	2302      	movs	r3, #2
 8003684:	e013      	b.n	80036ae <HAL_PCD_SetAddress+0x42>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 f94e 	bl	8007940 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	4608      	mov	r0, r1
 80036c0:	4611      	mov	r1, r2
 80036c2:	461a      	mov	r2, r3
 80036c4:	4603      	mov	r3, r0
 80036c6:	70fb      	strb	r3, [r7, #3]
 80036c8:	460b      	mov	r3, r1
 80036ca:	803b      	strh	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	da0f      	bge.n	80036fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	f003 020f 	and.w	r2, r3, #15
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	3338      	adds	r3, #56	; 0x38
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4413      	add	r3, r2
 80036f0:	3304      	adds	r3, #4
 80036f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	705a      	strb	r2, [r3, #1]
 80036fa:	e00f      	b.n	800371c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	f003 020f 	and.w	r2, r3, #15
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	3304      	adds	r3, #4
 8003714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	b2da      	uxtb	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003728:	883a      	ldrh	r2, [r7, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	78ba      	ldrb	r2, [r7, #2]
 8003732:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003746:	78bb      	ldrb	r3, [r7, #2]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d102      	bne.n	8003752 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_PCD_EP_Open+0xaa>
 800375c:	2302      	movs	r3, #2
 800375e:	e00e      	b.n	800377e <HAL_PCD_EP_Open+0xc8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	4618      	mov	r0, r3
 8003770:	f003 f9ce 	bl	8006b10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800377c:	7afb      	ldrb	r3, [r7, #11]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003796:	2b00      	cmp	r3, #0
 8003798:	da0f      	bge.n	80037ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	f003 020f 	and.w	r2, r3, #15
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	3338      	adds	r3, #56	; 0x38
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	3304      	adds	r3, #4
 80037b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	705a      	strb	r2, [r3, #1]
 80037b8:	e00f      	b.n	80037da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	3304      	adds	r3, #4
 80037d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_PCD_EP_Close+0x6e>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e00e      	b.n	8003812 <HAL_PCD_EP_Close+0x8c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68f9      	ldr	r1, [r7, #12]
 8003802:	4618      	mov	r0, r3
 8003804:	f003 fa0c 	bl	8006c20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	460b      	mov	r3, r1
 8003828:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382a:	7afb      	ldrb	r3, [r7, #11]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	3304      	adds	r3, #4
 8003842:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2200      	movs	r2, #0
 8003854:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800385c:	7afb      	ldrb	r3, [r7, #11]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	b2da      	uxtb	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d102      	bne.n	8003876 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003876:	7afb      	ldrb	r3, [r7, #11]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	6979      	ldr	r1, [r7, #20]
 800388e:	f003 fceb 	bl	8007268 <USB_EP0StartXfer>
 8003892:	e008      	b.n	80038a6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	6979      	ldr	r1, [r7, #20]
 80038a2:	f003 fa99 	bl	8006dd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	460b      	mov	r3, r1
 80038ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f0:	7afb      	ldrb	r3, [r7, #11]
 80038f2:	f003 020f 	and.w	r2, r3, #15
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	3338      	adds	r3, #56	; 0x38
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	3304      	adds	r3, #4
 8003906:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2201      	movs	r2, #1
 800391e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	b2da      	uxtb	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800393a:	7afb      	ldrb	r3, [r7, #11]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	f003 fc89 	bl	8007268 <USB_EP0StartXfer>
 8003956:	e008      	b.n	800396a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	6979      	ldr	r1, [r7, #20]
 8003966:	f003 fa37 	bl	8006dd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	f003 020f 	and.w	r2, r3, #15
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	429a      	cmp	r2, r3
 800398c:	d901      	bls.n	8003992 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e050      	b.n	8003a34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003996:	2b00      	cmp	r3, #0
 8003998:	da0f      	bge.n	80039ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	f003 020f 	and.w	r2, r3, #15
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	3338      	adds	r3, #56	; 0x38
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	3304      	adds	r3, #4
 80039b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	705a      	strb	r2, [r3, #1]
 80039b8:	e00d      	b.n	80039d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4413      	add	r3, r2
 80039cc:	3304      	adds	r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_PCD_EP_SetStall+0x82>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e01e      	b.n	8003a34 <HAL_PCD_EP_SetStall+0xc0>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f003 fec7 	bl	8007798 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	b2d9      	uxtb	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a24:	461a      	mov	r2, r3
 8003a26:	f004 f8b7 	bl	8007b98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	f003 020f 	and.w	r2, r3, #15
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d901      	bls.n	8003a5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e042      	b.n	8003ae0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	da0f      	bge.n	8003a82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	f003 020f 	and.w	r2, r3, #15
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	3338      	adds	r3, #56	; 0x38
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	705a      	strb	r2, [r3, #1]
 8003a80:	e00f      	b.n	8003aa2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 020f 	and.w	r2, r3, #15
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_PCD_EP_ClrStall+0x86>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e00e      	b.n	8003ae0 <HAL_PCD_EP_ClrStall+0xa4>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68f9      	ldr	r1, [r7, #12]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 fecf 	bl	8007874 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	da0c      	bge.n	8003b16 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	f003 020f 	and.w	r2, r3, #15
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	3338      	adds	r3, #56	; 0x38
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	3304      	adds	r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e00c      	b.n	8003b30 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	f003 020f 	and.w	r2, r3, #15
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68f9      	ldr	r1, [r7, #12]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 fcee 	bl	8007518 <USB_EPStopXfer>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b40:	7afb      	ldrb	r3, [r7, #11]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b08a      	sub	sp, #40	; 0x28
 8003b4e:	af02      	add	r7, sp, #8
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	3338      	adds	r3, #56	; 0x38
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3304      	adds	r3, #4
 8003b70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d901      	bls.n	8003b82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e06c      	b.n	8003c5c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d902      	bls.n	8003b9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3303      	adds	r3, #3
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba6:	e02b      	b.n	8003c00 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d902      	bls.n	8003bc4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3303      	adds	r3, #3
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6919      	ldr	r1, [r3, #16]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	4603      	mov	r3, r0
 8003be2:	6978      	ldr	r0, [r7, #20]
 8003be4:	f003 fd42 	bl	800766c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	441a      	add	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	441a      	add	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d809      	bhi.n	8003c2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1a      	ldr	r2, [r3, #32]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d203      	bcs.n	8003c2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1be      	bne.n	8003ba8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d811      	bhi.n	8003c5a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	6939      	ldr	r1, [r7, #16]
 8003c52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c56:	4013      	ands	r3, r2
 8003c58:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	333c      	adds	r3, #60	; 0x3c
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d17b      	bne.n	8003d92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d015      	beq.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4a61      	ldr	r2, [pc, #388]	; (8003e2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	f240 80b9 	bls.w	8003e20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80b3 	beq.w	8003e20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ccc:	6093      	str	r3, [r2, #8]
 8003cce:	e0a7      	b.n	8003e20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2320      	movs	r3, #32
 8003cea:	6093      	str	r3, [r2, #8]
 8003cec:	e098      	b.n	8003e20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f040 8093 	bne.w	8003e20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	4a4b      	ldr	r2, [pc, #300]	; (8003e2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d90f      	bls.n	8003d22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1e:	6093      	str	r3, [r2, #8]
 8003d20:	e07e      	b.n	8003e20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	3304      	adds	r3, #4
 8003d36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	0159      	lsls	r1, r3, #5
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	440b      	add	r3, r1
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4e:	1ad2      	subs	r2, r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d114      	bne.n	8003d84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2101      	movs	r1, #1
 8003d70:	f003 ff12 	bl	8007b98 <USB_EP0_OutStart>
 8003d74:	e006      	b.n	8003d84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	441a      	add	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f009 f810 	bl	800cdb0 <HAL_PCD_DataOutStageCallback>
 8003d90:	e046      	b.n	8003e20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d124      	bne.n	8003de4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db6:	6093      	str	r3, [r2, #8]
 8003db8:	e032      	b.n	8003e20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f008 ffe7 	bl	800cdb0 <HAL_PCD_DataOutStageCallback>
 8003de2:	e01d      	b.n	8003e20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d114      	bne.n	8003e14 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d108      	bne.n	8003e14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2100      	movs	r1, #0
 8003e10:	f003 fec2 	bl	8007b98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f008 ffc8 	bl	800cdb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	4f54300a 	.word	0x4f54300a
 8003e30:	4f54310a 	.word	0x4f54310a

08003e34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	333c      	adds	r3, #60	; 0x3c
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <PCD_EP_OutSetupPacket_int+0x88>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d90e      	bls.n	8003e88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	461a      	mov	r2, r3
 8003e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f008 ff7f 	bl	800cd8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <PCD_EP_OutSetupPacket_int+0x88>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d90c      	bls.n	8003eb0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d108      	bne.n	8003eb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	2101      	movs	r1, #1
 8003eac:	f003 fe74 	bl	8007b98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	4f54300a 	.word	0x4f54300a

08003ec0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d107      	bne.n	8003eee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ede:	883b      	ldrh	r3, [r7, #0]
 8003ee0:	0419      	lsls	r1, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
 8003eec:	e028      	b.n	8003f40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	4413      	add	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e00d      	b.n	8003f1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	3340      	adds	r3, #64	; 0x40
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4413      	add	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
 8003f1e:	7bfa      	ldrb	r2, [r7, #15]
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d3ec      	bcc.n	8003f02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f28:	883b      	ldrh	r3, [r7, #0]
 8003f2a:	0418      	lsls	r0, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	4302      	orrs	r2, r0
 8003f38:	3340      	adds	r3, #64	; 0x40
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	f043 0303 	orr.w	r3, r3, #3
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0cc      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b68      	ldr	r3, [pc, #416]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d90c      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b65      	ldr	r3, [pc, #404]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b63      	ldr	r3, [pc, #396]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b8      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800400c:	4b59      	ldr	r3, [pc, #356]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a58      	ldr	r2, [pc, #352]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004024:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b50      	ldr	r3, [pc, #320]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	494d      	ldr	r1, [pc, #308]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d044      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d119      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e07f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d003      	beq.n	8004076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004072:	2b03      	cmp	r3, #3
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004086:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e067      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 0203 	bic.w	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4934      	ldr	r1, [pc, #208]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a8:	f7fd ff9e 	bl	8001fe8 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fd ff9a 	bl	8001fe8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e04f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 020c 	and.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1eb      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d20c      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e032      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4916      	ldr	r1, [pc, #88]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	490e      	ldr	r1, [pc, #56]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413e:	f000 fdc7 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004142:	4602      	mov	r2, r0
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	490a      	ldr	r1, [pc, #40]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	5ccb      	ldrb	r3, [r1, r3]
 8004152:	fa22 f303 	lsr.w	r3, r2, r3
 8004156:	4a09      	ldr	r2, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1c8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fd fefe 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023c00 	.word	0x40023c00
 8004174:	40023800 	.word	0x40023800
 8004178:	08011680 	.word	0x08011680
 800417c:	20000000 	.word	0x20000000
 8004180:	20000004 	.word	0x20000004

08004184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_RCC_GetHCLKFreq+0x14>)
 800418a:	681b      	ldr	r3, [r3, #0]
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000000 	.word	0x20000000

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041a0:	f7ff fff0 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0a9b      	lsrs	r3, r3, #10
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	08011690 	.word	0x08011690

080041c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041c8:	f7ff ffdc 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0b5b      	lsrs	r3, r3, #13
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40023800 	.word	0x40023800
 80041e8:	08011690 	.word	0x08011690

080041ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	; 0x30
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004224:	4b6f      	ldr	r3, [pc, #444]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800422a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	496c      	ldr	r1, [pc, #432]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004242:	2301      	movs	r3, #1
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d010      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004252:	4b64      	ldr	r3, [pc, #400]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004258:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	4960      	ldr	r1, [pc, #384]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004270:	2301      	movs	r3, #1
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d017      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004280:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	4955      	ldr	r1, [pc, #340]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429e:	d101      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80042a0:	2301      	movs	r3, #1
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80042ac:	2301      	movs	r3, #1
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d017      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042bc:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ca:	4946      	ldr	r1, [pc, #280]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042da:	d101      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80042dc:	2301      	movs	r3, #1
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80042e8:	2301      	movs	r3, #1
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 808a 	beq.w	800440e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	4a38      	ldr	r2, [pc, #224]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004308:	6413      	str	r3, [r2, #64]	; 0x40
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004316:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a33      	ldr	r2, [pc, #204]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004322:	f7fd fe61 	bl	8001fe8 <HAL_GetTick>
 8004326:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800432a:	f7fd fe5d 	bl	8001fe8 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e278      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800433c:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004348:	4b26      	ldr	r3, [pc, #152]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004350:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004360:	6a3a      	ldr	r2, [r7, #32]
 8004362:	429a      	cmp	r2, r3
 8004364:	d028      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004366:	4b1f      	ldr	r3, [pc, #124]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004370:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004376:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800437c:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d114      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800438e:	f7fd fe2b 	bl	8001fe8 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004394:	e00a      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004396:	f7fd fe27 	bl	8001fe8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d901      	bls.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e240      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ac:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ee      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c4:	d114      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80043c6:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043da:	4902      	ldr	r1, [pc, #8]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	608b      	str	r3, [r1, #8]
 80043e0:	e00c      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40007000 	.word	0x40007000
 80043ec:	42470e40 	.word	0x42470e40
 80043f0:	4b4a      	ldr	r3, [pc, #296]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4a49      	ldr	r2, [pc, #292]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043fa:	6093      	str	r3, [r2, #8]
 80043fc:	4b47      	ldr	r3, [pc, #284]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004408:	4944      	ldr	r1, [pc, #272]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800440a:	4313      	orrs	r3, r2
 800440c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004420:	4b3f      	ldr	r3, [pc, #252]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004422:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004430:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004436:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	4937      	ldr	r1, [pc, #220]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004452:	4b32      	ldr	r3, [pc, #200]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004458:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004460:	492e      	ldr	r1, [pc, #184]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d011      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004474:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	4926      	ldr	r1, [pc, #152]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004492:	d101      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004494:	2301      	movs	r3, #1
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	491a      	ldr	r1, [pc, #104]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d011      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	4911      	ldr	r1, [pc, #68]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80044e6:	2301      	movs	r3, #1
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d005      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f8:	f040 80ff 	bne.w	80046fa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004502:	f7fd fd71 	bl	8001fe8 <HAL_GetTick>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004508:	e00e      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800450a:	f7fd fd6d 	bl	8001fe8 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d907      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e188      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800451c:	40023800 	.word	0x40023800
 8004520:	424711e0 	.word	0x424711e0
 8004524:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004528:	4b7e      	ldr	r3, [pc, #504]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ea      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004550:	2b00      	cmp	r3, #0
 8004552:	d028      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d124      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800455c:	4b71      	ldr	r3, [pc, #452]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800455e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004562:	0c1b      	lsrs	r3, r3, #16
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	3301      	adds	r3, #1
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800456e:	4b6d      	ldr	r3, [pc, #436]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004574:	0e1b      	lsrs	r3, r3, #24
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	019b      	lsls	r3, r3, #6
 8004586:	431a      	orrs	r2, r3
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	3b01      	subs	r3, #1
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	071b      	lsls	r3, r3, #28
 800459e:	4961      	ldr	r1, [pc, #388]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d035      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d0:	d130      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80045d2:	4b54      	ldr	r3, [pc, #336]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	3301      	adds	r3, #1
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045e4:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ea:	0f1b      	lsrs	r3, r3, #28
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	019b      	lsls	r3, r3, #6
 80045fc:	431a      	orrs	r2, r3
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	3b01      	subs	r3, #1
 8004604:	041b      	lsls	r3, r3, #16
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	061b      	lsls	r3, r3, #24
 800460e:	431a      	orrs	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	071b      	lsls	r3, r3, #28
 8004614:	4943      	ldr	r1, [pc, #268]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800461c:	4b41      	ldr	r3, [pc, #260]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800461e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004622:	f023 021f 	bic.w	r2, r3, #31
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	493d      	ldr	r1, [pc, #244]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463c:	2b00      	cmp	r3, #0
 800463e:	d029      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004648:	d124      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800464a:	4b36      	ldr	r3, [pc, #216]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800464c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800465c:	4b31      	ldr	r3, [pc, #196]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800465e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004662:	0f1b      	lsrs	r3, r3, #28
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	019b      	lsls	r3, r3, #6
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	3b01      	subs	r3, #1
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	431a      	orrs	r2, r3
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	431a      	orrs	r2, r3
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	071b      	lsls	r3, r3, #28
 800468c:	4925      	ldr	r1, [pc, #148]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800469c:	2b00      	cmp	r3, #0
 800469e:	d016      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	3b01      	subs	r3, #1
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	071b      	lsls	r3, r3, #28
 80046c6:	4917      	ldr	r1, [pc, #92]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046ce:	4b16      	ldr	r3, [pc, #88]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046d4:	f7fd fc88 	bl	8001fe8 <HAL_GetTick>
 80046d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046dc:	f7fd fc84 	bl	8001fe8 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e09f      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ee:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	f040 8095 	bne.w	800482c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004708:	f7fd fc6e 	bl	8001fe8 <HAL_GetTick>
 800470c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800470e:	e00f      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004710:	f7fd fc6a 	bl	8001fe8 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d908      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e085      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004722:	bf00      	nop
 8004724:	40023800 	.word	0x40023800
 8004728:	42470068 	.word	0x42470068
 800472c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004730:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800473c:	d0e8      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800475a:	2b00      	cmp	r3, #0
 800475c:	d02b      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	2b00      	cmp	r3, #0
 8004764:	d127      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004766:	4b34      	ldr	r3, [pc, #208]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	3301      	adds	r3, #1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699a      	ldr	r2, [r3, #24]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	019b      	lsls	r3, r3, #6
 8004782:	431a      	orrs	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	3b01      	subs	r3, #1
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	061b      	lsls	r3, r3, #24
 8004794:	4928      	ldr	r1, [pc, #160]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800479c:	4b26      	ldr	r3, [pc, #152]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	3b01      	subs	r3, #1
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	4922      	ldr	r1, [pc, #136]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01d      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x612>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ca:	d118      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047cc:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	0e1b      	lsrs	r3, r3, #24
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	019b      	lsls	r3, r3, #6
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	3b01      	subs	r3, #1
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	4910      	ldr	r1, [pc, #64]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004804:	f7fd fbf0 	bl	8001fe8 <HAL_GetTick>
 8004808:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800480c:	f7fd fbec 	bl	8001fe8 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e007      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800482a:	d1ef      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3730      	adds	r7, #48	; 0x30
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	42470070 	.word	0x42470070

08004840 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3b01      	subs	r3, #1
 8004864:	2b07      	cmp	r3, #7
 8004866:	f200 8224 	bhi.w	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004a73 	.word	0x08004a73
 8004874:	08004b9d 	.word	0x08004b9d
 8004878:	08004cb3 	.word	0x08004cb3
 800487c:	08004891 	.word	0x08004891
 8004880:	08004cb3 	.word	0x08004cb3
 8004884:	08004cb3 	.word	0x08004cb3
 8004888:	08004cb3 	.word	0x08004cb3
 800488c:	08004891 	.word	0x08004891
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004890:	4ba8      	ldr	r3, [pc, #672]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004896:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048a6:	f000 80d6 	beq.w	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048b0:	f200 80dd 	bhi.w	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ba:	f000 809f 	beq.w	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048c4:	f200 80d3 	bhi.w	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ce:	d05b      	beq.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d6:	f200 80ca 	bhi.w	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048e0:	f000 80b6 	beq.w	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ea:	f200 80c0 	bhi.w	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f4:	f000 8082 	beq.w	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048fe:	f200 80b6 	bhi.w	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490e:	d03b      	beq.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8004910:	e0ad      	b.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004912:	4b88      	ldr	r3, [pc, #544]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800491e:	4b85      	ldr	r3, [pc, #532]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004928:	4a83      	ldr	r2, [pc, #524]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	e008      	b.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8004932:	4b80      	ldr	r3, [pc, #512]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800493c:	4a7f      	ldr	r2, [pc, #508]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004944:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	0e1b      	lsrs	r3, r3, #24
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8004952:	4b78      	ldr	r3, [pc, #480]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	099b      	lsrs	r3, r3, #6
 800495a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	fb03 f202 	mul.w	r2, r3, r2
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800496c:	4b71      	ldr	r3, [pc, #452]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800496e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	3301      	adds	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	61fb      	str	r3, [r7, #28]
          break;
 8004986:	e073      	b.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004988:	4b6a      	ldr	r3, [pc, #424]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004994:	4b67      	ldr	r3, [pc, #412]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800499e:	4a66      	ldr	r2, [pc, #408]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80049a8:	4b62      	ldr	r3, [pc, #392]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80049aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b2:	4a62      	ldr	r2, [pc, #392]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80049ba:	4b5e      	ldr	r3, [pc, #376]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80049bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c0:	0e1b      	lsrs	r3, r3, #24
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80049c8:	4b5a      	ldr	r3, [pc, #360]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80049ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ce:	099b      	lsrs	r3, r3, #6
 80049d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	fb03 f202 	mul.w	r2, r3, r2
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80049e2:	4b54      	ldr	r3, [pc, #336]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80049e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	3301      	adds	r3, #1
 80049ee:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	61fb      	str	r3, [r7, #28]
          break;
 80049fa:	e039      	b.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80049fc:	4b4d      	ldr	r3, [pc, #308]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d108      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a08:	4b4a      	ldr	r3, [pc, #296]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a10:	4a49      	ldr	r2, [pc, #292]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e007      	b.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004a1a:	4b46      	ldr	r3, [pc, #280]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a22:	4a46      	ldr	r2, [pc, #280]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8004a2a:	4b42      	ldr	r3, [pc, #264]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	0f1b      	lsrs	r3, r3, #28
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8004a36:	4b3f      	ldr	r3, [pc, #252]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	fb03 f202 	mul.w	r2, r3, r2
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	61fb      	str	r3, [r7, #28]
          break;
 8004a4e:	e00f      	b.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a50:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004a52:	61fb      	str	r3, [r7, #28]
          break;
 8004a54:	e00c      	b.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004a56:	4b37      	ldr	r3, [pc, #220]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8004a62:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004a64:	61fb      	str	r3, [r7, #28]
          break;
 8004a66:	e003      	b.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8004a68:	4b34      	ldr	r3, [pc, #208]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004a6a:	61fb      	str	r3, [r7, #28]
          break;
 8004a6c:	e000      	b.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8004a6e:	bf00      	nop
        }
      }
      break;
 8004a70:	e11f      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004a72:	4b30      	ldr	r3, [pc, #192]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a78:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004a84:	d079      	beq.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004a8c:	f200 8082 	bhi.w	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a96:	d03c      	beq.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a9e:	d879      	bhi.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d006      	beq.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aac:	d172      	bne.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004ab0:	61fb      	str	r3, [r7, #28]
          break;
 8004ab2:	e072      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ab4:	4b1f      	ldr	r3, [pc, #124]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac0:	d109      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004acc:	4a1b      	ldr	r2, [pc, #108]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	61bb      	str	r3, [r7, #24]
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ad6:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ae8:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aee:	099b      	lsrs	r3, r3, #6
 8004af0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b02:	0f1b      	lsrs	r3, r3, #28
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	61fb      	str	r3, [r7, #28]
          break;
 8004b10:	e043      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b12:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b1e:	d111      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b20:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b28:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	e010      	b.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004b32:	bf00      	nop
 8004b34:	40023800 	.word	0x40023800
 8004b38:	00f42400 	.word	0x00f42400
 8004b3c:	00b71b00 	.word	0x00b71b00
 8004b40:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b44:	4b5e      	ldr	r3, [pc, #376]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b4c:	4a5d      	ldr	r2, [pc, #372]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004b54:	4b5a      	ldr	r3, [pc, #360]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	099b      	lsrs	r3, r3, #6
 8004b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	fb02 f303 	mul.w	r3, r2, r3
 8004b64:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004b66:	4b56      	ldr	r3, [pc, #344]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	0f1b      	lsrs	r3, r3, #28
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	61fb      	str	r3, [r7, #28]
          break;
 8004b78:	e00f      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b7a:	4b51      	ldr	r3, [pc, #324]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b86:	d102      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8004b88:	4b4f      	ldr	r3, [pc, #316]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004b8a:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004b8c:	e005      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8004b8e:	4b4d      	ldr	r3, [pc, #308]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004b90:	61fb      	str	r3, [r7, #28]
          break;
 8004b92:	e002      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
          break;
 8004b98:	bf00      	nop
        }
      }
      break;
 8004b9a:	e08a      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004b9c:	4b48      	ldr	r3, [pc, #288]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba2:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004bae:	d06f      	beq.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004bb6:	d878      	bhi.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bbe:	d03c      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bc6:	d870      	bhi.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d006      	beq.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd4:	d169      	bne.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bd6:	4b3d      	ldr	r3, [pc, #244]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004bd8:	61fb      	str	r3, [r7, #28]
          break;
 8004bda:	e069      	b.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bdc:	4b38      	ldr	r3, [pc, #224]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be8:	d109      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004bea:	4b35      	ldr	r3, [pc, #212]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf4:	4a34      	ldr	r2, [pc, #208]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	e008      	b.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004bfe:	4b30      	ldr	r3, [pc, #192]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c08:	4a2e      	ldr	r2, [pc, #184]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c10:	4b2b      	ldr	r3, [pc, #172]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c24:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2a:	0f1b      	lsrs	r3, r3, #28
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c36:	61fb      	str	r3, [r7, #28]
          break;
 8004c38:	e03a      	b.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c3a:	4b21      	ldr	r3, [pc, #132]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c46:	d108      	bne.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c48:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c50:	4a1d      	ldr	r2, [pc, #116]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	e007      	b.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c5a:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c62:	4a18      	ldr	r2, [pc, #96]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004c6a:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	0f1b      	lsrs	r3, r3, #28
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	61fb      	str	r3, [r7, #28]
          break;
 8004c8e:	e00f      	b.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c9c:	d102      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004ca0:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004ca2:	e005      	b.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8004ca4:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004ca6:	61fb      	str	r3, [r7, #28]
          break;
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
          break;
 8004cae:	bf00      	nop
        }
      }
      break;
 8004cb0:	bf00      	nop
    }
  }
  return frequency;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3724      	adds	r7, #36	; 0x24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	00f42400 	.word	0x00f42400
 8004cc8:	00b71b00 	.word	0x00b71b00
 8004ccc:	00bb8000 	.word	0x00bb8000

08004cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd4:	b0a6      	sub	sp, #152	; 0x98
 8004cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf6:	4bc8      	ldr	r3, [pc, #800]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	f200 817e 	bhi.w	8005000 <HAL_RCC_GetSysClockFreq+0x330>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08005001 	.word	0x08005001
 8004d14:	08005001 	.word	0x08005001
 8004d18:	08005001 	.word	0x08005001
 8004d1c:	08004d49 	.word	0x08004d49
 8004d20:	08005001 	.word	0x08005001
 8004d24:	08005001 	.word	0x08005001
 8004d28:	08005001 	.word	0x08005001
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08005001 	.word	0x08005001
 8004d34:	08005001 	.word	0x08005001
 8004d38:	08005001 	.word	0x08005001
 8004d3c:	08004ebb 	.word	0x08004ebb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d40:	4bb6      	ldr	r3, [pc, #728]	; (800501c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004d46:	e15f      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d48:	4bb5      	ldr	r3, [pc, #724]	; (8005020 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004d4e:	e15b      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d50:	4bb1      	ldr	r3, [pc, #708]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d5c:	4bae      	ldr	r3, [pc, #696]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d031      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d68:	4bab      	ldr	r3, [pc, #684]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	099b      	lsrs	r3, r3, #6
 8004d6e:	2200      	movs	r2, #0
 8004d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d80:	4ba7      	ldr	r3, [pc, #668]	; (8005020 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d82:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004d86:	462a      	mov	r2, r5
 8004d88:	fb03 f202 	mul.w	r2, r3, r2
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4621      	mov	r1, r4
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	4aa2      	ldr	r2, [pc, #648]	; (8005020 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d98:	4621      	mov	r1, r4
 8004d9a:	fba1 1202 	umull	r1, r2, r1, r2
 8004d9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004da0:	460a      	mov	r2, r1
 8004da2:	67ba      	str	r2, [r7, #120]	; 0x78
 8004da4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004da6:	4413      	add	r3, r2
 8004da8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dae:	2200      	movs	r2, #0
 8004db0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004db2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004db4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004db8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004dbc:	f7fb ff5c 	bl	8000c78 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004dca:	e064      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dcc:	4b92      	ldr	r3, [pc, #584]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	099b      	lsrs	r3, r3, #6
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd6:	657a      	str	r2, [r7, #84]	; 0x54
 8004dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8004de0:	2300      	movs	r3, #0
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004de8:	4622      	mov	r2, r4
 8004dea:	462b      	mov	r3, r5
 8004dec:	f04f 0000 	mov.w	r0, #0
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	0159      	lsls	r1, r3, #5
 8004df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dfa:	0150      	lsls	r0, r2, #5
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4621      	mov	r1, r4
 8004e02:	1a51      	subs	r1, r2, r1
 8004e04:	6139      	str	r1, [r7, #16]
 8004e06:	4629      	mov	r1, r5
 8004e08:	eb63 0301 	sbc.w	r3, r3, r1
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e1a:	4659      	mov	r1, fp
 8004e1c:	018b      	lsls	r3, r1, #6
 8004e1e:	4651      	mov	r1, sl
 8004e20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e24:	4651      	mov	r1, sl
 8004e26:	018a      	lsls	r2, r1, #6
 8004e28:	4651      	mov	r1, sl
 8004e2a:	ebb2 0801 	subs.w	r8, r2, r1
 8004e2e:	4659      	mov	r1, fp
 8004e30:	eb63 0901 	sbc.w	r9, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e48:	4690      	mov	r8, r2
 8004e4a:	4699      	mov	r9, r3
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	eb18 0303 	adds.w	r3, r8, r3
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	462b      	mov	r3, r5
 8004e56:	eb49 0303 	adc.w	r3, r9, r3
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e68:	4629      	mov	r1, r5
 8004e6a:	028b      	lsls	r3, r1, #10
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e72:	4621      	mov	r1, r4
 8004e74:	028a      	lsls	r2, r1, #10
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7e:	2200      	movs	r2, #0
 8004e80:	643b      	str	r3, [r7, #64]	; 0x40
 8004e82:	647a      	str	r2, [r7, #68]	; 0x44
 8004e84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e88:	f7fb fef6 	bl	8000c78 <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4613      	mov	r3, r2
 8004e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e96:	4b60      	ldr	r3, [pc, #384]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004ea8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004eb8:	e0a6      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eba:	4b57      	ldr	r3, [pc, #348]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec6:	4b54      	ldr	r3, [pc, #336]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d02a      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed2:	4b51      	ldr	r3, [pc, #324]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	2200      	movs	r2, #0
 8004eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4b4e      	ldr	r3, [pc, #312]	; (8005020 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ee8:	fb03 f201 	mul.w	r2, r3, r1
 8004eec:	2300      	movs	r3, #0
 8004eee:	fb00 f303 	mul.w	r3, r0, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	4a4a      	ldr	r2, [pc, #296]	; (8005020 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ef6:	fba0 1202 	umull	r1, r2, r0, r2
 8004efa:	677a      	str	r2, [r7, #116]	; 0x74
 8004efc:	460a      	mov	r2, r1
 8004efe:	673a      	str	r2, [r7, #112]	; 0x70
 8004f00:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f02:	4413      	add	r3, r2
 8004f04:	677b      	str	r3, [r7, #116]	; 0x74
 8004f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f0e:	637a      	str	r2, [r7, #52]	; 0x34
 8004f10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f14:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004f18:	f7fb feae 	bl	8000c78 <__aeabi_uldivmod>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4613      	mov	r3, r2
 8004f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f26:	e05b      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f28:	4b3b      	ldr	r3, [pc, #236]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	099b      	lsrs	r3, r3, #6
 8004f2e:	2200      	movs	r2, #0
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f44:	4642      	mov	r2, r8
 8004f46:	464b      	mov	r3, r9
 8004f48:	f04f 0000 	mov.w	r0, #0
 8004f4c:	f04f 0100 	mov.w	r1, #0
 8004f50:	0159      	lsls	r1, r3, #5
 8004f52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f56:	0150      	lsls	r0, r2, #5
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f62:	4649      	mov	r1, r9
 8004f64:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f7c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f80:	eb63 050b 	sbc.w	r5, r3, fp
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	00eb      	lsls	r3, r5, #3
 8004f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f92:	00e2      	lsls	r2, r4, #3
 8004f94:	4614      	mov	r4, r2
 8004f96:	461d      	mov	r5, r3
 8004f98:	4643      	mov	r3, r8
 8004f9a:	18e3      	adds	r3, r4, r3
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	eb45 0303 	adc.w	r3, r5, r3
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	028b      	lsls	r3, r1, #10
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	028a      	lsls	r2, r1, #10
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fc8:	2200      	movs	r2, #0
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	61fa      	str	r2, [r7, #28]
 8004fce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fd2:	f7fb fe51 	bl	8000c78 <__aeabi_uldivmod>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4613      	mov	r3, r2
 8004fdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	0f1b      	lsrs	r3, r3, #28
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004ffe:	e003      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005006:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005008:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800500c:	4618      	mov	r0, r3
 800500e:	3798      	adds	r7, #152	; 0x98
 8005010:	46bd      	mov	sp, r7
 8005012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800
 800501c:	00f42400 	.word	0x00f42400
 8005020:	00b71b00 	.word	0x00b71b00

08005024 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e28d      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8083 	beq.w	800514a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005044:	4b94      	ldr	r3, [pc, #592]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 030c 	and.w	r3, r3, #12
 800504c:	2b04      	cmp	r3, #4
 800504e:	d019      	beq.n	8005084 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005050:	4b91      	ldr	r3, [pc, #580]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005058:	2b08      	cmp	r3, #8
 800505a:	d106      	bne.n	800506a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800505c:	4b8e      	ldr	r3, [pc, #568]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005068:	d00c      	beq.n	8005084 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800506a:	4b8b      	ldr	r3, [pc, #556]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d112      	bne.n	800509c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005076:	4b88      	ldr	r3, [pc, #544]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005082:	d10b      	bne.n	800509c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005084:	4b84      	ldr	r3, [pc, #528]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d05b      	beq.n	8005148 <HAL_RCC_OscConfig+0x124>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d157      	bne.n	8005148 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e25a      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a4:	d106      	bne.n	80050b4 <HAL_RCC_OscConfig+0x90>
 80050a6:	4b7c      	ldr	r3, [pc, #496]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a7b      	ldr	r2, [pc, #492]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e01d      	b.n	80050f0 <HAL_RCC_OscConfig+0xcc>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCC_OscConfig+0xb4>
 80050be:	4b76      	ldr	r3, [pc, #472]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a75      	ldr	r2, [pc, #468]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80050c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	4b73      	ldr	r3, [pc, #460]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a72      	ldr	r2, [pc, #456]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	e00b      	b.n	80050f0 <HAL_RCC_OscConfig+0xcc>
 80050d8:	4b6f      	ldr	r3, [pc, #444]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a6e      	ldr	r2, [pc, #440]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80050de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	4b6c      	ldr	r3, [pc, #432]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a6b      	ldr	r2, [pc, #428]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80050ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d013      	beq.n	8005120 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fc ff76 	bl	8001fe8 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005100:	f7fc ff72 	bl	8001fe8 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b64      	cmp	r3, #100	; 0x64
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e21f      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	4b61      	ldr	r3, [pc, #388]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0xdc>
 800511e:	e014      	b.n	800514a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fc ff62 	bl	8001fe8 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005128:	f7fc ff5e 	bl	8001fe8 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b64      	cmp	r3, #100	; 0x64
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e20b      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513a:	4b57      	ldr	r3, [pc, #348]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x104>
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d06f      	beq.n	8005236 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005156:	4b50      	ldr	r3, [pc, #320]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
 800515e:	2b00      	cmp	r3, #0
 8005160:	d017      	beq.n	8005192 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005162:	4b4d      	ldr	r3, [pc, #308]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800516a:	2b08      	cmp	r3, #8
 800516c:	d105      	bne.n	800517a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800516e:	4b4a      	ldr	r3, [pc, #296]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00b      	beq.n	8005192 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800517a:	4b47      	ldr	r3, [pc, #284]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005182:	2b0c      	cmp	r3, #12
 8005184:	d11c      	bne.n	80051c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005186:	4b44      	ldr	r3, [pc, #272]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d116      	bne.n	80051c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005192:	4b41      	ldr	r3, [pc, #260]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <HAL_RCC_OscConfig+0x186>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d001      	beq.n	80051aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e1d3      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051aa:	4b3b      	ldr	r3, [pc, #236]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4937      	ldr	r1, [pc, #220]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051be:	e03a      	b.n	8005236 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d020      	beq.n	800520a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c8:	4b34      	ldr	r3, [pc, #208]	; (800529c <HAL_RCC_OscConfig+0x278>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ce:	f7fc ff0b 	bl	8001fe8 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d6:	f7fc ff07 	bl	8001fe8 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e1b4      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e8:	4b2b      	ldr	r3, [pc, #172]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f4:	4b28      	ldr	r3, [pc, #160]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4925      	ldr	r1, [pc, #148]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 8005204:	4313      	orrs	r3, r2
 8005206:	600b      	str	r3, [r1, #0]
 8005208:	e015      	b.n	8005236 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <HAL_RCC_OscConfig+0x278>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fc feea 	bl	8001fe8 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005218:	f7fc fee6 	bl	8001fe8 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e193      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d036      	beq.n	80052b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d016      	beq.n	8005278 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800524a:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <HAL_RCC_OscConfig+0x27c>)
 800524c:	2201      	movs	r2, #1
 800524e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005250:	f7fc feca 	bl	8001fe8 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005258:	f7fc fec6 	bl	8001fe8 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e173      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526a:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <HAL_RCC_OscConfig+0x274>)
 800526c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0x234>
 8005276:	e01b      	b.n	80052b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <HAL_RCC_OscConfig+0x27c>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527e:	f7fc feb3 	bl	8001fe8 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005284:	e00e      	b.n	80052a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005286:	f7fc feaf 	bl	8001fe8 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d907      	bls.n	80052a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e15c      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
 8005298:	40023800 	.word	0x40023800
 800529c:	42470000 	.word	0x42470000
 80052a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a4:	4b8a      	ldr	r3, [pc, #552]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80052a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ea      	bne.n	8005286 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 8097 	beq.w	80053ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052c2:	4b83      	ldr	r3, [pc, #524]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10f      	bne.n	80052ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ce:	2300      	movs	r3, #0
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	4b7f      	ldr	r3, [pc, #508]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4a7e      	ldr	r2, [pc, #504]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80052d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052dc:	6413      	str	r3, [r2, #64]	; 0x40
 80052de:	4b7c      	ldr	r3, [pc, #496]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ee:	4b79      	ldr	r3, [pc, #484]	; (80054d4 <HAL_RCC_OscConfig+0x4b0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d118      	bne.n	800532c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052fa:	4b76      	ldr	r3, [pc, #472]	; (80054d4 <HAL_RCC_OscConfig+0x4b0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a75      	ldr	r2, [pc, #468]	; (80054d4 <HAL_RCC_OscConfig+0x4b0>)
 8005300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005306:	f7fc fe6f 	bl	8001fe8 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530e:	f7fc fe6b 	bl	8001fe8 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e118      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005320:	4b6c      	ldr	r3, [pc, #432]	; (80054d4 <HAL_RCC_OscConfig+0x4b0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d106      	bne.n	8005342 <HAL_RCC_OscConfig+0x31e>
 8005334:	4b66      	ldr	r3, [pc, #408]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	4a65      	ldr	r2, [pc, #404]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	6713      	str	r3, [r2, #112]	; 0x70
 8005340:	e01c      	b.n	800537c <HAL_RCC_OscConfig+0x358>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b05      	cmp	r3, #5
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0x340>
 800534a:	4b61      	ldr	r3, [pc, #388]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	4a60      	ldr	r2, [pc, #384]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 8005350:	f043 0304 	orr.w	r3, r3, #4
 8005354:	6713      	str	r3, [r2, #112]	; 0x70
 8005356:	4b5e      	ldr	r3, [pc, #376]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	4a5d      	ldr	r2, [pc, #372]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	6713      	str	r3, [r2, #112]	; 0x70
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0x358>
 8005364:	4b5a      	ldr	r3, [pc, #360]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 8005366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005368:	4a59      	ldr	r2, [pc, #356]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	6713      	str	r3, [r2, #112]	; 0x70
 8005370:	4b57      	ldr	r3, [pc, #348]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 8005372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005374:	4a56      	ldr	r2, [pc, #344]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 8005376:	f023 0304 	bic.w	r3, r3, #4
 800537a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d015      	beq.n	80053b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005384:	f7fc fe30 	bl	8001fe8 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800538c:	f7fc fe2c 	bl	8001fe8 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	; 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e0d7      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a2:	4b4b      	ldr	r3, [pc, #300]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0ee      	beq.n	800538c <HAL_RCC_OscConfig+0x368>
 80053ae:	e014      	b.n	80053da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b0:	f7fc fe1a 	bl	8001fe8 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b6:	e00a      	b.n	80053ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b8:	f7fc fe16 	bl	8001fe8 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e0c1      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ce:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1ee      	bne.n	80053b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053da:	7dfb      	ldrb	r3, [r7, #23]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d105      	bne.n	80053ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e0:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	4a3a      	ldr	r2, [pc, #232]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80053e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80ad 	beq.w	8005550 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053f6:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d060      	beq.n	80054c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d145      	bne.n	8005496 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800540a:	4b33      	ldr	r3, [pc, #204]	; (80054d8 <HAL_RCC_OscConfig+0x4b4>)
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fc fdea 	bl	8001fe8 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005418:	f7fc fde6 	bl	8001fe8 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e093      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542a:	4b29      	ldr	r3, [pc, #164]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	019b      	lsls	r3, r3, #6
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	085b      	lsrs	r3, r3, #1
 800544e:	3b01      	subs	r3, #1
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	061b      	lsls	r3, r3, #24
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	071b      	lsls	r3, r3, #28
 8005462:	491b      	ldr	r1, [pc, #108]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005468:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <HAL_RCC_OscConfig+0x4b4>)
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546e:	f7fc fdbb 	bl	8001fe8 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005476:	f7fc fdb7 	bl	8001fe8 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e064      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005488:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x452>
 8005494:	e05c      	b.n	8005550 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005496:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <HAL_RCC_OscConfig+0x4b4>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fc fda4 	bl	8001fe8 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a4:	f7fc fda0 	bl	8001fe8 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e04d      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_RCC_OscConfig+0x4ac>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x480>
 80054c2:	e045      	b.n	8005550 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d107      	bne.n	80054dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e040      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
 80054d0:	40023800 	.word	0x40023800
 80054d4:	40007000 	.word	0x40007000
 80054d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054dc:	4b1f      	ldr	r3, [pc, #124]	; (800555c <HAL_RCC_OscConfig+0x538>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d030      	beq.n	800554c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d129      	bne.n	800554c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d122      	bne.n	800554c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800550c:	4013      	ands	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005514:	4293      	cmp	r3, r2
 8005516:	d119      	bne.n	800554c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	3b01      	subs	r3, #1
 8005526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d10f      	bne.n	800554c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005538:	429a      	cmp	r2, r3
 800553a:	d107      	bne.n	800554c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800

08005560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e07b      	b.n	800566a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	2b00      	cmp	r3, #0
 8005578:	d108      	bne.n	800558c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005582:	d009      	beq.n	8005598 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	61da      	str	r2, [r3, #28]
 800558a:	e005      	b.n	8005598 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fc fa8e 	bl	8001ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561c:	ea42 0103 	orr.w	r1, r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	f003 0104 	and.w	r1, r3, #4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	f003 0210 	and.w	r2, r3, #16
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005658:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e041      	b.n	8005708 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7fc fa63 	bl	8001b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f000 fa2f 	bl	8005b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b02      	cmp	r3, #2
 8005724:	d122      	bne.n	800576c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b02      	cmp	r3, #2
 8005732:	d11b      	bne.n	800576c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0202 	mvn.w	r2, #2
 800573c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f9bf 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f9b1 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f9c2 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b04      	cmp	r3, #4
 8005778:	d122      	bne.n	80057c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b04      	cmp	r3, #4
 8005786:	d11b      	bne.n	80057c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0204 	mvn.w	r2, #4
 8005790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2202      	movs	r2, #2
 8005796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f995 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 80057ac:	e005      	b.n	80057ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f987 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f998 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d122      	bne.n	8005814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d11b      	bne.n	8005814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0208 	mvn.w	r2, #8
 80057e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2204      	movs	r2, #4
 80057ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f96b 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f95d 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f96e 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b10      	cmp	r3, #16
 8005820:	d122      	bne.n	8005868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b10      	cmp	r3, #16
 800582e:	d11b      	bne.n	8005868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0210 	mvn.w	r2, #16
 8005838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2208      	movs	r2, #8
 800583e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f941 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 8005854:	e005      	b.n	8005862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f933 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f944 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b01      	cmp	r3, #1
 8005874:	d10e      	bne.n	8005894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d107      	bne.n	8005894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0201 	mvn.w	r2, #1
 800588c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f90d 	bl	8005aae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d10e      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ac:	2b80      	cmp	r3, #128	; 0x80
 80058ae:	d107      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 faea 	bl	8005e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d10e      	bne.n	80058ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d107      	bne.n	80058ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f909 	bl	8005afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b20      	cmp	r3, #32
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0220 	mvn.w	r2, #32
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fab4 	bl	8005e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_TIM_ConfigClockSource+0x1c>
 8005938:	2302      	movs	r3, #2
 800593a:	e0b4      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x186>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800595a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005974:	d03e      	beq.n	80059f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597a:	f200 8087 	bhi.w	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005982:	f000 8086 	beq.w	8005a92 <HAL_TIM_ConfigClockSource+0x172>
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	d87f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b70      	cmp	r3, #112	; 0x70
 800598e:	d01a      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005990:	2b70      	cmp	r3, #112	; 0x70
 8005992:	d87b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b60      	cmp	r3, #96	; 0x60
 8005996:	d050      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x11a>
 8005998:	2b60      	cmp	r3, #96	; 0x60
 800599a:	d877      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b50      	cmp	r3, #80	; 0x50
 800599e:	d03c      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0xfa>
 80059a0:	2b50      	cmp	r3, #80	; 0x50
 80059a2:	d873      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d058      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x13a>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d86f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059ac:	2b30      	cmp	r3, #48	; 0x30
 80059ae:	d064      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059b0:	2b30      	cmp	r3, #48	; 0x30
 80059b2:	d86b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d060      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d867      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d05c      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d05a      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059c4:	e062      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6899      	ldr	r1, [r3, #8]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f000 f9b7 	bl	8005d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	609a      	str	r2, [r3, #8]
      break;
 80059f2:	e04f      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	6899      	ldr	r1, [r3, #8]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f000 f9a0 	bl	8005d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a16:	609a      	str	r2, [r3, #8]
      break;
 8005a18:	e03c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 f914 	bl	8005c54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2150      	movs	r1, #80	; 0x50
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f96d 	bl	8005d12 <TIM_ITRx_SetConfig>
      break;
 8005a38:	e02c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6859      	ldr	r1, [r3, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f000 f933 	bl	8005cb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2160      	movs	r1, #96	; 0x60
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f95d 	bl	8005d12 <TIM_ITRx_SetConfig>
      break;
 8005a58:	e01c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6859      	ldr	r1, [r3, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f000 f8f4 	bl	8005c54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2140      	movs	r1, #64	; 0x40
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f94d 	bl	8005d12 <TIM_ITRx_SetConfig>
      break;
 8005a78:	e00c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 f944 	bl	8005d12 <TIM_ITRx_SetConfig>
      break;
 8005a8a:	e003      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a90:	e000      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a40      	ldr	r2, [pc, #256]	; (8005c28 <TIM_Base_SetConfig+0x114>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b32:	d00f      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a3d      	ldr	r2, [pc, #244]	; (8005c2c <TIM_Base_SetConfig+0x118>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a3c      	ldr	r2, [pc, #240]	; (8005c30 <TIM_Base_SetConfig+0x11c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a3b      	ldr	r2, [pc, #236]	; (8005c34 <TIM_Base_SetConfig+0x120>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a3a      	ldr	r2, [pc, #232]	; (8005c38 <TIM_Base_SetConfig+0x124>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d108      	bne.n	8005b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2f      	ldr	r2, [pc, #188]	; (8005c28 <TIM_Base_SetConfig+0x114>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d02b      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b74:	d027      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <TIM_Base_SetConfig+0x118>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d023      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <TIM_Base_SetConfig+0x11c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01f      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2a      	ldr	r2, [pc, #168]	; (8005c34 <TIM_Base_SetConfig+0x120>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d01b      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <TIM_Base_SetConfig+0x124>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d017      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a28      	ldr	r2, [pc, #160]	; (8005c3c <TIM_Base_SetConfig+0x128>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a27      	ldr	r2, [pc, #156]	; (8005c40 <TIM_Base_SetConfig+0x12c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00f      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <TIM_Base_SetConfig+0x130>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <TIM_Base_SetConfig+0x134>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <TIM_Base_SetConfig+0x138>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <TIM_Base_SetConfig+0x13c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d108      	bne.n	8005bd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	; (8005c28 <TIM_Base_SetConfig+0x114>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_Base_SetConfig+0xf8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a0c      	ldr	r2, [pc, #48]	; (8005c38 <TIM_Base_SetConfig+0x124>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d103      	bne.n	8005c14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	615a      	str	r2, [r3, #20]
}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40000400 	.word	0x40000400
 8005c30:	40000800 	.word	0x40000800
 8005c34:	40000c00 	.word	0x40000c00
 8005c38:	40010400 	.word	0x40010400
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	40014400 	.word	0x40014400
 8005c44:	40014800 	.word	0x40014800
 8005c48:	40001800 	.word	0x40001800
 8005c4c:	40001c00 	.word	0x40001c00
 8005c50:	40002000 	.word	0x40002000

08005c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f023 0201 	bic.w	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f023 030a 	bic.w	r3, r3, #10
 8005c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b087      	sub	sp, #28
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f023 0210 	bic.w	r2, r3, #16
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	621a      	str	r2, [r3, #32]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f043 0307 	orr.w	r3, r3, #7
 8005d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	609a      	str	r2, [r3, #8]
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	021a      	lsls	r2, r3, #8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	609a      	str	r2, [r3, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e05a      	b.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dec:	d01d      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1d      	ldr	r2, [pc, #116]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1b      	ldr	r2, [pc, #108]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1a      	ldr	r2, [pc, #104]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a18      	ldr	r2, [pc, #96]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a17      	ldr	r2, [pc, #92]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d10c      	bne.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40010400 	.word	0x40010400
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40001800 	.word	0x40001800

08005e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e03f      	b.n	8005f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fb fe6e 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2224      	movs	r2, #36	; 0x24
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f829 	bl	8005f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691a      	ldr	r2, [r3, #16]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f48:	b0c0      	sub	sp, #256	; 0x100
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f60:	68d9      	ldr	r1, [r3, #12]
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	ea40 0301 	orr.w	r3, r0, r1
 8005f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f9c:	f021 010c 	bic.w	r1, r1, #12
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005faa:	430b      	orrs	r3, r1
 8005fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbe:	6999      	ldr	r1, [r3, #24]
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	ea40 0301 	orr.w	r3, r0, r1
 8005fca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4b8f      	ldr	r3, [pc, #572]	; (8006210 <UART_SetConfig+0x2cc>)
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d005      	beq.n	8005fe4 <UART_SetConfig+0xa0>
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b8d      	ldr	r3, [pc, #564]	; (8006214 <UART_SetConfig+0x2d0>)
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d104      	bne.n	8005fee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fe4:	f7fe f8ee 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 8005fe8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005fec:	e003      	b.n	8005ff6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fee:	f7fe f8d5 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8005ff2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006000:	f040 810c 	bne.w	800621c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006008:	2200      	movs	r2, #0
 800600a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800600e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006016:	4622      	mov	r2, r4
 8006018:	462b      	mov	r3, r5
 800601a:	1891      	adds	r1, r2, r2
 800601c:	65b9      	str	r1, [r7, #88]	; 0x58
 800601e:	415b      	adcs	r3, r3
 8006020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006022:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006026:	4621      	mov	r1, r4
 8006028:	eb12 0801 	adds.w	r8, r2, r1
 800602c:	4629      	mov	r1, r5
 800602e:	eb43 0901 	adc.w	r9, r3, r1
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800603e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006046:	4690      	mov	r8, r2
 8006048:	4699      	mov	r9, r3
 800604a:	4623      	mov	r3, r4
 800604c:	eb18 0303 	adds.w	r3, r8, r3
 8006050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006054:	462b      	mov	r3, r5
 8006056:	eb49 0303 	adc.w	r3, r9, r3
 800605a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800606a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800606e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006072:	460b      	mov	r3, r1
 8006074:	18db      	adds	r3, r3, r3
 8006076:	653b      	str	r3, [r7, #80]	; 0x50
 8006078:	4613      	mov	r3, r2
 800607a:	eb42 0303 	adc.w	r3, r2, r3
 800607e:	657b      	str	r3, [r7, #84]	; 0x54
 8006080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006088:	f7fa fdf6 	bl	8000c78 <__aeabi_uldivmod>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4b61      	ldr	r3, [pc, #388]	; (8006218 <UART_SetConfig+0x2d4>)
 8006092:	fba3 2302 	umull	r2, r3, r3, r2
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	011c      	lsls	r4, r3, #4
 800609a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060ac:	4642      	mov	r2, r8
 80060ae:	464b      	mov	r3, r9
 80060b0:	1891      	adds	r1, r2, r2
 80060b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80060b4:	415b      	adcs	r3, r3
 80060b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060bc:	4641      	mov	r1, r8
 80060be:	eb12 0a01 	adds.w	sl, r2, r1
 80060c2:	4649      	mov	r1, r9
 80060c4:	eb43 0b01 	adc.w	fp, r3, r1
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060dc:	4692      	mov	sl, r2
 80060de:	469b      	mov	fp, r3
 80060e0:	4643      	mov	r3, r8
 80060e2:	eb1a 0303 	adds.w	r3, sl, r3
 80060e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060ea:	464b      	mov	r3, r9
 80060ec:	eb4b 0303 	adc.w	r3, fp, r3
 80060f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006100:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006104:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006108:	460b      	mov	r3, r1
 800610a:	18db      	adds	r3, r3, r3
 800610c:	643b      	str	r3, [r7, #64]	; 0x40
 800610e:	4613      	mov	r3, r2
 8006110:	eb42 0303 	adc.w	r3, r2, r3
 8006114:	647b      	str	r3, [r7, #68]	; 0x44
 8006116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800611a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800611e:	f7fa fdab 	bl	8000c78 <__aeabi_uldivmod>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4611      	mov	r1, r2
 8006128:	4b3b      	ldr	r3, [pc, #236]	; (8006218 <UART_SetConfig+0x2d4>)
 800612a:	fba3 2301 	umull	r2, r3, r3, r1
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	2264      	movs	r2, #100	; 0x64
 8006132:	fb02 f303 	mul.w	r3, r2, r3
 8006136:	1acb      	subs	r3, r1, r3
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800613e:	4b36      	ldr	r3, [pc, #216]	; (8006218 <UART_SetConfig+0x2d4>)
 8006140:	fba3 2302 	umull	r2, r3, r3, r2
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800614c:	441c      	add	r4, r3
 800614e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006152:	2200      	movs	r2, #0
 8006154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006158:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800615c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	1891      	adds	r1, r2, r2
 8006166:	63b9      	str	r1, [r7, #56]	; 0x38
 8006168:	415b      	adcs	r3, r3
 800616a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006170:	4641      	mov	r1, r8
 8006172:	1851      	adds	r1, r2, r1
 8006174:	6339      	str	r1, [r7, #48]	; 0x30
 8006176:	4649      	mov	r1, r9
 8006178:	414b      	adcs	r3, r1
 800617a:	637b      	str	r3, [r7, #52]	; 0x34
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006188:	4659      	mov	r1, fp
 800618a:	00cb      	lsls	r3, r1, #3
 800618c:	4651      	mov	r1, sl
 800618e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006192:	4651      	mov	r1, sl
 8006194:	00ca      	lsls	r2, r1, #3
 8006196:	4610      	mov	r0, r2
 8006198:	4619      	mov	r1, r3
 800619a:	4603      	mov	r3, r0
 800619c:	4642      	mov	r2, r8
 800619e:	189b      	adds	r3, r3, r2
 80061a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061a4:	464b      	mov	r3, r9
 80061a6:	460a      	mov	r2, r1
 80061a8:	eb42 0303 	adc.w	r3, r2, r3
 80061ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061c4:	460b      	mov	r3, r1
 80061c6:	18db      	adds	r3, r3, r3
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ca:	4613      	mov	r3, r2
 80061cc:	eb42 0303 	adc.w	r3, r2, r3
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061da:	f7fa fd4d 	bl	8000c78 <__aeabi_uldivmod>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <UART_SetConfig+0x2d4>)
 80061e4:	fba3 1302 	umull	r1, r3, r3, r2
 80061e8:	095b      	lsrs	r3, r3, #5
 80061ea:	2164      	movs	r1, #100	; 0x64
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	3332      	adds	r3, #50	; 0x32
 80061f6:	4a08      	ldr	r2, [pc, #32]	; (8006218 <UART_SetConfig+0x2d4>)
 80061f8:	fba2 2303 	umull	r2, r3, r2, r3
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	f003 0207 	and.w	r2, r3, #7
 8006202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4422      	add	r2, r4
 800620a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800620c:	e105      	b.n	800641a <UART_SetConfig+0x4d6>
 800620e:	bf00      	nop
 8006210:	40011000 	.word	0x40011000
 8006214:	40011400 	.word	0x40011400
 8006218:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800621c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006220:	2200      	movs	r2, #0
 8006222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006226:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800622a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800622e:	4642      	mov	r2, r8
 8006230:	464b      	mov	r3, r9
 8006232:	1891      	adds	r1, r2, r2
 8006234:	6239      	str	r1, [r7, #32]
 8006236:	415b      	adcs	r3, r3
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
 800623a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800623e:	4641      	mov	r1, r8
 8006240:	1854      	adds	r4, r2, r1
 8006242:	4649      	mov	r1, r9
 8006244:	eb43 0501 	adc.w	r5, r3, r1
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	00eb      	lsls	r3, r5, #3
 8006252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006256:	00e2      	lsls	r2, r4, #3
 8006258:	4614      	mov	r4, r2
 800625a:	461d      	mov	r5, r3
 800625c:	4643      	mov	r3, r8
 800625e:	18e3      	adds	r3, r4, r3
 8006260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006264:	464b      	mov	r3, r9
 8006266:	eb45 0303 	adc.w	r3, r5, r3
 800626a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800626e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800627a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800628a:	4629      	mov	r1, r5
 800628c:	008b      	lsls	r3, r1, #2
 800628e:	4621      	mov	r1, r4
 8006290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006294:	4621      	mov	r1, r4
 8006296:	008a      	lsls	r2, r1, #2
 8006298:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800629c:	f7fa fcec 	bl	8000c78 <__aeabi_uldivmod>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4b60      	ldr	r3, [pc, #384]	; (8006428 <UART_SetConfig+0x4e4>)
 80062a6:	fba3 2302 	umull	r2, r3, r3, r2
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	011c      	lsls	r4, r3, #4
 80062ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	1891      	adds	r1, r2, r2
 80062c6:	61b9      	str	r1, [r7, #24]
 80062c8:	415b      	adcs	r3, r3
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062d0:	4641      	mov	r1, r8
 80062d2:	1851      	adds	r1, r2, r1
 80062d4:	6139      	str	r1, [r7, #16]
 80062d6:	4649      	mov	r1, r9
 80062d8:	414b      	adcs	r3, r1
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062e8:	4659      	mov	r1, fp
 80062ea:	00cb      	lsls	r3, r1, #3
 80062ec:	4651      	mov	r1, sl
 80062ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062f2:	4651      	mov	r1, sl
 80062f4:	00ca      	lsls	r2, r1, #3
 80062f6:	4610      	mov	r0, r2
 80062f8:	4619      	mov	r1, r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	4642      	mov	r2, r8
 80062fe:	189b      	adds	r3, r3, r2
 8006300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006304:	464b      	mov	r3, r9
 8006306:	460a      	mov	r2, r1
 8006308:	eb42 0303 	adc.w	r3, r2, r3
 800630c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	67bb      	str	r3, [r7, #120]	; 0x78
 800631a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006328:	4649      	mov	r1, r9
 800632a:	008b      	lsls	r3, r1, #2
 800632c:	4641      	mov	r1, r8
 800632e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006332:	4641      	mov	r1, r8
 8006334:	008a      	lsls	r2, r1, #2
 8006336:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800633a:	f7fa fc9d 	bl	8000c78 <__aeabi_uldivmod>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4b39      	ldr	r3, [pc, #228]	; (8006428 <UART_SetConfig+0x4e4>)
 8006344:	fba3 1302 	umull	r1, r3, r3, r2
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	2164      	movs	r1, #100	; 0x64
 800634c:	fb01 f303 	mul.w	r3, r1, r3
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	3332      	adds	r3, #50	; 0x32
 8006356:	4a34      	ldr	r2, [pc, #208]	; (8006428 <UART_SetConfig+0x4e4>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006362:	441c      	add	r4, r3
 8006364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006368:	2200      	movs	r2, #0
 800636a:	673b      	str	r3, [r7, #112]	; 0x70
 800636c:	677a      	str	r2, [r7, #116]	; 0x74
 800636e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006372:	4642      	mov	r2, r8
 8006374:	464b      	mov	r3, r9
 8006376:	1891      	adds	r1, r2, r2
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	415b      	adcs	r3, r3
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006382:	4641      	mov	r1, r8
 8006384:	1851      	adds	r1, r2, r1
 8006386:	6039      	str	r1, [r7, #0]
 8006388:	4649      	mov	r1, r9
 800638a:	414b      	adcs	r3, r1
 800638c:	607b      	str	r3, [r7, #4]
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800639a:	4659      	mov	r1, fp
 800639c:	00cb      	lsls	r3, r1, #3
 800639e:	4651      	mov	r1, sl
 80063a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063a4:	4651      	mov	r1, sl
 80063a6:	00ca      	lsls	r2, r1, #3
 80063a8:	4610      	mov	r0, r2
 80063aa:	4619      	mov	r1, r3
 80063ac:	4603      	mov	r3, r0
 80063ae:	4642      	mov	r2, r8
 80063b0:	189b      	adds	r3, r3, r2
 80063b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063b4:	464b      	mov	r3, r9
 80063b6:	460a      	mov	r2, r1
 80063b8:	eb42 0303 	adc.w	r3, r2, r3
 80063bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	663b      	str	r3, [r7, #96]	; 0x60
 80063c8:	667a      	str	r2, [r7, #100]	; 0x64
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063d6:	4649      	mov	r1, r9
 80063d8:	008b      	lsls	r3, r1, #2
 80063da:	4641      	mov	r1, r8
 80063dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063e0:	4641      	mov	r1, r8
 80063e2:	008a      	lsls	r2, r1, #2
 80063e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063e8:	f7fa fc46 	bl	8000c78 <__aeabi_uldivmod>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <UART_SetConfig+0x4e4>)
 80063f2:	fba3 1302 	umull	r1, r3, r3, r2
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	2164      	movs	r1, #100	; 0x64
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	3332      	adds	r3, #50	; 0x32
 8006404:	4a08      	ldr	r2, [pc, #32]	; (8006428 <UART_SetConfig+0x4e4>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4422      	add	r2, r4
 8006418:	609a      	str	r2, [r3, #8]
}
 800641a:	bf00      	nop
 800641c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006420:	46bd      	mov	sp, r7
 8006422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006426:	bf00      	nop
 8006428:	51eb851f 	.word	0x51eb851f

0800642c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800642c:	b084      	sub	sp, #16
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	f107 001c 	add.w	r0, r7, #28
 800643a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2b01      	cmp	r3, #1
 8006442:	d122      	bne.n	800648a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800646c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800646e:	2b01      	cmp	r3, #1
 8006470:	d105      	bne.n	800647e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f001 fbe8 	bl	8007c54 <USB_CoreReset>
 8006484:	4603      	mov	r3, r0
 8006486:	73fb      	strb	r3, [r7, #15]
 8006488:	e01a      	b.n	80064c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f001 fbdc 	bl	8007c54 <USB_CoreReset>
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
 80064b2:	e005      	b.n	80064c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d10b      	bne.n	80064de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f043 0206 	orr.w	r2, r3, #6
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f043 0220 	orr.w	r2, r3, #32
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064ea:	b004      	add	sp, #16
 80064ec:	4770      	bx	lr
	...

080064f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4613      	mov	r3, r2
 80064fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d165      	bne.n	80065d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a41      	ldr	r2, [pc, #260]	; (800660c <USB_SetTurnaroundTime+0x11c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d906      	bls.n	800651a <USB_SetTurnaroundTime+0x2a>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4a40      	ldr	r2, [pc, #256]	; (8006610 <USB_SetTurnaroundTime+0x120>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d202      	bcs.n	800651a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006514:	230f      	movs	r3, #15
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e062      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4a3c      	ldr	r2, [pc, #240]	; (8006610 <USB_SetTurnaroundTime+0x120>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d306      	bcc.n	8006530 <USB_SetTurnaroundTime+0x40>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4a3b      	ldr	r2, [pc, #236]	; (8006614 <USB_SetTurnaroundTime+0x124>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d202      	bcs.n	8006530 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800652a:	230e      	movs	r3, #14
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	e057      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4a38      	ldr	r2, [pc, #224]	; (8006614 <USB_SetTurnaroundTime+0x124>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d306      	bcc.n	8006546 <USB_SetTurnaroundTime+0x56>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a37      	ldr	r2, [pc, #220]	; (8006618 <USB_SetTurnaroundTime+0x128>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d202      	bcs.n	8006546 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006540:	230d      	movs	r3, #13
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e04c      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4a33      	ldr	r2, [pc, #204]	; (8006618 <USB_SetTurnaroundTime+0x128>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d306      	bcc.n	800655c <USB_SetTurnaroundTime+0x6c>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4a32      	ldr	r2, [pc, #200]	; (800661c <USB_SetTurnaroundTime+0x12c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d802      	bhi.n	800655c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006556:	230c      	movs	r3, #12
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e041      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a2f      	ldr	r2, [pc, #188]	; (800661c <USB_SetTurnaroundTime+0x12c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d906      	bls.n	8006572 <USB_SetTurnaroundTime+0x82>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a2e      	ldr	r2, [pc, #184]	; (8006620 <USB_SetTurnaroundTime+0x130>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d802      	bhi.n	8006572 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800656c:	230b      	movs	r3, #11
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e036      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4a2a      	ldr	r2, [pc, #168]	; (8006620 <USB_SetTurnaroundTime+0x130>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d906      	bls.n	8006588 <USB_SetTurnaroundTime+0x98>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4a29      	ldr	r2, [pc, #164]	; (8006624 <USB_SetTurnaroundTime+0x134>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d802      	bhi.n	8006588 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006582:	230a      	movs	r3, #10
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e02b      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4a26      	ldr	r2, [pc, #152]	; (8006624 <USB_SetTurnaroundTime+0x134>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d906      	bls.n	800659e <USB_SetTurnaroundTime+0xae>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4a25      	ldr	r2, [pc, #148]	; (8006628 <USB_SetTurnaroundTime+0x138>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d202      	bcs.n	800659e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006598:	2309      	movs	r3, #9
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e020      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4a21      	ldr	r2, [pc, #132]	; (8006628 <USB_SetTurnaroundTime+0x138>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d306      	bcc.n	80065b4 <USB_SetTurnaroundTime+0xc4>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	4a20      	ldr	r2, [pc, #128]	; (800662c <USB_SetTurnaroundTime+0x13c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d802      	bhi.n	80065b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065ae:	2308      	movs	r3, #8
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	e015      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4a1d      	ldr	r2, [pc, #116]	; (800662c <USB_SetTurnaroundTime+0x13c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d906      	bls.n	80065ca <USB_SetTurnaroundTime+0xda>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4a1c      	ldr	r2, [pc, #112]	; (8006630 <USB_SetTurnaroundTime+0x140>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d202      	bcs.n	80065ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065c4:	2307      	movs	r3, #7
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e00a      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065ca:	2306      	movs	r3, #6
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	e007      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065d6:	2309      	movs	r3, #9
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	e001      	b.n	80065e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065dc:	2309      	movs	r3, #9
 80065de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	029b      	lsls	r3, r3, #10
 80065f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065f8:	431a      	orrs	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	00d8acbf 	.word	0x00d8acbf
 8006610:	00e4e1c0 	.word	0x00e4e1c0
 8006614:	00f42400 	.word	0x00f42400
 8006618:	01067380 	.word	0x01067380
 800661c:	011a499f 	.word	0x011a499f
 8006620:	01312cff 	.word	0x01312cff
 8006624:	014ca43f 	.word	0x014ca43f
 8006628:	016e3600 	.word	0x016e3600
 800662c:	01a6ab1f 	.word	0x01a6ab1f
 8006630:	01e84800 	.word	0x01e84800

08006634 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f043 0201 	orr.w	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f023 0201 	bic.w	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d115      	bne.n	80066c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066a6:	2001      	movs	r0, #1
 80066a8:	f7fb fcaa 	bl	8002000 <HAL_Delay>
      ms++;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3301      	adds	r3, #1
 80066b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fa3f 	bl	8007b36 <USB_GetMode>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d01e      	beq.n	80066fc <USB_SetCurrentMode+0x84>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b31      	cmp	r3, #49	; 0x31
 80066c2:	d9f0      	bls.n	80066a6 <USB_SetCurrentMode+0x2e>
 80066c4:	e01a      	b.n	80066fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d115      	bne.n	80066f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066d8:	2001      	movs	r0, #1
 80066da:	f7fb fc91 	bl	8002000 <HAL_Delay>
      ms++;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3301      	adds	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 fa26 	bl	8007b36 <USB_GetMode>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <USB_SetCurrentMode+0x84>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b31      	cmp	r3, #49	; 0x31
 80066f4:	d9f0      	bls.n	80066d8 <USB_SetCurrentMode+0x60>
 80066f6:	e001      	b.n	80066fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e005      	b.n	8006708 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b32      	cmp	r3, #50	; 0x32
 8006700:	d101      	bne.n	8006706 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006710:	b084      	sub	sp, #16
 8006712:	b580      	push	{r7, lr}
 8006714:	b086      	sub	sp, #24
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800671e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800672a:	2300      	movs	r3, #0
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	e009      	b.n	8006744 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	3340      	adds	r3, #64	; 0x40
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	2200      	movs	r2, #0
 800673c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b0e      	cmp	r3, #14
 8006748:	d9f2      	bls.n	8006730 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d11c      	bne.n	800678a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675e:	f043 0302 	orr.w	r3, r3, #2
 8006762:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	e005      	b.n	8006796 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800679c:	461a      	mov	r2, r3
 800679e:	2300      	movs	r3, #0
 80067a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a8:	4619      	mov	r1, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b0:	461a      	mov	r2, r3
 80067b2:	680b      	ldr	r3, [r1, #0]
 80067b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d10c      	bne.n	80067d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d104      	bne.n	80067cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067c2:	2100      	movs	r1, #0
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f965 	bl	8006a94 <USB_SetDevSpeed>
 80067ca:	e008      	b.n	80067de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067cc:	2101      	movs	r1, #1
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f960 	bl	8006a94 <USB_SetDevSpeed>
 80067d4:	e003      	b.n	80067de <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067d6:	2103      	movs	r1, #3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f95b 	bl	8006a94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067de:	2110      	movs	r1, #16
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f8f3 	bl	80069cc <USB_FlushTxFifo>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f91f 	bl	8006a34 <USB_FlushRxFifo>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006806:	461a      	mov	r2, r3
 8006808:	2300      	movs	r3, #0
 800680a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	461a      	mov	r2, r3
 8006814:	2300      	movs	r3, #0
 8006816:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681e:	461a      	mov	r2, r3
 8006820:	2300      	movs	r3, #0
 8006822:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006824:	2300      	movs	r3, #0
 8006826:	613b      	str	r3, [r7, #16]
 8006828:	e043      	b.n	80068b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800683c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006840:	d118      	bne.n	8006874 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	461a      	mov	r2, r3
 8006856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	e013      	b.n	8006886 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686a:	461a      	mov	r2, r3
 800686c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e008      	b.n	8006886 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	461a      	mov	r2, r3
 8006882:	2300      	movs	r3, #0
 8006884:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	461a      	mov	r2, r3
 8006894:	2300      	movs	r3, #0
 8006896:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	461a      	mov	r2, r3
 80068a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	3301      	adds	r3, #1
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d3b7      	bcc.n	800682a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ba:	2300      	movs	r3, #0
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	e043      	b.n	8006948 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d6:	d118      	bne.n	800690a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ea:	461a      	mov	r2, r3
 80068ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	e013      	b.n	800691c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	461a      	mov	r2, r3
 8006902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	e008      	b.n	800691c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006916:	461a      	mov	r2, r3
 8006918:	2300      	movs	r3, #0
 800691a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	461a      	mov	r2, r3
 800692a:	2300      	movs	r3, #0
 800692c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	461a      	mov	r2, r3
 800693c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006940:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	3301      	adds	r3, #1
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	429a      	cmp	r2, r3
 800694e:	d3b7      	bcc.n	80068c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800695e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006962:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006970:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	2b00      	cmp	r3, #0
 8006976:	d105      	bne.n	8006984 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	f043 0210 	orr.w	r2, r3, #16
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699a      	ldr	r2, [r3, #24]
 8006988:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <USB_DevInit+0x2b8>)
 800698a:	4313      	orrs	r3, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f043 0208 	orr.w	r2, r3, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d107      	bne.n	80069b8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069b0:	f043 0304 	orr.w	r3, r3, #4
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069c4:	b004      	add	sp, #16
 80069c6:	4770      	bx	lr
 80069c8:	803c3800 	.word	0x803c3800

080069cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3301      	adds	r3, #1
 80069de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <USB_FlushTxFifo+0x64>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d901      	bls.n	80069ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e01b      	b.n	8006a24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	daf2      	bge.n	80069da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	019b      	lsls	r3, r3, #6
 80069fc:	f043 0220 	orr.w	r2, r3, #32
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3301      	adds	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4a08      	ldr	r2, [pc, #32]	; (8006a30 <USB_FlushTxFifo+0x64>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d901      	bls.n	8006a16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e006      	b.n	8006a24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d0f0      	beq.n	8006a04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	00030d40 	.word	0x00030d40

08006a34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a11      	ldr	r2, [pc, #68]	; (8006a90 <USB_FlushRxFifo+0x5c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e018      	b.n	8006a84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	daf2      	bge.n	8006a40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2210      	movs	r2, #16
 8006a62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4a08      	ldr	r2, [pc, #32]	; (8006a90 <USB_FlushRxFifo+0x5c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d901      	bls.n	8006a76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e006      	b.n	8006a84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d0f0      	beq.n	8006a64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	00030d40 	.word	0x00030d40

08006a94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b087      	sub	sp, #28
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 0306 	and.w	r3, r3, #6
 8006ade:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d102      	bne.n	8006aec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	75fb      	strb	r3, [r7, #23]
 8006aea:	e00a      	b.n	8006b02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d002      	beq.n	8006af8 <USB_GetDevSpeed+0x32>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b06      	cmp	r3, #6
 8006af6:	d102      	bne.n	8006afe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006af8:	2302      	movs	r3, #2
 8006afa:	75fb      	strb	r3, [r7, #23]
 8006afc:	e001      	b.n	8006b02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006afe:	230f      	movs	r3, #15
 8006b00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d13a      	bne.n	8006ba2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	68f9      	ldr	r1, [r7, #12]
 8006b46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d155      	bne.n	8006c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	791b      	ldrb	r3, [r3, #4]
 8006b7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	059b      	lsls	r3, r3, #22
 8006b86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	e036      	b.n	8006c10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba8:	69da      	ldr	r2, [r3, #28]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11a      	bne.n	8006c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	791b      	ldrb	r3, [r3, #4]
 8006bf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
	...

08006c20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d161      	bne.n	8006d00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c52:	d11f      	bne.n	8006c94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	43db      	mvns	r3, r3
 8006cae:	68f9      	ldr	r1, [r7, #12]
 8006cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	2101      	movs	r1, #1
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	68f9      	ldr	r1, [r7, #12]
 8006cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd8:	4013      	ands	r3, r2
 8006cda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	0159      	lsls	r1, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	440b      	add	r3, r1
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4b35      	ldr	r3, [pc, #212]	; (8006dd0 <USB_DeactivateEndpoint+0x1b0>)
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	600b      	str	r3, [r1, #0]
 8006cfe:	e060      	b.n	8006dc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d16:	d11f      	bne.n	8006d58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	2101      	movs	r1, #1
 8006d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6e:	041b      	lsls	r3, r3, #16
 8006d70:	43db      	mvns	r3, r3
 8006d72:	68f9      	ldr	r1, [r7, #12]
 8006d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d78:	4013      	ands	r3, r2
 8006d7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d82:	69da      	ldr	r2, [r3, #28]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	f003 030f 	and.w	r3, r3, #15
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d92:	041b      	lsls	r3, r3, #16
 8006d94:	43db      	mvns	r3, r3
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	0159      	lsls	r1, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	440b      	add	r3, r1
 8006db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <USB_DeactivateEndpoint+0x1b4>)
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	ec337800 	.word	0xec337800
 8006dd4:	eff37800 	.word	0xeff37800

08006dd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	785b      	ldrb	r3, [r3, #1]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	f040 815c 	bne.w	80070b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d132      	bne.n	8006e68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	69fa      	ldr	r2, [r7, #28]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e60:	0cdb      	lsrs	r3, r3, #19
 8006e62:	04db      	lsls	r3, r3, #19
 8006e64:	6113      	str	r3, [r2, #16]
 8006e66:	e074      	b.n	8006f52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e82:	0cdb      	lsrs	r3, r3, #19
 8006e84:	04db      	lsls	r3, r3, #19
 8006e86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	0151      	lsls	r1, r2, #5
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ea6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6999      	ldr	r1, [r3, #24]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	440b      	add	r3, r1
 8006ec4:	1e59      	subs	r1, r3, #1
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ece:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ed0:	4b9d      	ldr	r3, [pc, #628]	; (8007148 <USB_EPStartXfer+0x370>)
 8006ed2:	400b      	ands	r3, r1
 8006ed4:	69b9      	ldr	r1, [r7, #24]
 8006ed6:	0148      	lsls	r0, r1, #5
 8006ed8:	69f9      	ldr	r1, [r7, #28]
 8006eda:	4401      	add	r1, r0
 8006edc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006efa:	69b9      	ldr	r1, [r7, #24]
 8006efc:	0148      	lsls	r0, r1, #5
 8006efe:	69f9      	ldr	r1, [r7, #28]
 8006f00:	4401      	add	r1, r0
 8006f02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f06:	4313      	orrs	r3, r2
 8006f08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	791b      	ldrb	r3, [r3, #4]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d11f      	bne.n	8006f52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	0151      	lsls	r1, r2, #5
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	440a      	add	r2, r1
 8006f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006f52:	79fb      	ldrb	r3, [r7, #7]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d14b      	bne.n	8006ff0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d009      	beq.n	8006f74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	791b      	ldrb	r3, [r3, #4]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d128      	bne.n	8006fce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d110      	bne.n	8006fae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	e00f      	b.n	8006fce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	69fa      	ldr	r2, [r7, #28]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e133      	b.n	8007258 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	440a      	add	r2, r1
 8007006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800700e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	791b      	ldrb	r3, [r3, #4]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d015      	beq.n	8007044 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 811b 	beq.w	8007258 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	2101      	movs	r1, #1
 8007034:	fa01 f303 	lsl.w	r3, r1, r3
 8007038:	69f9      	ldr	r1, [r7, #28]
 800703a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800703e:	4313      	orrs	r3, r2
 8007040:	634b      	str	r3, [r1, #52]	; 0x34
 8007042:	e109      	b.n	8007258 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007050:	2b00      	cmp	r3, #0
 8007052:	d110      	bne.n	8007076 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	e00f      	b.n	8007096 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	0151      	lsls	r1, r2, #5
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	440a      	add	r2, r1
 800708c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007094:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6919      	ldr	r1, [r3, #16]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	781a      	ldrb	r2, [r3, #0]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	b298      	uxth	r0, r3
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	4603      	mov	r3, r0
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fade 	bl	800766c <USB_WritePacket>
 80070b0:	e0d2      	b.n	8007258 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	0151      	lsls	r1, r2, #5
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	440a      	add	r2, r1
 80070c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070cc:	0cdb      	lsrs	r3, r3, #19
 80070ce:	04db      	lsls	r3, r3, #19
 80070d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	69fa      	ldr	r2, [r7, #28]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d126      	bne.n	800714c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007114:	69b9      	ldr	r1, [r7, #24]
 8007116:	0148      	lsls	r0, r1, #5
 8007118:	69f9      	ldr	r1, [r7, #28]
 800711a:	4401      	add	r1, r0
 800711c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007120:	4313      	orrs	r3, r2
 8007122:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	440a      	add	r2, r1
 800713a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007142:	6113      	str	r3, [r2, #16]
 8007144:	e03a      	b.n	80071bc <USB_EPStartXfer+0x3e4>
 8007146:	bf00      	nop
 8007148:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	4413      	add	r3, r2
 8007156:	1e5a      	subs	r2, r3, #1
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007160:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	8afa      	ldrh	r2, [r7, #22]
 8007168:	fb03 f202 	mul.w	r2, r3, r2
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717c:	691a      	ldr	r2, [r3, #16]
 800717e:	8afb      	ldrh	r3, [r7, #22]
 8007180:	04d9      	lsls	r1, r3, #19
 8007182:	4b38      	ldr	r3, [pc, #224]	; (8007264 <USB_EPStartXfer+0x48c>)
 8007184:	400b      	ands	r3, r1
 8007186:	69b9      	ldr	r1, [r7, #24]
 8007188:	0148      	lsls	r0, r1, #5
 800718a:	69f9      	ldr	r1, [r7, #28]
 800718c:	4401      	add	r1, r0
 800718e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007192:	4313      	orrs	r3, r2
 8007194:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a2:	691a      	ldr	r2, [r3, #16]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ac:	69b9      	ldr	r1, [r7, #24]
 80071ae:	0148      	lsls	r0, r1, #5
 80071b0:	69f9      	ldr	r1, [r7, #28]
 80071b2:	4401      	add	r1, r0
 80071b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071b8:	4313      	orrs	r3, r2
 80071ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d10d      	bne.n	80071de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6919      	ldr	r1, [r3, #16]
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071da:	460a      	mov	r2, r1
 80071dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	791b      	ldrb	r3, [r3, #4]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d128      	bne.n	8007238 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d110      	bne.n	8007218 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007210:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	e00f      	b.n	8007238 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	440a      	add	r2, r1
 800722e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007236:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	440a      	add	r2, r1
 800724e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007252:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007256:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3720      	adds	r7, #32
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	1ff80000 	.word	0x1ff80000

08007268 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	2b01      	cmp	r3, #1
 8007286:	f040 80ce 	bne.w	8007426 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d132      	bne.n	80072f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f0:	0cdb      	lsrs	r3, r3, #19
 80072f2:	04db      	lsls	r3, r3, #19
 80072f4:	6113      	str	r3, [r2, #16]
 80072f6:	e04e      	b.n	8007396 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	0151      	lsls	r1, r2, #5
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	440a      	add	r2, r1
 800730e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007312:	0cdb      	lsrs	r3, r3, #19
 8007314:	04db      	lsls	r3, r3, #19
 8007316:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	440a      	add	r2, r1
 800732e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007332:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007336:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800733a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	699a      	ldr	r2, [r3, #24]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	429a      	cmp	r2, r3
 8007346:	d903      	bls.n	8007350 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800736e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007386:	6939      	ldr	r1, [r7, #16]
 8007388:	0148      	lsls	r0, r1, #5
 800738a:	6979      	ldr	r1, [r7, #20]
 800738c:	4401      	add	r1, r0
 800738e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007392:	4313      	orrs	r3, r2
 8007394:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d11e      	bne.n	80073da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b0:	461a      	mov	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	e097      	b.n	800750a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	0151      	lsls	r1, r2, #5
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	440a      	add	r2, r1
 80073f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 8083 	beq.w	800750a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	f003 030f 	and.w	r3, r3, #15
 8007414:	2101      	movs	r1, #1
 8007416:	fa01 f303 	lsl.w	r3, r1, r3
 800741a:	6979      	ldr	r1, [r7, #20]
 800741c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007420:	4313      	orrs	r3, r2
 8007422:	634b      	str	r3, [r1, #52]	; 0x34
 8007424:	e071      	b.n	800750a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007440:	0cdb      	lsrs	r3, r3, #19
 8007442:	04db      	lsls	r3, r3, #19
 8007444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	440a      	add	r2, r1
 800745c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007468:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074b8:	6939      	ldr	r1, [r7, #16]
 80074ba:	0148      	lsls	r0, r1, #5
 80074bc:	6979      	ldr	r1, [r7, #20]
 80074be:	4401      	add	r1, r0
 80074c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074c4:	4313      	orrs	r3, r2
 80074c6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d10d      	bne.n	80074ea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6919      	ldr	r1, [r3, #16]
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e6:	460a      	mov	r2, r1
 80074e8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	0151      	lsls	r1, r2, #5
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	440a      	add	r2, r1
 8007500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007504:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007508:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	785b      	ldrb	r3, [r3, #1]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d14a      	bne.n	80075cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800754a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800754e:	f040 8086 	bne.w	800765e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	7812      	ldrb	r2, [r2, #0]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007570:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007574:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	7812      	ldrb	r2, [r2, #0]
 800758a:	0151      	lsls	r1, r2, #5
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	440a      	add	r2, r1
 8007590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007598:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3301      	adds	r3, #1
 800759e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d902      	bls.n	80075b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	75fb      	strb	r3, [r7, #23]
          break;
 80075ae:	e056      	b.n	800765e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075c8:	d0e7      	beq.n	800759a <USB_EPStopXfer+0x82>
 80075ca:	e048      	b.n	800765e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075e4:	d13b      	bne.n	800765e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	0151      	lsls	r1, r2, #5
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	440a      	add	r2, r1
 8007600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007604:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007608:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	7812      	ldrb	r2, [r2, #0]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	440a      	add	r2, r1
 8007624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800762c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3301      	adds	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f242 7210 	movw	r2, #10000	; 0x2710
 800763a:	4293      	cmp	r3, r2
 800763c:	d902      	bls.n	8007644 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	75fb      	strb	r3, [r7, #23]
          break;
 8007642:	e00c      	b.n	800765e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800765c:	d0e7      	beq.n	800762e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800765e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007660:	4618      	mov	r0, r3
 8007662:	371c      	adds	r7, #28
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800766c:	b480      	push	{r7}
 800766e:	b089      	sub	sp, #36	; 0x24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4611      	mov	r1, r2
 8007678:	461a      	mov	r2, r3
 800767a:	460b      	mov	r3, r1
 800767c:	71fb      	strb	r3, [r7, #7]
 800767e:	4613      	mov	r3, r2
 8007680:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800768a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800768e:	2b00      	cmp	r3, #0
 8007690:	d123      	bne.n	80076da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007692:	88bb      	ldrh	r3, [r7, #4]
 8007694:	3303      	adds	r3, #3
 8007696:	089b      	lsrs	r3, r3, #2
 8007698:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800769a:	2300      	movs	r3, #0
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	e018      	b.n	80076d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80076a0:	79fb      	ldrb	r3, [r7, #7]
 80076a2:	031a      	lsls	r2, r3, #12
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ac:	461a      	mov	r2, r3
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	3301      	adds	r3, #1
 80076b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	3301      	adds	r3, #1
 80076be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	3301      	adds	r3, #1
 80076c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	3301      	adds	r3, #1
 80076ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	3301      	adds	r3, #1
 80076d0:	61bb      	str	r3, [r7, #24]
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d3e2      	bcc.n	80076a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3724      	adds	r7, #36	; 0x24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b08b      	sub	sp, #44	; 0x2c
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076fe:	88fb      	ldrh	r3, [r7, #6]
 8007700:	089b      	lsrs	r3, r3, #2
 8007702:	b29b      	uxth	r3, r3
 8007704:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800770e:	2300      	movs	r3, #0
 8007710:	623b      	str	r3, [r7, #32]
 8007712:	e014      	b.n	800773e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	3301      	adds	r3, #1
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	3301      	adds	r3, #1
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	3301      	adds	r3, #1
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	3301      	adds	r3, #1
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	3301      	adds	r3, #1
 800773c:	623b      	str	r3, [r7, #32]
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	429a      	cmp	r2, r3
 8007744:	d3e6      	bcc.n	8007714 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007746:	8bfb      	ldrh	r3, [r7, #30]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01e      	beq.n	800778a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007756:	461a      	mov	r2, r3
 8007758:	f107 0310 	add.w	r3, r7, #16
 800775c:	6812      	ldr	r2, [r2, #0]
 800775e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	fa22 f303 	lsr.w	r3, r2, r3
 800776c:	b2da      	uxtb	r2, r3
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	701a      	strb	r2, [r3, #0]
      i++;
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	3301      	adds	r3, #1
 8007776:	623b      	str	r3, [r7, #32]
      pDest++;
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	3301      	adds	r3, #1
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800777e:	8bfb      	ldrh	r3, [r7, #30]
 8007780:	3b01      	subs	r3, #1
 8007782:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007784:	8bfb      	ldrh	r3, [r7, #30]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1ea      	bne.n	8007760 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800778c:	4618      	mov	r0, r3
 800778e:	372c      	adds	r7, #44	; 0x2c
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d12c      	bne.n	800780e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	db12      	blt.n	80077ec <USB_EPSetStall+0x54>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00f      	beq.n	80077ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	e02b      	b.n	8007866 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	db12      	blt.n	8007846 <USB_EPSetStall+0xae>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00f      	beq.n	8007846 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	0151      	lsls	r1, r2, #5
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	440a      	add	r2, r1
 800783c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007840:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007844:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	440a      	add	r2, r1
 800785c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007864:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d128      	bne.n	80078e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	0151      	lsls	r1, r2, #5
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	440a      	add	r2, r1
 80078a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	791b      	ldrb	r3, [r3, #4]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d003      	beq.n	80078c0 <USB_EPClearStall+0x4c>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	791b      	ldrb	r3, [r3, #4]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d138      	bne.n	8007932 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	0151      	lsls	r1, r2, #5
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	440a      	add	r2, r1
 80078d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	e027      	b.n	8007932 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007900:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	791b      	ldrb	r3, [r3, #4]
 8007906:	2b03      	cmp	r3, #3
 8007908:	d003      	beq.n	8007912 <USB_EPClearStall+0x9e>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	791b      	ldrb	r3, [r3, #4]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d10f      	bne.n	8007932 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	0151      	lsls	r1, r2, #5
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	440a      	add	r2, r1
 8007928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800792c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007930:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800795e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007962:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007974:	68f9      	ldr	r1, [r7, #12]
 8007976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800797a:	4313      	orrs	r3, r2
 800797c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ba:	f023 0302 	bic.w	r3, r3, #2
 80079be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b085      	sub	sp, #20
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079e8:	f023 0303 	bic.w	r3, r3, #3
 80079ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079fc:	f043 0302 	orr.w	r3, r3, #2
 8007a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4013      	ands	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a28:	68fb      	ldr	r3, [r7, #12]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b085      	sub	sp, #20
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	4013      	ands	r3, r2
 8007a58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	0c1b      	lsrs	r3, r3, #16
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	b29b      	uxth	r3, r3
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007aae:	78fb      	ldrb	r3, [r7, #3]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007acc:	68bb      	ldr	r3, [r7, #8]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b087      	sub	sp, #28
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	f003 030f 	and.w	r3, r3, #15
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0a:	01db      	lsls	r3, r3, #7
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	4013      	ands	r3, r2
 8007b26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b28:	68bb      	ldr	r3, [r7, #8]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	f003 0301 	and.w	r3, r3, #1
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b70:	f023 0307 	bic.w	r3, r3, #7
 8007b74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	333c      	adds	r3, #60	; 0x3c
 8007bae:	3304      	adds	r3, #4
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	4a26      	ldr	r2, [pc, #152]	; (8007c50 <USB_EP0_OutStart+0xb8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d90a      	bls.n	8007bd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bcc:	d101      	bne.n	8007bd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e037      	b.n	8007c42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd8:	461a      	mov	r2, r3
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c00:	f043 0318 	orr.w	r3, r3, #24
 8007c04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d10f      	bne.n	8007c40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c26:	461a      	mov	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007c3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	4f54300a 	.word	0x4f54300a

08007c54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4a13      	ldr	r2, [pc, #76]	; (8007cb8 <USB_CoreReset+0x64>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d901      	bls.n	8007c72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e01b      	b.n	8007caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	daf2      	bge.n	8007c60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	f043 0201 	orr.w	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a09      	ldr	r2, [pc, #36]	; (8007cb8 <USB_CoreReset+0x64>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d901      	bls.n	8007c9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e006      	b.n	8007caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d0f0      	beq.n	8007c8a <USB_CoreReset+0x36>

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	00030d40 	.word	0x00030d40

08007cbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ccc:	f005 fb28 	bl	800d320 <USBD_static_malloc>
 8007cd0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d109      	bne.n	8007cec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	32b0      	adds	r2, #176	; 0xb0
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e0d4      	b.n	8007e96 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007cec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f005 fc89 	bl	800d60a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	32b0      	adds	r2, #176	; 0xb0
 8007d02:	68f9      	ldr	r1, [r7, #12]
 8007d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	32b0      	adds	r2, #176	; 0xb0
 8007d12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	7c1b      	ldrb	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d138      	bne.n	8007d96 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d24:	4b5e      	ldr	r3, [pc, #376]	; (8007ea0 <USBD_CDC_Init+0x1e4>)
 8007d26:	7819      	ldrb	r1, [r3, #0]
 8007d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f005 f985 	bl	800d03e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d34:	4b5a      	ldr	r3, [pc, #360]	; (8007ea0 <USBD_CDC_Init+0x1e4>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 020f 	and.w	r2, r3, #15
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	3324      	adds	r3, #36	; 0x24
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d4e:	4b55      	ldr	r3, [pc, #340]	; (8007ea4 <USBD_CDC_Init+0x1e8>)
 8007d50:	7819      	ldrb	r1, [r3, #0]
 8007d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d56:	2202      	movs	r2, #2
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f005 f970 	bl	800d03e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d5e:	4b51      	ldr	r3, [pc, #324]	; (8007ea4 <USBD_CDC_Init+0x1e8>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	f003 020f 	and.w	r2, r3, #15
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d76:	2201      	movs	r2, #1
 8007d78:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d7a:	4b4b      	ldr	r3, [pc, #300]	; (8007ea8 <USBD_CDC_Init+0x1ec>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 020f 	and.w	r2, r3, #15
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	3326      	adds	r3, #38	; 0x26
 8007d90:	2210      	movs	r2, #16
 8007d92:	801a      	strh	r2, [r3, #0]
 8007d94:	e035      	b.n	8007e02 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d96:	4b42      	ldr	r3, [pc, #264]	; (8007ea0 <USBD_CDC_Init+0x1e4>)
 8007d98:	7819      	ldrb	r1, [r3, #0]
 8007d9a:	2340      	movs	r3, #64	; 0x40
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f005 f94d 	bl	800d03e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007da4:	4b3e      	ldr	r3, [pc, #248]	; (8007ea0 <USBD_CDC_Init+0x1e4>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	f003 020f 	and.w	r2, r3, #15
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	440b      	add	r3, r1
 8007db8:	3324      	adds	r3, #36	; 0x24
 8007dba:	2201      	movs	r2, #1
 8007dbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007dbe:	4b39      	ldr	r3, [pc, #228]	; (8007ea4 <USBD_CDC_Init+0x1e8>)
 8007dc0:	7819      	ldrb	r1, [r3, #0]
 8007dc2:	2340      	movs	r3, #64	; 0x40
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f005 f939 	bl	800d03e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007dcc:	4b35      	ldr	r3, [pc, #212]	; (8007ea4 <USBD_CDC_Init+0x1e8>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f003 020f 	and.w	r2, r3, #15
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	440b      	add	r3, r1
 8007de0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007de4:	2201      	movs	r2, #1
 8007de6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007de8:	4b2f      	ldr	r3, [pc, #188]	; (8007ea8 <USBD_CDC_Init+0x1ec>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	f003 020f 	and.w	r2, r3, #15
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3326      	adds	r3, #38	; 0x26
 8007dfe:	2210      	movs	r2, #16
 8007e00:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e02:	4b29      	ldr	r3, [pc, #164]	; (8007ea8 <USBD_CDC_Init+0x1ec>)
 8007e04:	7819      	ldrb	r1, [r3, #0]
 8007e06:	2308      	movs	r3, #8
 8007e08:	2203      	movs	r2, #3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f005 f917 	bl	800d03e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007e10:	4b25      	ldr	r3, [pc, #148]	; (8007ea8 <USBD_CDC_Init+0x1ec>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	f003 020f 	and.w	r2, r3, #15
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	3324      	adds	r3, #36	; 0x24
 8007e26:	2201      	movs	r2, #1
 8007e28:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	33b0      	adds	r3, #176	; 0xb0
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007e60:	2302      	movs	r3, #2
 8007e62:	e018      	b.n	8007e96 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	7c1b      	ldrb	r3, [r3, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10a      	bne.n	8007e82 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <USBD_CDC_Init+0x1e8>)
 8007e6e:	7819      	ldrb	r1, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f005 f9ce 	bl	800d21c <USBD_LL_PrepareReceive>
 8007e80:	e008      	b.n	8007e94 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e82:	4b08      	ldr	r3, [pc, #32]	; (8007ea4 <USBD_CDC_Init+0x1e8>)
 8007e84:	7819      	ldrb	r1, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e8c:	2340      	movs	r3, #64	; 0x40
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f005 f9c4 	bl	800d21c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000093 	.word	0x20000093
 8007ea4:	20000094 	.word	0x20000094
 8007ea8:	20000095 	.word	0x20000095

08007eac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007eb8:	4b3a      	ldr	r3, [pc, #232]	; (8007fa4 <USBD_CDC_DeInit+0xf8>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f005 f8e3 	bl	800d08a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ec4:	4b37      	ldr	r3, [pc, #220]	; (8007fa4 <USBD_CDC_DeInit+0xf8>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	f003 020f 	and.w	r2, r3, #15
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	3324      	adds	r3, #36	; 0x24
 8007eda:	2200      	movs	r2, #0
 8007edc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007ede:	4b32      	ldr	r3, [pc, #200]	; (8007fa8 <USBD_CDC_DeInit+0xfc>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f005 f8d0 	bl	800d08a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007eea:	4b2f      	ldr	r3, [pc, #188]	; (8007fa8 <USBD_CDC_DeInit+0xfc>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	f003 020f 	and.w	r2, r3, #15
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f02:	2200      	movs	r2, #0
 8007f04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007f06:	4b29      	ldr	r3, [pc, #164]	; (8007fac <USBD_CDC_DeInit+0x100>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f005 f8bc 	bl	800d08a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007f12:	4b26      	ldr	r3, [pc, #152]	; (8007fac <USBD_CDC_DeInit+0x100>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	f003 020f 	and.w	r2, r3, #15
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	440b      	add	r3, r1
 8007f26:	3324      	adds	r3, #36	; 0x24
 8007f28:	2200      	movs	r2, #0
 8007f2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007f2c:	4b1f      	ldr	r3, [pc, #124]	; (8007fac <USBD_CDC_DeInit+0x100>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f003 020f 	and.w	r2, r3, #15
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	440b      	add	r3, r1
 8007f40:	3326      	adds	r3, #38	; 0x26
 8007f42:	2200      	movs	r2, #0
 8007f44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	32b0      	adds	r2, #176	; 0xb0
 8007f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d01f      	beq.n	8007f98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	33b0      	adds	r3, #176	; 0xb0
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	32b0      	adds	r2, #176	; 0xb0
 8007f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f005 f9de 	bl	800d33c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	32b0      	adds	r2, #176	; 0xb0
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000093 	.word	0x20000093
 8007fa8:	20000094 	.word	0x20000094
 8007fac:	20000095 	.word	0x20000095

08007fb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	32b0      	adds	r2, #176	; 0xb0
 8007fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e0bf      	b.n	8008160 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d050      	beq.n	800808e <USBD_CDC_Setup+0xde>
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	f040 80af 	bne.w	8008150 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	88db      	ldrh	r3, [r3, #6]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d03a      	beq.n	8008070 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b25b      	sxtb	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	da1b      	bge.n	800803c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	33b0      	adds	r3, #176	; 0xb0
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800801a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	88d2      	ldrh	r2, [r2, #6]
 8008020:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	88db      	ldrh	r3, [r3, #6]
 8008026:	2b07      	cmp	r3, #7
 8008028:	bf28      	it	cs
 800802a:	2307      	movcs	r3, #7
 800802c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	89fa      	ldrh	r2, [r7, #14]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 fdb3 	bl	8009ba0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800803a:	e090      	b.n	800815e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	785a      	ldrb	r2, [r3, #1]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	88db      	ldrh	r3, [r3, #6]
 800804a:	2b3f      	cmp	r3, #63	; 0x3f
 800804c:	d803      	bhi.n	8008056 <USBD_CDC_Setup+0xa6>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	88db      	ldrh	r3, [r3, #6]
 8008052:	b2da      	uxtb	r2, r3
 8008054:	e000      	b.n	8008058 <USBD_CDC_Setup+0xa8>
 8008056:	2240      	movs	r2, #64	; 0x40
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800805e:	6939      	ldr	r1, [r7, #16]
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008066:	461a      	mov	r2, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 fdc5 	bl	8009bf8 <USBD_CtlPrepareRx>
      break;
 800806e:	e076      	b.n	800815e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	33b0      	adds	r3, #176	; 0xb0
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	7850      	ldrb	r0, [r2, #1]
 8008086:	2200      	movs	r2, #0
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	4798      	blx	r3
      break;
 800808c:	e067      	b.n	800815e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	2b0b      	cmp	r3, #11
 8008094:	d851      	bhi.n	800813a <USBD_CDC_Setup+0x18a>
 8008096:	a201      	add	r2, pc, #4	; (adr r2, 800809c <USBD_CDC_Setup+0xec>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	080080cd 	.word	0x080080cd
 80080a0:	08008149 	.word	0x08008149
 80080a4:	0800813b 	.word	0x0800813b
 80080a8:	0800813b 	.word	0x0800813b
 80080ac:	0800813b 	.word	0x0800813b
 80080b0:	0800813b 	.word	0x0800813b
 80080b4:	0800813b 	.word	0x0800813b
 80080b8:	0800813b 	.word	0x0800813b
 80080bc:	0800813b 	.word	0x0800813b
 80080c0:	0800813b 	.word	0x0800813b
 80080c4:	080080f7 	.word	0x080080f7
 80080c8:	08008121 	.word	0x08008121
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d107      	bne.n	80080e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80080d8:	f107 030a 	add.w	r3, r7, #10
 80080dc:	2202      	movs	r2, #2
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 fd5d 	bl	8009ba0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080e6:	e032      	b.n	800814e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 fce7 	bl	8009abe <USBD_CtlError>
            ret = USBD_FAIL;
 80080f0:	2303      	movs	r3, #3
 80080f2:	75fb      	strb	r3, [r7, #23]
          break;
 80080f4:	e02b      	b.n	800814e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d107      	bne.n	8008112 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008102:	f107 030d 	add.w	r3, r7, #13
 8008106:	2201      	movs	r2, #1
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fd48 	bl	8009ba0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008110:	e01d      	b.n	800814e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 fcd2 	bl	8009abe <USBD_CtlError>
            ret = USBD_FAIL;
 800811a:	2303      	movs	r3, #3
 800811c:	75fb      	strb	r3, [r7, #23]
          break;
 800811e:	e016      	b.n	800814e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b03      	cmp	r3, #3
 800812a:	d00f      	beq.n	800814c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 fcc5 	bl	8009abe <USBD_CtlError>
            ret = USBD_FAIL;
 8008134:	2303      	movs	r3, #3
 8008136:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008138:	e008      	b.n	800814c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 fcbe 	bl	8009abe <USBD_CtlError>
          ret = USBD_FAIL;
 8008142:	2303      	movs	r3, #3
 8008144:	75fb      	strb	r3, [r7, #23]
          break;
 8008146:	e002      	b.n	800814e <USBD_CDC_Setup+0x19e>
          break;
 8008148:	bf00      	nop
 800814a:	e008      	b.n	800815e <USBD_CDC_Setup+0x1ae>
          break;
 800814c:	bf00      	nop
      }
      break;
 800814e:	e006      	b.n	800815e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f001 fcb3 	bl	8009abe <USBD_CtlError>
      ret = USBD_FAIL;
 8008158:	2303      	movs	r3, #3
 800815a:	75fb      	strb	r3, [r7, #23]
      break;
 800815c:	bf00      	nop
  }

  return (uint8_t)ret;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800817a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	32b0      	adds	r2, #176	; 0xb0
 8008186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800818e:	2303      	movs	r3, #3
 8008190:	e065      	b.n	800825e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	32b0      	adds	r2, #176	; 0xb0
 800819c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	f003 020f 	and.w	r2, r3, #15
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	4613      	mov	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	440b      	add	r3, r1
 80081b4:	3318      	adds	r3, #24
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d02f      	beq.n	800821c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	f003 020f 	and.w	r2, r3, #15
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	440b      	add	r3, r1
 80081ce:	3318      	adds	r3, #24
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	f003 010f 	and.w	r1, r3, #15
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	460b      	mov	r3, r1
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	440b      	add	r3, r1
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4403      	add	r3, r0
 80081e4:	3348      	adds	r3, #72	; 0x48
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80081ec:	fb01 f303 	mul.w	r3, r1, r3
 80081f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d112      	bne.n	800821c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	f003 020f 	and.w	r2, r3, #15
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	4613      	mov	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	440b      	add	r3, r1
 8008208:	3318      	adds	r3, #24
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800820e:	78f9      	ldrb	r1, [r7, #3]
 8008210:	2300      	movs	r3, #0
 8008212:	2200      	movs	r2, #0
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f004 ffe0 	bl	800d1da <USBD_LL_Transmit>
 800821a:	e01f      	b.n	800825c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	33b0      	adds	r3, #176	; 0xb0
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d010      	beq.n	800825c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	33b0      	adds	r3, #176	; 0xb0
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008258:	78fa      	ldrb	r2, [r7, #3]
 800825a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	32b0      	adds	r2, #176	; 0xb0
 800827c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008280:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	32b0      	adds	r2, #176	; 0xb0
 800828c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	e01a      	b.n	80082ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f004 ffde 	bl	800d25e <USBD_LL_GetRxDataSize>
 80082a2:	4602      	mov	r2, r0
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	33b0      	adds	r3, #176	; 0xb0
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082c8:	4611      	mov	r1, r2
 80082ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	32b0      	adds	r2, #176	; 0xb0
 80082e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e025      	b.n	8008344 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	33b0      	adds	r3, #176	; 0xb0
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01a      	beq.n	8008342 <USBD_CDC_EP0_RxReady+0x6c>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008312:	2bff      	cmp	r3, #255	; 0xff
 8008314:	d015      	beq.n	8008342 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	33b0      	adds	r3, #176	; 0xb0
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800832e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008336:	b292      	uxth	r2, r2
 8008338:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	22ff      	movs	r2, #255	; 0xff
 800833e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008354:	2182      	movs	r1, #130	; 0x82
 8008356:	4818      	ldr	r0, [pc, #96]	; (80083b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008358:	f000 fd4f 	bl	8008dfa <USBD_GetEpDesc>
 800835c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800835e:	2101      	movs	r1, #1
 8008360:	4815      	ldr	r0, [pc, #84]	; (80083b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008362:	f000 fd4a 	bl	8008dfa <USBD_GetEpDesc>
 8008366:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008368:	2181      	movs	r1, #129	; 0x81
 800836a:	4813      	ldr	r0, [pc, #76]	; (80083b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800836c:	f000 fd45 	bl	8008dfa <USBD_GetEpDesc>
 8008370:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2210      	movs	r2, #16
 800837c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d006      	beq.n	8008392 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2200      	movs	r2, #0
 8008388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800838c:	711a      	strb	r2, [r3, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d006      	beq.n	80083a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083a0:	711a      	strb	r2, [r3, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2243      	movs	r2, #67	; 0x43
 80083aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20000050 	.word	0x20000050

080083bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083c4:	2182      	movs	r1, #130	; 0x82
 80083c6:	4818      	ldr	r0, [pc, #96]	; (8008428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80083c8:	f000 fd17 	bl	8008dfa <USBD_GetEpDesc>
 80083cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083ce:	2101      	movs	r1, #1
 80083d0:	4815      	ldr	r0, [pc, #84]	; (8008428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80083d2:	f000 fd12 	bl	8008dfa <USBD_GetEpDesc>
 80083d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083d8:	2181      	movs	r1, #129	; 0x81
 80083da:	4813      	ldr	r0, [pc, #76]	; (8008428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80083dc:	f000 fd0d 	bl	8008dfa <USBD_GetEpDesc>
 80083e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2210      	movs	r2, #16
 80083ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d006      	beq.n	8008402 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	2200      	movs	r2, #0
 80083f8:	711a      	strb	r2, [r3, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f042 0202 	orr.w	r2, r2, #2
 8008400:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d006      	beq.n	8008416 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	711a      	strb	r2, [r3, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f042 0202 	orr.w	r2, r2, #2
 8008414:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2243      	movs	r2, #67	; 0x43
 800841a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800841c:	4b02      	ldr	r3, [pc, #8]	; (8008428 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800841e:	4618      	mov	r0, r3
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000050 	.word	0x20000050

0800842c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008434:	2182      	movs	r1, #130	; 0x82
 8008436:	4818      	ldr	r0, [pc, #96]	; (8008498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008438:	f000 fcdf 	bl	8008dfa <USBD_GetEpDesc>
 800843c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800843e:	2101      	movs	r1, #1
 8008440:	4815      	ldr	r0, [pc, #84]	; (8008498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008442:	f000 fcda 	bl	8008dfa <USBD_GetEpDesc>
 8008446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008448:	2181      	movs	r1, #129	; 0x81
 800844a:	4813      	ldr	r0, [pc, #76]	; (8008498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800844c:	f000 fcd5 	bl	8008dfa <USBD_GetEpDesc>
 8008450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2210      	movs	r2, #16
 800845c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d006      	beq.n	8008472 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2200      	movs	r2, #0
 8008468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800846c:	711a      	strb	r2, [r3, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d006      	beq.n	8008486 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008480:	711a      	strb	r2, [r3, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2243      	movs	r2, #67	; 0x43
 800848a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800848c:	4b02      	ldr	r3, [pc, #8]	; (8008498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20000050 	.word	0x20000050

0800849c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	220a      	movs	r2, #10
 80084a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80084aa:	4b03      	ldr	r3, [pc, #12]	; (80084b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	2000000c 	.word	0x2000000c

080084bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e009      	b.n	80084e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	33b0      	adds	r3, #176	; 0xb0
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	32b0      	adds	r2, #176	; 0xb0
 8008506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008512:	2303      	movs	r3, #3
 8008514:	e008      	b.n	8008528 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	371c      	adds	r7, #28
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	32b0      	adds	r2, #176	; 0xb0
 8008548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008554:	2303      	movs	r3, #3
 8008556:	e004      	b.n	8008562 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
	...

08008570 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	32b0      	adds	r2, #176	; 0xb0
 8008582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008586:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008588:	2301      	movs	r3, #1
 800858a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32b0      	adds	r2, #176	; 0xb0
 8008596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800859e:	2303      	movs	r3, #3
 80085a0:	e025      	b.n	80085ee <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d11f      	bne.n	80085ec <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80085b4:	4b10      	ldr	r3, [pc, #64]	; (80085f8 <USBD_CDC_TransmitPacket+0x88>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 020f 	and.w	r2, r3, #15
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	4613      	mov	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4403      	add	r3, r0
 80085ce:	3318      	adds	r3, #24
 80085d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80085d2:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <USBD_CDC_TransmitPacket+0x88>)
 80085d4:	7819      	ldrb	r1, [r3, #0]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f004 fdf9 	bl	800d1da <USBD_LL_Transmit>

    ret = USBD_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000093 	.word	0x20000093

080085fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	32b0      	adds	r2, #176	; 0xb0
 800860e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008612:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	32b0      	adds	r2, #176	; 0xb0
 800861e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008626:	2303      	movs	r3, #3
 8008628:	e018      	b.n	800865c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	7c1b      	ldrb	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10a      	bne.n	8008648 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008632:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <USBD_CDC_ReceivePacket+0x68>)
 8008634:	7819      	ldrb	r1, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800863c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f004 fdeb 	bl	800d21c <USBD_LL_PrepareReceive>
 8008646:	e008      	b.n	800865a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008648:	4b06      	ldr	r3, [pc, #24]	; (8008664 <USBD_CDC_ReceivePacket+0x68>)
 800864a:	7819      	ldrb	r1, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008652:	2340      	movs	r3, #64	; 0x40
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f004 fde1 	bl	800d21c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20000094 	.word	0x20000094

08008668 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800867c:	2303      	movs	r3, #3
 800867e:	e01f      	b.n	80086c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	79fa      	ldrb	r2, [r7, #7]
 80086b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f004 fc5b 	bl	800cf70 <USBD_LL_Init>
 80086ba:	4603      	mov	r3, r0
 80086bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80086dc:	2303      	movs	r3, #3
 80086de:	e025      	b.n	800872c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	32ae      	adds	r2, #174	; 0xae
 80086f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00f      	beq.n	800871c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	32ae      	adds	r2, #174	; 0xae
 8008706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	f107 020e 	add.w	r2, r7, #14
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	4602      	mov	r2, r0
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f004 fc63 	bl	800d008 <USBD_LL_Start>
 8008742:	4603      	mov	r3, r0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008754:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008778:	2b00      	cmp	r3, #0
 800877a:	d009      	beq.n	8008790 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	78fa      	ldrb	r2, [r7, #3]
 8008786:	4611      	mov	r1, r2
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	4798      	blx	r3
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008790:	7bfb      	ldrb	r3, [r7, #15]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	78fa      	ldrb	r2, [r7, #3]
 80087b4:	4611      	mov	r1, r2
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	4798      	blx	r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 f932 	bl	8009a4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80087f4:	461a      	mov	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008802:	f003 031f 	and.w	r3, r3, #31
 8008806:	2b02      	cmp	r3, #2
 8008808:	d01a      	beq.n	8008840 <USBD_LL_SetupStage+0x72>
 800880a:	2b02      	cmp	r3, #2
 800880c:	d822      	bhi.n	8008854 <USBD_LL_SetupStage+0x86>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <USBD_LL_SetupStage+0x4a>
 8008812:	2b01      	cmp	r3, #1
 8008814:	d00a      	beq.n	800882c <USBD_LL_SetupStage+0x5e>
 8008816:	e01d      	b.n	8008854 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fb5f 	bl	8008ee4 <USBD_StdDevReq>
 8008826:	4603      	mov	r3, r0
 8008828:	73fb      	strb	r3, [r7, #15]
      break;
 800882a:	e020      	b.n	800886e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fbc7 	bl	8008fc8 <USBD_StdItfReq>
 800883a:	4603      	mov	r3, r0
 800883c:	73fb      	strb	r3, [r7, #15]
      break;
 800883e:	e016      	b.n	800886e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fc29 	bl	80090a0 <USBD_StdEPReq>
 800884e:	4603      	mov	r3, r0
 8008850:	73fb      	strb	r3, [r7, #15]
      break;
 8008852:	e00c      	b.n	800886e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800885a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800885e:	b2db      	uxtb	r3, r3
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f004 fc30 	bl	800d0c8 <USBD_LL_StallEP>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
      break;
 800886c:	bf00      	nop
  }

  return ret;
 800886e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	460b      	mov	r3, r1
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800888a:	7afb      	ldrb	r3, [r7, #11]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d16e      	bne.n	800896e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008896:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800889e:	2b03      	cmp	r3, #3
 80088a0:	f040 8098 	bne.w	80089d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	689a      	ldr	r2, [r3, #8]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d913      	bls.n	80088d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	1ad2      	subs	r2, r2, r3
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	bf28      	it	cs
 80088ca:	4613      	movcs	r3, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f001 f9ae 	bl	8009c32 <USBD_CtlContinueRx>
 80088d6:	e07d      	b.n	80089d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088de:	f003 031f 	and.w	r3, r3, #31
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d014      	beq.n	8008910 <USBD_LL_DataOutStage+0x98>
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d81d      	bhi.n	8008926 <USBD_LL_DataOutStage+0xae>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <USBD_LL_DataOutStage+0x7c>
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d003      	beq.n	80088fa <USBD_LL_DataOutStage+0x82>
 80088f2:	e018      	b.n	8008926 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	75bb      	strb	r3, [r7, #22]
            break;
 80088f8:	e018      	b.n	800892c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008900:	b2db      	uxtb	r3, r3
 8008902:	4619      	mov	r1, r3
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 fa5e 	bl	8008dc6 <USBD_CoreFindIF>
 800890a:	4603      	mov	r3, r0
 800890c:	75bb      	strb	r3, [r7, #22]
            break;
 800890e:	e00d      	b.n	800892c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008916:	b2db      	uxtb	r3, r3
 8008918:	4619      	mov	r1, r3
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 fa60 	bl	8008de0 <USBD_CoreFindEP>
 8008920:	4603      	mov	r3, r0
 8008922:	75bb      	strb	r3, [r7, #22]
            break;
 8008924:	e002      	b.n	800892c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	75bb      	strb	r3, [r7, #22]
            break;
 800892a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800892c:	7dbb      	ldrb	r3, [r7, #22]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d119      	bne.n	8008966 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b03      	cmp	r3, #3
 800893c:	d113      	bne.n	8008966 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800893e:	7dba      	ldrb	r2, [r7, #22]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	32ae      	adds	r2, #174	; 0xae
 8008944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00b      	beq.n	8008966 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800894e:	7dba      	ldrb	r2, [r7, #22]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008956:	7dba      	ldrb	r2, [r7, #22]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	32ae      	adds	r2, #174	; 0xae
 800895c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f001 f974 	bl	8009c54 <USBD_CtlSendStatus>
 800896c:	e032      	b.n	80089d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800896e:	7afb      	ldrb	r3, [r7, #11]
 8008970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008974:	b2db      	uxtb	r3, r3
 8008976:	4619      	mov	r1, r3
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 fa31 	bl	8008de0 <USBD_CoreFindEP>
 800897e:	4603      	mov	r3, r0
 8008980:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008982:	7dbb      	ldrb	r3, [r7, #22]
 8008984:	2bff      	cmp	r3, #255	; 0xff
 8008986:	d025      	beq.n	80089d4 <USBD_LL_DataOutStage+0x15c>
 8008988:	7dbb      	ldrb	r3, [r7, #22]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d122      	bne.n	80089d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b03      	cmp	r3, #3
 8008998:	d117      	bne.n	80089ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800899a:	7dba      	ldrb	r2, [r7, #22]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	32ae      	adds	r2, #174	; 0xae
 80089a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00f      	beq.n	80089ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80089aa:	7dba      	ldrb	r2, [r7, #22]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80089b2:	7dba      	ldrb	r2, [r7, #22]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	32ae      	adds	r2, #174	; 0xae
 80089b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	7afa      	ldrb	r2, [r7, #11]
 80089c0:	4611      	mov	r1, r2
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	4798      	blx	r3
 80089c6:	4603      	mov	r3, r0
 80089c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
 80089d2:	e000      	b.n	80089d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b086      	sub	sp, #24
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	460b      	mov	r3, r1
 80089e8:	607a      	str	r2, [r7, #4]
 80089ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80089ec:	7afb      	ldrb	r3, [r7, #11]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d16f      	bne.n	8008ad2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3314      	adds	r3, #20
 80089f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d15a      	bne.n	8008ab8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d914      	bls.n	8008a38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	1ad2      	subs	r2, r2, r3
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	461a      	mov	r2, r3
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f001 f8d6 	bl	8009bd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2100      	movs	r1, #0
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f004 fbf3 	bl	800d21c <USBD_LL_PrepareReceive>
 8008a36:	e03f      	b.n	8008ab8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d11c      	bne.n	8008a7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d316      	bcc.n	8008a7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d20f      	bcs.n	8008a7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2100      	movs	r1, #0
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f001 f8b7 	bl	8009bd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a70:	2300      	movs	r3, #0
 8008a72:	2200      	movs	r2, #0
 8008a74:	2100      	movs	r1, #0
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f004 fbd0 	bl	800d21c <USBD_LL_PrepareReceive>
 8008a7c:	e01c      	b.n	8008ab8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d10f      	bne.n	8008aaa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d009      	beq.n	8008aaa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aaa:	2180      	movs	r1, #128	; 0x80
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f004 fb0b 	bl	800d0c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f001 f8e1 	bl	8009c7a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d03a      	beq.n	8008b38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7ff fe42 	bl	800874c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ad0:	e032      	b.n	8008b38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008ad2:	7afb      	ldrb	r3, [r7, #11]
 8008ad4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	4619      	mov	r1, r3
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 f97f 	bl	8008de0 <USBD_CoreFindEP>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
 8008ae8:	2bff      	cmp	r3, #255	; 0xff
 8008aea:	d025      	beq.n	8008b38 <USBD_LL_DataInStage+0x15a>
 8008aec:	7dfb      	ldrb	r3, [r7, #23]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d122      	bne.n	8008b38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d11c      	bne.n	8008b38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008afe:	7dfa      	ldrb	r2, [r7, #23]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	32ae      	adds	r2, #174	; 0xae
 8008b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d014      	beq.n	8008b38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008b0e:	7dfa      	ldrb	r2, [r7, #23]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008b16:	7dfa      	ldrb	r2, [r7, #23]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	32ae      	adds	r2, #174	; 0xae
 8008b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	7afa      	ldrb	r2, [r7, #11]
 8008b24:	4611      	mov	r1, r2
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	4798      	blx	r3
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008b2e:	7dbb      	ldrb	r3, [r7, #22]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008b34:	7dbb      	ldrb	r3, [r7, #22]
 8008b36:	e000      	b.n	8008b3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d014      	beq.n	8008ba8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00e      	beq.n	8008ba8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6852      	ldr	r2, [r2, #4]
 8008b96:	b2d2      	uxtb	r2, r2
 8008b98:	4611      	mov	r1, r2
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	4798      	blx	r3
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ba8:	2340      	movs	r3, #64	; 0x40
 8008baa:	2200      	movs	r2, #0
 8008bac:	2100      	movs	r1, #0
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f004 fa45 	bl	800d03e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2240      	movs	r2, #64	; 0x40
 8008bc0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bc4:	2340      	movs	r3, #64	; 0x40
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	2180      	movs	r1, #128	; 0x80
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f004 fa37 	bl	800d03e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2240      	movs	r2, #64	; 0x40
 8008bda:	621a      	str	r2, [r3, #32]

  return ret;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	78fa      	ldrb	r2, [r7, #3]
 8008bf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2204      	movs	r2, #4
 8008c20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d106      	bne.n	8008c54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b082      	sub	sp, #8
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d110      	bne.n	8008c98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00b      	beq.n	8008c98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	32ae      	adds	r2, #174	; 0xae
 8008cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e01c      	b.n	8008cfe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d115      	bne.n	8008cfc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	32ae      	adds	r2, #174	; 0xae
 8008cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	32ae      	adds	r2, #174	; 0xae
 8008cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	78fa      	ldrb	r2, [r7, #3]
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	32ae      	adds	r2, #174	; 0xae
 8008d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e01c      	b.n	8008d62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d115      	bne.n	8008d60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	32ae      	adds	r2, #174	; 0xae
 8008d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00b      	beq.n	8008d60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	32ae      	adds	r2, #174	; 0xae
 8008d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	78fa      	ldrb	r2, [r7, #3]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00e      	beq.n	8008dbc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6852      	ldr	r2, [r2, #4]
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	4611      	mov	r1, r2
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	4798      	blx	r3
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008db8:	2303      	movs	r3, #3
 8008dba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b083      	sub	sp, #12
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008dd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008dec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b086      	sub	sp, #24
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	885b      	ldrh	r3, [r3, #2]
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d920      	bls.n	8008e64 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008e2a:	e013      	b.n	8008e54 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008e2c:	f107 030a 	add.w	r3, r7, #10
 8008e30:	4619      	mov	r1, r3
 8008e32:	6978      	ldr	r0, [r7, #20]
 8008e34:	f000 f81b 	bl	8008e6e <USBD_GetNextDesc>
 8008e38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	785b      	ldrb	r3, [r3, #1]
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d108      	bne.n	8008e54 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	789b      	ldrb	r3, [r3, #2]
 8008e4a:	78fa      	ldrb	r2, [r7, #3]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d008      	beq.n	8008e62 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	885b      	ldrh	r3, [r3, #2]
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	897b      	ldrh	r3, [r7, #10]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d8e5      	bhi.n	8008e2c <USBD_GetEpDesc+0x32>
 8008e60:	e000      	b.n	8008e64 <USBD_GetEpDesc+0x6a>
          break;
 8008e62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008e64:	693b      	ldr	r3, [r7, #16]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b085      	sub	sp, #20
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	881a      	ldrh	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	4413      	add	r3, r2
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4413      	add	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ec6:	8a3b      	ldrh	r3, [r7, #16]
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	b21a      	sxth	r2, r3
 8008ecc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	b21b      	sxth	r3, r3
 8008ed4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ed6:	89fb      	ldrh	r3, [r7, #14]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	371c      	adds	r7, #28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008efa:	2b40      	cmp	r3, #64	; 0x40
 8008efc:	d005      	beq.n	8008f0a <USBD_StdDevReq+0x26>
 8008efe:	2b40      	cmp	r3, #64	; 0x40
 8008f00:	d857      	bhi.n	8008fb2 <USBD_StdDevReq+0xce>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00f      	beq.n	8008f26 <USBD_StdDevReq+0x42>
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	d153      	bne.n	8008fb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	32ae      	adds	r2, #174	; 0xae
 8008f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	4798      	blx	r3
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]
      break;
 8008f24:	e04a      	b.n	8008fbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	785b      	ldrb	r3, [r3, #1]
 8008f2a:	2b09      	cmp	r3, #9
 8008f2c:	d83b      	bhi.n	8008fa6 <USBD_StdDevReq+0xc2>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <USBD_StdDevReq+0x50>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f89 	.word	0x08008f89
 8008f38:	08008f9d 	.word	0x08008f9d
 8008f3c:	08008fa7 	.word	0x08008fa7
 8008f40:	08008f93 	.word	0x08008f93
 8008f44:	08008fa7 	.word	0x08008fa7
 8008f48:	08008f67 	.word	0x08008f67
 8008f4c:	08008f5d 	.word	0x08008f5d
 8008f50:	08008fa7 	.word	0x08008fa7
 8008f54:	08008f7f 	.word	0x08008f7f
 8008f58:	08008f71 	.word	0x08008f71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa3c 	bl	80093dc <USBD_GetDescriptor>
          break;
 8008f64:	e024      	b.n	8008fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fbcb 	bl	8009704 <USBD_SetAddress>
          break;
 8008f6e:	e01f      	b.n	8008fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fc0a 	bl	800978c <USBD_SetConfig>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73fb      	strb	r3, [r7, #15]
          break;
 8008f7c:	e018      	b.n	8008fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fcad 	bl	80098e0 <USBD_GetConfig>
          break;
 8008f86:	e013      	b.n	8008fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fcde 	bl	800994c <USBD_GetStatus>
          break;
 8008f90:	e00e      	b.n	8008fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fd0d 	bl	80099b4 <USBD_SetFeature>
          break;
 8008f9a:	e009      	b.n	8008fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fd31 	bl	8009a06 <USBD_ClrFeature>
          break;
 8008fa4:	e004      	b.n	8008fb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fd88 	bl	8009abe <USBD_CtlError>
          break;
 8008fae:	bf00      	nop
      }
      break;
 8008fb0:	e004      	b.n	8008fbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fd82 	bl	8009abe <USBD_CtlError>
      break;
 8008fba:	bf00      	nop
  }

  return ret;
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop

08008fc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fde:	2b40      	cmp	r3, #64	; 0x40
 8008fe0:	d005      	beq.n	8008fee <USBD_StdItfReq+0x26>
 8008fe2:	2b40      	cmp	r3, #64	; 0x40
 8008fe4:	d852      	bhi.n	800908c <USBD_StdItfReq+0xc4>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <USBD_StdItfReq+0x26>
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	d14e      	bne.n	800908c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d840      	bhi.n	800907e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	889b      	ldrh	r3, [r3, #4]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b01      	cmp	r3, #1
 8009004:	d836      	bhi.n	8009074 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	889b      	ldrh	r3, [r3, #4]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff fed9 	bl	8008dc6 <USBD_CoreFindIF>
 8009014:	4603      	mov	r3, r0
 8009016:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	2bff      	cmp	r3, #255	; 0xff
 800901c:	d01d      	beq.n	800905a <USBD_StdItfReq+0x92>
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d11a      	bne.n	800905a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009024:	7bba      	ldrb	r2, [r7, #14]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	32ae      	adds	r2, #174	; 0xae
 800902a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00f      	beq.n	8009054 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009034:	7bba      	ldrb	r2, [r7, #14]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800903c:	7bba      	ldrb	r2, [r7, #14]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	32ae      	adds	r2, #174	; 0xae
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	4798      	blx	r3
 800904e:	4603      	mov	r3, r0
 8009050:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009052:	e004      	b.n	800905e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009054:	2303      	movs	r3, #3
 8009056:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009058:	e001      	b.n	800905e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800905a:	2303      	movs	r3, #3
 800905c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	88db      	ldrh	r3, [r3, #6]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d110      	bne.n	8009088 <USBD_StdItfReq+0xc0>
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10d      	bne.n	8009088 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fdf1 	bl	8009c54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009072:	e009      	b.n	8009088 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fd21 	bl	8009abe <USBD_CtlError>
          break;
 800907c:	e004      	b.n	8009088 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fd1c 	bl	8009abe <USBD_CtlError>
          break;
 8009086:	e000      	b.n	800908a <USBD_StdItfReq+0xc2>
          break;
 8009088:	bf00      	nop
      }
      break;
 800908a:	e004      	b.n	8009096 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fd15 	bl	8009abe <USBD_CtlError>
      break;
 8009094:	bf00      	nop
  }

  return ret;
 8009096:	7bfb      	ldrb	r3, [r7, #15]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	889b      	ldrh	r3, [r3, #4]
 80090b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090bc:	2b40      	cmp	r3, #64	; 0x40
 80090be:	d007      	beq.n	80090d0 <USBD_StdEPReq+0x30>
 80090c0:	2b40      	cmp	r3, #64	; 0x40
 80090c2:	f200 817f 	bhi.w	80093c4 <USBD_StdEPReq+0x324>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d02a      	beq.n	8009120 <USBD_StdEPReq+0x80>
 80090ca:	2b20      	cmp	r3, #32
 80090cc:	f040 817a 	bne.w	80093c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff fe83 	bl	8008de0 <USBD_CoreFindEP>
 80090da:	4603      	mov	r3, r0
 80090dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090de:	7b7b      	ldrb	r3, [r7, #13]
 80090e0:	2bff      	cmp	r3, #255	; 0xff
 80090e2:	f000 8174 	beq.w	80093ce <USBD_StdEPReq+0x32e>
 80090e6:	7b7b      	ldrb	r3, [r7, #13]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f040 8170 	bne.w	80093ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80090ee:	7b7a      	ldrb	r2, [r7, #13]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80090f6:	7b7a      	ldrb	r2, [r7, #13]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	32ae      	adds	r2, #174	; 0xae
 80090fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 8163 	beq.w	80093ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009108:	7b7a      	ldrb	r2, [r7, #13]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	32ae      	adds	r2, #174	; 0xae
 800910e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	4798      	blx	r3
 800911a:	4603      	mov	r3, r0
 800911c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800911e:	e156      	b.n	80093ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	785b      	ldrb	r3, [r3, #1]
 8009124:	2b03      	cmp	r3, #3
 8009126:	d008      	beq.n	800913a <USBD_StdEPReq+0x9a>
 8009128:	2b03      	cmp	r3, #3
 800912a:	f300 8145 	bgt.w	80093b8 <USBD_StdEPReq+0x318>
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 809b 	beq.w	800926a <USBD_StdEPReq+0x1ca>
 8009134:	2b01      	cmp	r3, #1
 8009136:	d03c      	beq.n	80091b2 <USBD_StdEPReq+0x112>
 8009138:	e13e      	b.n	80093b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d002      	beq.n	800914c <USBD_StdEPReq+0xac>
 8009146:	2b03      	cmp	r3, #3
 8009148:	d016      	beq.n	8009178 <USBD_StdEPReq+0xd8>
 800914a:	e02c      	b.n	80091a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00d      	beq.n	800916e <USBD_StdEPReq+0xce>
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b80      	cmp	r3, #128	; 0x80
 8009156:	d00a      	beq.n	800916e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009158:	7bbb      	ldrb	r3, [r7, #14]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f003 ffb3 	bl	800d0c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009162:	2180      	movs	r1, #128	; 0x80
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f003 ffaf 	bl	800d0c8 <USBD_LL_StallEP>
 800916a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800916c:	e020      	b.n	80091b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fca4 	bl	8009abe <USBD_CtlError>
              break;
 8009176:	e01b      	b.n	80091b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	885b      	ldrh	r3, [r3, #2]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10e      	bne.n	800919e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00b      	beq.n	800919e <USBD_StdEPReq+0xfe>
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	2b80      	cmp	r3, #128	; 0x80
 800918a:	d008      	beq.n	800919e <USBD_StdEPReq+0xfe>
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	88db      	ldrh	r3, [r3, #6]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d104      	bne.n	800919e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f003 ff95 	bl	800d0c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fd58 	bl	8009c54 <USBD_CtlSendStatus>

              break;
 80091a4:	e004      	b.n	80091b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fc88 	bl	8009abe <USBD_CtlError>
              break;
 80091ae:	bf00      	nop
          }
          break;
 80091b0:	e107      	b.n	80093c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d002      	beq.n	80091c4 <USBD_StdEPReq+0x124>
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d016      	beq.n	80091f0 <USBD_StdEPReq+0x150>
 80091c2:	e04b      	b.n	800925c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00d      	beq.n	80091e6 <USBD_StdEPReq+0x146>
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	2b80      	cmp	r3, #128	; 0x80
 80091ce:	d00a      	beq.n	80091e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f003 ff77 	bl	800d0c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80091da:	2180      	movs	r1, #128	; 0x80
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f003 ff73 	bl	800d0c8 <USBD_LL_StallEP>
 80091e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091e4:	e040      	b.n	8009268 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fc68 	bl	8009abe <USBD_CtlError>
              break;
 80091ee:	e03b      	b.n	8009268 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	885b      	ldrh	r3, [r3, #2]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d136      	bne.n	8009266 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d004      	beq.n	800920c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f003 ff7d 	bl	800d106 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fd21 	bl	8009c54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009212:	7bbb      	ldrb	r3, [r7, #14]
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7ff fde2 	bl	8008de0 <USBD_CoreFindEP>
 800921c:	4603      	mov	r3, r0
 800921e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009220:	7b7b      	ldrb	r3, [r7, #13]
 8009222:	2bff      	cmp	r3, #255	; 0xff
 8009224:	d01f      	beq.n	8009266 <USBD_StdEPReq+0x1c6>
 8009226:	7b7b      	ldrb	r3, [r7, #13]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d11c      	bne.n	8009266 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800922c:	7b7a      	ldrb	r2, [r7, #13]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009234:	7b7a      	ldrb	r2, [r7, #13]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	32ae      	adds	r2, #174	; 0xae
 800923a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d010      	beq.n	8009266 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009244:	7b7a      	ldrb	r2, [r7, #13]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	32ae      	adds	r2, #174	; 0xae
 800924a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	4798      	blx	r3
 8009256:	4603      	mov	r3, r0
 8009258:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800925a:	e004      	b.n	8009266 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fc2d 	bl	8009abe <USBD_CtlError>
              break;
 8009264:	e000      	b.n	8009268 <USBD_StdEPReq+0x1c8>
              break;
 8009266:	bf00      	nop
          }
          break;
 8009268:	e0ab      	b.n	80093c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	d002      	beq.n	800927c <USBD_StdEPReq+0x1dc>
 8009276:	2b03      	cmp	r3, #3
 8009278:	d032      	beq.n	80092e0 <USBD_StdEPReq+0x240>
 800927a:	e097      	b.n	80093ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d007      	beq.n	8009292 <USBD_StdEPReq+0x1f2>
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b80      	cmp	r3, #128	; 0x80
 8009286:	d004      	beq.n	8009292 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fc17 	bl	8009abe <USBD_CtlError>
                break;
 8009290:	e091      	b.n	80093b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009296:	2b00      	cmp	r3, #0
 8009298:	da0b      	bge.n	80092b2 <USBD_StdEPReq+0x212>
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092a0:	4613      	mov	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	3310      	adds	r3, #16
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	4413      	add	r3, r2
 80092ae:	3304      	adds	r3, #4
 80092b0:	e00b      	b.n	80092ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092b8:	4613      	mov	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	4413      	add	r3, r2
 80092c8:	3304      	adds	r3, #4
 80092ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2202      	movs	r2, #2
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fc61 	bl	8009ba0 <USBD_CtlSendData>
              break;
 80092de:	e06a      	b.n	80093b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80092e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	da11      	bge.n	800930c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	f003 020f 	and.w	r2, r3, #15
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	3324      	adds	r3, #36	; 0x24
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d117      	bne.n	8009332 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fbda 	bl	8009abe <USBD_CtlError>
                  break;
 800930a:	e054      	b.n	80093b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	f003 020f 	and.w	r2, r3, #15
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d104      	bne.n	8009332 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fbc7 	bl	8009abe <USBD_CtlError>
                  break;
 8009330:	e041      	b.n	80093b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009336:	2b00      	cmp	r3, #0
 8009338:	da0b      	bge.n	8009352 <USBD_StdEPReq+0x2b2>
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	3310      	adds	r3, #16
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	4413      	add	r3, r2
 800934e:	3304      	adds	r3, #4
 8009350:	e00b      	b.n	800936a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009352:	7bbb      	ldrb	r3, [r7, #14]
 8009354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009358:	4613      	mov	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	4413      	add	r3, r2
 8009368:	3304      	adds	r3, #4
 800936a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <USBD_StdEPReq+0x2d8>
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b80      	cmp	r3, #128	; 0x80
 8009376:	d103      	bne.n	8009380 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	e00e      	b.n	800939e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f003 fedd 	bl	800d144 <USBD_LL_IsStallEP>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2201      	movs	r2, #1
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	e002      	b.n	800939e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2202      	movs	r2, #2
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fbfb 	bl	8009ba0 <USBD_CtlSendData>
              break;
 80093aa:	e004      	b.n	80093b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fb85 	bl	8009abe <USBD_CtlError>
              break;
 80093b4:	bf00      	nop
          }
          break;
 80093b6:	e004      	b.n	80093c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fb7f 	bl	8009abe <USBD_CtlError>
          break;
 80093c0:	bf00      	nop
      }
      break;
 80093c2:	e005      	b.n	80093d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fb79 	bl	8009abe <USBD_CtlError>
      break;
 80093cc:	e000      	b.n	80093d0 <USBD_StdEPReq+0x330>
      break;
 80093ce:	bf00      	nop
  }

  return ret;
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
	...

080093dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	885b      	ldrh	r3, [r3, #2]
 80093f6:	0a1b      	lsrs	r3, r3, #8
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	3b01      	subs	r3, #1
 80093fc:	2b0e      	cmp	r3, #14
 80093fe:	f200 8152 	bhi.w	80096a6 <USBD_GetDescriptor+0x2ca>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <USBD_GetDescriptor+0x2c>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009479 	.word	0x08009479
 800940c:	08009491 	.word	0x08009491
 8009410:	080094d1 	.word	0x080094d1
 8009414:	080096a7 	.word	0x080096a7
 8009418:	080096a7 	.word	0x080096a7
 800941c:	08009647 	.word	0x08009647
 8009420:	08009673 	.word	0x08009673
 8009424:	080096a7 	.word	0x080096a7
 8009428:	080096a7 	.word	0x080096a7
 800942c:	080096a7 	.word	0x080096a7
 8009430:	080096a7 	.word	0x080096a7
 8009434:	080096a7 	.word	0x080096a7
 8009438:	080096a7 	.word	0x080096a7
 800943c:	080096a7 	.word	0x080096a7
 8009440:	08009445 	.word	0x08009445
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00b      	beq.n	8009468 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	7c12      	ldrb	r2, [r2, #16]
 800945c:	f107 0108 	add.w	r1, r7, #8
 8009460:	4610      	mov	r0, r2
 8009462:	4798      	blx	r3
 8009464:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009466:	e126      	b.n	80096b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fb27 	bl	8009abe <USBD_CtlError>
        err++;
 8009470:	7afb      	ldrb	r3, [r7, #11]
 8009472:	3301      	adds	r3, #1
 8009474:	72fb      	strb	r3, [r7, #11]
      break;
 8009476:	e11e      	b.n	80096b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	7c12      	ldrb	r2, [r2, #16]
 8009484:	f107 0108 	add.w	r1, r7, #8
 8009488:	4610      	mov	r0, r2
 800948a:	4798      	blx	r3
 800948c:	60f8      	str	r0, [r7, #12]
      break;
 800948e:	e112      	b.n	80096b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	7c1b      	ldrb	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10d      	bne.n	80094b4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a0:	f107 0208 	add.w	r2, r7, #8
 80094a4:	4610      	mov	r0, r2
 80094a6:	4798      	blx	r3
 80094a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3301      	adds	r3, #1
 80094ae:	2202      	movs	r2, #2
 80094b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80094b2:	e100      	b.n	80096b6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	f107 0208 	add.w	r2, r7, #8
 80094c0:	4610      	mov	r0, r2
 80094c2:	4798      	blx	r3
 80094c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3301      	adds	r3, #1
 80094ca:	2202      	movs	r2, #2
 80094cc:	701a      	strb	r2, [r3, #0]
      break;
 80094ce:	e0f2      	b.n	80096b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	885b      	ldrh	r3, [r3, #2]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	f200 80ac 	bhi.w	8009634 <USBD_GetDescriptor+0x258>
 80094dc:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <USBD_GetDescriptor+0x108>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	080094fd 	.word	0x080094fd
 80094e8:	08009531 	.word	0x08009531
 80094ec:	08009565 	.word	0x08009565
 80094f0:	08009599 	.word	0x08009599
 80094f4:	080095cd 	.word	0x080095cd
 80094f8:	08009601 	.word	0x08009601
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	7c12      	ldrb	r2, [r2, #16]
 8009514:	f107 0108 	add.w	r1, r7, #8
 8009518:	4610      	mov	r0, r2
 800951a:	4798      	blx	r3
 800951c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800951e:	e091      	b.n	8009644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 facb 	bl	8009abe <USBD_CtlError>
            err++;
 8009528:	7afb      	ldrb	r3, [r7, #11]
 800952a:	3301      	adds	r3, #1
 800952c:	72fb      	strb	r3, [r7, #11]
          break;
 800952e:	e089      	b.n	8009644 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00b      	beq.n	8009554 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	7c12      	ldrb	r2, [r2, #16]
 8009548:	f107 0108 	add.w	r1, r7, #8
 800954c:	4610      	mov	r0, r2
 800954e:	4798      	blx	r3
 8009550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009552:	e077      	b.n	8009644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fab1 	bl	8009abe <USBD_CtlError>
            err++;
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	3301      	adds	r3, #1
 8009560:	72fb      	strb	r3, [r7, #11]
          break;
 8009562:	e06f      	b.n	8009644 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	7c12      	ldrb	r2, [r2, #16]
 800957c:	f107 0108 	add.w	r1, r7, #8
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009586:	e05d      	b.n	8009644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa97 	bl	8009abe <USBD_CtlError>
            err++;
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	3301      	adds	r3, #1
 8009594:	72fb      	strb	r3, [r7, #11]
          break;
 8009596:	e055      	b.n	8009644 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00b      	beq.n	80095bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	7c12      	ldrb	r2, [r2, #16]
 80095b0:	f107 0108 	add.w	r1, r7, #8
 80095b4:	4610      	mov	r0, r2
 80095b6:	4798      	blx	r3
 80095b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ba:	e043      	b.n	8009644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa7d 	bl	8009abe <USBD_CtlError>
            err++;
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	3301      	adds	r3, #1
 80095c8:	72fb      	strb	r3, [r7, #11]
          break;
 80095ca:	e03b      	b.n	8009644 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00b      	beq.n	80095f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	7c12      	ldrb	r2, [r2, #16]
 80095e4:	f107 0108 	add.w	r1, r7, #8
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
 80095ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ee:	e029      	b.n	8009644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa63 	bl	8009abe <USBD_CtlError>
            err++;
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	3301      	adds	r3, #1
 80095fc:	72fb      	strb	r3, [r7, #11]
          break;
 80095fe:	e021      	b.n	8009644 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00b      	beq.n	8009624 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	7c12      	ldrb	r2, [r2, #16]
 8009618:	f107 0108 	add.w	r1, r7, #8
 800961c:	4610      	mov	r0, r2
 800961e:	4798      	blx	r3
 8009620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009622:	e00f      	b.n	8009644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009624:	6839      	ldr	r1, [r7, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fa49 	bl	8009abe <USBD_CtlError>
            err++;
 800962c:	7afb      	ldrb	r3, [r7, #11]
 800962e:	3301      	adds	r3, #1
 8009630:	72fb      	strb	r3, [r7, #11]
          break;
 8009632:	e007      	b.n	8009644 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa41 	bl	8009abe <USBD_CtlError>
          err++;
 800963c:	7afb      	ldrb	r3, [r7, #11]
 800963e:	3301      	adds	r3, #1
 8009640:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009642:	bf00      	nop
      }
      break;
 8009644:	e037      	b.n	80096b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	7c1b      	ldrb	r3, [r3, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d109      	bne.n	8009662 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009656:	f107 0208 	add.w	r2, r7, #8
 800965a:	4610      	mov	r0, r2
 800965c:	4798      	blx	r3
 800965e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009660:	e029      	b.n	80096b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fa2a 	bl	8009abe <USBD_CtlError>
        err++;
 800966a:	7afb      	ldrb	r3, [r7, #11]
 800966c:	3301      	adds	r3, #1
 800966e:	72fb      	strb	r3, [r7, #11]
      break;
 8009670:	e021      	b.n	80096b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	7c1b      	ldrb	r3, [r3, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10d      	bne.n	8009696 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009682:	f107 0208 	add.w	r2, r7, #8
 8009686:	4610      	mov	r0, r2
 8009688:	4798      	blx	r3
 800968a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3301      	adds	r3, #1
 8009690:	2207      	movs	r2, #7
 8009692:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009694:	e00f      	b.n	80096b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fa10 	bl	8009abe <USBD_CtlError>
        err++;
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	3301      	adds	r3, #1
 80096a2:	72fb      	strb	r3, [r7, #11]
      break;
 80096a4:	e007      	b.n	80096b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fa08 	bl	8009abe <USBD_CtlError>
      err++;
 80096ae:	7afb      	ldrb	r3, [r7, #11]
 80096b0:	3301      	adds	r3, #1
 80096b2:	72fb      	strb	r3, [r7, #11]
      break;
 80096b4:	bf00      	nop
  }

  if (err != 0U)
 80096b6:	7afb      	ldrb	r3, [r7, #11]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d11e      	bne.n	80096fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	88db      	ldrh	r3, [r3, #6]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d016      	beq.n	80096f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80096c4:	893b      	ldrh	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00e      	beq.n	80096e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	88da      	ldrh	r2, [r3, #6]
 80096ce:	893b      	ldrh	r3, [r7, #8]
 80096d0:	4293      	cmp	r3, r2
 80096d2:	bf28      	it	cs
 80096d4:	4613      	movcs	r3, r2
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096da:	893b      	ldrh	r3, [r7, #8]
 80096dc:	461a      	mov	r2, r3
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fa5d 	bl	8009ba0 <USBD_CtlSendData>
 80096e6:	e009      	b.n	80096fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f9e7 	bl	8009abe <USBD_CtlError>
 80096f0:	e004      	b.n	80096fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 faae 	bl	8009c54 <USBD_CtlSendStatus>
 80096f8:	e000      	b.n	80096fc <USBD_GetDescriptor+0x320>
    return;
 80096fa:	bf00      	nop
  }
}
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop

08009704 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	889b      	ldrh	r3, [r3, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d131      	bne.n	800977a <USBD_SetAddress+0x76>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	88db      	ldrh	r3, [r3, #6]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d12d      	bne.n	800977a <USBD_SetAddress+0x76>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	885b      	ldrh	r3, [r3, #2]
 8009722:	2b7f      	cmp	r3, #127	; 0x7f
 8009724:	d829      	bhi.n	800977a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	885b      	ldrh	r3, [r3, #2]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009730:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b03      	cmp	r3, #3
 800973c:	d104      	bne.n	8009748 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f9bc 	bl	8009abe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009746:	e01d      	b.n	8009784 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7bfa      	ldrb	r2, [r7, #15]
 800974c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f003 fd21 	bl	800d19c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fa7a 	bl	8009c54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d004      	beq.n	8009770 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2202      	movs	r2, #2
 800976a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800976e:	e009      	b.n	8009784 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009778:	e004      	b.n	8009784 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f99e 	bl	8009abe <USBD_CtlError>
  }
}
 8009782:	bf00      	nop
 8009784:	bf00      	nop
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	885b      	ldrh	r3, [r3, #2]
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	4b4e      	ldr	r3, [pc, #312]	; (80098dc <USBD_SetConfig+0x150>)
 80097a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097a4:	4b4d      	ldr	r3, [pc, #308]	; (80098dc <USBD_SetConfig+0x150>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d905      	bls.n	80097b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f985 	bl	8009abe <USBD_CtlError>
    return USBD_FAIL;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e08c      	b.n	80098d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d002      	beq.n	80097ca <USBD_SetConfig+0x3e>
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d029      	beq.n	800981c <USBD_SetConfig+0x90>
 80097c8:	e075      	b.n	80098b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80097ca:	4b44      	ldr	r3, [pc, #272]	; (80098dc <USBD_SetConfig+0x150>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d020      	beq.n	8009814 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80097d2:	4b42      	ldr	r3, [pc, #264]	; (80098dc <USBD_SetConfig+0x150>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80097dc:	4b3f      	ldr	r3, [pc, #252]	; (80098dc <USBD_SetConfig+0x150>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7fe ffbd 	bl	8008762 <USBD_SetClassConfig>
 80097e8:	4603      	mov	r3, r0
 80097ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d008      	beq.n	8009804 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f962 	bl	8009abe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2202      	movs	r2, #2
 80097fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009802:	e065      	b.n	80098d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fa25 	bl	8009c54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2203      	movs	r2, #3
 800980e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009812:	e05d      	b.n	80098d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fa1d 	bl	8009c54 <USBD_CtlSendStatus>
      break;
 800981a:	e059      	b.n	80098d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800981c:	4b2f      	ldr	r3, [pc, #188]	; (80098dc <USBD_SetConfig+0x150>)
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d112      	bne.n	800984a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800982c:	4b2b      	ldr	r3, [pc, #172]	; (80098dc <USBD_SetConfig+0x150>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	461a      	mov	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009836:	4b29      	ldr	r3, [pc, #164]	; (80098dc <USBD_SetConfig+0x150>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7fe ffac 	bl	800879a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fa06 	bl	8009c54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009848:	e042      	b.n	80098d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800984a:	4b24      	ldr	r3, [pc, #144]	; (80098dc <USBD_SetConfig+0x150>)
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	d02a      	beq.n	80098ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7fe ff9a 	bl	800879a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009866:	4b1d      	ldr	r3, [pc, #116]	; (80098dc <USBD_SetConfig+0x150>)
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009870:	4b1a      	ldr	r3, [pc, #104]	; (80098dc <USBD_SetConfig+0x150>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7fe ff73 	bl	8008762 <USBD_SetClassConfig>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00f      	beq.n	80098a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f918 	bl	8009abe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7fe ff7f 	bl	800879a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2202      	movs	r2, #2
 80098a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80098a4:	e014      	b.n	80098d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f9d4 	bl	8009c54 <USBD_CtlSendStatus>
      break;
 80098ac:	e010      	b.n	80098d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f9d0 	bl	8009c54 <USBD_CtlSendStatus>
      break;
 80098b4:	e00c      	b.n	80098d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f900 	bl	8009abe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098be:	4b07      	ldr	r3, [pc, #28]	; (80098dc <USBD_SetConfig+0x150>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7fe ff68 	bl	800879a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80098ca:	2303      	movs	r3, #3
 80098cc:	73fb      	strb	r3, [r7, #15]
      break;
 80098ce:	bf00      	nop
  }

  return ret;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	200008f0 	.word	0x200008f0

080098e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	88db      	ldrh	r3, [r3, #6]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d004      	beq.n	80098fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f8e2 	bl	8009abe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80098fa:	e023      	b.n	8009944 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b02      	cmp	r3, #2
 8009906:	dc02      	bgt.n	800990e <USBD_GetConfig+0x2e>
 8009908:	2b00      	cmp	r3, #0
 800990a:	dc03      	bgt.n	8009914 <USBD_GetConfig+0x34>
 800990c:	e015      	b.n	800993a <USBD_GetConfig+0x5a>
 800990e:	2b03      	cmp	r3, #3
 8009910:	d00b      	beq.n	800992a <USBD_GetConfig+0x4a>
 8009912:	e012      	b.n	800993a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3308      	adds	r3, #8
 800991e:	2201      	movs	r2, #1
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f93c 	bl	8009ba0 <USBD_CtlSendData>
        break;
 8009928:	e00c      	b.n	8009944 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3304      	adds	r3, #4
 800992e:	2201      	movs	r2, #1
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f934 	bl	8009ba0 <USBD_CtlSendData>
        break;
 8009938:	e004      	b.n	8009944 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f8be 	bl	8009abe <USBD_CtlError>
        break;
 8009942:	bf00      	nop
}
 8009944:	bf00      	nop
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995c:	b2db      	uxtb	r3, r3
 800995e:	3b01      	subs	r3, #1
 8009960:	2b02      	cmp	r3, #2
 8009962:	d81e      	bhi.n	80099a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	88db      	ldrh	r3, [r3, #6]
 8009968:	2b02      	cmp	r3, #2
 800996a:	d004      	beq.n	8009976 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f8a5 	bl	8009abe <USBD_CtlError>
        break;
 8009974:	e01a      	b.n	80099ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f043 0202 	orr.w	r2, r3, #2
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	330c      	adds	r3, #12
 8009996:	2202      	movs	r2, #2
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f900 	bl	8009ba0 <USBD_CtlSendData>
      break;
 80099a0:	e004      	b.n	80099ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f88a 	bl	8009abe <USBD_CtlError>
      break;
 80099aa:	bf00      	nop
  }
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	885b      	ldrh	r3, [r3, #2]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d107      	bne.n	80099d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f940 	bl	8009c54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80099d4:	e013      	b.n	80099fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	885b      	ldrh	r3, [r3, #2]
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d10b      	bne.n	80099f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	889b      	ldrh	r3, [r3, #4]
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f930 	bl	8009c54 <USBD_CtlSendStatus>
}
 80099f4:	e003      	b.n	80099fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f860 	bl	8009abe <USBD_CtlError>
}
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b082      	sub	sp, #8
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d80b      	bhi.n	8009a36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	885b      	ldrh	r3, [r3, #2]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d10c      	bne.n	8009a40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f910 	bl	8009c54 <USBD_CtlSendStatus>
      }
      break;
 8009a34:	e004      	b.n	8009a40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f840 	bl	8009abe <USBD_CtlError>
      break;
 8009a3e:	e000      	b.n	8009a42 <USBD_ClrFeature+0x3c>
      break;
 8009a40:	bf00      	nop
  }
}
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	781a      	ldrb	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	3301      	adds	r3, #1
 8009a64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	781a      	ldrb	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3301      	adds	r3, #1
 8009a72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f7ff fa17 	bl	8008ea8 <SWAPBYTE>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3301      	adds	r3, #1
 8009a86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f7ff fa0a 	bl	8008ea8 <SWAPBYTE>
 8009a94:	4603      	mov	r3, r0
 8009a96:	461a      	mov	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f7ff f9fd 	bl	8008ea8 <SWAPBYTE>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	80da      	strh	r2, [r3, #6]
}
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ac8:	2180      	movs	r1, #128	; 0x80
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f003 fafc 	bl	800d0c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f003 faf8 	bl	800d0c8 <USBD_LL_StallEP>
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d036      	beq.n	8009b64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009afa:	6938      	ldr	r0, [r7, #16]
 8009afc:	f000 f836 	bl	8009b6c <USBD_GetLen>
 8009b00:	4603      	mov	r3, r0
 8009b02:	3301      	adds	r3, #1
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	4413      	add	r3, r2
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	7812      	ldrb	r2, [r2, #0]
 8009b18:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	4413      	add	r3, r2
 8009b26:	2203      	movs	r2, #3
 8009b28:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009b30:	e013      	b.n	8009b5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	4413      	add	r3, r2
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	7812      	ldrb	r2, [r2, #0]
 8009b3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	3301      	adds	r3, #1
 8009b42:	613b      	str	r3, [r7, #16]
    idx++;
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	3301      	adds	r3, #1
 8009b48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	4413      	add	r3, r2
 8009b50:	2200      	movs	r2, #0
 8009b52:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	3301      	adds	r3, #1
 8009b58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e7      	bne.n	8009b32 <USBD_GetString+0x52>
 8009b62:	e000      	b.n	8009b66 <USBD_GetString+0x86>
    return;
 8009b64:	bf00      	nop
  }
}
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b7c:	e005      	b.n	8009b8a <USBD_GetLen+0x1e>
  {
    len++;
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	3301      	adds	r3, #1
 8009b82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	3301      	adds	r3, #1
 8009b88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1f5      	bne.n	8009b7e <USBD_GetLen+0x12>
  }

  return len;
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2202      	movs	r2, #2
 8009bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f003 fb07 	bl	800d1da <USBD_LL_Transmit>

  return USBD_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	60f8      	str	r0, [r7, #12]
 8009bde:	60b9      	str	r1, [r7, #8]
 8009be0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	2100      	movs	r1, #0
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f003 faf6 	bl	800d1da <USBD_LL_Transmit>

  return USBD_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2203      	movs	r2, #3
 8009c08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	2100      	movs	r1, #0
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f003 fafa 	bl	800d21c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	2100      	movs	r1, #0
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f003 fae9 	bl	800d21c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2204      	movs	r2, #4
 8009c60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c64:	2300      	movs	r3, #0
 8009c66:	2200      	movs	r2, #0
 8009c68:	2100      	movs	r1, #0
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f003 fab5 	bl	800d1da <USBD_LL_Transmit>

  return USBD_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2205      	movs	r2, #5
 8009c86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	2100      	movs	r1, #0
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f003 fac3 	bl	800d21c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <__NVIC_SetPriority>:
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	6039      	str	r1, [r7, #0]
 8009caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	db0a      	blt.n	8009cca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	490c      	ldr	r1, [pc, #48]	; (8009cec <__NVIC_SetPriority+0x4c>)
 8009cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cbe:	0112      	lsls	r2, r2, #4
 8009cc0:	b2d2      	uxtb	r2, r2
 8009cc2:	440b      	add	r3, r1
 8009cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009cc8:	e00a      	b.n	8009ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	4908      	ldr	r1, [pc, #32]	; (8009cf0 <__NVIC_SetPriority+0x50>)
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	f003 030f 	and.w	r3, r3, #15
 8009cd6:	3b04      	subs	r3, #4
 8009cd8:	0112      	lsls	r2, r2, #4
 8009cda:	b2d2      	uxtb	r2, r2
 8009cdc:	440b      	add	r3, r1
 8009cde:	761a      	strb	r2, [r3, #24]
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	e000e100 	.word	0xe000e100
 8009cf0:	e000ed00 	.word	0xe000ed00

08009cf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	f06f 0004 	mvn.w	r0, #4
 8009cfe:	f7ff ffcf 	bl	8009ca0 <__NVIC_SetPriority>
#endif
}
 8009d02:	bf00      	nop
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d0e:	f3ef 8305 	mrs	r3, IPSR
 8009d12:	603b      	str	r3, [r7, #0]
  return(result);
 8009d14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d1a:	f06f 0305 	mvn.w	r3, #5
 8009d1e:	607b      	str	r3, [r7, #4]
 8009d20:	e00c      	b.n	8009d3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d22:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <osKernelInitialize+0x44>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d2a:	4b08      	ldr	r3, [pc, #32]	; (8009d4c <osKernelInitialize+0x44>)
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	607b      	str	r3, [r7, #4]
 8009d34:	e002      	b.n	8009d3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d36:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d3c:	687b      	ldr	r3, [r7, #4]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	200008f4 	.word	0x200008f4

08009d50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d56:	f3ef 8305 	mrs	r3, IPSR
 8009d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8009d5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d62:	f06f 0305 	mvn.w	r3, #5
 8009d66:	607b      	str	r3, [r7, #4]
 8009d68:	e010      	b.n	8009d8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d6a:	4b0b      	ldr	r3, [pc, #44]	; (8009d98 <osKernelStart+0x48>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d109      	bne.n	8009d86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d72:	f7ff ffbf 	bl	8009cf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d76:	4b08      	ldr	r3, [pc, #32]	; (8009d98 <osKernelStart+0x48>)
 8009d78:	2202      	movs	r2, #2
 8009d7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d7c:	f001 f87c 	bl	800ae78 <vTaskStartScheduler>
      stat = osOK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	607b      	str	r3, [r7, #4]
 8009d84:	e002      	b.n	8009d8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d86:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d8c:	687b      	ldr	r3, [r7, #4]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	200008f4 	.word	0x200008f4

08009d9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b08e      	sub	sp, #56	; 0x38
 8009da0:	af04      	add	r7, sp, #16
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009da8:	2300      	movs	r3, #0
 8009daa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dac:	f3ef 8305 	mrs	r3, IPSR
 8009db0:	617b      	str	r3, [r7, #20]
  return(result);
 8009db2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d17e      	bne.n	8009eb6 <osThreadNew+0x11a>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d07b      	beq.n	8009eb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009dbe:	2380      	movs	r3, #128	; 0x80
 8009dc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009dc2:	2318      	movs	r3, #24
 8009dc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009dca:	f04f 33ff 	mov.w	r3, #4294967295
 8009dce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d045      	beq.n	8009e62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <osThreadNew+0x48>
        name = attr->name;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d008      	beq.n	8009e0a <osThreadNew+0x6e>
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	2b38      	cmp	r3, #56	; 0x38
 8009dfc:	d805      	bhi.n	8009e0a <osThreadNew+0x6e>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <osThreadNew+0x72>
        return (NULL);
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	e054      	b.n	8009eb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	089b      	lsrs	r3, r3, #2
 8009e1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00e      	beq.n	8009e44 <osThreadNew+0xa8>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	2bbb      	cmp	r3, #187	; 0xbb
 8009e2c:	d90a      	bls.n	8009e44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d006      	beq.n	8009e44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <osThreadNew+0xa8>
        mem = 1;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	e010      	b.n	8009e66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10c      	bne.n	8009e66 <osThreadNew+0xca>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d108      	bne.n	8009e66 <osThreadNew+0xca>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d104      	bne.n	8009e66 <osThreadNew+0xca>
          mem = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	61bb      	str	r3, [r7, #24]
 8009e60:	e001      	b.n	8009e66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d110      	bne.n	8009e8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e74:	9202      	str	r2, [sp, #8]
 8009e76:	9301      	str	r3, [sp, #4]
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	6a3a      	ldr	r2, [r7, #32]
 8009e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f000 fe0c 	bl	800aaa0 <xTaskCreateStatic>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	613b      	str	r3, [r7, #16]
 8009e8c:	e013      	b.n	8009eb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d110      	bne.n	8009eb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	f107 0310 	add.w	r3, r7, #16
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f000 fe57 	bl	800ab5a <xTaskCreate>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d001      	beq.n	8009eb6 <osThreadNew+0x11a>
            hTask = NULL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009eb6:	693b      	ldr	r3, [r7, #16]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3728      	adds	r7, #40	; 0x28
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ec8:	f3ef 8305 	mrs	r3, IPSR
 8009ecc:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ece:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d003      	beq.n	8009edc <osDelay+0x1c>
    stat = osErrorISR;
 8009ed4:	f06f 0305 	mvn.w	r3, #5
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	e007      	b.n	8009eec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <osDelay+0x2c>
      vTaskDelay(ticks);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 ff92 	bl	800ae10 <vTaskDelay>
    }
  }

  return (stat);
 8009eec:	68fb      	ldr	r3, [r7, #12]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4a07      	ldr	r2, [pc, #28]	; (8009f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	4a06      	ldr	r2, [pc, #24]	; (8009f28 <vApplicationGetIdleTaskMemory+0x30>)
 8009f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2280      	movs	r2, #128	; 0x80
 8009f14:	601a      	str	r2, [r3, #0]
}
 8009f16:	bf00      	nop
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	200008f8 	.word	0x200008f8
 8009f28:	200009b4 	.word	0x200009b4

08009f2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4a07      	ldr	r2, [pc, #28]	; (8009f58 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	4a06      	ldr	r2, [pc, #24]	; (8009f5c <vApplicationGetTimerTaskMemory+0x30>)
 8009f42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f4a:	601a      	str	r2, [r3, #0]
}
 8009f4c:	bf00      	nop
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	20000bb4 	.word	0x20000bb4
 8009f5c:	20000c70 	.word	0x20000c70

08009f60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f103 0208 	add.w	r2, r3, #8
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f04f 32ff 	mov.w	r2, #4294967295
 8009f78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f103 0208 	add.w	r2, r3, #8
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f103 0208 	add.w	r2, r3, #8
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009fae:	bf00      	nop
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	1c5a      	adds	r2, r3, #1
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	601a      	str	r2, [r3, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a018:	d103      	bne.n	800a022 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	60fb      	str	r3, [r7, #12]
 800a020:	e00c      	b.n	800a03c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	3308      	adds	r3, #8
 800a026:	60fb      	str	r3, [r7, #12]
 800a028:	e002      	b.n	800a030 <vListInsert+0x2e>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d2f6      	bcs.n	800a02a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	601a      	str	r2, [r3, #0]
}
 800a068:	bf00      	nop
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6892      	ldr	r2, [r2, #8]
 800a08a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	6852      	ldr	r2, [r2, #4]
 800a094:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d103      	bne.n	800a0a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689a      	ldr	r2, [r3, #8]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	1e5a      	subs	r2, r3, #1
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10a      	bne.n	800a0f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a0f2:	f002 f877 	bl	800c1e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fe:	68f9      	ldr	r1, [r7, #12]
 800a100:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a102:	fb01 f303 	mul.w	r3, r1, r3
 800a106:	441a      	add	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a122:	3b01      	subs	r3, #1
 800a124:	68f9      	ldr	r1, [r7, #12]
 800a126:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a128:	fb01 f303 	mul.w	r3, r1, r3
 800a12c:	441a      	add	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	22ff      	movs	r2, #255	; 0xff
 800a136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	22ff      	movs	r2, #255	; 0xff
 800a13e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d114      	bne.n	800a172 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d01a      	beq.n	800a186 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	3310      	adds	r3, #16
 800a154:	4618      	mov	r0, r3
 800a156:	f001 f929 	bl	800b3ac <xTaskRemoveFromEventList>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d012      	beq.n	800a186 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a160:	4b0c      	ldr	r3, [pc, #48]	; (800a194 <xQueueGenericReset+0xcc>)
 800a162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	e009      	b.n	800a186 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3310      	adds	r3, #16
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff fef2 	bl	8009f60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3324      	adds	r3, #36	; 0x24
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff feed 	bl	8009f60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a186:	f002 f85d 	bl	800c244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a18a:	2301      	movs	r3, #1
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	e000ed04 	.word	0xe000ed04

0800a198 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b08e      	sub	sp, #56	; 0x38
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1be:	bf00      	nop
 800a1c0:	e7fe      	b.n	800a1c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10a      	bne.n	800a1de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1da:	bf00      	nop
 800a1dc:	e7fe      	b.n	800a1dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <xQueueGenericCreateStatic+0x52>
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <xQueueGenericCreateStatic+0x56>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e000      	b.n	800a1f0 <xQueueGenericCreateStatic+0x58>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	623b      	str	r3, [r7, #32]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d102      	bne.n	800a216 <xQueueGenericCreateStatic+0x7e>
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <xQueueGenericCreateStatic+0x82>
 800a216:	2301      	movs	r3, #1
 800a218:	e000      	b.n	800a21c <xQueueGenericCreateStatic+0x84>
 800a21a:	2300      	movs	r3, #0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	61fb      	str	r3, [r7, #28]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a236:	2350      	movs	r3, #80	; 0x50
 800a238:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2b50      	cmp	r3, #80	; 0x50
 800a23e:	d00a      	beq.n	800a256 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	61bb      	str	r3, [r7, #24]
}
 800a252:	bf00      	nop
 800a254:	e7fe      	b.n	800a254 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a256:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00d      	beq.n	800a27e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a264:	2201      	movs	r2, #1
 800a266:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a26a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	4613      	mov	r3, r2
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	68b9      	ldr	r1, [r7, #8]
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 f805 	bl	800a288 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a280:	4618      	mov	r0, r3
 800a282:	3730      	adds	r7, #48	; 0x30
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d103      	bne.n	800a2a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	69ba      	ldr	r2, [r7, #24]
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	e002      	b.n	800a2aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	69b8      	ldr	r0, [r7, #24]
 800a2ba:	f7ff ff05 	bl	800a0c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	78fa      	ldrb	r2, [r7, #3]
 800a2c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2c6:	bf00      	nop
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b08e      	sub	sp, #56	; 0x38
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10a      	bne.n	800a302 <xQueueGenericSend+0x32>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2fe:	bf00      	nop
 800a300:	e7fe      	b.n	800a300 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d103      	bne.n	800a310 <xQueueGenericSend+0x40>
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <xQueueGenericSend+0x44>
 800a310:	2301      	movs	r3, #1
 800a312:	e000      	b.n	800a316 <xQueueGenericSend+0x46>
 800a314:	2300      	movs	r3, #0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10a      	bne.n	800a330 <xQueueGenericSend+0x60>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a32c:	bf00      	nop
 800a32e:	e7fe      	b.n	800a32e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	2b02      	cmp	r3, #2
 800a334:	d103      	bne.n	800a33e <xQueueGenericSend+0x6e>
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d101      	bne.n	800a342 <xQueueGenericSend+0x72>
 800a33e:	2301      	movs	r3, #1
 800a340:	e000      	b.n	800a344 <xQueueGenericSend+0x74>
 800a342:	2300      	movs	r3, #0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10a      	bne.n	800a35e <xQueueGenericSend+0x8e>
	__asm volatile
 800a348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	623b      	str	r3, [r7, #32]
}
 800a35a:	bf00      	nop
 800a35c:	e7fe      	b.n	800a35c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a35e:	f001 f9e7 	bl	800b730 <xTaskGetSchedulerState>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d102      	bne.n	800a36e <xQueueGenericSend+0x9e>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <xQueueGenericSend+0xa2>
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <xQueueGenericSend+0xa4>
 800a372:	2300      	movs	r3, #0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <xQueueGenericSend+0xbe>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	61fb      	str	r3, [r7, #28]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a38e:	f001 ff29 	bl	800c1e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d302      	bcc.n	800a3a4 <xQueueGenericSend+0xd4>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d129      	bne.n	800a3f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3aa:	f000 fa0b 	bl	800a7c4 <prvCopyDataToQueue>
 800a3ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d010      	beq.n	800a3da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ba:	3324      	adds	r3, #36	; 0x24
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 fff5 	bl	800b3ac <xTaskRemoveFromEventList>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d013      	beq.n	800a3f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3c8:	4b3f      	ldr	r3, [pc, #252]	; (800a4c8 <xQueueGenericSend+0x1f8>)
 800a3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	e00a      	b.n	800a3f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d007      	beq.n	800a3f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3e0:	4b39      	ldr	r3, [pc, #228]	; (800a4c8 <xQueueGenericSend+0x1f8>)
 800a3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3f0:	f001 ff28 	bl	800c244 <vPortExitCritical>
				return pdPASS;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e063      	b.n	800a4c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d103      	bne.n	800a406 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3fe:	f001 ff21 	bl	800c244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a402:	2300      	movs	r3, #0
 800a404:	e05c      	b.n	800a4c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d106      	bne.n	800a41a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a40c:	f107 0314 	add.w	r3, r7, #20
 800a410:	4618      	mov	r0, r3
 800a412:	f001 f82f 	bl	800b474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a416:	2301      	movs	r3, #1
 800a418:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a41a:	f001 ff13 	bl	800c244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a41e:	f000 fd9b 	bl	800af58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a422:	f001 fedf 	bl	800c1e4 <vPortEnterCritical>
 800a426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a42c:	b25b      	sxtb	r3, r3
 800a42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a432:	d103      	bne.n	800a43c <xQueueGenericSend+0x16c>
 800a434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a436:	2200      	movs	r2, #0
 800a438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a442:	b25b      	sxtb	r3, r3
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a448:	d103      	bne.n	800a452 <xQueueGenericSend+0x182>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a452:	f001 fef7 	bl	800c244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a456:	1d3a      	adds	r2, r7, #4
 800a458:	f107 0314 	add.w	r3, r7, #20
 800a45c:	4611      	mov	r1, r2
 800a45e:	4618      	mov	r0, r3
 800a460:	f001 f81e 	bl	800b4a0 <xTaskCheckForTimeOut>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d124      	bne.n	800a4b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a46a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a46c:	f000 faa2 	bl	800a9b4 <prvIsQueueFull>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d018      	beq.n	800a4a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	3310      	adds	r3, #16
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	4611      	mov	r1, r2
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 ff44 	bl	800b30c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a486:	f000 fa2d 	bl	800a8e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a48a:	f000 fd73 	bl	800af74 <xTaskResumeAll>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	f47f af7c 	bne.w	800a38e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a496:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <xQueueGenericSend+0x1f8>)
 800a498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a49c:	601a      	str	r2, [r3, #0]
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	e772      	b.n	800a38e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4aa:	f000 fa1b 	bl	800a8e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ae:	f000 fd61 	bl	800af74 <xTaskResumeAll>
 800a4b2:	e76c      	b.n	800a38e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4b6:	f000 fa15 	bl	800a8e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4ba:	f000 fd5b 	bl	800af74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3738      	adds	r7, #56	; 0x38
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	e000ed04 	.word	0xe000ed04

0800a4cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b090      	sub	sp, #64	; 0x40
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d103      	bne.n	800a508 <xQueueGenericSendFromISR+0x3c>
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <xQueueGenericSendFromISR+0x40>
 800a508:	2301      	movs	r3, #1
 800a50a:	e000      	b.n	800a50e <xQueueGenericSendFromISR+0x42>
 800a50c:	2300      	movs	r3, #0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a524:	bf00      	nop
 800a526:	e7fe      	b.n	800a526 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d103      	bne.n	800a536 <xQueueGenericSendFromISR+0x6a>
 800a52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a532:	2b01      	cmp	r3, #1
 800a534:	d101      	bne.n	800a53a <xQueueGenericSendFromISR+0x6e>
 800a536:	2301      	movs	r3, #1
 800a538:	e000      	b.n	800a53c <xQueueGenericSendFromISR+0x70>
 800a53a:	2300      	movs	r3, #0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	623b      	str	r3, [r7, #32]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a556:	f001 ff27 	bl	800c3a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a55a:	f3ef 8211 	mrs	r2, BASEPRI
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	61fa      	str	r2, [r7, #28]
 800a570:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a572:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a574:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57e:	429a      	cmp	r2, r3
 800a580:	d302      	bcc.n	800a588 <xQueueGenericSendFromISR+0xbc>
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b02      	cmp	r3, #2
 800a586:	d12f      	bne.n	800a5e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a596:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	68b9      	ldr	r1, [r7, #8]
 800a59c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a59e:	f000 f911 	bl	800a7c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5aa:	d112      	bne.n	800a5d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d016      	beq.n	800a5e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	3324      	adds	r3, #36	; 0x24
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fef7 	bl	800b3ac <xTaskRemoveFromEventList>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00e      	beq.n	800a5e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00b      	beq.n	800a5e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	e007      	b.n	800a5e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	b25a      	sxtb	r2, r3
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a5e6:	e001      	b.n	800a5ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3740      	adds	r7, #64	; 0x40
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
	...

0800a604 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b08c      	sub	sp, #48	; 0x30
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a610:	2300      	movs	r3, #0
 800a612:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10a      	bne.n	800a634 <xQueueReceive+0x30>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	623b      	str	r3, [r7, #32]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d103      	bne.n	800a642 <xQueueReceive+0x3e>
 800a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <xQueueReceive+0x42>
 800a642:	2301      	movs	r3, #1
 800a644:	e000      	b.n	800a648 <xQueueReceive+0x44>
 800a646:	2300      	movs	r3, #0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10a      	bne.n	800a662 <xQueueReceive+0x5e>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	61fb      	str	r3, [r7, #28]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a662:	f001 f865 	bl	800b730 <xTaskGetSchedulerState>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d102      	bne.n	800a672 <xQueueReceive+0x6e>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <xQueueReceive+0x72>
 800a672:	2301      	movs	r3, #1
 800a674:	e000      	b.n	800a678 <xQueueReceive+0x74>
 800a676:	2300      	movs	r3, #0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10a      	bne.n	800a692 <xQueueReceive+0x8e>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	61bb      	str	r3, [r7, #24]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a692:	f001 fda7 	bl	800c1e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d01f      	beq.n	800a6e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6a2:	68b9      	ldr	r1, [r7, #8]
 800a6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a6:	f000 f8f7 	bl	800a898 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	1e5a      	subs	r2, r3, #1
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00f      	beq.n	800a6da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	3310      	adds	r3, #16
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fe74 	bl	800b3ac <xTaskRemoveFromEventList>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d007      	beq.n	800a6da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6ca:	4b3d      	ldr	r3, [pc, #244]	; (800a7c0 <xQueueReceive+0x1bc>)
 800a6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6da:	f001 fdb3 	bl	800c244 <vPortExitCritical>
				return pdPASS;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e069      	b.n	800a7b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d103      	bne.n	800a6f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6e8:	f001 fdac 	bl	800c244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	e062      	b.n	800a7b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d106      	bne.n	800a704 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6f6:	f107 0310 	add.w	r3, r7, #16
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 feba 	bl	800b474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a700:	2301      	movs	r3, #1
 800a702:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a704:	f001 fd9e 	bl	800c244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a708:	f000 fc26 	bl	800af58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a70c:	f001 fd6a 	bl	800c1e4 <vPortEnterCritical>
 800a710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a716:	b25b      	sxtb	r3, r3
 800a718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71c:	d103      	bne.n	800a726 <xQueueReceive+0x122>
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a72c:	b25b      	sxtb	r3, r3
 800a72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a732:	d103      	bne.n	800a73c <xQueueReceive+0x138>
 800a734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a736:	2200      	movs	r2, #0
 800a738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a73c:	f001 fd82 	bl	800c244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a740:	1d3a      	adds	r2, r7, #4
 800a742:	f107 0310 	add.w	r3, r7, #16
 800a746:	4611      	mov	r1, r2
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 fea9 	bl	800b4a0 <xTaskCheckForTimeOut>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d123      	bne.n	800a79c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a756:	f000 f917 	bl	800a988 <prvIsQueueEmpty>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d017      	beq.n	800a790 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	3324      	adds	r3, #36	; 0x24
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 fdcf 	bl	800b30c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a76e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a770:	f000 f8b8 	bl	800a8e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a774:	f000 fbfe 	bl	800af74 <xTaskResumeAll>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d189      	bne.n	800a692 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a77e:	4b10      	ldr	r3, [pc, #64]	; (800a7c0 <xQueueReceive+0x1bc>)
 800a780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	e780      	b.n	800a692 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a792:	f000 f8a7 	bl	800a8e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a796:	f000 fbed 	bl	800af74 <xTaskResumeAll>
 800a79a:	e77a      	b.n	800a692 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a79c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a79e:	f000 f8a1 	bl	800a8e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7a2:	f000 fbe7 	bl	800af74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a8:	f000 f8ee 	bl	800a988 <prvIsQueueEmpty>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f43f af6f 	beq.w	800a692 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3730      	adds	r7, #48	; 0x30
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	e000ed04 	.word	0xe000ed04

0800a7c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10d      	bne.n	800a7fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d14d      	bne.n	800a886 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 ffbc 	bl	800b76c <xTaskPriorityDisinherit>
 800a7f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	609a      	str	r2, [r3, #8]
 800a7fc:	e043      	b.n	800a886 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d119      	bne.n	800a838 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6858      	ldr	r0, [r3, #4]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80c:	461a      	mov	r2, r3
 800a80e:	68b9      	ldr	r1, [r7, #8]
 800a810:	f002 feed 	bl	800d5ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	685a      	ldr	r2, [r3, #4]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81c:	441a      	add	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	685a      	ldr	r2, [r3, #4]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d32b      	bcc.n	800a886 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	605a      	str	r2, [r3, #4]
 800a836:	e026      	b.n	800a886 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	68d8      	ldr	r0, [r3, #12]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a840:	461a      	mov	r2, r3
 800a842:	68b9      	ldr	r1, [r7, #8]
 800a844:	f002 fed3 	bl	800d5ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68da      	ldr	r2, [r3, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a850:	425b      	negs	r3, r3
 800a852:	441a      	add	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	68da      	ldr	r2, [r3, #12]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	429a      	cmp	r2, r3
 800a862:	d207      	bcs.n	800a874 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	689a      	ldr	r2, [r3, #8]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86c:	425b      	negs	r3, r3
 800a86e:	441a      	add	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b02      	cmp	r3, #2
 800a878:	d105      	bne.n	800a886 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	3b01      	subs	r3, #1
 800a884:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	1c5a      	adds	r2, r3, #1
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a88e:	697b      	ldr	r3, [r7, #20]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3718      	adds	r7, #24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d018      	beq.n	800a8dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b2:	441a      	add	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68da      	ldr	r2, [r3, #12]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d303      	bcc.n	800a8cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68d9      	ldr	r1, [r3, #12]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	6838      	ldr	r0, [r7, #0]
 800a8d8:	f002 fe89 	bl	800d5ee <memcpy>
	}
}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a8ec:	f001 fc7a 	bl	800c1e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8f8:	e011      	b.n	800a91e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d012      	beq.n	800a928 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	3324      	adds	r3, #36	; 0x24
 800a906:	4618      	mov	r0, r3
 800a908:	f000 fd50 	bl	800b3ac <xTaskRemoveFromEventList>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a912:	f000 fe27 	bl	800b564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	3b01      	subs	r3, #1
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a91e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a922:	2b00      	cmp	r3, #0
 800a924:	dce9      	bgt.n	800a8fa <prvUnlockQueue+0x16>
 800a926:	e000      	b.n	800a92a <prvUnlockQueue+0x46>
					break;
 800a928:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	22ff      	movs	r2, #255	; 0xff
 800a92e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a932:	f001 fc87 	bl	800c244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a936:	f001 fc55 	bl	800c1e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a940:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a942:	e011      	b.n	800a968 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d012      	beq.n	800a972 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	3310      	adds	r3, #16
 800a950:	4618      	mov	r0, r3
 800a952:	f000 fd2b 	bl	800b3ac <xTaskRemoveFromEventList>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a95c:	f000 fe02 	bl	800b564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	3b01      	subs	r3, #1
 800a964:	b2db      	uxtb	r3, r3
 800a966:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	dce9      	bgt.n	800a944 <prvUnlockQueue+0x60>
 800a970:	e000      	b.n	800a974 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a972:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	22ff      	movs	r2, #255	; 0xff
 800a978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a97c:	f001 fc62 	bl	800c244 <vPortExitCritical>
}
 800a980:	bf00      	nop
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a990:	f001 fc28 	bl	800c1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d102      	bne.n	800a9a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a99c:	2301      	movs	r3, #1
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	e001      	b.n	800a9a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9a6:	f001 fc4d 	bl	800c244 <vPortExitCritical>

	return xReturn;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9bc:	f001 fc12 	bl	800c1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d102      	bne.n	800a9d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e001      	b.n	800a9d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9d6:	f001 fc35 	bl	800c244 <vPortExitCritical>

	return xReturn;
 800a9da:	68fb      	ldr	r3, [r7, #12]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	60fb      	str	r3, [r7, #12]
 800a9f2:	e014      	b.n	800aa1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9f4:	4a0f      	ldr	r2, [pc, #60]	; (800aa34 <vQueueAddToRegistry+0x50>)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10b      	bne.n	800aa18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa00:	490c      	ldr	r1, [pc, #48]	; (800aa34 <vQueueAddToRegistry+0x50>)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa0a:	4a0a      	ldr	r2, [pc, #40]	; (800aa34 <vQueueAddToRegistry+0x50>)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	4413      	add	r3, r2
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa16:	e006      	b.n	800aa26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	60fb      	str	r3, [r7, #12]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b07      	cmp	r3, #7
 800aa22:	d9e7      	bls.n	800a9f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	20001070 	.word	0x20001070

0800aa38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa48:	f001 fbcc 	bl	800c1e4 <vPortEnterCritical>
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa52:	b25b      	sxtb	r3, r3
 800aa54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa58:	d103      	bne.n	800aa62 <vQueueWaitForMessageRestricted+0x2a>
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa68:	b25b      	sxtb	r3, r3
 800aa6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6e:	d103      	bne.n	800aa78 <vQueueWaitForMessageRestricted+0x40>
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa78:	f001 fbe4 	bl	800c244 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d106      	bne.n	800aa92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	3324      	adds	r3, #36	; 0x24
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fc61 	bl	800b354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa92:	6978      	ldr	r0, [r7, #20]
 800aa94:	f7ff ff26 	bl	800a8e4 <prvUnlockQueue>
	}
 800aa98:	bf00      	nop
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08e      	sub	sp, #56	; 0x38
 800aaa4:	af04      	add	r7, sp, #16
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aaae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <xTaskCreateStatic+0x2a>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	623b      	str	r3, [r7, #32]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10a      	bne.n	800aae6 <xTaskCreateStatic+0x46>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	61fb      	str	r3, [r7, #28]
}
 800aae2:	bf00      	nop
 800aae4:	e7fe      	b.n	800aae4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aae6:	23bc      	movs	r3, #188	; 0xbc
 800aae8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	2bbc      	cmp	r3, #188	; 0xbc
 800aaee:	d00a      	beq.n	800ab06 <xTaskCreateStatic+0x66>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	61bb      	str	r3, [r7, #24]
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d01e      	beq.n	800ab4c <xTaskCreateStatic+0xac>
 800ab0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d01b      	beq.n	800ab4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	2202      	movs	r2, #2
 800ab22:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab26:	2300      	movs	r3, #0
 800ab28:	9303      	str	r3, [sp, #12]
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2c:	9302      	str	r3, [sp, #8]
 800ab2e:	f107 0314 	add.w	r3, r7, #20
 800ab32:	9301      	str	r3, [sp, #4]
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	68b9      	ldr	r1, [r7, #8]
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 f850 	bl	800abe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab46:	f000 f8f3 	bl	800ad30 <prvAddNewTaskToReadyList>
 800ab4a:	e001      	b.n	800ab50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab50:	697b      	ldr	r3, [r7, #20]
	}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3728      	adds	r7, #40	; 0x28
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b08c      	sub	sp, #48	; 0x30
 800ab5e:	af04      	add	r7, sp, #16
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	603b      	str	r3, [r7, #0]
 800ab66:	4613      	mov	r3, r2
 800ab68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab6a:	88fb      	ldrh	r3, [r7, #6]
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f001 fc5a 	bl	800c428 <pvPortMalloc>
 800ab74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00e      	beq.n	800ab9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab7c:	20bc      	movs	r0, #188	; 0xbc
 800ab7e:	f001 fc53 	bl	800c428 <pvPortMalloc>
 800ab82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	631a      	str	r2, [r3, #48]	; 0x30
 800ab90:	e005      	b.n	800ab9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab92:	6978      	ldr	r0, [r7, #20]
 800ab94:	f001 fd14 	bl	800c5c0 <vPortFree>
 800ab98:	e001      	b.n	800ab9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d017      	beq.n	800abd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abac:	88fa      	ldrh	r2, [r7, #6]
 800abae:	2300      	movs	r3, #0
 800abb0:	9303      	str	r3, [sp, #12]
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	9302      	str	r3, [sp, #8]
 800abb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb8:	9301      	str	r3, [sp, #4]
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	68b9      	ldr	r1, [r7, #8]
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 f80e 	bl	800abe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abc8:	69f8      	ldr	r0, [r7, #28]
 800abca:	f000 f8b1 	bl	800ad30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abce:	2301      	movs	r3, #1
 800abd0:	61bb      	str	r3, [r7, #24]
 800abd2:	e002      	b.n	800abda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abd4:	f04f 33ff 	mov.w	r3, #4294967295
 800abd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abda:	69bb      	ldr	r3, [r7, #24]
	}
 800abdc:	4618      	mov	r0, r3
 800abde:	3720      	adds	r7, #32
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	461a      	mov	r2, r3
 800abfc:	21a5      	movs	r1, #165	; 0xa5
 800abfe:	f002 fd04 	bl	800d60a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	f023 0307 	bic.w	r3, r3, #7
 800ac1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	f003 0307 	and.w	r3, r3, #7
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00a      	beq.n	800ac3c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ac26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2a:	f383 8811 	msr	BASEPRI, r3
 800ac2e:	f3bf 8f6f 	isb	sy
 800ac32:	f3bf 8f4f 	dsb	sy
 800ac36:	617b      	str	r3, [r7, #20]
}
 800ac38:	bf00      	nop
 800ac3a:	e7fe      	b.n	800ac3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d01f      	beq.n	800ac82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac42:	2300      	movs	r3, #0
 800ac44:	61fb      	str	r3, [r7, #28]
 800ac46:	e012      	b.n	800ac6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	7819      	ldrb	r1, [r3, #0]
 800ac50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	4413      	add	r3, r2
 800ac56:	3334      	adds	r3, #52	; 0x34
 800ac58:	460a      	mov	r2, r1
 800ac5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	4413      	add	r3, r2
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d006      	beq.n	800ac76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	61fb      	str	r3, [r7, #28]
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	2b0f      	cmp	r3, #15
 800ac72:	d9e9      	bls.n	800ac48 <prvInitialiseNewTask+0x64>
 800ac74:	e000      	b.n	800ac78 <prvInitialiseNewTask+0x94>
			{
				break;
 800ac76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac80:	e003      	b.n	800ac8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8c:	2b37      	cmp	r3, #55	; 0x37
 800ac8e:	d901      	bls.n	800ac94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac90:	2337      	movs	r3, #55	; 0x37
 800ac92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca2:	2200      	movs	r2, #0
 800aca4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	3304      	adds	r3, #4
 800acaa:	4618      	mov	r0, r3
 800acac:	f7ff f978 	bl	8009fa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	3318      	adds	r3, #24
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7ff f973 	bl	8009fa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace2:	3354      	adds	r3, #84	; 0x54
 800ace4:	2260      	movs	r2, #96	; 0x60
 800ace6:	2100      	movs	r1, #0
 800ace8:	4618      	mov	r0, r3
 800acea:	f002 fc8e 	bl	800d60a <memset>
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	4a0c      	ldr	r2, [pc, #48]	; (800ad24 <prvInitialiseNewTask+0x140>)
 800acf2:	659a      	str	r2, [r3, #88]	; 0x58
 800acf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf6:	4a0c      	ldr	r2, [pc, #48]	; (800ad28 <prvInitialiseNewTask+0x144>)
 800acf8:	65da      	str	r2, [r3, #92]	; 0x5c
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	4a0b      	ldr	r2, [pc, #44]	; (800ad2c <prvInitialiseNewTask+0x148>)
 800acfe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	68f9      	ldr	r1, [r7, #12]
 800ad04:	69b8      	ldr	r0, [r7, #24]
 800ad06:	f001 f941 	bl	800bf8c <pxPortInitialiseStack>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d002      	beq.n	800ad1c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad1c:	bf00      	nop
 800ad1e:	3720      	adds	r7, #32
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	080116b8 	.word	0x080116b8
 800ad28:	080116d8 	.word	0x080116d8
 800ad2c:	08011698 	.word	0x08011698

0800ad30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad38:	f001 fa54 	bl	800c1e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad3c:	4b2d      	ldr	r3, [pc, #180]	; (800adf4 <prvAddNewTaskToReadyList+0xc4>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3301      	adds	r3, #1
 800ad42:	4a2c      	ldr	r2, [pc, #176]	; (800adf4 <prvAddNewTaskToReadyList+0xc4>)
 800ad44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad46:	4b2c      	ldr	r3, [pc, #176]	; (800adf8 <prvAddNewTaskToReadyList+0xc8>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d109      	bne.n	800ad62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad4e:	4a2a      	ldr	r2, [pc, #168]	; (800adf8 <prvAddNewTaskToReadyList+0xc8>)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad54:	4b27      	ldr	r3, [pc, #156]	; (800adf4 <prvAddNewTaskToReadyList+0xc4>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d110      	bne.n	800ad7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad5c:	f000 fc26 	bl	800b5ac <prvInitialiseTaskLists>
 800ad60:	e00d      	b.n	800ad7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad62:	4b26      	ldr	r3, [pc, #152]	; (800adfc <prvAddNewTaskToReadyList+0xcc>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d109      	bne.n	800ad7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad6a:	4b23      	ldr	r3, [pc, #140]	; (800adf8 <prvAddNewTaskToReadyList+0xc8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d802      	bhi.n	800ad7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad78:	4a1f      	ldr	r2, [pc, #124]	; (800adf8 <prvAddNewTaskToReadyList+0xc8>)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad7e:	4b20      	ldr	r3, [pc, #128]	; (800ae00 <prvAddNewTaskToReadyList+0xd0>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3301      	adds	r3, #1
 800ad84:	4a1e      	ldr	r2, [pc, #120]	; (800ae00 <prvAddNewTaskToReadyList+0xd0>)
 800ad86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad88:	4b1d      	ldr	r3, [pc, #116]	; (800ae00 <prvAddNewTaskToReadyList+0xd0>)
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad94:	4b1b      	ldr	r3, [pc, #108]	; (800ae04 <prvAddNewTaskToReadyList+0xd4>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d903      	bls.n	800ada4 <prvAddNewTaskToReadyList+0x74>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	4a18      	ldr	r2, [pc, #96]	; (800ae04 <prvAddNewTaskToReadyList+0xd4>)
 800ada2:	6013      	str	r3, [r2, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada8:	4613      	mov	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4413      	add	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4a15      	ldr	r2, [pc, #84]	; (800ae08 <prvAddNewTaskToReadyList+0xd8>)
 800adb2:	441a      	add	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3304      	adds	r3, #4
 800adb8:	4619      	mov	r1, r3
 800adba:	4610      	mov	r0, r2
 800adbc:	f7ff f8fd 	bl	8009fba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800adc0:	f001 fa40 	bl	800c244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800adc4:	4b0d      	ldr	r3, [pc, #52]	; (800adfc <prvAddNewTaskToReadyList+0xcc>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00e      	beq.n	800adea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adcc:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <prvAddNewTaskToReadyList+0xc8>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	429a      	cmp	r2, r3
 800add8:	d207      	bcs.n	800adea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adda:	4b0c      	ldr	r3, [pc, #48]	; (800ae0c <prvAddNewTaskToReadyList+0xdc>)
 800addc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade0:	601a      	str	r2, [r3, #0]
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adea:	bf00      	nop
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20001584 	.word	0x20001584
 800adf8:	200010b0 	.word	0x200010b0
 800adfc:	20001590 	.word	0x20001590
 800ae00:	200015a0 	.word	0x200015a0
 800ae04:	2000158c 	.word	0x2000158c
 800ae08:	200010b4 	.word	0x200010b4
 800ae0c:	e000ed04 	.word	0xe000ed04

0800ae10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d017      	beq.n	800ae52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae22:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <vTaskDelay+0x60>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00a      	beq.n	800ae40 <vTaskDelay+0x30>
	__asm volatile
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	60bb      	str	r3, [r7, #8]
}
 800ae3c:	bf00      	nop
 800ae3e:	e7fe      	b.n	800ae3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae40:	f000 f88a 	bl	800af58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae44:	2100      	movs	r1, #0
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fcfe 	bl	800b848 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae4c:	f000 f892 	bl	800af74 <xTaskResumeAll>
 800ae50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d107      	bne.n	800ae68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae58:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <vTaskDelay+0x64>)
 800ae5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae68:	bf00      	nop
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	200015ac 	.word	0x200015ac
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b08a      	sub	sp, #40	; 0x28
 800ae7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae86:	463a      	mov	r2, r7
 800ae88:	1d39      	adds	r1, r7, #4
 800ae8a:	f107 0308 	add.w	r3, r7, #8
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff f832 	bl	8009ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	9202      	str	r2, [sp, #8]
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	2300      	movs	r3, #0
 800aea4:	460a      	mov	r2, r1
 800aea6:	4924      	ldr	r1, [pc, #144]	; (800af38 <vTaskStartScheduler+0xc0>)
 800aea8:	4824      	ldr	r0, [pc, #144]	; (800af3c <vTaskStartScheduler+0xc4>)
 800aeaa:	f7ff fdf9 	bl	800aaa0 <xTaskCreateStatic>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4a23      	ldr	r2, [pc, #140]	; (800af40 <vTaskStartScheduler+0xc8>)
 800aeb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aeb4:	4b22      	ldr	r3, [pc, #136]	; (800af40 <vTaskStartScheduler+0xc8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aebc:	2301      	movs	r3, #1
 800aebe:	617b      	str	r3, [r7, #20]
 800aec0:	e001      	b.n	800aec6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d102      	bne.n	800aed2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aecc:	f000 fd10 	bl	800b8f0 <xTimerCreateTimerTask>
 800aed0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d11b      	bne.n	800af10 <vTaskStartScheduler+0x98>
	__asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	613b      	str	r3, [r7, #16]
}
 800aeea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aeec:	4b15      	ldr	r3, [pc, #84]	; (800af44 <vTaskStartScheduler+0xcc>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3354      	adds	r3, #84	; 0x54
 800aef2:	4a15      	ldr	r2, [pc, #84]	; (800af48 <vTaskStartScheduler+0xd0>)
 800aef4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aef6:	4b15      	ldr	r3, [pc, #84]	; (800af4c <vTaskStartScheduler+0xd4>)
 800aef8:	f04f 32ff 	mov.w	r2, #4294967295
 800aefc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aefe:	4b14      	ldr	r3, [pc, #80]	; (800af50 <vTaskStartScheduler+0xd8>)
 800af00:	2201      	movs	r2, #1
 800af02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af04:	4b13      	ldr	r3, [pc, #76]	; (800af54 <vTaskStartScheduler+0xdc>)
 800af06:	2200      	movs	r2, #0
 800af08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af0a:	f001 f8c9 	bl	800c0a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af0e:	e00e      	b.n	800af2e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af16:	d10a      	bne.n	800af2e <vTaskStartScheduler+0xb6>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	60fb      	str	r3, [r7, #12]
}
 800af2a:	bf00      	nop
 800af2c:	e7fe      	b.n	800af2c <vTaskStartScheduler+0xb4>
}
 800af2e:	bf00      	nop
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	0801158c 	.word	0x0801158c
 800af3c:	0800b57d 	.word	0x0800b57d
 800af40:	200015a8 	.word	0x200015a8
 800af44:	200010b0 	.word	0x200010b0
 800af48:	20000110 	.word	0x20000110
 800af4c:	200015a4 	.word	0x200015a4
 800af50:	20001590 	.word	0x20001590
 800af54:	20001588 	.word	0x20001588

0800af58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af58:	b480      	push	{r7}
 800af5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af5c:	4b04      	ldr	r3, [pc, #16]	; (800af70 <vTaskSuspendAll+0x18>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3301      	adds	r3, #1
 800af62:	4a03      	ldr	r2, [pc, #12]	; (800af70 <vTaskSuspendAll+0x18>)
 800af64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af66:	bf00      	nop
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	200015ac 	.word	0x200015ac

0800af74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af7e:	2300      	movs	r3, #0
 800af80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af82:	4b42      	ldr	r3, [pc, #264]	; (800b08c <xTaskResumeAll+0x118>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10a      	bne.n	800afa0 <xTaskResumeAll+0x2c>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	603b      	str	r3, [r7, #0]
}
 800af9c:	bf00      	nop
 800af9e:	e7fe      	b.n	800af9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afa0:	f001 f920 	bl	800c1e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afa4:	4b39      	ldr	r3, [pc, #228]	; (800b08c <xTaskResumeAll+0x118>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3b01      	subs	r3, #1
 800afaa:	4a38      	ldr	r2, [pc, #224]	; (800b08c <xTaskResumeAll+0x118>)
 800afac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afae:	4b37      	ldr	r3, [pc, #220]	; (800b08c <xTaskResumeAll+0x118>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d162      	bne.n	800b07c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afb6:	4b36      	ldr	r3, [pc, #216]	; (800b090 <xTaskResumeAll+0x11c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d05e      	beq.n	800b07c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afbe:	e02f      	b.n	800b020 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afc0:	4b34      	ldr	r3, [pc, #208]	; (800b094 <xTaskResumeAll+0x120>)
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3318      	adds	r3, #24
 800afcc:	4618      	mov	r0, r3
 800afce:	f7ff f851 	bl	800a074 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3304      	adds	r3, #4
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7ff f84c 	bl	800a074 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe0:	4b2d      	ldr	r3, [pc, #180]	; (800b098 <xTaskResumeAll+0x124>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d903      	bls.n	800aff0 <xTaskResumeAll+0x7c>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afec:	4a2a      	ldr	r2, [pc, #168]	; (800b098 <xTaskResumeAll+0x124>)
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff4:	4613      	mov	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4a27      	ldr	r2, [pc, #156]	; (800b09c <xTaskResumeAll+0x128>)
 800affe:	441a      	add	r2, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3304      	adds	r3, #4
 800b004:	4619      	mov	r1, r3
 800b006:	4610      	mov	r0, r2
 800b008:	f7fe ffd7 	bl	8009fba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b010:	4b23      	ldr	r3, [pc, #140]	; (800b0a0 <xTaskResumeAll+0x12c>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b016:	429a      	cmp	r2, r3
 800b018:	d302      	bcc.n	800b020 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b01a:	4b22      	ldr	r3, [pc, #136]	; (800b0a4 <xTaskResumeAll+0x130>)
 800b01c:	2201      	movs	r2, #1
 800b01e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b020:	4b1c      	ldr	r3, [pc, #112]	; (800b094 <xTaskResumeAll+0x120>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1cb      	bne.n	800afc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b02e:	f000 fb5f 	bl	800b6f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b032:	4b1d      	ldr	r3, [pc, #116]	; (800b0a8 <xTaskResumeAll+0x134>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d010      	beq.n	800b060 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b03e:	f000 f847 	bl	800b0d0 <xTaskIncrementTick>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b048:	4b16      	ldr	r3, [pc, #88]	; (800b0a4 <xTaskResumeAll+0x130>)
 800b04a:	2201      	movs	r2, #1
 800b04c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3b01      	subs	r3, #1
 800b052:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1f1      	bne.n	800b03e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b05a:	4b13      	ldr	r3, [pc, #76]	; (800b0a8 <xTaskResumeAll+0x134>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b060:	4b10      	ldr	r3, [pc, #64]	; (800b0a4 <xTaskResumeAll+0x130>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d009      	beq.n	800b07c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b068:	2301      	movs	r3, #1
 800b06a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b06c:	4b0f      	ldr	r3, [pc, #60]	; (800b0ac <xTaskResumeAll+0x138>)
 800b06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b07c:	f001 f8e2 	bl	800c244 <vPortExitCritical>

	return xAlreadyYielded;
 800b080:	68bb      	ldr	r3, [r7, #8]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	200015ac 	.word	0x200015ac
 800b090:	20001584 	.word	0x20001584
 800b094:	20001544 	.word	0x20001544
 800b098:	2000158c 	.word	0x2000158c
 800b09c:	200010b4 	.word	0x200010b4
 800b0a0:	200010b0 	.word	0x200010b0
 800b0a4:	20001598 	.word	0x20001598
 800b0a8:	20001594 	.word	0x20001594
 800b0ac:	e000ed04 	.word	0xe000ed04

0800b0b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0b6:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <xTaskGetTickCount+0x1c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0bc:	687b      	ldr	r3, [r7, #4]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	20001588 	.word	0x20001588

0800b0d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0da:	4b4f      	ldr	r3, [pc, #316]	; (800b218 <xTaskIncrementTick+0x148>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f040 808f 	bne.w	800b202 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0e4:	4b4d      	ldr	r3, [pc, #308]	; (800b21c <xTaskIncrementTick+0x14c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0ec:	4a4b      	ldr	r2, [pc, #300]	; (800b21c <xTaskIncrementTick+0x14c>)
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d120      	bne.n	800b13a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0f8:	4b49      	ldr	r3, [pc, #292]	; (800b220 <xTaskIncrementTick+0x150>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00a      	beq.n	800b118 <xTaskIncrementTick+0x48>
	__asm volatile
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	603b      	str	r3, [r7, #0]
}
 800b114:	bf00      	nop
 800b116:	e7fe      	b.n	800b116 <xTaskIncrementTick+0x46>
 800b118:	4b41      	ldr	r3, [pc, #260]	; (800b220 <xTaskIncrementTick+0x150>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	60fb      	str	r3, [r7, #12]
 800b11e:	4b41      	ldr	r3, [pc, #260]	; (800b224 <xTaskIncrementTick+0x154>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a3f      	ldr	r2, [pc, #252]	; (800b220 <xTaskIncrementTick+0x150>)
 800b124:	6013      	str	r3, [r2, #0]
 800b126:	4a3f      	ldr	r2, [pc, #252]	; (800b224 <xTaskIncrementTick+0x154>)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6013      	str	r3, [r2, #0]
 800b12c:	4b3e      	ldr	r3, [pc, #248]	; (800b228 <xTaskIncrementTick+0x158>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	3301      	adds	r3, #1
 800b132:	4a3d      	ldr	r2, [pc, #244]	; (800b228 <xTaskIncrementTick+0x158>)
 800b134:	6013      	str	r3, [r2, #0]
 800b136:	f000 fadb 	bl	800b6f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b13a:	4b3c      	ldr	r3, [pc, #240]	; (800b22c <xTaskIncrementTick+0x15c>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	429a      	cmp	r2, r3
 800b142:	d349      	bcc.n	800b1d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b144:	4b36      	ldr	r3, [pc, #216]	; (800b220 <xTaskIncrementTick+0x150>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d104      	bne.n	800b158 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b14e:	4b37      	ldr	r3, [pc, #220]	; (800b22c <xTaskIncrementTick+0x15c>)
 800b150:	f04f 32ff 	mov.w	r2, #4294967295
 800b154:	601a      	str	r2, [r3, #0]
					break;
 800b156:	e03f      	b.n	800b1d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b158:	4b31      	ldr	r3, [pc, #196]	; (800b220 <xTaskIncrementTick+0x150>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d203      	bcs.n	800b178 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b170:	4a2e      	ldr	r2, [pc, #184]	; (800b22c <xTaskIncrementTick+0x15c>)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b176:	e02f      	b.n	800b1d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fe ff79 	bl	800a074 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b186:	2b00      	cmp	r3, #0
 800b188:	d004      	beq.n	800b194 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	3318      	adds	r3, #24
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fe ff70 	bl	800a074 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b198:	4b25      	ldr	r3, [pc, #148]	; (800b230 <xTaskIncrementTick+0x160>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d903      	bls.n	800b1a8 <xTaskIncrementTick+0xd8>
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	4a22      	ldr	r2, [pc, #136]	; (800b230 <xTaskIncrementTick+0x160>)
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4a1f      	ldr	r2, [pc, #124]	; (800b234 <xTaskIncrementTick+0x164>)
 800b1b6:	441a      	add	r2, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4610      	mov	r0, r2
 800b1c0:	f7fe fefb 	bl	8009fba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c8:	4b1b      	ldr	r3, [pc, #108]	; (800b238 <xTaskIncrementTick+0x168>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d3b8      	bcc.n	800b144 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1d6:	e7b5      	b.n	800b144 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1d8:	4b17      	ldr	r3, [pc, #92]	; (800b238 <xTaskIncrementTick+0x168>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1de:	4915      	ldr	r1, [pc, #84]	; (800b234 <xTaskIncrementTick+0x164>)
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	440b      	add	r3, r1
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d901      	bls.n	800b1f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1f4:	4b11      	ldr	r3, [pc, #68]	; (800b23c <xTaskIncrementTick+0x16c>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d007      	beq.n	800b20c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	617b      	str	r3, [r7, #20]
 800b200:	e004      	b.n	800b20c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b202:	4b0f      	ldr	r3, [pc, #60]	; (800b240 <xTaskIncrementTick+0x170>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3301      	adds	r3, #1
 800b208:	4a0d      	ldr	r2, [pc, #52]	; (800b240 <xTaskIncrementTick+0x170>)
 800b20a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b20c:	697b      	ldr	r3, [r7, #20]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	200015ac 	.word	0x200015ac
 800b21c:	20001588 	.word	0x20001588
 800b220:	2000153c 	.word	0x2000153c
 800b224:	20001540 	.word	0x20001540
 800b228:	2000159c 	.word	0x2000159c
 800b22c:	200015a4 	.word	0x200015a4
 800b230:	2000158c 	.word	0x2000158c
 800b234:	200010b4 	.word	0x200010b4
 800b238:	200010b0 	.word	0x200010b0
 800b23c:	20001598 	.word	0x20001598
 800b240:	20001594 	.word	0x20001594

0800b244 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b24a:	4b2a      	ldr	r3, [pc, #168]	; (800b2f4 <vTaskSwitchContext+0xb0>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b252:	4b29      	ldr	r3, [pc, #164]	; (800b2f8 <vTaskSwitchContext+0xb4>)
 800b254:	2201      	movs	r2, #1
 800b256:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b258:	e046      	b.n	800b2e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b25a:	4b27      	ldr	r3, [pc, #156]	; (800b2f8 <vTaskSwitchContext+0xb4>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b260:	4b26      	ldr	r3, [pc, #152]	; (800b2fc <vTaskSwitchContext+0xb8>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	60fb      	str	r3, [r7, #12]
 800b266:	e010      	b.n	800b28a <vTaskSwitchContext+0x46>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10a      	bne.n	800b284 <vTaskSwitchContext+0x40>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	607b      	str	r3, [r7, #4]
}
 800b280:	bf00      	nop
 800b282:	e7fe      	b.n	800b282 <vTaskSwitchContext+0x3e>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3b01      	subs	r3, #1
 800b288:	60fb      	str	r3, [r7, #12]
 800b28a:	491d      	ldr	r1, [pc, #116]	; (800b300 <vTaskSwitchContext+0xbc>)
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	4613      	mov	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	440b      	add	r3, r1
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d0e4      	beq.n	800b268 <vTaskSwitchContext+0x24>
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4a15      	ldr	r2, [pc, #84]	; (800b300 <vTaskSwitchContext+0xbc>)
 800b2aa:	4413      	add	r3, r2
 800b2ac:	60bb      	str	r3, [r7, #8]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	605a      	str	r2, [r3, #4]
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	3308      	adds	r3, #8
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d104      	bne.n	800b2ce <vTaskSwitchContext+0x8a>
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	605a      	str	r2, [r3, #4]
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	4a0b      	ldr	r2, [pc, #44]	; (800b304 <vTaskSwitchContext+0xc0>)
 800b2d6:	6013      	str	r3, [r2, #0]
 800b2d8:	4a08      	ldr	r2, [pc, #32]	; (800b2fc <vTaskSwitchContext+0xb8>)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2de:	4b09      	ldr	r3, [pc, #36]	; (800b304 <vTaskSwitchContext+0xc0>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3354      	adds	r3, #84	; 0x54
 800b2e4:	4a08      	ldr	r2, [pc, #32]	; (800b308 <vTaskSwitchContext+0xc4>)
 800b2e6:	6013      	str	r3, [r2, #0]
}
 800b2e8:	bf00      	nop
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	200015ac 	.word	0x200015ac
 800b2f8:	20001598 	.word	0x20001598
 800b2fc:	2000158c 	.word	0x2000158c
 800b300:	200010b4 	.word	0x200010b4
 800b304:	200010b0 	.word	0x200010b0
 800b308:	20000110 	.word	0x20000110

0800b30c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10a      	bne.n	800b332 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	60fb      	str	r3, [r7, #12]
}
 800b32e:	bf00      	nop
 800b330:	e7fe      	b.n	800b330 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b332:	4b07      	ldr	r3, [pc, #28]	; (800b350 <vTaskPlaceOnEventList+0x44>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3318      	adds	r3, #24
 800b338:	4619      	mov	r1, r3
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7fe fe61 	bl	800a002 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b340:	2101      	movs	r1, #1
 800b342:	6838      	ldr	r0, [r7, #0]
 800b344:	f000 fa80 	bl	800b848 <prvAddCurrentTaskToDelayedList>
}
 800b348:	bf00      	nop
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	200010b0 	.word	0x200010b0

0800b354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10a      	bne.n	800b37c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	617b      	str	r3, [r7, #20]
}
 800b378:	bf00      	nop
 800b37a:	e7fe      	b.n	800b37a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b37c:	4b0a      	ldr	r3, [pc, #40]	; (800b3a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3318      	adds	r3, #24
 800b382:	4619      	mov	r1, r3
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f7fe fe18 	bl	8009fba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b390:	f04f 33ff 	mov.w	r3, #4294967295
 800b394:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b396:	6879      	ldr	r1, [r7, #4]
 800b398:	68b8      	ldr	r0, [r7, #8]
 800b39a:	f000 fa55 	bl	800b848 <prvAddCurrentTaskToDelayedList>
	}
 800b39e:	bf00      	nop
 800b3a0:	3718      	adds	r7, #24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	200010b0 	.word	0x200010b0

0800b3ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10a      	bne.n	800b3d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	60fb      	str	r3, [r7, #12]
}
 800b3d4:	bf00      	nop
 800b3d6:	e7fe      	b.n	800b3d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	3318      	adds	r3, #24
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7fe fe49 	bl	800a074 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3e2:	4b1e      	ldr	r3, [pc, #120]	; (800b45c <xTaskRemoveFromEventList+0xb0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d11d      	bne.n	800b426 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fe fe40 	bl	800a074 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f8:	4b19      	ldr	r3, [pc, #100]	; (800b460 <xTaskRemoveFromEventList+0xb4>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d903      	bls.n	800b408 <xTaskRemoveFromEventList+0x5c>
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b404:	4a16      	ldr	r2, [pc, #88]	; (800b460 <xTaskRemoveFromEventList+0xb4>)
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40c:	4613      	mov	r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4413      	add	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4a13      	ldr	r2, [pc, #76]	; (800b464 <xTaskRemoveFromEventList+0xb8>)
 800b416:	441a      	add	r2, r3
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	3304      	adds	r3, #4
 800b41c:	4619      	mov	r1, r3
 800b41e:	4610      	mov	r0, r2
 800b420:	f7fe fdcb 	bl	8009fba <vListInsertEnd>
 800b424:	e005      	b.n	800b432 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	3318      	adds	r3, #24
 800b42a:	4619      	mov	r1, r3
 800b42c:	480e      	ldr	r0, [pc, #56]	; (800b468 <xTaskRemoveFromEventList+0xbc>)
 800b42e:	f7fe fdc4 	bl	8009fba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b436:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <xTaskRemoveFromEventList+0xc0>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d905      	bls.n	800b44c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b440:	2301      	movs	r3, #1
 800b442:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b444:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <xTaskRemoveFromEventList+0xc4>)
 800b446:	2201      	movs	r2, #1
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	e001      	b.n	800b450 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b44c:	2300      	movs	r3, #0
 800b44e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b450:	697b      	ldr	r3, [r7, #20]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	200015ac 	.word	0x200015ac
 800b460:	2000158c 	.word	0x2000158c
 800b464:	200010b4 	.word	0x200010b4
 800b468:	20001544 	.word	0x20001544
 800b46c:	200010b0 	.word	0x200010b0
 800b470:	20001598 	.word	0x20001598

0800b474 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b47c:	4b06      	ldr	r3, [pc, #24]	; (800b498 <vTaskInternalSetTimeOutState+0x24>)
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b484:	4b05      	ldr	r3, [pc, #20]	; (800b49c <vTaskInternalSetTimeOutState+0x28>)
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	605a      	str	r2, [r3, #4]
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	2000159c 	.word	0x2000159c
 800b49c:	20001588 	.word	0x20001588

0800b4a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b088      	sub	sp, #32
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10a      	bne.n	800b4c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	613b      	str	r3, [r7, #16]
}
 800b4c2:	bf00      	nop
 800b4c4:	e7fe      	b.n	800b4c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10a      	bne.n	800b4e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	60fb      	str	r3, [r7, #12]
}
 800b4de:	bf00      	nop
 800b4e0:	e7fe      	b.n	800b4e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b4e2:	f000 fe7f 	bl	800c1e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4e6:	4b1d      	ldr	r3, [pc, #116]	; (800b55c <xTaskCheckForTimeOut+0xbc>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	69ba      	ldr	r2, [r7, #24]
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fe:	d102      	bne.n	800b506 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b500:	2300      	movs	r3, #0
 800b502:	61fb      	str	r3, [r7, #28]
 800b504:	e023      	b.n	800b54e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	4b15      	ldr	r3, [pc, #84]	; (800b560 <xTaskCheckForTimeOut+0xc0>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d007      	beq.n	800b522 <xTaskCheckForTimeOut+0x82>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	69ba      	ldr	r2, [r7, #24]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d302      	bcc.n	800b522 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b51c:	2301      	movs	r3, #1
 800b51e:	61fb      	str	r3, [r7, #28]
 800b520:	e015      	b.n	800b54e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d20b      	bcs.n	800b544 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	1ad2      	subs	r2, r2, r3
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff ff9b 	bl	800b474 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b53e:	2300      	movs	r3, #0
 800b540:	61fb      	str	r3, [r7, #28]
 800b542:	e004      	b.n	800b54e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	2200      	movs	r2, #0
 800b548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b54a:	2301      	movs	r3, #1
 800b54c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b54e:	f000 fe79 	bl	800c244 <vPortExitCritical>

	return xReturn;
 800b552:	69fb      	ldr	r3, [r7, #28]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3720      	adds	r7, #32
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	20001588 	.word	0x20001588
 800b560:	2000159c 	.word	0x2000159c

0800b564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b564:	b480      	push	{r7}
 800b566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b568:	4b03      	ldr	r3, [pc, #12]	; (800b578 <vTaskMissedYield+0x14>)
 800b56a:	2201      	movs	r2, #1
 800b56c:	601a      	str	r2, [r3, #0]
}
 800b56e:	bf00      	nop
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr
 800b578:	20001598 	.word	0x20001598

0800b57c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b584:	f000 f852 	bl	800b62c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b588:	4b06      	ldr	r3, [pc, #24]	; (800b5a4 <prvIdleTask+0x28>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d9f9      	bls.n	800b584 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b590:	4b05      	ldr	r3, [pc, #20]	; (800b5a8 <prvIdleTask+0x2c>)
 800b592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b596:	601a      	str	r2, [r3, #0]
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5a0:	e7f0      	b.n	800b584 <prvIdleTask+0x8>
 800b5a2:	bf00      	nop
 800b5a4:	200010b4 	.word	0x200010b4
 800b5a8:	e000ed04 	.word	0xe000ed04

0800b5ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	607b      	str	r3, [r7, #4]
 800b5b6:	e00c      	b.n	800b5d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4413      	add	r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4a12      	ldr	r2, [pc, #72]	; (800b60c <prvInitialiseTaskLists+0x60>)
 800b5c4:	4413      	add	r3, r2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fe fcca 	bl	8009f60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	607b      	str	r3, [r7, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b37      	cmp	r3, #55	; 0x37
 800b5d6:	d9ef      	bls.n	800b5b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5d8:	480d      	ldr	r0, [pc, #52]	; (800b610 <prvInitialiseTaskLists+0x64>)
 800b5da:	f7fe fcc1 	bl	8009f60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5de:	480d      	ldr	r0, [pc, #52]	; (800b614 <prvInitialiseTaskLists+0x68>)
 800b5e0:	f7fe fcbe 	bl	8009f60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5e4:	480c      	ldr	r0, [pc, #48]	; (800b618 <prvInitialiseTaskLists+0x6c>)
 800b5e6:	f7fe fcbb 	bl	8009f60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5ea:	480c      	ldr	r0, [pc, #48]	; (800b61c <prvInitialiseTaskLists+0x70>)
 800b5ec:	f7fe fcb8 	bl	8009f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5f0:	480b      	ldr	r0, [pc, #44]	; (800b620 <prvInitialiseTaskLists+0x74>)
 800b5f2:	f7fe fcb5 	bl	8009f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <prvInitialiseTaskLists+0x78>)
 800b5f8:	4a05      	ldr	r2, [pc, #20]	; (800b610 <prvInitialiseTaskLists+0x64>)
 800b5fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <prvInitialiseTaskLists+0x7c>)
 800b5fe:	4a05      	ldr	r2, [pc, #20]	; (800b614 <prvInitialiseTaskLists+0x68>)
 800b600:	601a      	str	r2, [r3, #0]
}
 800b602:	bf00      	nop
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	200010b4 	.word	0x200010b4
 800b610:	20001514 	.word	0x20001514
 800b614:	20001528 	.word	0x20001528
 800b618:	20001544 	.word	0x20001544
 800b61c:	20001558 	.word	0x20001558
 800b620:	20001570 	.word	0x20001570
 800b624:	2000153c 	.word	0x2000153c
 800b628:	20001540 	.word	0x20001540

0800b62c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b632:	e019      	b.n	800b668 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b634:	f000 fdd6 	bl	800c1e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b638:	4b10      	ldr	r3, [pc, #64]	; (800b67c <prvCheckTasksWaitingTermination+0x50>)
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	3304      	adds	r3, #4
 800b644:	4618      	mov	r0, r3
 800b646:	f7fe fd15 	bl	800a074 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b64a:	4b0d      	ldr	r3, [pc, #52]	; (800b680 <prvCheckTasksWaitingTermination+0x54>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	3b01      	subs	r3, #1
 800b650:	4a0b      	ldr	r2, [pc, #44]	; (800b680 <prvCheckTasksWaitingTermination+0x54>)
 800b652:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b654:	4b0b      	ldr	r3, [pc, #44]	; (800b684 <prvCheckTasksWaitingTermination+0x58>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3b01      	subs	r3, #1
 800b65a:	4a0a      	ldr	r2, [pc, #40]	; (800b684 <prvCheckTasksWaitingTermination+0x58>)
 800b65c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b65e:	f000 fdf1 	bl	800c244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f810 	bl	800b688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b668:	4b06      	ldr	r3, [pc, #24]	; (800b684 <prvCheckTasksWaitingTermination+0x58>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1e1      	bne.n	800b634 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b670:	bf00      	nop
 800b672:	bf00      	nop
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20001558 	.word	0x20001558
 800b680:	20001584 	.word	0x20001584
 800b684:	2000156c 	.word	0x2000156c

0800b688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	3354      	adds	r3, #84	; 0x54
 800b694:	4618      	mov	r0, r3
 800b696:	f002 fa73 	bl	800db80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d108      	bne.n	800b6b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f000 ff89 	bl	800c5c0 <vPortFree>
				vPortFree( pxTCB );
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 ff86 	bl	800c5c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6b4:	e018      	b.n	800b6e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d103      	bne.n	800b6c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 ff7d 	bl	800c5c0 <vPortFree>
	}
 800b6c6:	e00f      	b.n	800b6e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d00a      	beq.n	800b6e8 <prvDeleteTCB+0x60>
	__asm volatile
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	60fb      	str	r3, [r7, #12]
}
 800b6e4:	bf00      	nop
 800b6e6:	e7fe      	b.n	800b6e6 <prvDeleteTCB+0x5e>
	}
 800b6e8:	bf00      	nop
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6f6:	4b0c      	ldr	r3, [pc, #48]	; (800b728 <prvResetNextTaskUnblockTime+0x38>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d104      	bne.n	800b70a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b700:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <prvResetNextTaskUnblockTime+0x3c>)
 800b702:	f04f 32ff 	mov.w	r2, #4294967295
 800b706:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b708:	e008      	b.n	800b71c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b70a:	4b07      	ldr	r3, [pc, #28]	; (800b728 <prvResetNextTaskUnblockTime+0x38>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	4a04      	ldr	r2, [pc, #16]	; (800b72c <prvResetNextTaskUnblockTime+0x3c>)
 800b71a:	6013      	str	r3, [r2, #0]
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	2000153c 	.word	0x2000153c
 800b72c:	200015a4 	.word	0x200015a4

0800b730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b736:	4b0b      	ldr	r3, [pc, #44]	; (800b764 <xTaskGetSchedulerState+0x34>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d102      	bne.n	800b744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b73e:	2301      	movs	r3, #1
 800b740:	607b      	str	r3, [r7, #4]
 800b742:	e008      	b.n	800b756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b744:	4b08      	ldr	r3, [pc, #32]	; (800b768 <xTaskGetSchedulerState+0x38>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b74c:	2302      	movs	r3, #2
 800b74e:	607b      	str	r3, [r7, #4]
 800b750:	e001      	b.n	800b756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b752:	2300      	movs	r3, #0
 800b754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b756:	687b      	ldr	r3, [r7, #4]
	}
 800b758:	4618      	mov	r0, r3
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	20001590 	.word	0x20001590
 800b768:	200015ac 	.word	0x200015ac

0800b76c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b778:	2300      	movs	r3, #0
 800b77a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d056      	beq.n	800b830 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b782:	4b2e      	ldr	r3, [pc, #184]	; (800b83c <xTaskPriorityDisinherit+0xd0>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d00a      	beq.n	800b7a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	60fb      	str	r3, [r7, #12]
}
 800b79e:	bf00      	nop
 800b7a0:	e7fe      	b.n	800b7a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10a      	bne.n	800b7c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	60bb      	str	r3, [r7, #8]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c4:	1e5a      	subs	r2, r3, #1
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d02c      	beq.n	800b830 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d128      	bne.n	800b830 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fe fc46 	bl	800a074 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b800:	4b0f      	ldr	r3, [pc, #60]	; (800b840 <xTaskPriorityDisinherit+0xd4>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d903      	bls.n	800b810 <xTaskPriorityDisinherit+0xa4>
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	4a0c      	ldr	r2, [pc, #48]	; (800b840 <xTaskPriorityDisinherit+0xd4>)
 800b80e:	6013      	str	r3, [r2, #0]
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b814:	4613      	mov	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4413      	add	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4a09      	ldr	r2, [pc, #36]	; (800b844 <xTaskPriorityDisinherit+0xd8>)
 800b81e:	441a      	add	r2, r3
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	3304      	adds	r3, #4
 800b824:	4619      	mov	r1, r3
 800b826:	4610      	mov	r0, r2
 800b828:	f7fe fbc7 	bl	8009fba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b82c:	2301      	movs	r3, #1
 800b82e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b830:	697b      	ldr	r3, [r7, #20]
	}
 800b832:	4618      	mov	r0, r3
 800b834:	3718      	adds	r7, #24
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	200010b0 	.word	0x200010b0
 800b840:	2000158c 	.word	0x2000158c
 800b844:	200010b4 	.word	0x200010b4

0800b848 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b852:	4b21      	ldr	r3, [pc, #132]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b858:	4b20      	ldr	r3, [pc, #128]	; (800b8dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3304      	adds	r3, #4
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fe fc08 	bl	800a074 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86a:	d10a      	bne.n	800b882 <prvAddCurrentTaskToDelayedList+0x3a>
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d007      	beq.n	800b882 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b872:	4b1a      	ldr	r3, [pc, #104]	; (800b8dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	3304      	adds	r3, #4
 800b878:	4619      	mov	r1, r3
 800b87a:	4819      	ldr	r0, [pc, #100]	; (800b8e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b87c:	f7fe fb9d 	bl	8009fba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b880:	e026      	b.n	800b8d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4413      	add	r3, r2
 800b888:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b88a:	4b14      	ldr	r3, [pc, #80]	; (800b8dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	429a      	cmp	r2, r3
 800b898:	d209      	bcs.n	800b8ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b89a:	4b12      	ldr	r3, [pc, #72]	; (800b8e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	4b0f      	ldr	r3, [pc, #60]	; (800b8dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	f7fe fbab 	bl	800a002 <vListInsert>
}
 800b8ac:	e010      	b.n	800b8d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8ae:	4b0e      	ldr	r3, [pc, #56]	; (800b8e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	4b0a      	ldr	r3, [pc, #40]	; (800b8dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3304      	adds	r3, #4
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	4610      	mov	r0, r2
 800b8bc:	f7fe fba1 	bl	800a002 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8c0:	4b0a      	ldr	r3, [pc, #40]	; (800b8ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d202      	bcs.n	800b8d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8ca:	4a08      	ldr	r2, [pc, #32]	; (800b8ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	6013      	str	r3, [r2, #0]
}
 800b8d0:	bf00      	nop
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	20001588 	.word	0x20001588
 800b8dc:	200010b0 	.word	0x200010b0
 800b8e0:	20001570 	.word	0x20001570
 800b8e4:	20001540 	.word	0x20001540
 800b8e8:	2000153c 	.word	0x2000153c
 800b8ec:	200015a4 	.word	0x200015a4

0800b8f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b08a      	sub	sp, #40	; 0x28
 800b8f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8fa:	f000 fb07 	bl	800bf0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8fe:	4b1c      	ldr	r3, [pc, #112]	; (800b970 <xTimerCreateTimerTask+0x80>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d021      	beq.n	800b94a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b90e:	1d3a      	adds	r2, r7, #4
 800b910:	f107 0108 	add.w	r1, r7, #8
 800b914:	f107 030c 	add.w	r3, r7, #12
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fe fb07 	bl	8009f2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b91e:	6879      	ldr	r1, [r7, #4]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	9202      	str	r2, [sp, #8]
 800b926:	9301      	str	r3, [sp, #4]
 800b928:	2302      	movs	r3, #2
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	2300      	movs	r3, #0
 800b92e:	460a      	mov	r2, r1
 800b930:	4910      	ldr	r1, [pc, #64]	; (800b974 <xTimerCreateTimerTask+0x84>)
 800b932:	4811      	ldr	r0, [pc, #68]	; (800b978 <xTimerCreateTimerTask+0x88>)
 800b934:	f7ff f8b4 	bl	800aaa0 <xTaskCreateStatic>
 800b938:	4603      	mov	r3, r0
 800b93a:	4a10      	ldr	r2, [pc, #64]	; (800b97c <xTimerCreateTimerTask+0x8c>)
 800b93c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b93e:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <xTimerCreateTimerTask+0x8c>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b946:	2301      	movs	r3, #1
 800b948:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	613b      	str	r3, [r7, #16]
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b966:	697b      	ldr	r3, [r7, #20]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	200015e0 	.word	0x200015e0
 800b974:	08011594 	.word	0x08011594
 800b978:	0800bab5 	.word	0x0800bab5
 800b97c:	200015e4 	.word	0x200015e4

0800b980 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b08a      	sub	sp, #40	; 0x28
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b98e:	2300      	movs	r3, #0
 800b990:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10a      	bne.n	800b9ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	623b      	str	r3, [r7, #32]
}
 800b9aa:	bf00      	nop
 800b9ac:	e7fe      	b.n	800b9ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9ae:	4b1a      	ldr	r3, [pc, #104]	; (800ba18 <xTimerGenericCommand+0x98>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d02a      	beq.n	800ba0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2b05      	cmp	r3, #5
 800b9c6:	dc18      	bgt.n	800b9fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9c8:	f7ff feb2 	bl	800b730 <xTaskGetSchedulerState>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d109      	bne.n	800b9e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9d2:	4b11      	ldr	r3, [pc, #68]	; (800ba18 <xTimerGenericCommand+0x98>)
 800b9d4:	6818      	ldr	r0, [r3, #0]
 800b9d6:	f107 0110 	add.w	r1, r7, #16
 800b9da:	2300      	movs	r3, #0
 800b9dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9de:	f7fe fc77 	bl	800a2d0 <xQueueGenericSend>
 800b9e2:	6278      	str	r0, [r7, #36]	; 0x24
 800b9e4:	e012      	b.n	800ba0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b9e6:	4b0c      	ldr	r3, [pc, #48]	; (800ba18 <xTimerGenericCommand+0x98>)
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	f107 0110 	add.w	r1, r7, #16
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f7fe fc6d 	bl	800a2d0 <xQueueGenericSend>
 800b9f6:	6278      	str	r0, [r7, #36]	; 0x24
 800b9f8:	e008      	b.n	800ba0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b9fa:	4b07      	ldr	r3, [pc, #28]	; (800ba18 <xTimerGenericCommand+0x98>)
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	f107 0110 	add.w	r1, r7, #16
 800ba02:	2300      	movs	r3, #0
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	f7fe fd61 	bl	800a4cc <xQueueGenericSendFromISR>
 800ba0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3728      	adds	r7, #40	; 0x28
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	200015e0 	.word	0x200015e0

0800ba1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b088      	sub	sp, #32
 800ba20:	af02      	add	r7, sp, #8
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba26:	4b22      	ldr	r3, [pc, #136]	; (800bab0 <prvProcessExpiredTimer+0x94>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	3304      	adds	r3, #4
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe fb1d 	bl	800a074 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba40:	f003 0304 	and.w	r3, r3, #4
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d022      	beq.n	800ba8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	699a      	ldr	r2, [r3, #24]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	18d1      	adds	r1, r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	6978      	ldr	r0, [r7, #20]
 800ba56:	f000 f8d1 	bl	800bbfc <prvInsertTimerInActiveList>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d01f      	beq.n	800baa0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba60:	2300      	movs	r3, #0
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	2300      	movs	r3, #0
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	2100      	movs	r1, #0
 800ba6a:	6978      	ldr	r0, [r7, #20]
 800ba6c:	f7ff ff88 	bl	800b980 <xTimerGenericCommand>
 800ba70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d113      	bne.n	800baa0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ba78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7c:	f383 8811 	msr	BASEPRI, r3
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	60fb      	str	r3, [r7, #12]
}
 800ba8a:	bf00      	nop
 800ba8c:	e7fe      	b.n	800ba8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba94:	f023 0301 	bic.w	r3, r3, #1
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	6a1b      	ldr	r3, [r3, #32]
 800baa4:	6978      	ldr	r0, [r7, #20]
 800baa6:	4798      	blx	r3
}
 800baa8:	bf00      	nop
 800baaa:	3718      	adds	r7, #24
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	200015d8 	.word	0x200015d8

0800bab4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800babc:	f107 0308 	add.w	r3, r7, #8
 800bac0:	4618      	mov	r0, r3
 800bac2:	f000 f857 	bl	800bb74 <prvGetNextExpireTime>
 800bac6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	4619      	mov	r1, r3
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f000 f803 	bl	800bad8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bad2:	f000 f8d5 	bl	800bc80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bad6:	e7f1      	b.n	800babc <prvTimerTask+0x8>

0800bad8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bae2:	f7ff fa39 	bl	800af58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bae6:	f107 0308 	add.w	r3, r7, #8
 800baea:	4618      	mov	r0, r3
 800baec:	f000 f866 	bl	800bbbc <prvSampleTimeNow>
 800baf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d130      	bne.n	800bb5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10a      	bne.n	800bb14 <prvProcessTimerOrBlockTask+0x3c>
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d806      	bhi.n	800bb14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb06:	f7ff fa35 	bl	800af74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb0a:	68f9      	ldr	r1, [r7, #12]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7ff ff85 	bl	800ba1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb12:	e024      	b.n	800bb5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d008      	beq.n	800bb2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb1a:	4b13      	ldr	r3, [pc, #76]	; (800bb68 <prvProcessTimerOrBlockTask+0x90>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d101      	bne.n	800bb28 <prvProcessTimerOrBlockTask+0x50>
 800bb24:	2301      	movs	r3, #1
 800bb26:	e000      	b.n	800bb2a <prvProcessTimerOrBlockTask+0x52>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb2c:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <prvProcessTimerOrBlockTask+0x94>)
 800bb2e:	6818      	ldr	r0, [r3, #0]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	f7fe ff7d 	bl	800aa38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb3e:	f7ff fa19 	bl	800af74 <xTaskResumeAll>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10a      	bne.n	800bb5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb48:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <prvProcessTimerOrBlockTask+0x98>)
 800bb4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	f3bf 8f6f 	isb	sy
}
 800bb58:	e001      	b.n	800bb5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb5a:	f7ff fa0b 	bl	800af74 <xTaskResumeAll>
}
 800bb5e:	bf00      	nop
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	200015dc 	.word	0x200015dc
 800bb6c:	200015e0 	.word	0x200015e0
 800bb70:	e000ed04 	.word	0xe000ed04

0800bb74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb7c:	4b0e      	ldr	r3, [pc, #56]	; (800bbb8 <prvGetNextExpireTime+0x44>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <prvGetNextExpireTime+0x16>
 800bb86:	2201      	movs	r2, #1
 800bb88:	e000      	b.n	800bb8c <prvGetNextExpireTime+0x18>
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d105      	bne.n	800bba4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb98:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <prvGetNextExpireTime+0x44>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	60fb      	str	r3, [r7, #12]
 800bba2:	e001      	b.n	800bba8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bba4:	2300      	movs	r3, #0
 800bba6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bba8:	68fb      	ldr	r3, [r7, #12]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	200015d8 	.word	0x200015d8

0800bbbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbc4:	f7ff fa74 	bl	800b0b0 <xTaskGetTickCount>
 800bbc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbca:	4b0b      	ldr	r3, [pc, #44]	; (800bbf8 <prvSampleTimeNow+0x3c>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d205      	bcs.n	800bbe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbd4:	f000 f936 	bl	800be44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	e002      	b.n	800bbe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbe6:	4a04      	ldr	r2, [pc, #16]	; (800bbf8 <prvSampleTimeNow+0x3c>)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bbec:	68fb      	ldr	r3, [r7, #12]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	200015e8 	.word	0x200015e8

0800bbfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d812      	bhi.n	800bc48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	1ad2      	subs	r2, r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d302      	bcc.n	800bc36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc30:	2301      	movs	r3, #1
 800bc32:	617b      	str	r3, [r7, #20]
 800bc34:	e01b      	b.n	800bc6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc36:	4b10      	ldr	r3, [pc, #64]	; (800bc78 <prvInsertTimerInActiveList+0x7c>)
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	4619      	mov	r1, r3
 800bc40:	4610      	mov	r0, r2
 800bc42:	f7fe f9de 	bl	800a002 <vListInsert>
 800bc46:	e012      	b.n	800bc6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d206      	bcs.n	800bc5e <prvInsertTimerInActiveList+0x62>
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d302      	bcc.n	800bc5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	617b      	str	r3, [r7, #20]
 800bc5c:	e007      	b.n	800bc6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc5e:	4b07      	ldr	r3, [pc, #28]	; (800bc7c <prvInsertTimerInActiveList+0x80>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	3304      	adds	r3, #4
 800bc66:	4619      	mov	r1, r3
 800bc68:	4610      	mov	r0, r2
 800bc6a:	f7fe f9ca 	bl	800a002 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc6e:	697b      	ldr	r3, [r7, #20]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3718      	adds	r7, #24
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	200015dc 	.word	0x200015dc
 800bc7c:	200015d8 	.word	0x200015d8

0800bc80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08e      	sub	sp, #56	; 0x38
 800bc84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc86:	e0ca      	b.n	800be1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	da18      	bge.n	800bcc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc8e:	1d3b      	adds	r3, r7, #4
 800bc90:	3304      	adds	r3, #4
 800bc92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10a      	bne.n	800bcb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	61fb      	str	r3, [r7, #28]
}
 800bcac:	bf00      	nop
 800bcae:	e7fe      	b.n	800bcae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcb6:	6850      	ldr	r0, [r2, #4]
 800bcb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcba:	6892      	ldr	r2, [r2, #8]
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f2c0 80aa 	blt.w	800be1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcce:	695b      	ldr	r3, [r3, #20]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d004      	beq.n	800bcde <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	3304      	adds	r3, #4
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe f9cb 	bl	800a074 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcde:	463b      	mov	r3, r7
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7ff ff6b 	bl	800bbbc <prvSampleTimeNow>
 800bce6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b09      	cmp	r3, #9
 800bcec:	f200 8097 	bhi.w	800be1e <prvProcessReceivedCommands+0x19e>
 800bcf0:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <prvProcessReceivedCommands+0x78>)
 800bcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf6:	bf00      	nop
 800bcf8:	0800bd21 	.word	0x0800bd21
 800bcfc:	0800bd21 	.word	0x0800bd21
 800bd00:	0800bd21 	.word	0x0800bd21
 800bd04:	0800bd95 	.word	0x0800bd95
 800bd08:	0800bda9 	.word	0x0800bda9
 800bd0c:	0800bdf3 	.word	0x0800bdf3
 800bd10:	0800bd21 	.word	0x0800bd21
 800bd14:	0800bd21 	.word	0x0800bd21
 800bd18:	0800bd95 	.word	0x0800bd95
 800bd1c:	0800bda9 	.word	0x0800bda9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd26:	f043 0301 	orr.w	r3, r3, #1
 800bd2a:	b2da      	uxtb	r2, r3
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	18d1      	adds	r1, r2, r3
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd40:	f7ff ff5c 	bl	800bbfc <prvInsertTimerInActiveList>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d069      	beq.n	800be1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd58:	f003 0304 	and.w	r3, r3, #4
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d05e      	beq.n	800be1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	699b      	ldr	r3, [r3, #24]
 800bd66:	441a      	add	r2, r3
 800bd68:	2300      	movs	r3, #0
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	2100      	movs	r1, #0
 800bd70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd72:	f7ff fe05 	bl	800b980 <xTimerGenericCommand>
 800bd76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd78:	6a3b      	ldr	r3, [r7, #32]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d14f      	bne.n	800be1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	61bb      	str	r3, [r7, #24]
}
 800bd90:	bf00      	nop
 800bd92:	e7fe      	b.n	800bd92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd9a:	f023 0301 	bic.w	r3, r3, #1
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bda6:	e03a      	b.n	800be1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdae:	f043 0301 	orr.w	r3, r3, #1
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	617b      	str	r3, [r7, #20]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde0:	699a      	ldr	r2, [r3, #24]
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	18d1      	adds	r1, r2, r3
 800bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdec:	f7ff ff06 	bl	800bbfc <prvInsertTimerInActiveList>
					break;
 800bdf0:	e015      	b.n	800be1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdf8:	f003 0302 	and.w	r3, r3, #2
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d103      	bne.n	800be08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800be00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be02:	f000 fbdd 	bl	800c5c0 <vPortFree>
 800be06:	e00a      	b.n	800be1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be0e:	f023 0301 	bic.w	r3, r3, #1
 800be12:	b2da      	uxtb	r2, r3
 800be14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be1a:	e000      	b.n	800be1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800be1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be1e:	4b08      	ldr	r3, [pc, #32]	; (800be40 <prvProcessReceivedCommands+0x1c0>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	1d39      	adds	r1, r7, #4
 800be24:	2200      	movs	r2, #0
 800be26:	4618      	mov	r0, r3
 800be28:	f7fe fbec 	bl	800a604 <xQueueReceive>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f47f af2a 	bne.w	800bc88 <prvProcessReceivedCommands+0x8>
	}
}
 800be34:	bf00      	nop
 800be36:	bf00      	nop
 800be38:	3730      	adds	r7, #48	; 0x30
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	200015e0 	.word	0x200015e0

0800be44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b088      	sub	sp, #32
 800be48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be4a:	e048      	b.n	800bede <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be4c:	4b2d      	ldr	r3, [pc, #180]	; (800bf04 <prvSwitchTimerLists+0xc0>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be56:	4b2b      	ldr	r3, [pc, #172]	; (800bf04 <prvSwitchTimerLists+0xc0>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	3304      	adds	r3, #4
 800be64:	4618      	mov	r0, r3
 800be66:	f7fe f905 	bl	800a074 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6a1b      	ldr	r3, [r3, #32]
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be78:	f003 0304 	and.w	r3, r3, #4
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d02e      	beq.n	800bede <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	4413      	add	r3, r2
 800be88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d90e      	bls.n	800beb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be9e:	4b19      	ldr	r3, [pc, #100]	; (800bf04 <prvSwitchTimerLists+0xc0>)
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3304      	adds	r3, #4
 800bea6:	4619      	mov	r1, r3
 800bea8:	4610      	mov	r0, r2
 800beaa:	f7fe f8aa 	bl	800a002 <vListInsert>
 800beae:	e016      	b.n	800bede <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800beb0:	2300      	movs	r3, #0
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	2300      	movs	r3, #0
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	2100      	movs	r1, #0
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f7ff fd60 	bl	800b980 <xTimerGenericCommand>
 800bec0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10a      	bne.n	800bede <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	603b      	str	r3, [r7, #0]
}
 800beda:	bf00      	nop
 800bedc:	e7fe      	b.n	800bedc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bede:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <prvSwitchTimerLists+0xc0>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1b1      	bne.n	800be4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bee8:	4b06      	ldr	r3, [pc, #24]	; (800bf04 <prvSwitchTimerLists+0xc0>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800beee:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <prvSwitchTimerLists+0xc4>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a04      	ldr	r2, [pc, #16]	; (800bf04 <prvSwitchTimerLists+0xc0>)
 800bef4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bef6:	4a04      	ldr	r2, [pc, #16]	; (800bf08 <prvSwitchTimerLists+0xc4>)
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	6013      	str	r3, [r2, #0]
}
 800befc:	bf00      	nop
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	200015d8 	.word	0x200015d8
 800bf08:	200015dc 	.word	0x200015dc

0800bf0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf12:	f000 f967 	bl	800c1e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf16:	4b15      	ldr	r3, [pc, #84]	; (800bf6c <prvCheckForValidListAndQueue+0x60>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d120      	bne.n	800bf60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf1e:	4814      	ldr	r0, [pc, #80]	; (800bf70 <prvCheckForValidListAndQueue+0x64>)
 800bf20:	f7fe f81e 	bl	8009f60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf24:	4813      	ldr	r0, [pc, #76]	; (800bf74 <prvCheckForValidListAndQueue+0x68>)
 800bf26:	f7fe f81b 	bl	8009f60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf2a:	4b13      	ldr	r3, [pc, #76]	; (800bf78 <prvCheckForValidListAndQueue+0x6c>)
 800bf2c:	4a10      	ldr	r2, [pc, #64]	; (800bf70 <prvCheckForValidListAndQueue+0x64>)
 800bf2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf30:	4b12      	ldr	r3, [pc, #72]	; (800bf7c <prvCheckForValidListAndQueue+0x70>)
 800bf32:	4a10      	ldr	r2, [pc, #64]	; (800bf74 <prvCheckForValidListAndQueue+0x68>)
 800bf34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf36:	2300      	movs	r3, #0
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	4b11      	ldr	r3, [pc, #68]	; (800bf80 <prvCheckForValidListAndQueue+0x74>)
 800bf3c:	4a11      	ldr	r2, [pc, #68]	; (800bf84 <prvCheckForValidListAndQueue+0x78>)
 800bf3e:	2110      	movs	r1, #16
 800bf40:	200a      	movs	r0, #10
 800bf42:	f7fe f929 	bl	800a198 <xQueueGenericCreateStatic>
 800bf46:	4603      	mov	r3, r0
 800bf48:	4a08      	ldr	r2, [pc, #32]	; (800bf6c <prvCheckForValidListAndQueue+0x60>)
 800bf4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf4c:	4b07      	ldr	r3, [pc, #28]	; (800bf6c <prvCheckForValidListAndQueue+0x60>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d005      	beq.n	800bf60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf54:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <prvCheckForValidListAndQueue+0x60>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	490b      	ldr	r1, [pc, #44]	; (800bf88 <prvCheckForValidListAndQueue+0x7c>)
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fe fd42 	bl	800a9e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf60:	f000 f970 	bl	800c244 <vPortExitCritical>
}
 800bf64:	bf00      	nop
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	200015e0 	.word	0x200015e0
 800bf70:	200015b0 	.word	0x200015b0
 800bf74:	200015c4 	.word	0x200015c4
 800bf78:	200015d8 	.word	0x200015d8
 800bf7c:	200015dc 	.word	0x200015dc
 800bf80:	2000168c 	.word	0x2000168c
 800bf84:	200015ec 	.word	0x200015ec
 800bf88:	0801159c 	.word	0x0801159c

0800bf8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3b04      	subs	r3, #4
 800bf9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bfa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3b04      	subs	r3, #4
 800bfaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	f023 0201 	bic.w	r2, r3, #1
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3b04      	subs	r3, #4
 800bfba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfbc:	4a0c      	ldr	r2, [pc, #48]	; (800bff0 <pxPortInitialiseStack+0x64>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3b14      	subs	r3, #20
 800bfc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3b04      	subs	r3, #4
 800bfd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f06f 0202 	mvn.w	r2, #2
 800bfda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3b20      	subs	r3, #32
 800bfe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	0800bff5 	.word	0x0800bff5

0800bff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bffe:	4b12      	ldr	r3, [pc, #72]	; (800c048 <prvTaskExitError+0x54>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c006:	d00a      	beq.n	800c01e <prvTaskExitError+0x2a>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	60fb      	str	r3, [r7, #12]
}
 800c01a:	bf00      	nop
 800c01c:	e7fe      	b.n	800c01c <prvTaskExitError+0x28>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	60bb      	str	r3, [r7, #8]
}
 800c030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c032:	bf00      	nop
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d0fc      	beq.n	800c034 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c03a:	bf00      	nop
 800c03c:	bf00      	nop
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	20000098 	.word	0x20000098
 800c04c:	00000000 	.word	0x00000000

0800c050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c050:	4b07      	ldr	r3, [pc, #28]	; (800c070 <pxCurrentTCBConst2>)
 800c052:	6819      	ldr	r1, [r3, #0]
 800c054:	6808      	ldr	r0, [r1, #0]
 800c056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05a:	f380 8809 	msr	PSP, r0
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f04f 0000 	mov.w	r0, #0
 800c066:	f380 8811 	msr	BASEPRI, r0
 800c06a:	4770      	bx	lr
 800c06c:	f3af 8000 	nop.w

0800c070 <pxCurrentTCBConst2>:
 800c070:	200010b0 	.word	0x200010b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop

0800c078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c078:	4808      	ldr	r0, [pc, #32]	; (800c09c <prvPortStartFirstTask+0x24>)
 800c07a:	6800      	ldr	r0, [r0, #0]
 800c07c:	6800      	ldr	r0, [r0, #0]
 800c07e:	f380 8808 	msr	MSP, r0
 800c082:	f04f 0000 	mov.w	r0, #0
 800c086:	f380 8814 	msr	CONTROL, r0
 800c08a:	b662      	cpsie	i
 800c08c:	b661      	cpsie	f
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	f3bf 8f6f 	isb	sy
 800c096:	df00      	svc	0
 800c098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c09a:	bf00      	nop
 800c09c:	e000ed08 	.word	0xe000ed08

0800c0a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0a6:	4b46      	ldr	r3, [pc, #280]	; (800c1c0 <xPortStartScheduler+0x120>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a46      	ldr	r2, [pc, #280]	; (800c1c4 <xPortStartScheduler+0x124>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d10a      	bne.n	800c0c6 <xPortStartScheduler+0x26>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	613b      	str	r3, [r7, #16]
}
 800c0c2:	bf00      	nop
 800c0c4:	e7fe      	b.n	800c0c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0c6:	4b3e      	ldr	r3, [pc, #248]	; (800c1c0 <xPortStartScheduler+0x120>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a3f      	ldr	r2, [pc, #252]	; (800c1c8 <xPortStartScheduler+0x128>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d10a      	bne.n	800c0e6 <xPortStartScheduler+0x46>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	60fb      	str	r3, [r7, #12]
}
 800c0e2:	bf00      	nop
 800c0e4:	e7fe      	b.n	800c0e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0e6:	4b39      	ldr	r3, [pc, #228]	; (800c1cc <xPortStartScheduler+0x12c>)
 800c0e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	22ff      	movs	r2, #255	; 0xff
 800c0f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c100:	78fb      	ldrb	r3, [r7, #3]
 800c102:	b2db      	uxtb	r3, r3
 800c104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c108:	b2da      	uxtb	r2, r3
 800c10a:	4b31      	ldr	r3, [pc, #196]	; (800c1d0 <xPortStartScheduler+0x130>)
 800c10c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c10e:	4b31      	ldr	r3, [pc, #196]	; (800c1d4 <xPortStartScheduler+0x134>)
 800c110:	2207      	movs	r2, #7
 800c112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c114:	e009      	b.n	800c12a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c116:	4b2f      	ldr	r3, [pc, #188]	; (800c1d4 <xPortStartScheduler+0x134>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3b01      	subs	r3, #1
 800c11c:	4a2d      	ldr	r2, [pc, #180]	; (800c1d4 <xPortStartScheduler+0x134>)
 800c11e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c120:	78fb      	ldrb	r3, [r7, #3]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	005b      	lsls	r3, r3, #1
 800c126:	b2db      	uxtb	r3, r3
 800c128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c12a:	78fb      	ldrb	r3, [r7, #3]
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c132:	2b80      	cmp	r3, #128	; 0x80
 800c134:	d0ef      	beq.n	800c116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c136:	4b27      	ldr	r3, [pc, #156]	; (800c1d4 <xPortStartScheduler+0x134>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f1c3 0307 	rsb	r3, r3, #7
 800c13e:	2b04      	cmp	r3, #4
 800c140:	d00a      	beq.n	800c158 <xPortStartScheduler+0xb8>
	__asm volatile
 800c142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	60bb      	str	r3, [r7, #8]
}
 800c154:	bf00      	nop
 800c156:	e7fe      	b.n	800c156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c158:	4b1e      	ldr	r3, [pc, #120]	; (800c1d4 <xPortStartScheduler+0x134>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	021b      	lsls	r3, r3, #8
 800c15e:	4a1d      	ldr	r2, [pc, #116]	; (800c1d4 <xPortStartScheduler+0x134>)
 800c160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c162:	4b1c      	ldr	r3, [pc, #112]	; (800c1d4 <xPortStartScheduler+0x134>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c16a:	4a1a      	ldr	r2, [pc, #104]	; (800c1d4 <xPortStartScheduler+0x134>)
 800c16c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	b2da      	uxtb	r2, r3
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c176:	4b18      	ldr	r3, [pc, #96]	; (800c1d8 <xPortStartScheduler+0x138>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a17      	ldr	r2, [pc, #92]	; (800c1d8 <xPortStartScheduler+0x138>)
 800c17c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c182:	4b15      	ldr	r3, [pc, #84]	; (800c1d8 <xPortStartScheduler+0x138>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a14      	ldr	r2, [pc, #80]	; (800c1d8 <xPortStartScheduler+0x138>)
 800c188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c18c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c18e:	f000 f8dd 	bl	800c34c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c192:	4b12      	ldr	r3, [pc, #72]	; (800c1dc <xPortStartScheduler+0x13c>)
 800c194:	2200      	movs	r2, #0
 800c196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c198:	f000 f8fc 	bl	800c394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c19c:	4b10      	ldr	r3, [pc, #64]	; (800c1e0 <xPortStartScheduler+0x140>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a0f      	ldr	r2, [pc, #60]	; (800c1e0 <xPortStartScheduler+0x140>)
 800c1a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c1a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1a8:	f7ff ff66 	bl	800c078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1ac:	f7ff f84a 	bl	800b244 <vTaskSwitchContext>
	prvTaskExitError();
 800c1b0:	f7ff ff20 	bl	800bff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	e000ed00 	.word	0xe000ed00
 800c1c4:	410fc271 	.word	0x410fc271
 800c1c8:	410fc270 	.word	0x410fc270
 800c1cc:	e000e400 	.word	0xe000e400
 800c1d0:	200016dc 	.word	0x200016dc
 800c1d4:	200016e0 	.word	0x200016e0
 800c1d8:	e000ed20 	.word	0xe000ed20
 800c1dc:	20000098 	.word	0x20000098
 800c1e0:	e000ef34 	.word	0xe000ef34

0800c1e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
	__asm volatile
 800c1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ee:	f383 8811 	msr	BASEPRI, r3
 800c1f2:	f3bf 8f6f 	isb	sy
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	607b      	str	r3, [r7, #4]
}
 800c1fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1fe:	4b0f      	ldr	r3, [pc, #60]	; (800c23c <vPortEnterCritical+0x58>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	3301      	adds	r3, #1
 800c204:	4a0d      	ldr	r2, [pc, #52]	; (800c23c <vPortEnterCritical+0x58>)
 800c206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c208:	4b0c      	ldr	r3, [pc, #48]	; (800c23c <vPortEnterCritical+0x58>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d10f      	bne.n	800c230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c210:	4b0b      	ldr	r3, [pc, #44]	; (800c240 <vPortEnterCritical+0x5c>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00a      	beq.n	800c230 <vPortEnterCritical+0x4c>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	603b      	str	r3, [r7, #0]
}
 800c22c:	bf00      	nop
 800c22e:	e7fe      	b.n	800c22e <vPortEnterCritical+0x4a>
	}
}
 800c230:	bf00      	nop
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	20000098 	.word	0x20000098
 800c240:	e000ed04 	.word	0xe000ed04

0800c244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c24a:	4b12      	ldr	r3, [pc, #72]	; (800c294 <vPortExitCritical+0x50>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10a      	bne.n	800c268 <vPortExitCritical+0x24>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	607b      	str	r3, [r7, #4]
}
 800c264:	bf00      	nop
 800c266:	e7fe      	b.n	800c266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c268:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <vPortExitCritical+0x50>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	3b01      	subs	r3, #1
 800c26e:	4a09      	ldr	r2, [pc, #36]	; (800c294 <vPortExitCritical+0x50>)
 800c270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c272:	4b08      	ldr	r3, [pc, #32]	; (800c294 <vPortExitCritical+0x50>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d105      	bne.n	800c286 <vPortExitCritical+0x42>
 800c27a:	2300      	movs	r3, #0
 800c27c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	f383 8811 	msr	BASEPRI, r3
}
 800c284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c286:	bf00      	nop
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	20000098 	.word	0x20000098
	...

0800c2a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2a0:	f3ef 8009 	mrs	r0, PSP
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	4b15      	ldr	r3, [pc, #84]	; (800c300 <pxCurrentTCBConst>)
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	f01e 0f10 	tst.w	lr, #16
 800c2b0:	bf08      	it	eq
 800c2b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ba:	6010      	str	r0, [r2, #0]
 800c2bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2c4:	f380 8811 	msr	BASEPRI, r0
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f7fe ffb8 	bl	800b244 <vTaskSwitchContext>
 800c2d4:	f04f 0000 	mov.w	r0, #0
 800c2d8:	f380 8811 	msr	BASEPRI, r0
 800c2dc:	bc09      	pop	{r0, r3}
 800c2de:	6819      	ldr	r1, [r3, #0]
 800c2e0:	6808      	ldr	r0, [r1, #0]
 800c2e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e6:	f01e 0f10 	tst.w	lr, #16
 800c2ea:	bf08      	it	eq
 800c2ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c2f0:	f380 8809 	msr	PSP, r0
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	f3af 8000 	nop.w

0800c300 <pxCurrentTCBConst>:
 800c300:	200010b0 	.word	0x200010b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop

0800c308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	607b      	str	r3, [r7, #4]
}
 800c320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c322:	f7fe fed5 	bl	800b0d0 <xTaskIncrementTick>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d003      	beq.n	800c334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c32c:	4b06      	ldr	r3, [pc, #24]	; (800c348 <xPortSysTickHandler+0x40>)
 800c32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	2300      	movs	r3, #0
 800c336:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	f383 8811 	msr	BASEPRI, r3
}
 800c33e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	e000ed04 	.word	0xe000ed04

0800c34c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c34c:	b480      	push	{r7}
 800c34e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c350:	4b0b      	ldr	r3, [pc, #44]	; (800c380 <vPortSetupTimerInterrupt+0x34>)
 800c352:	2200      	movs	r2, #0
 800c354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c356:	4b0b      	ldr	r3, [pc, #44]	; (800c384 <vPortSetupTimerInterrupt+0x38>)
 800c358:	2200      	movs	r2, #0
 800c35a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c35c:	4b0a      	ldr	r3, [pc, #40]	; (800c388 <vPortSetupTimerInterrupt+0x3c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a0a      	ldr	r2, [pc, #40]	; (800c38c <vPortSetupTimerInterrupt+0x40>)
 800c362:	fba2 2303 	umull	r2, r3, r2, r3
 800c366:	099b      	lsrs	r3, r3, #6
 800c368:	4a09      	ldr	r2, [pc, #36]	; (800c390 <vPortSetupTimerInterrupt+0x44>)
 800c36a:	3b01      	subs	r3, #1
 800c36c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c36e:	4b04      	ldr	r3, [pc, #16]	; (800c380 <vPortSetupTimerInterrupt+0x34>)
 800c370:	2207      	movs	r2, #7
 800c372:	601a      	str	r2, [r3, #0]
}
 800c374:	bf00      	nop
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	e000e010 	.word	0xe000e010
 800c384:	e000e018 	.word	0xe000e018
 800c388:	20000000 	.word	0x20000000
 800c38c:	10624dd3 	.word	0x10624dd3
 800c390:	e000e014 	.word	0xe000e014

0800c394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c3a4 <vPortEnableVFP+0x10>
 800c398:	6801      	ldr	r1, [r0, #0]
 800c39a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c39e:	6001      	str	r1, [r0, #0]
 800c3a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c3a2:	bf00      	nop
 800c3a4:	e000ed88 	.word	0xe000ed88

0800c3a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c3ae:	f3ef 8305 	mrs	r3, IPSR
 800c3b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2b0f      	cmp	r3, #15
 800c3b8:	d914      	bls.n	800c3e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3ba:	4a17      	ldr	r2, [pc, #92]	; (800c418 <vPortValidateInterruptPriority+0x70>)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	4413      	add	r3, r2
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3c4:	4b15      	ldr	r3, [pc, #84]	; (800c41c <vPortValidateInterruptPriority+0x74>)
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	7afa      	ldrb	r2, [r7, #11]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d20a      	bcs.n	800c3e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	607b      	str	r3, [r7, #4]
}
 800c3e0:	bf00      	nop
 800c3e2:	e7fe      	b.n	800c3e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3e4:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <vPortValidateInterruptPriority+0x78>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c3ec:	4b0d      	ldr	r3, [pc, #52]	; (800c424 <vPortValidateInterruptPriority+0x7c>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d90a      	bls.n	800c40a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	603b      	str	r3, [r7, #0]
}
 800c406:	bf00      	nop
 800c408:	e7fe      	b.n	800c408 <vPortValidateInterruptPriority+0x60>
	}
 800c40a:	bf00      	nop
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	e000e3f0 	.word	0xe000e3f0
 800c41c:	200016dc 	.word	0x200016dc
 800c420:	e000ed0c 	.word	0xe000ed0c
 800c424:	200016e0 	.word	0x200016e0

0800c428 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08a      	sub	sp, #40	; 0x28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c430:	2300      	movs	r3, #0
 800c432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c434:	f7fe fd90 	bl	800af58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c438:	4b5b      	ldr	r3, [pc, #364]	; (800c5a8 <pvPortMalloc+0x180>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c440:	f000 f920 	bl	800c684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c444:	4b59      	ldr	r3, [pc, #356]	; (800c5ac <pvPortMalloc+0x184>)
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4013      	ands	r3, r2
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f040 8093 	bne.w	800c578 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d01d      	beq.n	800c494 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c458:	2208      	movs	r2, #8
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4413      	add	r3, r2
 800c45e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f003 0307 	and.w	r3, r3, #7
 800c466:	2b00      	cmp	r3, #0
 800c468:	d014      	beq.n	800c494 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f023 0307 	bic.w	r3, r3, #7
 800c470:	3308      	adds	r3, #8
 800c472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f003 0307 	and.w	r3, r3, #7
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00a      	beq.n	800c494 <pvPortMalloc+0x6c>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	617b      	str	r3, [r7, #20]
}
 800c490:	bf00      	nop
 800c492:	e7fe      	b.n	800c492 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d06e      	beq.n	800c578 <pvPortMalloc+0x150>
 800c49a:	4b45      	ldr	r3, [pc, #276]	; (800c5b0 <pvPortMalloc+0x188>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d869      	bhi.n	800c578 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4a4:	4b43      	ldr	r3, [pc, #268]	; (800c5b4 <pvPortMalloc+0x18c>)
 800c4a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4a8:	4b42      	ldr	r3, [pc, #264]	; (800c5b4 <pvPortMalloc+0x18c>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4ae:	e004      	b.n	800c4ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d903      	bls.n	800c4cc <pvPortMalloc+0xa4>
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1f1      	bne.n	800c4b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4cc:	4b36      	ldr	r3, [pc, #216]	; (800c5a8 <pvPortMalloc+0x180>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d050      	beq.n	800c578 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4d6:	6a3b      	ldr	r3, [r7, #32]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2208      	movs	r2, #8
 800c4dc:	4413      	add	r3, r2
 800c4de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	6a3b      	ldr	r3, [r7, #32]
 800c4e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	1ad2      	subs	r2, r2, r3
 800c4f0:	2308      	movs	r3, #8
 800c4f2:	005b      	lsls	r3, r3, #1
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d91f      	bls.n	800c538 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	f003 0307 	and.w	r3, r3, #7
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00a      	beq.n	800c520 <pvPortMalloc+0xf8>
	__asm volatile
 800c50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	613b      	str	r3, [r7, #16]
}
 800c51c:	bf00      	nop
 800c51e:	e7fe      	b.n	800c51e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	1ad2      	subs	r2, r2, r3
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c532:	69b8      	ldr	r0, [r7, #24]
 800c534:	f000 f908 	bl	800c748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c538:	4b1d      	ldr	r3, [pc, #116]	; (800c5b0 <pvPortMalloc+0x188>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	4a1b      	ldr	r2, [pc, #108]	; (800c5b0 <pvPortMalloc+0x188>)
 800c544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c546:	4b1a      	ldr	r3, [pc, #104]	; (800c5b0 <pvPortMalloc+0x188>)
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	4b1b      	ldr	r3, [pc, #108]	; (800c5b8 <pvPortMalloc+0x190>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d203      	bcs.n	800c55a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c552:	4b17      	ldr	r3, [pc, #92]	; (800c5b0 <pvPortMalloc+0x188>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a18      	ldr	r2, [pc, #96]	; (800c5b8 <pvPortMalloc+0x190>)
 800c558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55c:	685a      	ldr	r2, [r3, #4]
 800c55e:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <pvPortMalloc+0x184>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	431a      	orrs	r2, r3
 800c564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c56e:	4b13      	ldr	r3, [pc, #76]	; (800c5bc <pvPortMalloc+0x194>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3301      	adds	r3, #1
 800c574:	4a11      	ldr	r2, [pc, #68]	; (800c5bc <pvPortMalloc+0x194>)
 800c576:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c578:	f7fe fcfc 	bl	800af74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	f003 0307 	and.w	r3, r3, #7
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00a      	beq.n	800c59c <pvPortMalloc+0x174>
	__asm volatile
 800c586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58a:	f383 8811 	msr	BASEPRI, r3
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f3bf 8f4f 	dsb	sy
 800c596:	60fb      	str	r3, [r7, #12]
}
 800c598:	bf00      	nop
 800c59a:	e7fe      	b.n	800c59a <pvPortMalloc+0x172>
	return pvReturn;
 800c59c:	69fb      	ldr	r3, [r7, #28]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3728      	adds	r7, #40	; 0x28
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	200052ec 	.word	0x200052ec
 800c5ac:	20005300 	.word	0x20005300
 800c5b0:	200052f0 	.word	0x200052f0
 800c5b4:	200052e4 	.word	0x200052e4
 800c5b8:	200052f4 	.word	0x200052f4
 800c5bc:	200052f8 	.word	0x200052f8

0800c5c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d04d      	beq.n	800c66e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5d2:	2308      	movs	r3, #8
 800c5d4:	425b      	negs	r3, r3
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	4413      	add	r3, r2
 800c5da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	685a      	ldr	r2, [r3, #4]
 800c5e4:	4b24      	ldr	r3, [pc, #144]	; (800c678 <vPortFree+0xb8>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d10a      	bne.n	800c604 <vPortFree+0x44>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	60fb      	str	r3, [r7, #12]
}
 800c600:	bf00      	nop
 800c602:	e7fe      	b.n	800c602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00a      	beq.n	800c622 <vPortFree+0x62>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	60bb      	str	r3, [r7, #8]
}
 800c61e:	bf00      	nop
 800c620:	e7fe      	b.n	800c620 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	4b14      	ldr	r3, [pc, #80]	; (800c678 <vPortFree+0xb8>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4013      	ands	r3, r2
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d01e      	beq.n	800c66e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d11a      	bne.n	800c66e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	685a      	ldr	r2, [r3, #4]
 800c63c:	4b0e      	ldr	r3, [pc, #56]	; (800c678 <vPortFree+0xb8>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	43db      	mvns	r3, r3
 800c642:	401a      	ands	r2, r3
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c648:	f7fe fc86 	bl	800af58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	4b0a      	ldr	r3, [pc, #40]	; (800c67c <vPortFree+0xbc>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4413      	add	r3, r2
 800c656:	4a09      	ldr	r2, [pc, #36]	; (800c67c <vPortFree+0xbc>)
 800c658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c65a:	6938      	ldr	r0, [r7, #16]
 800c65c:	f000 f874 	bl	800c748 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c660:	4b07      	ldr	r3, [pc, #28]	; (800c680 <vPortFree+0xc0>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3301      	adds	r3, #1
 800c666:	4a06      	ldr	r2, [pc, #24]	; (800c680 <vPortFree+0xc0>)
 800c668:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c66a:	f7fe fc83 	bl	800af74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c66e:	bf00      	nop
 800c670:	3718      	adds	r7, #24
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20005300 	.word	0x20005300
 800c67c:	200052f0 	.word	0x200052f0
 800c680:	200052fc 	.word	0x200052fc

0800c684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c68a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c68e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c690:	4b27      	ldr	r3, [pc, #156]	; (800c730 <prvHeapInit+0xac>)
 800c692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f003 0307 	and.w	r3, r3, #7
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00c      	beq.n	800c6b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	3307      	adds	r3, #7
 800c6a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f023 0307 	bic.w	r3, r3, #7
 800c6aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	4a1f      	ldr	r2, [pc, #124]	; (800c730 <prvHeapInit+0xac>)
 800c6b4:	4413      	add	r3, r2
 800c6b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6bc:	4a1d      	ldr	r2, [pc, #116]	; (800c734 <prvHeapInit+0xb0>)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6c2:	4b1c      	ldr	r3, [pc, #112]	; (800c734 <prvHeapInit+0xb0>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6d0:	2208      	movs	r2, #8
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	1a9b      	subs	r3, r3, r2
 800c6d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f023 0307 	bic.w	r3, r3, #7
 800c6de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4a15      	ldr	r2, [pc, #84]	; (800c738 <prvHeapInit+0xb4>)
 800c6e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6e6:	4b14      	ldr	r3, [pc, #80]	; (800c738 <prvHeapInit+0xb4>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6ee:	4b12      	ldr	r3, [pc, #72]	; (800c738 <prvHeapInit+0xb4>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	1ad2      	subs	r2, r2, r3
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c704:	4b0c      	ldr	r3, [pc, #48]	; (800c738 <prvHeapInit+0xb4>)
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	4a0a      	ldr	r2, [pc, #40]	; (800c73c <prvHeapInit+0xb8>)
 800c712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	4a09      	ldr	r2, [pc, #36]	; (800c740 <prvHeapInit+0xbc>)
 800c71a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c71c:	4b09      	ldr	r3, [pc, #36]	; (800c744 <prvHeapInit+0xc0>)
 800c71e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c722:	601a      	str	r2, [r3, #0]
}
 800c724:	bf00      	nop
 800c726:	3714      	adds	r7, #20
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr
 800c730:	200016e4 	.word	0x200016e4
 800c734:	200052e4 	.word	0x200052e4
 800c738:	200052ec 	.word	0x200052ec
 800c73c:	200052f4 	.word	0x200052f4
 800c740:	200052f0 	.word	0x200052f0
 800c744:	20005300 	.word	0x20005300

0800c748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c750:	4b28      	ldr	r3, [pc, #160]	; (800c7f4 <prvInsertBlockIntoFreeList+0xac>)
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	e002      	b.n	800c75c <prvInsertBlockIntoFreeList+0x14>
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	429a      	cmp	r2, r3
 800c764:	d8f7      	bhi.n	800c756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	4413      	add	r3, r2
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	429a      	cmp	r2, r3
 800c776:	d108      	bne.n	800c78a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	441a      	add	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	68ba      	ldr	r2, [r7, #8]
 800c794:	441a      	add	r2, r3
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d118      	bne.n	800c7d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	4b15      	ldr	r3, [pc, #84]	; (800c7f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d00d      	beq.n	800c7c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	441a      	add	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	e008      	b.n	800c7d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7c6:	4b0c      	ldr	r3, [pc, #48]	; (800c7f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	601a      	str	r2, [r3, #0]
 800c7ce:	e003      	b.n	800c7d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d002      	beq.n	800c7e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7e6:	bf00      	nop
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	200052e4 	.word	0x200052e4
 800c7f8:	200052ec 	.word	0x200052ec

0800c7fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c800:	2200      	movs	r2, #0
 800c802:	4912      	ldr	r1, [pc, #72]	; (800c84c <MX_USB_DEVICE_Init+0x50>)
 800c804:	4812      	ldr	r0, [pc, #72]	; (800c850 <MX_USB_DEVICE_Init+0x54>)
 800c806:	f7fb ff2f 	bl	8008668 <USBD_Init>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c810:	f7f5 f8a2 	bl	8001958 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c814:	490f      	ldr	r1, [pc, #60]	; (800c854 <MX_USB_DEVICE_Init+0x58>)
 800c816:	480e      	ldr	r0, [pc, #56]	; (800c850 <MX_USB_DEVICE_Init+0x54>)
 800c818:	f7fb ff56 	bl	80086c8 <USBD_RegisterClass>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c822:	f7f5 f899 	bl	8001958 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c826:	490c      	ldr	r1, [pc, #48]	; (800c858 <MX_USB_DEVICE_Init+0x5c>)
 800c828:	4809      	ldr	r0, [pc, #36]	; (800c850 <MX_USB_DEVICE_Init+0x54>)
 800c82a:	f7fb fe47 	bl	80084bc <USBD_CDC_RegisterInterface>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c834:	f7f5 f890 	bl	8001958 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c838:	4805      	ldr	r0, [pc, #20]	; (800c850 <MX_USB_DEVICE_Init+0x54>)
 800c83a:	f7fb ff7b 	bl	8008734 <USBD_Start>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c844:	f7f5 f888 	bl	8001958 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c848:	bf00      	nop
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	200000b0 	.word	0x200000b0
 800c850:	20005304 	.word	0x20005304
 800c854:	20000018 	.word	0x20000018
 800c858:	2000009c 	.word	0x2000009c

0800c85c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c860:	2200      	movs	r2, #0
 800c862:	4905      	ldr	r1, [pc, #20]	; (800c878 <CDC_Init_FS+0x1c>)
 800c864:	4805      	ldr	r0, [pc, #20]	; (800c87c <CDC_Init_FS+0x20>)
 800c866:	f7fb fe43 	bl	80084f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c86a:	4905      	ldr	r1, [pc, #20]	; (800c880 <CDC_Init_FS+0x24>)
 800c86c:	4803      	ldr	r0, [pc, #12]	; (800c87c <CDC_Init_FS+0x20>)
 800c86e:	f7fb fe61 	bl	8008534 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c872:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c874:	4618      	mov	r0, r3
 800c876:	bd80      	pop	{r7, pc}
 800c878:	20005de0 	.word	0x20005de0
 800c87c:	20005304 	.word	0x20005304
 800c880:	200055e0 	.word	0x200055e0

0800c884 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c884:	b480      	push	{r7}
 800c886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c888:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	6039      	str	r1, [r7, #0]
 800c89e:	71fb      	strb	r3, [r7, #7]
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c8a4:	79fb      	ldrb	r3, [r7, #7]
 800c8a6:	2b23      	cmp	r3, #35	; 0x23
 800c8a8:	d84a      	bhi.n	800c940 <CDC_Control_FS+0xac>
 800c8aa:	a201      	add	r2, pc, #4	; (adr r2, 800c8b0 <CDC_Control_FS+0x1c>)
 800c8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b0:	0800c941 	.word	0x0800c941
 800c8b4:	0800c941 	.word	0x0800c941
 800c8b8:	0800c941 	.word	0x0800c941
 800c8bc:	0800c941 	.word	0x0800c941
 800c8c0:	0800c941 	.word	0x0800c941
 800c8c4:	0800c941 	.word	0x0800c941
 800c8c8:	0800c941 	.word	0x0800c941
 800c8cc:	0800c941 	.word	0x0800c941
 800c8d0:	0800c941 	.word	0x0800c941
 800c8d4:	0800c941 	.word	0x0800c941
 800c8d8:	0800c941 	.word	0x0800c941
 800c8dc:	0800c941 	.word	0x0800c941
 800c8e0:	0800c941 	.word	0x0800c941
 800c8e4:	0800c941 	.word	0x0800c941
 800c8e8:	0800c941 	.word	0x0800c941
 800c8ec:	0800c941 	.word	0x0800c941
 800c8f0:	0800c941 	.word	0x0800c941
 800c8f4:	0800c941 	.word	0x0800c941
 800c8f8:	0800c941 	.word	0x0800c941
 800c8fc:	0800c941 	.word	0x0800c941
 800c900:	0800c941 	.word	0x0800c941
 800c904:	0800c941 	.word	0x0800c941
 800c908:	0800c941 	.word	0x0800c941
 800c90c:	0800c941 	.word	0x0800c941
 800c910:	0800c941 	.word	0x0800c941
 800c914:	0800c941 	.word	0x0800c941
 800c918:	0800c941 	.word	0x0800c941
 800c91c:	0800c941 	.word	0x0800c941
 800c920:	0800c941 	.word	0x0800c941
 800c924:	0800c941 	.word	0x0800c941
 800c928:	0800c941 	.word	0x0800c941
 800c92c:	0800c941 	.word	0x0800c941
 800c930:	0800c941 	.word	0x0800c941
 800c934:	0800c941 	.word	0x0800c941
 800c938:	0800c941 	.word	0x0800c941
 800c93c:	0800c941 	.word	0x0800c941
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c940:	bf00      	nop
  }

  return (USBD_OK);
 800c942:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c944:	4618      	mov	r0, r3
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (receivedLength + *Len < BUFFER_SIZE_)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	4b1b      	ldr	r3, [pc, #108]	; (800c9cc <CDC_Receive_FS+0x7c>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4413      	add	r3, r2
 800c964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c968:	d21a      	bcs.n	800c9a0 <CDC_Receive_FS+0x50>
	    {
	        // Voeg de nieuwe ontvangen data toe aan de bestaande buffer
	        memcpy(&receivedData[receivedLength], Buf, *Len);  // Gebruik memcpy in plaats van strncat
 800c96a:	4b18      	ldr	r3, [pc, #96]	; (800c9cc <CDC_Receive_FS+0x7c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a18      	ldr	r2, [pc, #96]	; (800c9d0 <CDC_Receive_FS+0x80>)
 800c970:	1898      	adds	r0, r3, r2
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	6879      	ldr	r1, [r7, #4]
 800c97a:	f000 fe38 	bl	800d5ee <memcpy>
	        receivedLength += *Len;
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	4b12      	ldr	r3, [pc, #72]	; (800c9cc <CDC_Receive_FS+0x7c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4413      	add	r3, r2
 800c988:	4a10      	ldr	r2, [pc, #64]	; (800c9cc <CDC_Receive_FS+0x7c>)
 800c98a:	6013      	str	r3, [r2, #0]

	        // Controleer of er een newline of einde van bericht is ontvangen
	        if (strchr((char*)receivedData, '\n') != NULL)  // '\n' wordt als einde van bericht gezien
 800c98c:	210a      	movs	r1, #10
 800c98e:	4810      	ldr	r0, [pc, #64]	; (800c9d0 <CDC_Receive_FS+0x80>)
 800c990:	f001 f9f9 	bl	800dd86 <strchr>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00b      	beq.n	800c9b2 <CDC_Receive_FS+0x62>
	        {
	            // Verwerk het volledige bericht zodra het compleet is
	            CheckReceivedData();
 800c99a:	f7f4 fbcd 	bl	8001138 <CheckReceivedData>
 800c99e:	e008      	b.n	800c9b2 <CDC_Receive_FS+0x62>
	        }
	    }
	    else
	    {
	        // Buffer overflow, reset de buffer en geef een foutmelding
	        memset(receivedData, 0, BUFFER_SIZE_);
 800c9a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	480a      	ldr	r0, [pc, #40]	; (800c9d0 <CDC_Receive_FS+0x80>)
 800c9a8:	f000 fe2f 	bl	800d60a <memset>
	        receivedLength = 0;
 800c9ac:	4b07      	ldr	r3, [pc, #28]	; (800c9cc <CDC_Receive_FS+0x7c>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	601a      	str	r2, [r3, #0]
	    }

	    // Geef de USB stack opdracht om meer data te ontvangen
	    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c9b2:	6879      	ldr	r1, [r7, #4]
 800c9b4:	4807      	ldr	r0, [pc, #28]	; (800c9d4 <CDC_Receive_FS+0x84>)
 800c9b6:	f7fb fdbd 	bl	8008534 <USBD_CDC_SetRxBuffer>
	    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c9ba:	4806      	ldr	r0, [pc, #24]	; (800c9d4 <CDC_Receive_FS+0x84>)
 800c9bc:	f7fb fe1e 	bl	80085fc <USBD_CDC_ReceivePacket>

	    return (USBD_OK);
 800c9c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	20000880 	.word	0x20000880
 800c9d0:	20000480 	.word	0x20000480
 800c9d4:	20005304 	.word	0x20005304

0800c9d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  if ( huidig_status == STATUS_TEST_GESTART)
 800c9e8:	4b10      	ldr	r3, [pc, #64]	; (800ca2c <CDC_Transmit_FS+0x54>)
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	2b03      	cmp	r3, #3
 800c9ee:	d101      	bne.n	800c9f4 <CDC_Transmit_FS+0x1c>
  {
	  int a=1;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	613b      	str	r3, [r7, #16]
  }
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c9f4:	4b0e      	ldr	r3, [pc, #56]	; (800ca30 <CDC_Transmit_FS+0x58>)
 800c9f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9fa:	60fb      	str	r3, [r7, #12]
  if (hcdc->TxState != 0){
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <CDC_Transmit_FS+0x32>
    return USBD_BUSY;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e00b      	b.n	800ca22 <CDC_Transmit_FS+0x4a>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ca0a:	887b      	ldrh	r3, [r7, #2]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	6879      	ldr	r1, [r7, #4]
 800ca10:	4807      	ldr	r0, [pc, #28]	; (800ca30 <CDC_Transmit_FS+0x58>)
 800ca12:	f7fb fd6d 	bl	80084f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ca16:	4806      	ldr	r0, [pc, #24]	; (800ca30 <CDC_Transmit_FS+0x58>)
 800ca18:	f7fb fdaa 	bl	8008570 <USBD_CDC_TransmitPacket>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 7 */
  return result;
 800ca20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3718      	adds	r7, #24
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200008e4 	.word	0x200008e4
 800ca30:	20005304 	.word	0x20005304

0800ca34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b087      	sub	sp, #28
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ca42:	2300      	movs	r3, #0
 800ca44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ca46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	371c      	adds	r7, #28
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
	...

0800ca58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	6039      	str	r1, [r7, #0]
 800ca62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	2212      	movs	r2, #18
 800ca68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ca6a:	4b03      	ldr	r3, [pc, #12]	; (800ca78 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	200000d0 	.word	0x200000d0

0800ca7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	4603      	mov	r3, r0
 800ca84:	6039      	str	r1, [r7, #0]
 800ca86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	2204      	movs	r2, #4
 800ca8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca8e:	4b03      	ldr	r3, [pc, #12]	; (800ca9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	200000f0 	.word	0x200000f0

0800caa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	4603      	mov	r3, r0
 800caa8:	6039      	str	r1, [r7, #0]
 800caaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800caac:	79fb      	ldrb	r3, [r7, #7]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d105      	bne.n	800cabe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cab2:	683a      	ldr	r2, [r7, #0]
 800cab4:	4907      	ldr	r1, [pc, #28]	; (800cad4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cab6:	4808      	ldr	r0, [pc, #32]	; (800cad8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cab8:	f7fd f812 	bl	8009ae0 <USBD_GetString>
 800cabc:	e004      	b.n	800cac8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cabe:	683a      	ldr	r2, [r7, #0]
 800cac0:	4904      	ldr	r1, [pc, #16]	; (800cad4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cac2:	4805      	ldr	r0, [pc, #20]	; (800cad8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cac4:	f7fd f80c 	bl	8009ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cac8:	4b02      	ldr	r3, [pc, #8]	; (800cad4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	200065e0 	.word	0x200065e0
 800cad8:	080115a4 	.word	0x080115a4

0800cadc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	4603      	mov	r3, r0
 800cae4:	6039      	str	r1, [r7, #0]
 800cae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	4904      	ldr	r1, [pc, #16]	; (800cafc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800caec:	4804      	ldr	r0, [pc, #16]	; (800cb00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800caee:	f7fc fff7 	bl	8009ae0 <USBD_GetString>
  return USBD_StrDesc;
 800caf2:	4b02      	ldr	r3, [pc, #8]	; (800cafc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	200065e0 	.word	0x200065e0
 800cb00:	080115b4 	.word	0x080115b4

0800cb04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	6039      	str	r1, [r7, #0]
 800cb0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	221a      	movs	r2, #26
 800cb14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb16:	f000 f855 	bl	800cbc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb1a:	4b02      	ldr	r3, [pc, #8]	; (800cb24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	200000f4 	.word	0x200000f4

0800cb28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	6039      	str	r1, [r7, #0]
 800cb32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb34:	79fb      	ldrb	r3, [r7, #7]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d105      	bne.n	800cb46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb3a:	683a      	ldr	r2, [r7, #0]
 800cb3c:	4907      	ldr	r1, [pc, #28]	; (800cb5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb3e:	4808      	ldr	r0, [pc, #32]	; (800cb60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb40:	f7fc ffce 	bl	8009ae0 <USBD_GetString>
 800cb44:	e004      	b.n	800cb50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	4904      	ldr	r1, [pc, #16]	; (800cb5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb4a:	4805      	ldr	r0, [pc, #20]	; (800cb60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb4c:	f7fc ffc8 	bl	8009ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb50:	4b02      	ldr	r3, [pc, #8]	; (800cb5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	200065e0 	.word	0x200065e0
 800cb60:	080115c8 	.word	0x080115c8

0800cb64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	6039      	str	r1, [r7, #0]
 800cb6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb70:	79fb      	ldrb	r3, [r7, #7]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d105      	bne.n	800cb82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb76:	683a      	ldr	r2, [r7, #0]
 800cb78:	4907      	ldr	r1, [pc, #28]	; (800cb98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb7a:	4808      	ldr	r0, [pc, #32]	; (800cb9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb7c:	f7fc ffb0 	bl	8009ae0 <USBD_GetString>
 800cb80:	e004      	b.n	800cb8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	4904      	ldr	r1, [pc, #16]	; (800cb98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb86:	4805      	ldr	r0, [pc, #20]	; (800cb9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb88:	f7fc ffaa 	bl	8009ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb8c:	4b02      	ldr	r3, [pc, #8]	; (800cb98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	200065e0 	.word	0x200065e0
 800cb9c:	080115d4 	.word	0x080115d4

0800cba0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	6039      	str	r1, [r7, #0]
 800cbaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	220c      	movs	r2, #12
 800cbb0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cbb2:	4b03      	ldr	r3, [pc, #12]	; (800cbc0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	200000e4 	.word	0x200000e4

0800cbc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cbca:	4b0f      	ldr	r3, [pc, #60]	; (800cc08 <Get_SerialNum+0x44>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cbd0:	4b0e      	ldr	r3, [pc, #56]	; (800cc0c <Get_SerialNum+0x48>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cbd6:	4b0e      	ldr	r3, [pc, #56]	; (800cc10 <Get_SerialNum+0x4c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d009      	beq.n	800cbfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cbea:	2208      	movs	r2, #8
 800cbec:	4909      	ldr	r1, [pc, #36]	; (800cc14 <Get_SerialNum+0x50>)
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f000 f814 	bl	800cc1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cbf4:	2204      	movs	r2, #4
 800cbf6:	4908      	ldr	r1, [pc, #32]	; (800cc18 <Get_SerialNum+0x54>)
 800cbf8:	68b8      	ldr	r0, [r7, #8]
 800cbfa:	f000 f80f 	bl	800cc1c <IntToUnicode>
  }
}
 800cbfe:	bf00      	nop
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	1fff7a10 	.word	0x1fff7a10
 800cc0c:	1fff7a14 	.word	0x1fff7a14
 800cc10:	1fff7a18 	.word	0x1fff7a18
 800cc14:	200000f6 	.word	0x200000f6
 800cc18:	20000106 	.word	0x20000106

0800cc1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b087      	sub	sp, #28
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc2e:	2300      	movs	r3, #0
 800cc30:	75fb      	strb	r3, [r7, #23]
 800cc32:	e027      	b.n	800cc84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	0f1b      	lsrs	r3, r3, #28
 800cc38:	2b09      	cmp	r3, #9
 800cc3a:	d80b      	bhi.n	800cc54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	0f1b      	lsrs	r3, r3, #28
 800cc40:	b2da      	uxtb	r2, r3
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	4619      	mov	r1, r3
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	440b      	add	r3, r1
 800cc4c:	3230      	adds	r2, #48	; 0x30
 800cc4e:	b2d2      	uxtb	r2, r2
 800cc50:	701a      	strb	r2, [r3, #0]
 800cc52:	e00a      	b.n	800cc6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	0f1b      	lsrs	r3, r3, #28
 800cc58:	b2da      	uxtb	r2, r3
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
 800cc5c:	005b      	lsls	r3, r3, #1
 800cc5e:	4619      	mov	r1, r3
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	440b      	add	r3, r1
 800cc64:	3237      	adds	r2, #55	; 0x37
 800cc66:	b2d2      	uxtb	r2, r2
 800cc68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	011b      	lsls	r3, r3, #4
 800cc6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	3301      	adds	r3, #1
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	4413      	add	r3, r2
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
 800cc80:	3301      	adds	r3, #1
 800cc82:	75fb      	strb	r3, [r7, #23]
 800cc84:	7dfa      	ldrb	r2, [r7, #23]
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d3d3      	bcc.n	800cc34 <IntToUnicode+0x18>
  }
}
 800cc8c:	bf00      	nop
 800cc8e:	bf00      	nop
 800cc90:	371c      	adds	r7, #28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
	...

0800cc9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b0a0      	sub	sp, #128	; 0x80
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cca4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]
 800ccac:	605a      	str	r2, [r3, #4]
 800ccae:	609a      	str	r2, [r3, #8]
 800ccb0:	60da      	str	r2, [r3, #12]
 800ccb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ccb4:	f107 0310 	add.w	r3, r7, #16
 800ccb8:	225c      	movs	r2, #92	; 0x5c
 800ccba:	2100      	movs	r1, #0
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 fca4 	bl	800d60a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ccca:	d156      	bne.n	800cd7a <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ccd0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ccd6:	f107 0310 	add.w	r3, r7, #16
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7f7 fa86 	bl	80041ec <HAL_RCCEx_PeriphCLKConfig>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d001      	beq.n	800ccea <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800cce6:	f7f4 fe37 	bl	8001958 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ccea:	2300      	movs	r3, #0
 800ccec:	60fb      	str	r3, [r7, #12]
 800ccee:	4b25      	ldr	r3, [pc, #148]	; (800cd84 <HAL_PCD_MspInit+0xe8>)
 800ccf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf2:	4a24      	ldr	r2, [pc, #144]	; (800cd84 <HAL_PCD_MspInit+0xe8>)
 800ccf4:	f043 0301 	orr.w	r3, r3, #1
 800ccf8:	6313      	str	r3, [r2, #48]	; 0x30
 800ccfa:	4b22      	ldr	r3, [pc, #136]	; (800cd84 <HAL_PCD_MspInit+0xe8>)
 800ccfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cd06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd10:	2300      	movs	r3, #0
 800cd12:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cd18:	4619      	mov	r1, r3
 800cd1a:	481b      	ldr	r0, [pc, #108]	; (800cd88 <HAL_PCD_MspInit+0xec>)
 800cd1c:	f7f5 faa6 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cd20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cd24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd26:	2302      	movs	r3, #2
 800cd28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cd32:	230a      	movs	r3, #10
 800cd34:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4812      	ldr	r0, [pc, #72]	; (800cd88 <HAL_PCD_MspInit+0xec>)
 800cd3e:	f7f5 fa95 	bl	800226c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cd42:	4b10      	ldr	r3, [pc, #64]	; (800cd84 <HAL_PCD_MspInit+0xe8>)
 800cd44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd46:	4a0f      	ldr	r2, [pc, #60]	; (800cd84 <HAL_PCD_MspInit+0xe8>)
 800cd48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd4c:	6353      	str	r3, [r2, #52]	; 0x34
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60bb      	str	r3, [r7, #8]
 800cd52:	4b0c      	ldr	r3, [pc, #48]	; (800cd84 <HAL_PCD_MspInit+0xe8>)
 800cd54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd56:	4a0b      	ldr	r2, [pc, #44]	; (800cd84 <HAL_PCD_MspInit+0xe8>)
 800cd58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cd5c:	6453      	str	r3, [r2, #68]	; 0x44
 800cd5e:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <HAL_PCD_MspInit+0xe8>)
 800cd60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd66:	60bb      	str	r3, [r7, #8]
 800cd68:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	2105      	movs	r1, #5
 800cd6e:	2043      	movs	r0, #67	; 0x43
 800cd70:	f7f5 fa45 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd74:	2043      	movs	r0, #67	; 0x43
 800cd76:	f7f5 fa5e 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd7a:	bf00      	nop
 800cd7c:	3780      	adds	r7, #128	; 0x80
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	40023800 	.word	0x40023800
 800cd88:	40020000 	.word	0x40020000

0800cd8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cda0:	4619      	mov	r1, r3
 800cda2:	4610      	mov	r0, r2
 800cda4:	f7fb fd13 	bl	80087ce <USBD_LL_SetupStage>
}
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cdc2:	78fa      	ldrb	r2, [r7, #3]
 800cdc4:	6879      	ldr	r1, [r7, #4]
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	4413      	add	r3, r2
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	440b      	add	r3, r1
 800cdd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	78fb      	ldrb	r3, [r7, #3]
 800cdd8:	4619      	mov	r1, r3
 800cdda:	f7fb fd4d 	bl	8008878 <USBD_LL_DataOutStage>
}
 800cdde:	bf00      	nop
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b082      	sub	sp, #8
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	460b      	mov	r3, r1
 800cdf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cdf8:	78fa      	ldrb	r2, [r7, #3]
 800cdfa:	6879      	ldr	r1, [r7, #4]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	00db      	lsls	r3, r3, #3
 800ce00:	4413      	add	r3, r2
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	440b      	add	r3, r1
 800ce06:	334c      	adds	r3, #76	; 0x4c
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	78fb      	ldrb	r3, [r7, #3]
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	f7fb fde6 	bl	80089de <USBD_LL_DataInStage>
}
 800ce12:	bf00      	nop
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fb ff1a 	bl	8008c62 <USBD_LL_SOF>
}
 800ce2e:	bf00      	nop
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b084      	sub	sp, #16
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d102      	bne.n	800ce50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	73fb      	strb	r3, [r7, #15]
 800ce4e:	e008      	b.n	800ce62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d102      	bne.n	800ce5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	73fb      	strb	r3, [r7, #15]
 800ce5c:	e001      	b.n	800ce62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ce5e:	f7f4 fd7b 	bl	8001958 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ce68:	7bfa      	ldrb	r2, [r7, #15]
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fb feba 	bl	8008be6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fb fe62 	bl	8008b42 <USBD_LL_Reset>
}
 800ce7e:	bf00      	nop
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
	...

0800ce88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fb feb5 	bl	8008c06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	6812      	ldr	r2, [r2, #0]
 800ceaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ceae:	f043 0301 	orr.w	r3, r3, #1
 800ceb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6a1b      	ldr	r3, [r3, #32]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d005      	beq.n	800cec8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cebc:	4b04      	ldr	r3, [pc, #16]	; (800ced0 <HAL_PCD_SuspendCallback+0x48>)
 800cebe:	691b      	ldr	r3, [r3, #16]
 800cec0:	4a03      	ldr	r2, [pc, #12]	; (800ced0 <HAL_PCD_SuspendCallback+0x48>)
 800cec2:	f043 0306 	orr.w	r3, r3, #6
 800cec6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cec8:	bf00      	nop
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	e000ed00 	.word	0xe000ed00

0800ced4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fb fea5 	bl	8008c32 <USBD_LL_Resume>
}
 800cee8:	bf00      	nop
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf02:	78fa      	ldrb	r2, [r7, #3]
 800cf04:	4611      	mov	r1, r2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fb fefd 	bl	8008d06 <USBD_LL_IsoOUTIncomplete>
}
 800cf0c:	bf00      	nop
 800cf0e:	3708      	adds	r7, #8
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf26:	78fa      	ldrb	r2, [r7, #3]
 800cf28:	4611      	mov	r1, r2
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fb feb9 	bl	8008ca2 <USBD_LL_IsoINIncomplete>
}
 800cf30:	bf00      	nop
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7fb ff0f 	bl	8008d6a <USBD_LL_DevConnected>
}
 800cf4c:	bf00      	nop
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fb ff0c 	bl	8008d80 <USBD_LL_DevDisconnected>
}
 800cf68:	bf00      	nop
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d13c      	bne.n	800cffa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cf80:	4a20      	ldr	r2, [pc, #128]	; (800d004 <USBD_LL_Init+0x94>)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a1e      	ldr	r2, [pc, #120]	; (800d004 <USBD_LL_Init+0x94>)
 800cf8c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf90:	4b1c      	ldr	r3, [pc, #112]	; (800d004 <USBD_LL_Init+0x94>)
 800cf92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cf96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800cf98:	4b1a      	ldr	r3, [pc, #104]	; (800d004 <USBD_LL_Init+0x94>)
 800cf9a:	2206      	movs	r2, #6
 800cf9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cf9e:	4b19      	ldr	r3, [pc, #100]	; (800d004 <USBD_LL_Init+0x94>)
 800cfa0:	2202      	movs	r2, #2
 800cfa2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cfa4:	4b17      	ldr	r3, [pc, #92]	; (800d004 <USBD_LL_Init+0x94>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cfaa:	4b16      	ldr	r3, [pc, #88]	; (800d004 <USBD_LL_Init+0x94>)
 800cfac:	2202      	movs	r2, #2
 800cfae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cfb0:	4b14      	ldr	r3, [pc, #80]	; (800d004 <USBD_LL_Init+0x94>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cfb6:	4b13      	ldr	r3, [pc, #76]	; (800d004 <USBD_LL_Init+0x94>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cfbc:	4b11      	ldr	r3, [pc, #68]	; (800d004 <USBD_LL_Init+0x94>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cfc2:	4b10      	ldr	r3, [pc, #64]	; (800d004 <USBD_LL_Init+0x94>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cfc8:	4b0e      	ldr	r3, [pc, #56]	; (800d004 <USBD_LL_Init+0x94>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cfce:	480d      	ldr	r0, [pc, #52]	; (800d004 <USBD_LL_Init+0x94>)
 800cfd0:	f7f5 fd29 	bl	8002a26 <HAL_PCD_Init>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d001      	beq.n	800cfde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cfda:	f7f4 fcbd 	bl	8001958 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cfde:	2180      	movs	r1, #128	; 0x80
 800cfe0:	4808      	ldr	r0, [pc, #32]	; (800d004 <USBD_LL_Init+0x94>)
 800cfe2:	f7f6 ffb4 	bl	8003f4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cfe6:	2240      	movs	r2, #64	; 0x40
 800cfe8:	2100      	movs	r1, #0
 800cfea:	4806      	ldr	r0, [pc, #24]	; (800d004 <USBD_LL_Init+0x94>)
 800cfec:	f7f6 ff68 	bl	8003ec0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cff0:	2280      	movs	r2, #128	; 0x80
 800cff2:	2101      	movs	r1, #1
 800cff4:	4803      	ldr	r0, [pc, #12]	; (800d004 <USBD_LL_Init+0x94>)
 800cff6:	f7f6 ff63 	bl	8003ec0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3708      	adds	r7, #8
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	200067e0 	.word	0x200067e0

0800d008 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d010:	2300      	movs	r3, #0
 800d012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d01e:	4618      	mov	r0, r3
 800d020:	f7f5 fe25 	bl	8002c6e <HAL_PCD_Start>
 800d024:	4603      	mov	r3, r0
 800d026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f000 f990 	bl	800d350 <USBD_Get_USB_Status>
 800d030:	4603      	mov	r3, r0
 800d032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d034:	7bbb      	ldrb	r3, [r7, #14]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b084      	sub	sp, #16
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	4608      	mov	r0, r1
 800d048:	4611      	mov	r1, r2
 800d04a:	461a      	mov	r2, r3
 800d04c:	4603      	mov	r3, r0
 800d04e:	70fb      	strb	r3, [r7, #3]
 800d050:	460b      	mov	r3, r1
 800d052:	70bb      	strb	r3, [r7, #2]
 800d054:	4613      	mov	r3, r2
 800d056:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d05c:	2300      	movs	r3, #0
 800d05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d066:	78bb      	ldrb	r3, [r7, #2]
 800d068:	883a      	ldrh	r2, [r7, #0]
 800d06a:	78f9      	ldrb	r1, [r7, #3]
 800d06c:	f7f6 fb23 	bl	80036b6 <HAL_PCD_EP_Open>
 800d070:	4603      	mov	r3, r0
 800d072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d074:	7bfb      	ldrb	r3, [r7, #15]
 800d076:	4618      	mov	r0, r3
 800d078:	f000 f96a 	bl	800d350 <USBD_Get_USB_Status>
 800d07c:	4603      	mov	r3, r0
 800d07e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d080:	7bbb      	ldrb	r3, [r7, #14]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b084      	sub	sp, #16
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	460b      	mov	r3, r1
 800d094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d096:	2300      	movs	r3, #0
 800d098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0a4:	78fa      	ldrb	r2, [r7, #3]
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7f6 fb6c 	bl	8003786 <HAL_PCD_EP_Close>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 f94b 	bl	800d350 <USBD_Get_USB_Status>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0be:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0e2:	78fa      	ldrb	r2, [r7, #3]
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7f6 fc44 	bl	8003974 <HAL_PCD_EP_SetStall>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 f92c 	bl	800d350 <USBD_Get_USB_Status>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b084      	sub	sp, #16
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	460b      	mov	r3, r1
 800d110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d112:	2300      	movs	r3, #0
 800d114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d120:	78fa      	ldrb	r2, [r7, #3]
 800d122:	4611      	mov	r1, r2
 800d124:	4618      	mov	r0, r3
 800d126:	f7f6 fc89 	bl	8003a3c <HAL_PCD_EP_ClrStall>
 800d12a:	4603      	mov	r3, r0
 800d12c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d12e:	7bfb      	ldrb	r3, [r7, #15]
 800d130:	4618      	mov	r0, r3
 800d132:	f000 f90d 	bl	800d350 <USBD_Get_USB_Status>
 800d136:	4603      	mov	r3, r0
 800d138:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d13a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3710      	adds	r7, #16
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	460b      	mov	r3, r1
 800d14e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d156:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	da0b      	bge.n	800d178 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d160:	78fb      	ldrb	r3, [r7, #3]
 800d162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d166:	68f9      	ldr	r1, [r7, #12]
 800d168:	4613      	mov	r3, r2
 800d16a:	00db      	lsls	r3, r3, #3
 800d16c:	4413      	add	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	440b      	add	r3, r1
 800d172:	333e      	adds	r3, #62	; 0x3e
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	e00b      	b.n	800d190 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d178:	78fb      	ldrb	r3, [r7, #3]
 800d17a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d17e:	68f9      	ldr	r1, [r7, #12]
 800d180:	4613      	mov	r3, r2
 800d182:	00db      	lsls	r3, r3, #3
 800d184:	4413      	add	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	440b      	add	r3, r1
 800d18a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d18e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d190:	4618      	mov	r0, r3
 800d192:	3714      	adds	r7, #20
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1b6:	78fa      	ldrb	r2, [r7, #3]
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7f6 fa56 	bl	800366c <HAL_PCD_SetAddress>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 f8c2 	bl	800d350 <USBD_Get_USB_Status>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b086      	sub	sp, #24
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	60f8      	str	r0, [r7, #12]
 800d1e2:	607a      	str	r2, [r7, #4]
 800d1e4:	603b      	str	r3, [r7, #0]
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d1f8:	7af9      	ldrb	r1, [r7, #11]
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	f7f6 fb6f 	bl	80038e0 <HAL_PCD_EP_Transmit>
 800d202:	4603      	mov	r3, r0
 800d204:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d206:	7dfb      	ldrb	r3, [r7, #23]
 800d208:	4618      	mov	r0, r3
 800d20a:	f000 f8a1 	bl	800d350 <USBD_Get_USB_Status>
 800d20e:	4603      	mov	r3, r0
 800d210:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d212:	7dbb      	ldrb	r3, [r7, #22]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3718      	adds	r7, #24
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b086      	sub	sp, #24
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	607a      	str	r2, [r7, #4]
 800d226:	603b      	str	r3, [r7, #0]
 800d228:	460b      	mov	r3, r1
 800d22a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d230:	2300      	movs	r3, #0
 800d232:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d23a:	7af9      	ldrb	r1, [r7, #11]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	f7f6 faeb 	bl	800381a <HAL_PCD_EP_Receive>
 800d244:	4603      	mov	r3, r0
 800d246:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d248:	7dfb      	ldrb	r3, [r7, #23]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 f880 	bl	800d350 <USBD_Get_USB_Status>
 800d250:	4603      	mov	r3, r0
 800d252:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d254:	7dbb      	ldrb	r3, [r7, #22]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b082      	sub	sp, #8
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	460b      	mov	r3, r1
 800d268:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d270:	78fa      	ldrb	r2, [r7, #3]
 800d272:	4611      	mov	r1, r2
 800d274:	4618      	mov	r0, r3
 800d276:	f7f6 fb1b 	bl	80038b0 <HAL_PCD_EP_GetRxCount>
 800d27a:	4603      	mov	r3, r0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	460b      	mov	r3, r1
 800d28e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d290:	78fb      	ldrb	r3, [r7, #3]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d002      	beq.n	800d29c <HAL_PCDEx_LPM_Callback+0x18>
 800d296:	2b01      	cmp	r3, #1
 800d298:	d01f      	beq.n	800d2da <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d29a:	e03b      	b.n	800d314 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a1b      	ldr	r3, [r3, #32]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d007      	beq.n	800d2b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d2a4:	f7f4 f838 	bl	8001318 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2a8:	4b1c      	ldr	r3, [pc, #112]	; (800d31c <HAL_PCDEx_LPM_Callback+0x98>)
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	4a1b      	ldr	r2, [pc, #108]	; (800d31c <HAL_PCDEx_LPM_Callback+0x98>)
 800d2ae:	f023 0306 	bic.w	r3, r3, #6
 800d2b2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	6812      	ldr	r2, [r2, #0]
 800d2c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2c6:	f023 0301 	bic.w	r3, r3, #1
 800d2ca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fb fcad 	bl	8008c32 <USBD_LL_Resume>
    break;
 800d2d8:	e01c      	b.n	800d314 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	6812      	ldr	r2, [r2, #0]
 800d2e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2ec:	f043 0301 	orr.w	r3, r3, #1
 800d2f0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7fb fc84 	bl	8008c06 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6a1b      	ldr	r3, [r3, #32]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d306:	4b05      	ldr	r3, [pc, #20]	; (800d31c <HAL_PCDEx_LPM_Callback+0x98>)
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	4a04      	ldr	r2, [pc, #16]	; (800d31c <HAL_PCDEx_LPM_Callback+0x98>)
 800d30c:	f043 0306 	orr.w	r3, r3, #6
 800d310:	6113      	str	r3, [r2, #16]
    break;
 800d312:	bf00      	nop
}
 800d314:	bf00      	nop
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	e000ed00 	.word	0xe000ed00

0800d320 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d328:	4b03      	ldr	r3, [pc, #12]	; (800d338 <USBD_static_malloc+0x18>)
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	20006cec 	.word	0x20006cec

0800d33c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]

}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	4603      	mov	r3, r0
 800d358:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d35e:	79fb      	ldrb	r3, [r7, #7]
 800d360:	2b03      	cmp	r3, #3
 800d362:	d817      	bhi.n	800d394 <USBD_Get_USB_Status+0x44>
 800d364:	a201      	add	r2, pc, #4	; (adr r2, 800d36c <USBD_Get_USB_Status+0x1c>)
 800d366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36a:	bf00      	nop
 800d36c:	0800d37d 	.word	0x0800d37d
 800d370:	0800d383 	.word	0x0800d383
 800d374:	0800d389 	.word	0x0800d389
 800d378:	0800d38f 	.word	0x0800d38f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	73fb      	strb	r3, [r7, #15]
    break;
 800d380:	e00b      	b.n	800d39a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d382:	2303      	movs	r3, #3
 800d384:	73fb      	strb	r3, [r7, #15]
    break;
 800d386:	e008      	b.n	800d39a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d388:	2301      	movs	r3, #1
 800d38a:	73fb      	strb	r3, [r7, #15]
    break;
 800d38c:	e005      	b.n	800d39a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d38e:	2303      	movs	r3, #3
 800d390:	73fb      	strb	r3, [r7, #15]
    break;
 800d392:	e002      	b.n	800d39a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d394:	2303      	movs	r3, #3
 800d396:	73fb      	strb	r3, [r7, #15]
    break;
 800d398:	bf00      	nop
  }
  return usb_status;
 800d39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <__errno>:
 800d3a8:	4b01      	ldr	r3, [pc, #4]	; (800d3b0 <__errno+0x8>)
 800d3aa:	6818      	ldr	r0, [r3, #0]
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	20000110 	.word	0x20000110

0800d3b4 <std>:
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	b510      	push	{r4, lr}
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	e9c0 3300 	strd	r3, r3, [r0]
 800d3be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3c2:	6083      	str	r3, [r0, #8]
 800d3c4:	8181      	strh	r1, [r0, #12]
 800d3c6:	6643      	str	r3, [r0, #100]	; 0x64
 800d3c8:	81c2      	strh	r2, [r0, #14]
 800d3ca:	6183      	str	r3, [r0, #24]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	2208      	movs	r2, #8
 800d3d0:	305c      	adds	r0, #92	; 0x5c
 800d3d2:	f000 f91a 	bl	800d60a <memset>
 800d3d6:	4b05      	ldr	r3, [pc, #20]	; (800d3ec <std+0x38>)
 800d3d8:	6263      	str	r3, [r4, #36]	; 0x24
 800d3da:	4b05      	ldr	r3, [pc, #20]	; (800d3f0 <std+0x3c>)
 800d3dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3de:	4b05      	ldr	r3, [pc, #20]	; (800d3f4 <std+0x40>)
 800d3e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3e2:	4b05      	ldr	r3, [pc, #20]	; (800d3f8 <std+0x44>)
 800d3e4:	6224      	str	r4, [r4, #32]
 800d3e6:	6323      	str	r3, [r4, #48]	; 0x30
 800d3e8:	bd10      	pop	{r4, pc}
 800d3ea:	bf00      	nop
 800d3ec:	0800dcfd 	.word	0x0800dcfd
 800d3f0:	0800dd23 	.word	0x0800dd23
 800d3f4:	0800dd5b 	.word	0x0800dd5b
 800d3f8:	0800dd7f 	.word	0x0800dd7f

0800d3fc <_cleanup_r>:
 800d3fc:	4901      	ldr	r1, [pc, #4]	; (800d404 <_cleanup_r+0x8>)
 800d3fe:	f000 b8af 	b.w	800d560 <_fwalk_reent>
 800d402:	bf00      	nop
 800d404:	0800ec49 	.word	0x0800ec49

0800d408 <__sfmoreglue>:
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	2268      	movs	r2, #104	; 0x68
 800d40c:	1e4d      	subs	r5, r1, #1
 800d40e:	4355      	muls	r5, r2
 800d410:	460e      	mov	r6, r1
 800d412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d416:	f000 f921 	bl	800d65c <_malloc_r>
 800d41a:	4604      	mov	r4, r0
 800d41c:	b140      	cbz	r0, 800d430 <__sfmoreglue+0x28>
 800d41e:	2100      	movs	r1, #0
 800d420:	e9c0 1600 	strd	r1, r6, [r0]
 800d424:	300c      	adds	r0, #12
 800d426:	60a0      	str	r0, [r4, #8]
 800d428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d42c:	f000 f8ed 	bl	800d60a <memset>
 800d430:	4620      	mov	r0, r4
 800d432:	bd70      	pop	{r4, r5, r6, pc}

0800d434 <__sfp_lock_acquire>:
 800d434:	4801      	ldr	r0, [pc, #4]	; (800d43c <__sfp_lock_acquire+0x8>)
 800d436:	f000 b8d8 	b.w	800d5ea <__retarget_lock_acquire_recursive>
 800d43a:	bf00      	nop
 800d43c:	20006f0d 	.word	0x20006f0d

0800d440 <__sfp_lock_release>:
 800d440:	4801      	ldr	r0, [pc, #4]	; (800d448 <__sfp_lock_release+0x8>)
 800d442:	f000 b8d3 	b.w	800d5ec <__retarget_lock_release_recursive>
 800d446:	bf00      	nop
 800d448:	20006f0d 	.word	0x20006f0d

0800d44c <__sinit_lock_acquire>:
 800d44c:	4801      	ldr	r0, [pc, #4]	; (800d454 <__sinit_lock_acquire+0x8>)
 800d44e:	f000 b8cc 	b.w	800d5ea <__retarget_lock_acquire_recursive>
 800d452:	bf00      	nop
 800d454:	20006f0e 	.word	0x20006f0e

0800d458 <__sinit_lock_release>:
 800d458:	4801      	ldr	r0, [pc, #4]	; (800d460 <__sinit_lock_release+0x8>)
 800d45a:	f000 b8c7 	b.w	800d5ec <__retarget_lock_release_recursive>
 800d45e:	bf00      	nop
 800d460:	20006f0e 	.word	0x20006f0e

0800d464 <__sinit>:
 800d464:	b510      	push	{r4, lr}
 800d466:	4604      	mov	r4, r0
 800d468:	f7ff fff0 	bl	800d44c <__sinit_lock_acquire>
 800d46c:	69a3      	ldr	r3, [r4, #24]
 800d46e:	b11b      	cbz	r3, 800d478 <__sinit+0x14>
 800d470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d474:	f7ff bff0 	b.w	800d458 <__sinit_lock_release>
 800d478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d47c:	6523      	str	r3, [r4, #80]	; 0x50
 800d47e:	4b13      	ldr	r3, [pc, #76]	; (800d4cc <__sinit+0x68>)
 800d480:	4a13      	ldr	r2, [pc, #76]	; (800d4d0 <__sinit+0x6c>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	62a2      	str	r2, [r4, #40]	; 0x28
 800d486:	42a3      	cmp	r3, r4
 800d488:	bf04      	itt	eq
 800d48a:	2301      	moveq	r3, #1
 800d48c:	61a3      	streq	r3, [r4, #24]
 800d48e:	4620      	mov	r0, r4
 800d490:	f000 f820 	bl	800d4d4 <__sfp>
 800d494:	6060      	str	r0, [r4, #4]
 800d496:	4620      	mov	r0, r4
 800d498:	f000 f81c 	bl	800d4d4 <__sfp>
 800d49c:	60a0      	str	r0, [r4, #8]
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 f818 	bl	800d4d4 <__sfp>
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	60e0      	str	r0, [r4, #12]
 800d4a8:	2104      	movs	r1, #4
 800d4aa:	6860      	ldr	r0, [r4, #4]
 800d4ac:	f7ff ff82 	bl	800d3b4 <std>
 800d4b0:	68a0      	ldr	r0, [r4, #8]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	2109      	movs	r1, #9
 800d4b6:	f7ff ff7d 	bl	800d3b4 <std>
 800d4ba:	68e0      	ldr	r0, [r4, #12]
 800d4bc:	2202      	movs	r2, #2
 800d4be:	2112      	movs	r1, #18
 800d4c0:	f7ff ff78 	bl	800d3b4 <std>
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	61a3      	str	r3, [r4, #24]
 800d4c8:	e7d2      	b.n	800d470 <__sinit+0xc>
 800d4ca:	bf00      	nop
 800d4cc:	080116f8 	.word	0x080116f8
 800d4d0:	0800d3fd 	.word	0x0800d3fd

0800d4d4 <__sfp>:
 800d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d6:	4607      	mov	r7, r0
 800d4d8:	f7ff ffac 	bl	800d434 <__sfp_lock_acquire>
 800d4dc:	4b1e      	ldr	r3, [pc, #120]	; (800d558 <__sfp+0x84>)
 800d4de:	681e      	ldr	r6, [r3, #0]
 800d4e0:	69b3      	ldr	r3, [r6, #24]
 800d4e2:	b913      	cbnz	r3, 800d4ea <__sfp+0x16>
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7ff ffbd 	bl	800d464 <__sinit>
 800d4ea:	3648      	adds	r6, #72	; 0x48
 800d4ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	d503      	bpl.n	800d4fc <__sfp+0x28>
 800d4f4:	6833      	ldr	r3, [r6, #0]
 800d4f6:	b30b      	cbz	r3, 800d53c <__sfp+0x68>
 800d4f8:	6836      	ldr	r6, [r6, #0]
 800d4fa:	e7f7      	b.n	800d4ec <__sfp+0x18>
 800d4fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d500:	b9d5      	cbnz	r5, 800d538 <__sfp+0x64>
 800d502:	4b16      	ldr	r3, [pc, #88]	; (800d55c <__sfp+0x88>)
 800d504:	60e3      	str	r3, [r4, #12]
 800d506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d50a:	6665      	str	r5, [r4, #100]	; 0x64
 800d50c:	f000 f86c 	bl	800d5e8 <__retarget_lock_init_recursive>
 800d510:	f7ff ff96 	bl	800d440 <__sfp_lock_release>
 800d514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d51c:	6025      	str	r5, [r4, #0]
 800d51e:	61a5      	str	r5, [r4, #24]
 800d520:	2208      	movs	r2, #8
 800d522:	4629      	mov	r1, r5
 800d524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d528:	f000 f86f 	bl	800d60a <memset>
 800d52c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d534:	4620      	mov	r0, r4
 800d536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d538:	3468      	adds	r4, #104	; 0x68
 800d53a:	e7d9      	b.n	800d4f0 <__sfp+0x1c>
 800d53c:	2104      	movs	r1, #4
 800d53e:	4638      	mov	r0, r7
 800d540:	f7ff ff62 	bl	800d408 <__sfmoreglue>
 800d544:	4604      	mov	r4, r0
 800d546:	6030      	str	r0, [r6, #0]
 800d548:	2800      	cmp	r0, #0
 800d54a:	d1d5      	bne.n	800d4f8 <__sfp+0x24>
 800d54c:	f7ff ff78 	bl	800d440 <__sfp_lock_release>
 800d550:	230c      	movs	r3, #12
 800d552:	603b      	str	r3, [r7, #0]
 800d554:	e7ee      	b.n	800d534 <__sfp+0x60>
 800d556:	bf00      	nop
 800d558:	080116f8 	.word	0x080116f8
 800d55c:	ffff0001 	.word	0xffff0001

0800d560 <_fwalk_reent>:
 800d560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d564:	4606      	mov	r6, r0
 800d566:	4688      	mov	r8, r1
 800d568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d56c:	2700      	movs	r7, #0
 800d56e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d572:	f1b9 0901 	subs.w	r9, r9, #1
 800d576:	d505      	bpl.n	800d584 <_fwalk_reent+0x24>
 800d578:	6824      	ldr	r4, [r4, #0]
 800d57a:	2c00      	cmp	r4, #0
 800d57c:	d1f7      	bne.n	800d56e <_fwalk_reent+0xe>
 800d57e:	4638      	mov	r0, r7
 800d580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d584:	89ab      	ldrh	r3, [r5, #12]
 800d586:	2b01      	cmp	r3, #1
 800d588:	d907      	bls.n	800d59a <_fwalk_reent+0x3a>
 800d58a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d58e:	3301      	adds	r3, #1
 800d590:	d003      	beq.n	800d59a <_fwalk_reent+0x3a>
 800d592:	4629      	mov	r1, r5
 800d594:	4630      	mov	r0, r6
 800d596:	47c0      	blx	r8
 800d598:	4307      	orrs	r7, r0
 800d59a:	3568      	adds	r5, #104	; 0x68
 800d59c:	e7e9      	b.n	800d572 <_fwalk_reent+0x12>
	...

0800d5a0 <__libc_init_array>:
 800d5a0:	b570      	push	{r4, r5, r6, lr}
 800d5a2:	4d0d      	ldr	r5, [pc, #52]	; (800d5d8 <__libc_init_array+0x38>)
 800d5a4:	4c0d      	ldr	r4, [pc, #52]	; (800d5dc <__libc_init_array+0x3c>)
 800d5a6:	1b64      	subs	r4, r4, r5
 800d5a8:	10a4      	asrs	r4, r4, #2
 800d5aa:	2600      	movs	r6, #0
 800d5ac:	42a6      	cmp	r6, r4
 800d5ae:	d109      	bne.n	800d5c4 <__libc_init_array+0x24>
 800d5b0:	4d0b      	ldr	r5, [pc, #44]	; (800d5e0 <__libc_init_array+0x40>)
 800d5b2:	4c0c      	ldr	r4, [pc, #48]	; (800d5e4 <__libc_init_array+0x44>)
 800d5b4:	f003 fef4 	bl	80113a0 <_init>
 800d5b8:	1b64      	subs	r4, r4, r5
 800d5ba:	10a4      	asrs	r4, r4, #2
 800d5bc:	2600      	movs	r6, #0
 800d5be:	42a6      	cmp	r6, r4
 800d5c0:	d105      	bne.n	800d5ce <__libc_init_array+0x2e>
 800d5c2:	bd70      	pop	{r4, r5, r6, pc}
 800d5c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5c8:	4798      	blx	r3
 800d5ca:	3601      	adds	r6, #1
 800d5cc:	e7ee      	b.n	800d5ac <__libc_init_array+0xc>
 800d5ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5d2:	4798      	blx	r3
 800d5d4:	3601      	adds	r6, #1
 800d5d6:	e7f2      	b.n	800d5be <__libc_init_array+0x1e>
 800d5d8:	08011af0 	.word	0x08011af0
 800d5dc:	08011af0 	.word	0x08011af0
 800d5e0:	08011af0 	.word	0x08011af0
 800d5e4:	08011af4 	.word	0x08011af4

0800d5e8 <__retarget_lock_init_recursive>:
 800d5e8:	4770      	bx	lr

0800d5ea <__retarget_lock_acquire_recursive>:
 800d5ea:	4770      	bx	lr

0800d5ec <__retarget_lock_release_recursive>:
 800d5ec:	4770      	bx	lr

0800d5ee <memcpy>:
 800d5ee:	440a      	add	r2, r1
 800d5f0:	4291      	cmp	r1, r2
 800d5f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5f6:	d100      	bne.n	800d5fa <memcpy+0xc>
 800d5f8:	4770      	bx	lr
 800d5fa:	b510      	push	{r4, lr}
 800d5fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d600:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d604:	4291      	cmp	r1, r2
 800d606:	d1f9      	bne.n	800d5fc <memcpy+0xe>
 800d608:	bd10      	pop	{r4, pc}

0800d60a <memset>:
 800d60a:	4402      	add	r2, r0
 800d60c:	4603      	mov	r3, r0
 800d60e:	4293      	cmp	r3, r2
 800d610:	d100      	bne.n	800d614 <memset+0xa>
 800d612:	4770      	bx	lr
 800d614:	f803 1b01 	strb.w	r1, [r3], #1
 800d618:	e7f9      	b.n	800d60e <memset+0x4>
	...

0800d61c <sbrk_aligned>:
 800d61c:	b570      	push	{r4, r5, r6, lr}
 800d61e:	4e0e      	ldr	r6, [pc, #56]	; (800d658 <sbrk_aligned+0x3c>)
 800d620:	460c      	mov	r4, r1
 800d622:	6831      	ldr	r1, [r6, #0]
 800d624:	4605      	mov	r5, r0
 800d626:	b911      	cbnz	r1, 800d62e <sbrk_aligned+0x12>
 800d628:	f000 fb06 	bl	800dc38 <_sbrk_r>
 800d62c:	6030      	str	r0, [r6, #0]
 800d62e:	4621      	mov	r1, r4
 800d630:	4628      	mov	r0, r5
 800d632:	f000 fb01 	bl	800dc38 <_sbrk_r>
 800d636:	1c43      	adds	r3, r0, #1
 800d638:	d00a      	beq.n	800d650 <sbrk_aligned+0x34>
 800d63a:	1cc4      	adds	r4, r0, #3
 800d63c:	f024 0403 	bic.w	r4, r4, #3
 800d640:	42a0      	cmp	r0, r4
 800d642:	d007      	beq.n	800d654 <sbrk_aligned+0x38>
 800d644:	1a21      	subs	r1, r4, r0
 800d646:	4628      	mov	r0, r5
 800d648:	f000 faf6 	bl	800dc38 <_sbrk_r>
 800d64c:	3001      	adds	r0, #1
 800d64e:	d101      	bne.n	800d654 <sbrk_aligned+0x38>
 800d650:	f04f 34ff 	mov.w	r4, #4294967295
 800d654:	4620      	mov	r0, r4
 800d656:	bd70      	pop	{r4, r5, r6, pc}
 800d658:	20006f14 	.word	0x20006f14

0800d65c <_malloc_r>:
 800d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d660:	1ccd      	adds	r5, r1, #3
 800d662:	f025 0503 	bic.w	r5, r5, #3
 800d666:	3508      	adds	r5, #8
 800d668:	2d0c      	cmp	r5, #12
 800d66a:	bf38      	it	cc
 800d66c:	250c      	movcc	r5, #12
 800d66e:	2d00      	cmp	r5, #0
 800d670:	4607      	mov	r7, r0
 800d672:	db01      	blt.n	800d678 <_malloc_r+0x1c>
 800d674:	42a9      	cmp	r1, r5
 800d676:	d905      	bls.n	800d684 <_malloc_r+0x28>
 800d678:	230c      	movs	r3, #12
 800d67a:	603b      	str	r3, [r7, #0]
 800d67c:	2600      	movs	r6, #0
 800d67e:	4630      	mov	r0, r6
 800d680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d684:	4e2e      	ldr	r6, [pc, #184]	; (800d740 <_malloc_r+0xe4>)
 800d686:	f001 feaf 	bl	800f3e8 <__malloc_lock>
 800d68a:	6833      	ldr	r3, [r6, #0]
 800d68c:	461c      	mov	r4, r3
 800d68e:	bb34      	cbnz	r4, 800d6de <_malloc_r+0x82>
 800d690:	4629      	mov	r1, r5
 800d692:	4638      	mov	r0, r7
 800d694:	f7ff ffc2 	bl	800d61c <sbrk_aligned>
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	4604      	mov	r4, r0
 800d69c:	d14d      	bne.n	800d73a <_malloc_r+0xde>
 800d69e:	6834      	ldr	r4, [r6, #0]
 800d6a0:	4626      	mov	r6, r4
 800d6a2:	2e00      	cmp	r6, #0
 800d6a4:	d140      	bne.n	800d728 <_malloc_r+0xcc>
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	4631      	mov	r1, r6
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	eb04 0803 	add.w	r8, r4, r3
 800d6b0:	f000 fac2 	bl	800dc38 <_sbrk_r>
 800d6b4:	4580      	cmp	r8, r0
 800d6b6:	d13a      	bne.n	800d72e <_malloc_r+0xd2>
 800d6b8:	6821      	ldr	r1, [r4, #0]
 800d6ba:	3503      	adds	r5, #3
 800d6bc:	1a6d      	subs	r5, r5, r1
 800d6be:	f025 0503 	bic.w	r5, r5, #3
 800d6c2:	3508      	adds	r5, #8
 800d6c4:	2d0c      	cmp	r5, #12
 800d6c6:	bf38      	it	cc
 800d6c8:	250c      	movcc	r5, #12
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	f7ff ffa5 	bl	800d61c <sbrk_aligned>
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	d02b      	beq.n	800d72e <_malloc_r+0xd2>
 800d6d6:	6823      	ldr	r3, [r4, #0]
 800d6d8:	442b      	add	r3, r5
 800d6da:	6023      	str	r3, [r4, #0]
 800d6dc:	e00e      	b.n	800d6fc <_malloc_r+0xa0>
 800d6de:	6822      	ldr	r2, [r4, #0]
 800d6e0:	1b52      	subs	r2, r2, r5
 800d6e2:	d41e      	bmi.n	800d722 <_malloc_r+0xc6>
 800d6e4:	2a0b      	cmp	r2, #11
 800d6e6:	d916      	bls.n	800d716 <_malloc_r+0xba>
 800d6e8:	1961      	adds	r1, r4, r5
 800d6ea:	42a3      	cmp	r3, r4
 800d6ec:	6025      	str	r5, [r4, #0]
 800d6ee:	bf18      	it	ne
 800d6f0:	6059      	strne	r1, [r3, #4]
 800d6f2:	6863      	ldr	r3, [r4, #4]
 800d6f4:	bf08      	it	eq
 800d6f6:	6031      	streq	r1, [r6, #0]
 800d6f8:	5162      	str	r2, [r4, r5]
 800d6fa:	604b      	str	r3, [r1, #4]
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	f104 060b 	add.w	r6, r4, #11
 800d702:	f001 fe77 	bl	800f3f4 <__malloc_unlock>
 800d706:	f026 0607 	bic.w	r6, r6, #7
 800d70a:	1d23      	adds	r3, r4, #4
 800d70c:	1af2      	subs	r2, r6, r3
 800d70e:	d0b6      	beq.n	800d67e <_malloc_r+0x22>
 800d710:	1b9b      	subs	r3, r3, r6
 800d712:	50a3      	str	r3, [r4, r2]
 800d714:	e7b3      	b.n	800d67e <_malloc_r+0x22>
 800d716:	6862      	ldr	r2, [r4, #4]
 800d718:	42a3      	cmp	r3, r4
 800d71a:	bf0c      	ite	eq
 800d71c:	6032      	streq	r2, [r6, #0]
 800d71e:	605a      	strne	r2, [r3, #4]
 800d720:	e7ec      	b.n	800d6fc <_malloc_r+0xa0>
 800d722:	4623      	mov	r3, r4
 800d724:	6864      	ldr	r4, [r4, #4]
 800d726:	e7b2      	b.n	800d68e <_malloc_r+0x32>
 800d728:	4634      	mov	r4, r6
 800d72a:	6876      	ldr	r6, [r6, #4]
 800d72c:	e7b9      	b.n	800d6a2 <_malloc_r+0x46>
 800d72e:	230c      	movs	r3, #12
 800d730:	603b      	str	r3, [r7, #0]
 800d732:	4638      	mov	r0, r7
 800d734:	f001 fe5e 	bl	800f3f4 <__malloc_unlock>
 800d738:	e7a1      	b.n	800d67e <_malloc_r+0x22>
 800d73a:	6025      	str	r5, [r4, #0]
 800d73c:	e7de      	b.n	800d6fc <_malloc_r+0xa0>
 800d73e:	bf00      	nop
 800d740:	20006f10 	.word	0x20006f10

0800d744 <_scanf_float>:
 800d744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d748:	b087      	sub	sp, #28
 800d74a:	4617      	mov	r7, r2
 800d74c:	9303      	str	r3, [sp, #12]
 800d74e:	688b      	ldr	r3, [r1, #8]
 800d750:	1e5a      	subs	r2, r3, #1
 800d752:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d756:	bf83      	ittte	hi
 800d758:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d75c:	195b      	addhi	r3, r3, r5
 800d75e:	9302      	strhi	r3, [sp, #8]
 800d760:	2300      	movls	r3, #0
 800d762:	bf86      	itte	hi
 800d764:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d768:	608b      	strhi	r3, [r1, #8]
 800d76a:	9302      	strls	r3, [sp, #8]
 800d76c:	680b      	ldr	r3, [r1, #0]
 800d76e:	468b      	mov	fp, r1
 800d770:	2500      	movs	r5, #0
 800d772:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d776:	f84b 3b1c 	str.w	r3, [fp], #28
 800d77a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d77e:	4680      	mov	r8, r0
 800d780:	460c      	mov	r4, r1
 800d782:	465e      	mov	r6, fp
 800d784:	46aa      	mov	sl, r5
 800d786:	46a9      	mov	r9, r5
 800d788:	9501      	str	r5, [sp, #4]
 800d78a:	68a2      	ldr	r2, [r4, #8]
 800d78c:	b152      	cbz	r2, 800d7a4 <_scanf_float+0x60>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	2b4e      	cmp	r3, #78	; 0x4e
 800d794:	d864      	bhi.n	800d860 <_scanf_float+0x11c>
 800d796:	2b40      	cmp	r3, #64	; 0x40
 800d798:	d83c      	bhi.n	800d814 <_scanf_float+0xd0>
 800d79a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d79e:	b2c8      	uxtb	r0, r1
 800d7a0:	280e      	cmp	r0, #14
 800d7a2:	d93a      	bls.n	800d81a <_scanf_float+0xd6>
 800d7a4:	f1b9 0f00 	cmp.w	r9, #0
 800d7a8:	d003      	beq.n	800d7b2 <_scanf_float+0x6e>
 800d7aa:	6823      	ldr	r3, [r4, #0]
 800d7ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7b6:	f1ba 0f01 	cmp.w	sl, #1
 800d7ba:	f200 8113 	bhi.w	800d9e4 <_scanf_float+0x2a0>
 800d7be:	455e      	cmp	r6, fp
 800d7c0:	f200 8105 	bhi.w	800d9ce <_scanf_float+0x28a>
 800d7c4:	2501      	movs	r5, #1
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	b007      	add	sp, #28
 800d7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d7d2:	2a0d      	cmp	r2, #13
 800d7d4:	d8e6      	bhi.n	800d7a4 <_scanf_float+0x60>
 800d7d6:	a101      	add	r1, pc, #4	; (adr r1, 800d7dc <_scanf_float+0x98>)
 800d7d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d7dc:	0800d91b 	.word	0x0800d91b
 800d7e0:	0800d7a5 	.word	0x0800d7a5
 800d7e4:	0800d7a5 	.word	0x0800d7a5
 800d7e8:	0800d7a5 	.word	0x0800d7a5
 800d7ec:	0800d97b 	.word	0x0800d97b
 800d7f0:	0800d953 	.word	0x0800d953
 800d7f4:	0800d7a5 	.word	0x0800d7a5
 800d7f8:	0800d7a5 	.word	0x0800d7a5
 800d7fc:	0800d929 	.word	0x0800d929
 800d800:	0800d7a5 	.word	0x0800d7a5
 800d804:	0800d7a5 	.word	0x0800d7a5
 800d808:	0800d7a5 	.word	0x0800d7a5
 800d80c:	0800d7a5 	.word	0x0800d7a5
 800d810:	0800d8e1 	.word	0x0800d8e1
 800d814:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d818:	e7db      	b.n	800d7d2 <_scanf_float+0x8e>
 800d81a:	290e      	cmp	r1, #14
 800d81c:	d8c2      	bhi.n	800d7a4 <_scanf_float+0x60>
 800d81e:	a001      	add	r0, pc, #4	; (adr r0, 800d824 <_scanf_float+0xe0>)
 800d820:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d824:	0800d8d3 	.word	0x0800d8d3
 800d828:	0800d7a5 	.word	0x0800d7a5
 800d82c:	0800d8d3 	.word	0x0800d8d3
 800d830:	0800d967 	.word	0x0800d967
 800d834:	0800d7a5 	.word	0x0800d7a5
 800d838:	0800d881 	.word	0x0800d881
 800d83c:	0800d8bd 	.word	0x0800d8bd
 800d840:	0800d8bd 	.word	0x0800d8bd
 800d844:	0800d8bd 	.word	0x0800d8bd
 800d848:	0800d8bd 	.word	0x0800d8bd
 800d84c:	0800d8bd 	.word	0x0800d8bd
 800d850:	0800d8bd 	.word	0x0800d8bd
 800d854:	0800d8bd 	.word	0x0800d8bd
 800d858:	0800d8bd 	.word	0x0800d8bd
 800d85c:	0800d8bd 	.word	0x0800d8bd
 800d860:	2b6e      	cmp	r3, #110	; 0x6e
 800d862:	d809      	bhi.n	800d878 <_scanf_float+0x134>
 800d864:	2b60      	cmp	r3, #96	; 0x60
 800d866:	d8b2      	bhi.n	800d7ce <_scanf_float+0x8a>
 800d868:	2b54      	cmp	r3, #84	; 0x54
 800d86a:	d077      	beq.n	800d95c <_scanf_float+0x218>
 800d86c:	2b59      	cmp	r3, #89	; 0x59
 800d86e:	d199      	bne.n	800d7a4 <_scanf_float+0x60>
 800d870:	2d07      	cmp	r5, #7
 800d872:	d197      	bne.n	800d7a4 <_scanf_float+0x60>
 800d874:	2508      	movs	r5, #8
 800d876:	e029      	b.n	800d8cc <_scanf_float+0x188>
 800d878:	2b74      	cmp	r3, #116	; 0x74
 800d87a:	d06f      	beq.n	800d95c <_scanf_float+0x218>
 800d87c:	2b79      	cmp	r3, #121	; 0x79
 800d87e:	e7f6      	b.n	800d86e <_scanf_float+0x12a>
 800d880:	6821      	ldr	r1, [r4, #0]
 800d882:	05c8      	lsls	r0, r1, #23
 800d884:	d51a      	bpl.n	800d8bc <_scanf_float+0x178>
 800d886:	9b02      	ldr	r3, [sp, #8]
 800d888:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d88c:	6021      	str	r1, [r4, #0]
 800d88e:	f109 0901 	add.w	r9, r9, #1
 800d892:	b11b      	cbz	r3, 800d89c <_scanf_float+0x158>
 800d894:	3b01      	subs	r3, #1
 800d896:	3201      	adds	r2, #1
 800d898:	9302      	str	r3, [sp, #8]
 800d89a:	60a2      	str	r2, [r4, #8]
 800d89c:	68a3      	ldr	r3, [r4, #8]
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	60a3      	str	r3, [r4, #8]
 800d8a2:	6923      	ldr	r3, [r4, #16]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	6123      	str	r3, [r4, #16]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	607b      	str	r3, [r7, #4]
 800d8b0:	f340 8084 	ble.w	800d9bc <_scanf_float+0x278>
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	603b      	str	r3, [r7, #0]
 800d8ba:	e766      	b.n	800d78a <_scanf_float+0x46>
 800d8bc:	eb1a 0f05 	cmn.w	sl, r5
 800d8c0:	f47f af70 	bne.w	800d7a4 <_scanf_float+0x60>
 800d8c4:	6822      	ldr	r2, [r4, #0]
 800d8c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d8ca:	6022      	str	r2, [r4, #0]
 800d8cc:	f806 3b01 	strb.w	r3, [r6], #1
 800d8d0:	e7e4      	b.n	800d89c <_scanf_float+0x158>
 800d8d2:	6822      	ldr	r2, [r4, #0]
 800d8d4:	0610      	lsls	r0, r2, #24
 800d8d6:	f57f af65 	bpl.w	800d7a4 <_scanf_float+0x60>
 800d8da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d8de:	e7f4      	b.n	800d8ca <_scanf_float+0x186>
 800d8e0:	f1ba 0f00 	cmp.w	sl, #0
 800d8e4:	d10e      	bne.n	800d904 <_scanf_float+0x1c0>
 800d8e6:	f1b9 0f00 	cmp.w	r9, #0
 800d8ea:	d10e      	bne.n	800d90a <_scanf_float+0x1c6>
 800d8ec:	6822      	ldr	r2, [r4, #0]
 800d8ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d8f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d8f6:	d108      	bne.n	800d90a <_scanf_float+0x1c6>
 800d8f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d8fc:	6022      	str	r2, [r4, #0]
 800d8fe:	f04f 0a01 	mov.w	sl, #1
 800d902:	e7e3      	b.n	800d8cc <_scanf_float+0x188>
 800d904:	f1ba 0f02 	cmp.w	sl, #2
 800d908:	d055      	beq.n	800d9b6 <_scanf_float+0x272>
 800d90a:	2d01      	cmp	r5, #1
 800d90c:	d002      	beq.n	800d914 <_scanf_float+0x1d0>
 800d90e:	2d04      	cmp	r5, #4
 800d910:	f47f af48 	bne.w	800d7a4 <_scanf_float+0x60>
 800d914:	3501      	adds	r5, #1
 800d916:	b2ed      	uxtb	r5, r5
 800d918:	e7d8      	b.n	800d8cc <_scanf_float+0x188>
 800d91a:	f1ba 0f01 	cmp.w	sl, #1
 800d91e:	f47f af41 	bne.w	800d7a4 <_scanf_float+0x60>
 800d922:	f04f 0a02 	mov.w	sl, #2
 800d926:	e7d1      	b.n	800d8cc <_scanf_float+0x188>
 800d928:	b97d      	cbnz	r5, 800d94a <_scanf_float+0x206>
 800d92a:	f1b9 0f00 	cmp.w	r9, #0
 800d92e:	f47f af3c 	bne.w	800d7aa <_scanf_float+0x66>
 800d932:	6822      	ldr	r2, [r4, #0]
 800d934:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d938:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d93c:	f47f af39 	bne.w	800d7b2 <_scanf_float+0x6e>
 800d940:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d944:	6022      	str	r2, [r4, #0]
 800d946:	2501      	movs	r5, #1
 800d948:	e7c0      	b.n	800d8cc <_scanf_float+0x188>
 800d94a:	2d03      	cmp	r5, #3
 800d94c:	d0e2      	beq.n	800d914 <_scanf_float+0x1d0>
 800d94e:	2d05      	cmp	r5, #5
 800d950:	e7de      	b.n	800d910 <_scanf_float+0x1cc>
 800d952:	2d02      	cmp	r5, #2
 800d954:	f47f af26 	bne.w	800d7a4 <_scanf_float+0x60>
 800d958:	2503      	movs	r5, #3
 800d95a:	e7b7      	b.n	800d8cc <_scanf_float+0x188>
 800d95c:	2d06      	cmp	r5, #6
 800d95e:	f47f af21 	bne.w	800d7a4 <_scanf_float+0x60>
 800d962:	2507      	movs	r5, #7
 800d964:	e7b2      	b.n	800d8cc <_scanf_float+0x188>
 800d966:	6822      	ldr	r2, [r4, #0]
 800d968:	0591      	lsls	r1, r2, #22
 800d96a:	f57f af1b 	bpl.w	800d7a4 <_scanf_float+0x60>
 800d96e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d972:	6022      	str	r2, [r4, #0]
 800d974:	f8cd 9004 	str.w	r9, [sp, #4]
 800d978:	e7a8      	b.n	800d8cc <_scanf_float+0x188>
 800d97a:	6822      	ldr	r2, [r4, #0]
 800d97c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d980:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d984:	d006      	beq.n	800d994 <_scanf_float+0x250>
 800d986:	0550      	lsls	r0, r2, #21
 800d988:	f57f af0c 	bpl.w	800d7a4 <_scanf_float+0x60>
 800d98c:	f1b9 0f00 	cmp.w	r9, #0
 800d990:	f43f af0f 	beq.w	800d7b2 <_scanf_float+0x6e>
 800d994:	0591      	lsls	r1, r2, #22
 800d996:	bf58      	it	pl
 800d998:	9901      	ldrpl	r1, [sp, #4]
 800d99a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d99e:	bf58      	it	pl
 800d9a0:	eba9 0101 	subpl.w	r1, r9, r1
 800d9a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d9a8:	bf58      	it	pl
 800d9aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d9ae:	6022      	str	r2, [r4, #0]
 800d9b0:	f04f 0900 	mov.w	r9, #0
 800d9b4:	e78a      	b.n	800d8cc <_scanf_float+0x188>
 800d9b6:	f04f 0a03 	mov.w	sl, #3
 800d9ba:	e787      	b.n	800d8cc <_scanf_float+0x188>
 800d9bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d9c0:	4639      	mov	r1, r7
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4798      	blx	r3
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	f43f aedf 	beq.w	800d78a <_scanf_float+0x46>
 800d9cc:	e6ea      	b.n	800d7a4 <_scanf_float+0x60>
 800d9ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9d6:	463a      	mov	r2, r7
 800d9d8:	4640      	mov	r0, r8
 800d9da:	4798      	blx	r3
 800d9dc:	6923      	ldr	r3, [r4, #16]
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	6123      	str	r3, [r4, #16]
 800d9e2:	e6ec      	b.n	800d7be <_scanf_float+0x7a>
 800d9e4:	1e6b      	subs	r3, r5, #1
 800d9e6:	2b06      	cmp	r3, #6
 800d9e8:	d825      	bhi.n	800da36 <_scanf_float+0x2f2>
 800d9ea:	2d02      	cmp	r5, #2
 800d9ec:	d836      	bhi.n	800da5c <_scanf_float+0x318>
 800d9ee:	455e      	cmp	r6, fp
 800d9f0:	f67f aee8 	bls.w	800d7c4 <_scanf_float+0x80>
 800d9f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9fc:	463a      	mov	r2, r7
 800d9fe:	4640      	mov	r0, r8
 800da00:	4798      	blx	r3
 800da02:	6923      	ldr	r3, [r4, #16]
 800da04:	3b01      	subs	r3, #1
 800da06:	6123      	str	r3, [r4, #16]
 800da08:	e7f1      	b.n	800d9ee <_scanf_float+0x2aa>
 800da0a:	9802      	ldr	r0, [sp, #8]
 800da0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800da14:	9002      	str	r0, [sp, #8]
 800da16:	463a      	mov	r2, r7
 800da18:	4640      	mov	r0, r8
 800da1a:	4798      	blx	r3
 800da1c:	6923      	ldr	r3, [r4, #16]
 800da1e:	3b01      	subs	r3, #1
 800da20:	6123      	str	r3, [r4, #16]
 800da22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da26:	fa5f fa8a 	uxtb.w	sl, sl
 800da2a:	f1ba 0f02 	cmp.w	sl, #2
 800da2e:	d1ec      	bne.n	800da0a <_scanf_float+0x2c6>
 800da30:	3d03      	subs	r5, #3
 800da32:	b2ed      	uxtb	r5, r5
 800da34:	1b76      	subs	r6, r6, r5
 800da36:	6823      	ldr	r3, [r4, #0]
 800da38:	05da      	lsls	r2, r3, #23
 800da3a:	d52f      	bpl.n	800da9c <_scanf_float+0x358>
 800da3c:	055b      	lsls	r3, r3, #21
 800da3e:	d510      	bpl.n	800da62 <_scanf_float+0x31e>
 800da40:	455e      	cmp	r6, fp
 800da42:	f67f aebf 	bls.w	800d7c4 <_scanf_float+0x80>
 800da46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da4e:	463a      	mov	r2, r7
 800da50:	4640      	mov	r0, r8
 800da52:	4798      	blx	r3
 800da54:	6923      	ldr	r3, [r4, #16]
 800da56:	3b01      	subs	r3, #1
 800da58:	6123      	str	r3, [r4, #16]
 800da5a:	e7f1      	b.n	800da40 <_scanf_float+0x2fc>
 800da5c:	46aa      	mov	sl, r5
 800da5e:	9602      	str	r6, [sp, #8]
 800da60:	e7df      	b.n	800da22 <_scanf_float+0x2de>
 800da62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800da66:	6923      	ldr	r3, [r4, #16]
 800da68:	2965      	cmp	r1, #101	; 0x65
 800da6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800da6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800da72:	6123      	str	r3, [r4, #16]
 800da74:	d00c      	beq.n	800da90 <_scanf_float+0x34c>
 800da76:	2945      	cmp	r1, #69	; 0x45
 800da78:	d00a      	beq.n	800da90 <_scanf_float+0x34c>
 800da7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da7e:	463a      	mov	r2, r7
 800da80:	4640      	mov	r0, r8
 800da82:	4798      	blx	r3
 800da84:	6923      	ldr	r3, [r4, #16]
 800da86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	1eb5      	subs	r5, r6, #2
 800da8e:	6123      	str	r3, [r4, #16]
 800da90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da94:	463a      	mov	r2, r7
 800da96:	4640      	mov	r0, r8
 800da98:	4798      	blx	r3
 800da9a:	462e      	mov	r6, r5
 800da9c:	6825      	ldr	r5, [r4, #0]
 800da9e:	f015 0510 	ands.w	r5, r5, #16
 800daa2:	d159      	bne.n	800db58 <_scanf_float+0x414>
 800daa4:	7035      	strb	r5, [r6, #0]
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800daac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dab0:	d11b      	bne.n	800daea <_scanf_float+0x3a6>
 800dab2:	9b01      	ldr	r3, [sp, #4]
 800dab4:	454b      	cmp	r3, r9
 800dab6:	eba3 0209 	sub.w	r2, r3, r9
 800daba:	d123      	bne.n	800db04 <_scanf_float+0x3c0>
 800dabc:	2200      	movs	r2, #0
 800dabe:	4659      	mov	r1, fp
 800dac0:	4640      	mov	r0, r8
 800dac2:	f000 ff8f 	bl	800e9e4 <_strtod_r>
 800dac6:	6822      	ldr	r2, [r4, #0]
 800dac8:	9b03      	ldr	r3, [sp, #12]
 800daca:	f012 0f02 	tst.w	r2, #2
 800dace:	ec57 6b10 	vmov	r6, r7, d0
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	d021      	beq.n	800db1a <_scanf_float+0x3d6>
 800dad6:	9903      	ldr	r1, [sp, #12]
 800dad8:	1d1a      	adds	r2, r3, #4
 800dada:	600a      	str	r2, [r1, #0]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	e9c3 6700 	strd	r6, r7, [r3]
 800dae2:	68e3      	ldr	r3, [r4, #12]
 800dae4:	3301      	adds	r3, #1
 800dae6:	60e3      	str	r3, [r4, #12]
 800dae8:	e66d      	b.n	800d7c6 <_scanf_float+0x82>
 800daea:	9b04      	ldr	r3, [sp, #16]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d0e5      	beq.n	800dabc <_scanf_float+0x378>
 800daf0:	9905      	ldr	r1, [sp, #20]
 800daf2:	230a      	movs	r3, #10
 800daf4:	462a      	mov	r2, r5
 800daf6:	3101      	adds	r1, #1
 800daf8:	4640      	mov	r0, r8
 800dafa:	f000 fffb 	bl	800eaf4 <_strtol_r>
 800dafe:	9b04      	ldr	r3, [sp, #16]
 800db00:	9e05      	ldr	r6, [sp, #20]
 800db02:	1ac2      	subs	r2, r0, r3
 800db04:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800db08:	429e      	cmp	r6, r3
 800db0a:	bf28      	it	cs
 800db0c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800db10:	4912      	ldr	r1, [pc, #72]	; (800db5c <_scanf_float+0x418>)
 800db12:	4630      	mov	r0, r6
 800db14:	f000 f8a6 	bl	800dc64 <siprintf>
 800db18:	e7d0      	b.n	800dabc <_scanf_float+0x378>
 800db1a:	9903      	ldr	r1, [sp, #12]
 800db1c:	f012 0f04 	tst.w	r2, #4
 800db20:	f103 0204 	add.w	r2, r3, #4
 800db24:	600a      	str	r2, [r1, #0]
 800db26:	d1d9      	bne.n	800dadc <_scanf_float+0x398>
 800db28:	f8d3 8000 	ldr.w	r8, [r3]
 800db2c:	ee10 2a10 	vmov	r2, s0
 800db30:	ee10 0a10 	vmov	r0, s0
 800db34:	463b      	mov	r3, r7
 800db36:	4639      	mov	r1, r7
 800db38:	f7f3 f818 	bl	8000b6c <__aeabi_dcmpun>
 800db3c:	b128      	cbz	r0, 800db4a <_scanf_float+0x406>
 800db3e:	4808      	ldr	r0, [pc, #32]	; (800db60 <_scanf_float+0x41c>)
 800db40:	f000 f88a 	bl	800dc58 <nanf>
 800db44:	ed88 0a00 	vstr	s0, [r8]
 800db48:	e7cb      	b.n	800dae2 <_scanf_float+0x39e>
 800db4a:	4630      	mov	r0, r6
 800db4c:	4639      	mov	r1, r7
 800db4e:	f7f3 f843 	bl	8000bd8 <__aeabi_d2f>
 800db52:	f8c8 0000 	str.w	r0, [r8]
 800db56:	e7c4      	b.n	800dae2 <_scanf_float+0x39e>
 800db58:	2500      	movs	r5, #0
 800db5a:	e634      	b.n	800d7c6 <_scanf_float+0x82>
 800db5c:	080116fc 	.word	0x080116fc
 800db60:	08011ae5 	.word	0x08011ae5

0800db64 <cleanup_glue>:
 800db64:	b538      	push	{r3, r4, r5, lr}
 800db66:	460c      	mov	r4, r1
 800db68:	6809      	ldr	r1, [r1, #0]
 800db6a:	4605      	mov	r5, r0
 800db6c:	b109      	cbz	r1, 800db72 <cleanup_glue+0xe>
 800db6e:	f7ff fff9 	bl	800db64 <cleanup_glue>
 800db72:	4621      	mov	r1, r4
 800db74:	4628      	mov	r0, r5
 800db76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db7a:	f002 b919 	b.w	800fdb0 <_free_r>
	...

0800db80 <_reclaim_reent>:
 800db80:	4b2c      	ldr	r3, [pc, #176]	; (800dc34 <_reclaim_reent+0xb4>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4283      	cmp	r3, r0
 800db86:	b570      	push	{r4, r5, r6, lr}
 800db88:	4604      	mov	r4, r0
 800db8a:	d051      	beq.n	800dc30 <_reclaim_reent+0xb0>
 800db8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800db8e:	b143      	cbz	r3, 800dba2 <_reclaim_reent+0x22>
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d14a      	bne.n	800dc2c <_reclaim_reent+0xac>
 800db96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db98:	6819      	ldr	r1, [r3, #0]
 800db9a:	b111      	cbz	r1, 800dba2 <_reclaim_reent+0x22>
 800db9c:	4620      	mov	r0, r4
 800db9e:	f002 f907 	bl	800fdb0 <_free_r>
 800dba2:	6961      	ldr	r1, [r4, #20]
 800dba4:	b111      	cbz	r1, 800dbac <_reclaim_reent+0x2c>
 800dba6:	4620      	mov	r0, r4
 800dba8:	f002 f902 	bl	800fdb0 <_free_r>
 800dbac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dbae:	b111      	cbz	r1, 800dbb6 <_reclaim_reent+0x36>
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f002 f8fd 	bl	800fdb0 <_free_r>
 800dbb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dbb8:	b111      	cbz	r1, 800dbc0 <_reclaim_reent+0x40>
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f002 f8f8 	bl	800fdb0 <_free_r>
 800dbc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dbc2:	b111      	cbz	r1, 800dbca <_reclaim_reent+0x4a>
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f002 f8f3 	bl	800fdb0 <_free_r>
 800dbca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dbcc:	b111      	cbz	r1, 800dbd4 <_reclaim_reent+0x54>
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f002 f8ee 	bl	800fdb0 <_free_r>
 800dbd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dbd6:	b111      	cbz	r1, 800dbde <_reclaim_reent+0x5e>
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f002 f8e9 	bl	800fdb0 <_free_r>
 800dbde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dbe0:	b111      	cbz	r1, 800dbe8 <_reclaim_reent+0x68>
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f002 f8e4 	bl	800fdb0 <_free_r>
 800dbe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbea:	b111      	cbz	r1, 800dbf2 <_reclaim_reent+0x72>
 800dbec:	4620      	mov	r0, r4
 800dbee:	f002 f8df 	bl	800fdb0 <_free_r>
 800dbf2:	69a3      	ldr	r3, [r4, #24]
 800dbf4:	b1e3      	cbz	r3, 800dc30 <_reclaim_reent+0xb0>
 800dbf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	4798      	blx	r3
 800dbfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dbfe:	b1b9      	cbz	r1, 800dc30 <_reclaim_reent+0xb0>
 800dc00:	4620      	mov	r0, r4
 800dc02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc06:	f7ff bfad 	b.w	800db64 <cleanup_glue>
 800dc0a:	5949      	ldr	r1, [r1, r5]
 800dc0c:	b941      	cbnz	r1, 800dc20 <_reclaim_reent+0xa0>
 800dc0e:	3504      	adds	r5, #4
 800dc10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc12:	2d80      	cmp	r5, #128	; 0x80
 800dc14:	68d9      	ldr	r1, [r3, #12]
 800dc16:	d1f8      	bne.n	800dc0a <_reclaim_reent+0x8a>
 800dc18:	4620      	mov	r0, r4
 800dc1a:	f002 f8c9 	bl	800fdb0 <_free_r>
 800dc1e:	e7ba      	b.n	800db96 <_reclaim_reent+0x16>
 800dc20:	680e      	ldr	r6, [r1, #0]
 800dc22:	4620      	mov	r0, r4
 800dc24:	f002 f8c4 	bl	800fdb0 <_free_r>
 800dc28:	4631      	mov	r1, r6
 800dc2a:	e7ef      	b.n	800dc0c <_reclaim_reent+0x8c>
 800dc2c:	2500      	movs	r5, #0
 800dc2e:	e7ef      	b.n	800dc10 <_reclaim_reent+0x90>
 800dc30:	bd70      	pop	{r4, r5, r6, pc}
 800dc32:	bf00      	nop
 800dc34:	20000110 	.word	0x20000110

0800dc38 <_sbrk_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4d06      	ldr	r5, [pc, #24]	; (800dc54 <_sbrk_r+0x1c>)
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4604      	mov	r4, r0
 800dc40:	4608      	mov	r0, r1
 800dc42:	602b      	str	r3, [r5, #0]
 800dc44:	f7f4 f8f8 	bl	8001e38 <_sbrk>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d102      	bne.n	800dc52 <_sbrk_r+0x1a>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	b103      	cbz	r3, 800dc52 <_sbrk_r+0x1a>
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	20006f18 	.word	0x20006f18

0800dc58 <nanf>:
 800dc58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dc60 <nanf+0x8>
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	7fc00000 	.word	0x7fc00000

0800dc64 <siprintf>:
 800dc64:	b40e      	push	{r1, r2, r3}
 800dc66:	b500      	push	{lr}
 800dc68:	b09c      	sub	sp, #112	; 0x70
 800dc6a:	ab1d      	add	r3, sp, #116	; 0x74
 800dc6c:	9002      	str	r0, [sp, #8]
 800dc6e:	9006      	str	r0, [sp, #24]
 800dc70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dc74:	4809      	ldr	r0, [pc, #36]	; (800dc9c <siprintf+0x38>)
 800dc76:	9107      	str	r1, [sp, #28]
 800dc78:	9104      	str	r1, [sp, #16]
 800dc7a:	4909      	ldr	r1, [pc, #36]	; (800dca0 <siprintf+0x3c>)
 800dc7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc80:	9105      	str	r1, [sp, #20]
 800dc82:	6800      	ldr	r0, [r0, #0]
 800dc84:	9301      	str	r3, [sp, #4]
 800dc86:	a902      	add	r1, sp, #8
 800dc88:	f002 f93a 	bl	800ff00 <_svfiprintf_r>
 800dc8c:	9b02      	ldr	r3, [sp, #8]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	701a      	strb	r2, [r3, #0]
 800dc92:	b01c      	add	sp, #112	; 0x70
 800dc94:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc98:	b003      	add	sp, #12
 800dc9a:	4770      	bx	lr
 800dc9c:	20000110 	.word	0x20000110
 800dca0:	ffff0208 	.word	0xffff0208

0800dca4 <siscanf>:
 800dca4:	b40e      	push	{r1, r2, r3}
 800dca6:	b510      	push	{r4, lr}
 800dca8:	b09f      	sub	sp, #124	; 0x7c
 800dcaa:	ac21      	add	r4, sp, #132	; 0x84
 800dcac:	f44f 7101 	mov.w	r1, #516	; 0x204
 800dcb0:	f854 2b04 	ldr.w	r2, [r4], #4
 800dcb4:	9201      	str	r2, [sp, #4]
 800dcb6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800dcba:	9004      	str	r0, [sp, #16]
 800dcbc:	9008      	str	r0, [sp, #32]
 800dcbe:	f7f2 faa7 	bl	8000210 <strlen>
 800dcc2:	4b0c      	ldr	r3, [pc, #48]	; (800dcf4 <siscanf+0x50>)
 800dcc4:	9005      	str	r0, [sp, #20]
 800dcc6:	9009      	str	r0, [sp, #36]	; 0x24
 800dcc8:	930d      	str	r3, [sp, #52]	; 0x34
 800dcca:	480b      	ldr	r0, [pc, #44]	; (800dcf8 <siscanf+0x54>)
 800dccc:	9a01      	ldr	r2, [sp, #4]
 800dcce:	6800      	ldr	r0, [r0, #0]
 800dcd0:	9403      	str	r4, [sp, #12]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9311      	str	r3, [sp, #68]	; 0x44
 800dcd6:	9316      	str	r3, [sp, #88]	; 0x58
 800dcd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcdc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800dce0:	a904      	add	r1, sp, #16
 800dce2:	4623      	mov	r3, r4
 800dce4:	f002 fa66 	bl	80101b4 <__ssvfiscanf_r>
 800dce8:	b01f      	add	sp, #124	; 0x7c
 800dcea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcee:	b003      	add	sp, #12
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	0800dd1f 	.word	0x0800dd1f
 800dcf8:	20000110 	.word	0x20000110

0800dcfc <__sread>:
 800dcfc:	b510      	push	{r4, lr}
 800dcfe:	460c      	mov	r4, r1
 800dd00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd04:	f002 feb4 	bl	8010a70 <_read_r>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	bfab      	itete	ge
 800dd0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd0e:	89a3      	ldrhlt	r3, [r4, #12]
 800dd10:	181b      	addge	r3, r3, r0
 800dd12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd16:	bfac      	ite	ge
 800dd18:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd1a:	81a3      	strhlt	r3, [r4, #12]
 800dd1c:	bd10      	pop	{r4, pc}

0800dd1e <__seofread>:
 800dd1e:	2000      	movs	r0, #0
 800dd20:	4770      	bx	lr

0800dd22 <__swrite>:
 800dd22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd26:	461f      	mov	r7, r3
 800dd28:	898b      	ldrh	r3, [r1, #12]
 800dd2a:	05db      	lsls	r3, r3, #23
 800dd2c:	4605      	mov	r5, r0
 800dd2e:	460c      	mov	r4, r1
 800dd30:	4616      	mov	r6, r2
 800dd32:	d505      	bpl.n	800dd40 <__swrite+0x1e>
 800dd34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd38:	2302      	movs	r3, #2
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f001 fb30 	bl	800f3a0 <_lseek_r>
 800dd40:	89a3      	ldrh	r3, [r4, #12]
 800dd42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd4a:	81a3      	strh	r3, [r4, #12]
 800dd4c:	4632      	mov	r2, r6
 800dd4e:	463b      	mov	r3, r7
 800dd50:	4628      	mov	r0, r5
 800dd52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd56:	f000 becf 	b.w	800eaf8 <_write_r>

0800dd5a <__sseek>:
 800dd5a:	b510      	push	{r4, lr}
 800dd5c:	460c      	mov	r4, r1
 800dd5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd62:	f001 fb1d 	bl	800f3a0 <_lseek_r>
 800dd66:	1c43      	adds	r3, r0, #1
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	bf15      	itete	ne
 800dd6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd76:	81a3      	strheq	r3, [r4, #12]
 800dd78:	bf18      	it	ne
 800dd7a:	81a3      	strhne	r3, [r4, #12]
 800dd7c:	bd10      	pop	{r4, pc}

0800dd7e <__sclose>:
 800dd7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd82:	f000 becb 	b.w	800eb1c <_close_r>

0800dd86 <strchr>:
 800dd86:	b2c9      	uxtb	r1, r1
 800dd88:	4603      	mov	r3, r0
 800dd8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd8e:	b11a      	cbz	r2, 800dd98 <strchr+0x12>
 800dd90:	428a      	cmp	r2, r1
 800dd92:	d1f9      	bne.n	800dd88 <strchr+0x2>
 800dd94:	4618      	mov	r0, r3
 800dd96:	4770      	bx	lr
 800dd98:	2900      	cmp	r1, #0
 800dd9a:	bf18      	it	ne
 800dd9c:	2300      	movne	r3, #0
 800dd9e:	e7f9      	b.n	800dd94 <strchr+0xe>

0800dda0 <sulp>:
 800dda0:	b570      	push	{r4, r5, r6, lr}
 800dda2:	4604      	mov	r4, r0
 800dda4:	460d      	mov	r5, r1
 800dda6:	ec45 4b10 	vmov	d0, r4, r5
 800ddaa:	4616      	mov	r6, r2
 800ddac:	f001 fe9a 	bl	800fae4 <__ulp>
 800ddb0:	ec51 0b10 	vmov	r0, r1, d0
 800ddb4:	b17e      	cbz	r6, 800ddd6 <sulp+0x36>
 800ddb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ddba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	dd09      	ble.n	800ddd6 <sulp+0x36>
 800ddc2:	051b      	lsls	r3, r3, #20
 800ddc4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ddc8:	2400      	movs	r4, #0
 800ddca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ddce:	4622      	mov	r2, r4
 800ddd0:	462b      	mov	r3, r5
 800ddd2:	f7f2 fc31 	bl	8000638 <__aeabi_dmul>
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}

0800ddd8 <_strtod_l>:
 800ddd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dddc:	ed2d 8b02 	vpush	{d8}
 800dde0:	b09d      	sub	sp, #116	; 0x74
 800dde2:	461f      	mov	r7, r3
 800dde4:	2300      	movs	r3, #0
 800dde6:	9318      	str	r3, [sp, #96]	; 0x60
 800dde8:	4ba2      	ldr	r3, [pc, #648]	; (800e074 <_strtod_l+0x29c>)
 800ddea:	9213      	str	r2, [sp, #76]	; 0x4c
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	9305      	str	r3, [sp, #20]
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	4688      	mov	r8, r1
 800ddf6:	f7f2 fa0b 	bl	8000210 <strlen>
 800ddfa:	f04f 0a00 	mov.w	sl, #0
 800ddfe:	4605      	mov	r5, r0
 800de00:	f04f 0b00 	mov.w	fp, #0
 800de04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800de08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de0a:	781a      	ldrb	r2, [r3, #0]
 800de0c:	2a2b      	cmp	r2, #43	; 0x2b
 800de0e:	d04e      	beq.n	800deae <_strtod_l+0xd6>
 800de10:	d83b      	bhi.n	800de8a <_strtod_l+0xb2>
 800de12:	2a0d      	cmp	r2, #13
 800de14:	d834      	bhi.n	800de80 <_strtod_l+0xa8>
 800de16:	2a08      	cmp	r2, #8
 800de18:	d834      	bhi.n	800de84 <_strtod_l+0xac>
 800de1a:	2a00      	cmp	r2, #0
 800de1c:	d03e      	beq.n	800de9c <_strtod_l+0xc4>
 800de1e:	2300      	movs	r3, #0
 800de20:	930a      	str	r3, [sp, #40]	; 0x28
 800de22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800de24:	7833      	ldrb	r3, [r6, #0]
 800de26:	2b30      	cmp	r3, #48	; 0x30
 800de28:	f040 80b0 	bne.w	800df8c <_strtod_l+0x1b4>
 800de2c:	7873      	ldrb	r3, [r6, #1]
 800de2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de32:	2b58      	cmp	r3, #88	; 0x58
 800de34:	d168      	bne.n	800df08 <_strtod_l+0x130>
 800de36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	ab18      	add	r3, sp, #96	; 0x60
 800de3c:	9702      	str	r7, [sp, #8]
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	4a8d      	ldr	r2, [pc, #564]	; (800e078 <_strtod_l+0x2a0>)
 800de42:	ab19      	add	r3, sp, #100	; 0x64
 800de44:	a917      	add	r1, sp, #92	; 0x5c
 800de46:	4620      	mov	r0, r4
 800de48:	f000 ffa2 	bl	800ed90 <__gethex>
 800de4c:	f010 0707 	ands.w	r7, r0, #7
 800de50:	4605      	mov	r5, r0
 800de52:	d005      	beq.n	800de60 <_strtod_l+0x88>
 800de54:	2f06      	cmp	r7, #6
 800de56:	d12c      	bne.n	800deb2 <_strtod_l+0xda>
 800de58:	3601      	adds	r6, #1
 800de5a:	2300      	movs	r3, #0
 800de5c:	9617      	str	r6, [sp, #92]	; 0x5c
 800de5e:	930a      	str	r3, [sp, #40]	; 0x28
 800de60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de62:	2b00      	cmp	r3, #0
 800de64:	f040 8590 	bne.w	800e988 <_strtod_l+0xbb0>
 800de68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de6a:	b1eb      	cbz	r3, 800dea8 <_strtod_l+0xd0>
 800de6c:	4652      	mov	r2, sl
 800de6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800de72:	ec43 2b10 	vmov	d0, r2, r3
 800de76:	b01d      	add	sp, #116	; 0x74
 800de78:	ecbd 8b02 	vpop	{d8}
 800de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de80:	2a20      	cmp	r2, #32
 800de82:	d1cc      	bne.n	800de1e <_strtod_l+0x46>
 800de84:	3301      	adds	r3, #1
 800de86:	9317      	str	r3, [sp, #92]	; 0x5c
 800de88:	e7be      	b.n	800de08 <_strtod_l+0x30>
 800de8a:	2a2d      	cmp	r2, #45	; 0x2d
 800de8c:	d1c7      	bne.n	800de1e <_strtod_l+0x46>
 800de8e:	2201      	movs	r2, #1
 800de90:	920a      	str	r2, [sp, #40]	; 0x28
 800de92:	1c5a      	adds	r2, r3, #1
 800de94:	9217      	str	r2, [sp, #92]	; 0x5c
 800de96:	785b      	ldrb	r3, [r3, #1]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1c2      	bne.n	800de22 <_strtod_l+0x4a>
 800de9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de9e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f040 856e 	bne.w	800e984 <_strtod_l+0xbac>
 800dea8:	4652      	mov	r2, sl
 800deaa:	465b      	mov	r3, fp
 800deac:	e7e1      	b.n	800de72 <_strtod_l+0x9a>
 800deae:	2200      	movs	r2, #0
 800deb0:	e7ee      	b.n	800de90 <_strtod_l+0xb8>
 800deb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800deb4:	b13a      	cbz	r2, 800dec6 <_strtod_l+0xee>
 800deb6:	2135      	movs	r1, #53	; 0x35
 800deb8:	a81a      	add	r0, sp, #104	; 0x68
 800deba:	f001 ff1e 	bl	800fcfa <__copybits>
 800debe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dec0:	4620      	mov	r0, r4
 800dec2:	f001 fadd 	bl	800f480 <_Bfree>
 800dec6:	3f01      	subs	r7, #1
 800dec8:	2f04      	cmp	r7, #4
 800deca:	d806      	bhi.n	800deda <_strtod_l+0x102>
 800decc:	e8df f007 	tbb	[pc, r7]
 800ded0:	1714030a 	.word	0x1714030a
 800ded4:	0a          	.byte	0x0a
 800ded5:	00          	.byte	0x00
 800ded6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800deda:	0728      	lsls	r0, r5, #28
 800dedc:	d5c0      	bpl.n	800de60 <_strtod_l+0x88>
 800dede:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dee2:	e7bd      	b.n	800de60 <_strtod_l+0x88>
 800dee4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800dee8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800deea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800deee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800def2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800def6:	e7f0      	b.n	800deda <_strtod_l+0x102>
 800def8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e07c <_strtod_l+0x2a4>
 800defc:	e7ed      	b.n	800deda <_strtod_l+0x102>
 800defe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800df02:	f04f 3aff 	mov.w	sl, #4294967295
 800df06:	e7e8      	b.n	800deda <_strtod_l+0x102>
 800df08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df0a:	1c5a      	adds	r2, r3, #1
 800df0c:	9217      	str	r2, [sp, #92]	; 0x5c
 800df0e:	785b      	ldrb	r3, [r3, #1]
 800df10:	2b30      	cmp	r3, #48	; 0x30
 800df12:	d0f9      	beq.n	800df08 <_strtod_l+0x130>
 800df14:	2b00      	cmp	r3, #0
 800df16:	d0a3      	beq.n	800de60 <_strtod_l+0x88>
 800df18:	2301      	movs	r3, #1
 800df1a:	f04f 0900 	mov.w	r9, #0
 800df1e:	9304      	str	r3, [sp, #16]
 800df20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df22:	9308      	str	r3, [sp, #32]
 800df24:	f8cd 901c 	str.w	r9, [sp, #28]
 800df28:	464f      	mov	r7, r9
 800df2a:	220a      	movs	r2, #10
 800df2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800df2e:	7806      	ldrb	r6, [r0, #0]
 800df30:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800df34:	b2d9      	uxtb	r1, r3
 800df36:	2909      	cmp	r1, #9
 800df38:	d92a      	bls.n	800df90 <_strtod_l+0x1b8>
 800df3a:	9905      	ldr	r1, [sp, #20]
 800df3c:	462a      	mov	r2, r5
 800df3e:	f002 fdeb 	bl	8010b18 <strncmp>
 800df42:	b398      	cbz	r0, 800dfac <_strtod_l+0x1d4>
 800df44:	2000      	movs	r0, #0
 800df46:	4632      	mov	r2, r6
 800df48:	463d      	mov	r5, r7
 800df4a:	9005      	str	r0, [sp, #20]
 800df4c:	4603      	mov	r3, r0
 800df4e:	2a65      	cmp	r2, #101	; 0x65
 800df50:	d001      	beq.n	800df56 <_strtod_l+0x17e>
 800df52:	2a45      	cmp	r2, #69	; 0x45
 800df54:	d118      	bne.n	800df88 <_strtod_l+0x1b0>
 800df56:	b91d      	cbnz	r5, 800df60 <_strtod_l+0x188>
 800df58:	9a04      	ldr	r2, [sp, #16]
 800df5a:	4302      	orrs	r2, r0
 800df5c:	d09e      	beq.n	800de9c <_strtod_l+0xc4>
 800df5e:	2500      	movs	r5, #0
 800df60:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800df64:	f108 0201 	add.w	r2, r8, #1
 800df68:	9217      	str	r2, [sp, #92]	; 0x5c
 800df6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800df6e:	2a2b      	cmp	r2, #43	; 0x2b
 800df70:	d075      	beq.n	800e05e <_strtod_l+0x286>
 800df72:	2a2d      	cmp	r2, #45	; 0x2d
 800df74:	d07b      	beq.n	800e06e <_strtod_l+0x296>
 800df76:	f04f 0c00 	mov.w	ip, #0
 800df7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800df7e:	2909      	cmp	r1, #9
 800df80:	f240 8082 	bls.w	800e088 <_strtod_l+0x2b0>
 800df84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800df88:	2600      	movs	r6, #0
 800df8a:	e09d      	b.n	800e0c8 <_strtod_l+0x2f0>
 800df8c:	2300      	movs	r3, #0
 800df8e:	e7c4      	b.n	800df1a <_strtod_l+0x142>
 800df90:	2f08      	cmp	r7, #8
 800df92:	bfd8      	it	le
 800df94:	9907      	ldrle	r1, [sp, #28]
 800df96:	f100 0001 	add.w	r0, r0, #1
 800df9a:	bfda      	itte	le
 800df9c:	fb02 3301 	mlale	r3, r2, r1, r3
 800dfa0:	9307      	strle	r3, [sp, #28]
 800dfa2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800dfa6:	3701      	adds	r7, #1
 800dfa8:	9017      	str	r0, [sp, #92]	; 0x5c
 800dfaa:	e7bf      	b.n	800df2c <_strtod_l+0x154>
 800dfac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfae:	195a      	adds	r2, r3, r5
 800dfb0:	9217      	str	r2, [sp, #92]	; 0x5c
 800dfb2:	5d5a      	ldrb	r2, [r3, r5]
 800dfb4:	2f00      	cmp	r7, #0
 800dfb6:	d037      	beq.n	800e028 <_strtod_l+0x250>
 800dfb8:	9005      	str	r0, [sp, #20]
 800dfba:	463d      	mov	r5, r7
 800dfbc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dfc0:	2b09      	cmp	r3, #9
 800dfc2:	d912      	bls.n	800dfea <_strtod_l+0x212>
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	e7c2      	b.n	800df4e <_strtod_l+0x176>
 800dfc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfca:	1c5a      	adds	r2, r3, #1
 800dfcc:	9217      	str	r2, [sp, #92]	; 0x5c
 800dfce:	785a      	ldrb	r2, [r3, #1]
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	2a30      	cmp	r2, #48	; 0x30
 800dfd4:	d0f8      	beq.n	800dfc8 <_strtod_l+0x1f0>
 800dfd6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dfda:	2b08      	cmp	r3, #8
 800dfdc:	f200 84d9 	bhi.w	800e992 <_strtod_l+0xbba>
 800dfe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfe2:	9005      	str	r0, [sp, #20]
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	9308      	str	r3, [sp, #32]
 800dfe8:	4605      	mov	r5, r0
 800dfea:	3a30      	subs	r2, #48	; 0x30
 800dfec:	f100 0301 	add.w	r3, r0, #1
 800dff0:	d014      	beq.n	800e01c <_strtod_l+0x244>
 800dff2:	9905      	ldr	r1, [sp, #20]
 800dff4:	4419      	add	r1, r3
 800dff6:	9105      	str	r1, [sp, #20]
 800dff8:	462b      	mov	r3, r5
 800dffa:	eb00 0e05 	add.w	lr, r0, r5
 800dffe:	210a      	movs	r1, #10
 800e000:	4573      	cmp	r3, lr
 800e002:	d113      	bne.n	800e02c <_strtod_l+0x254>
 800e004:	182b      	adds	r3, r5, r0
 800e006:	2b08      	cmp	r3, #8
 800e008:	f105 0501 	add.w	r5, r5, #1
 800e00c:	4405      	add	r5, r0
 800e00e:	dc1c      	bgt.n	800e04a <_strtod_l+0x272>
 800e010:	9907      	ldr	r1, [sp, #28]
 800e012:	230a      	movs	r3, #10
 800e014:	fb03 2301 	mla	r3, r3, r1, r2
 800e018:	9307      	str	r3, [sp, #28]
 800e01a:	2300      	movs	r3, #0
 800e01c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e01e:	1c51      	adds	r1, r2, #1
 800e020:	9117      	str	r1, [sp, #92]	; 0x5c
 800e022:	7852      	ldrb	r2, [r2, #1]
 800e024:	4618      	mov	r0, r3
 800e026:	e7c9      	b.n	800dfbc <_strtod_l+0x1e4>
 800e028:	4638      	mov	r0, r7
 800e02a:	e7d2      	b.n	800dfd2 <_strtod_l+0x1fa>
 800e02c:	2b08      	cmp	r3, #8
 800e02e:	dc04      	bgt.n	800e03a <_strtod_l+0x262>
 800e030:	9e07      	ldr	r6, [sp, #28]
 800e032:	434e      	muls	r6, r1
 800e034:	9607      	str	r6, [sp, #28]
 800e036:	3301      	adds	r3, #1
 800e038:	e7e2      	b.n	800e000 <_strtod_l+0x228>
 800e03a:	f103 0c01 	add.w	ip, r3, #1
 800e03e:	f1bc 0f10 	cmp.w	ip, #16
 800e042:	bfd8      	it	le
 800e044:	fb01 f909 	mulle.w	r9, r1, r9
 800e048:	e7f5      	b.n	800e036 <_strtod_l+0x25e>
 800e04a:	2d10      	cmp	r5, #16
 800e04c:	bfdc      	itt	le
 800e04e:	230a      	movle	r3, #10
 800e050:	fb03 2909 	mlale	r9, r3, r9, r2
 800e054:	e7e1      	b.n	800e01a <_strtod_l+0x242>
 800e056:	2300      	movs	r3, #0
 800e058:	9305      	str	r3, [sp, #20]
 800e05a:	2301      	movs	r3, #1
 800e05c:	e77c      	b.n	800df58 <_strtod_l+0x180>
 800e05e:	f04f 0c00 	mov.w	ip, #0
 800e062:	f108 0202 	add.w	r2, r8, #2
 800e066:	9217      	str	r2, [sp, #92]	; 0x5c
 800e068:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e06c:	e785      	b.n	800df7a <_strtod_l+0x1a2>
 800e06e:	f04f 0c01 	mov.w	ip, #1
 800e072:	e7f6      	b.n	800e062 <_strtod_l+0x28a>
 800e074:	080118d8 	.word	0x080118d8
 800e078:	08011710 	.word	0x08011710
 800e07c:	7ff00000 	.word	0x7ff00000
 800e080:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e082:	1c51      	adds	r1, r2, #1
 800e084:	9117      	str	r1, [sp, #92]	; 0x5c
 800e086:	7852      	ldrb	r2, [r2, #1]
 800e088:	2a30      	cmp	r2, #48	; 0x30
 800e08a:	d0f9      	beq.n	800e080 <_strtod_l+0x2a8>
 800e08c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e090:	2908      	cmp	r1, #8
 800e092:	f63f af79 	bhi.w	800df88 <_strtod_l+0x1b0>
 800e096:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e09a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e09c:	9206      	str	r2, [sp, #24]
 800e09e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0a0:	1c51      	adds	r1, r2, #1
 800e0a2:	9117      	str	r1, [sp, #92]	; 0x5c
 800e0a4:	7852      	ldrb	r2, [r2, #1]
 800e0a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e0aa:	2e09      	cmp	r6, #9
 800e0ac:	d937      	bls.n	800e11e <_strtod_l+0x346>
 800e0ae:	9e06      	ldr	r6, [sp, #24]
 800e0b0:	1b89      	subs	r1, r1, r6
 800e0b2:	2908      	cmp	r1, #8
 800e0b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e0b8:	dc02      	bgt.n	800e0c0 <_strtod_l+0x2e8>
 800e0ba:	4576      	cmp	r6, lr
 800e0bc:	bfa8      	it	ge
 800e0be:	4676      	movge	r6, lr
 800e0c0:	f1bc 0f00 	cmp.w	ip, #0
 800e0c4:	d000      	beq.n	800e0c8 <_strtod_l+0x2f0>
 800e0c6:	4276      	negs	r6, r6
 800e0c8:	2d00      	cmp	r5, #0
 800e0ca:	d14d      	bne.n	800e168 <_strtod_l+0x390>
 800e0cc:	9904      	ldr	r1, [sp, #16]
 800e0ce:	4301      	orrs	r1, r0
 800e0d0:	f47f aec6 	bne.w	800de60 <_strtod_l+0x88>
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f47f aee1 	bne.w	800de9c <_strtod_l+0xc4>
 800e0da:	2a69      	cmp	r2, #105	; 0x69
 800e0dc:	d027      	beq.n	800e12e <_strtod_l+0x356>
 800e0de:	dc24      	bgt.n	800e12a <_strtod_l+0x352>
 800e0e0:	2a49      	cmp	r2, #73	; 0x49
 800e0e2:	d024      	beq.n	800e12e <_strtod_l+0x356>
 800e0e4:	2a4e      	cmp	r2, #78	; 0x4e
 800e0e6:	f47f aed9 	bne.w	800de9c <_strtod_l+0xc4>
 800e0ea:	499f      	ldr	r1, [pc, #636]	; (800e368 <_strtod_l+0x590>)
 800e0ec:	a817      	add	r0, sp, #92	; 0x5c
 800e0ee:	f001 f8a7 	bl	800f240 <__match>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	f43f aed2 	beq.w	800de9c <_strtod_l+0xc4>
 800e0f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	2b28      	cmp	r3, #40	; 0x28
 800e0fe:	d12d      	bne.n	800e15c <_strtod_l+0x384>
 800e100:	499a      	ldr	r1, [pc, #616]	; (800e36c <_strtod_l+0x594>)
 800e102:	aa1a      	add	r2, sp, #104	; 0x68
 800e104:	a817      	add	r0, sp, #92	; 0x5c
 800e106:	f001 f8af 	bl	800f268 <__hexnan>
 800e10a:	2805      	cmp	r0, #5
 800e10c:	d126      	bne.n	800e15c <_strtod_l+0x384>
 800e10e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e110:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e114:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e118:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e11c:	e6a0      	b.n	800de60 <_strtod_l+0x88>
 800e11e:	210a      	movs	r1, #10
 800e120:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e124:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e128:	e7b9      	b.n	800e09e <_strtod_l+0x2c6>
 800e12a:	2a6e      	cmp	r2, #110	; 0x6e
 800e12c:	e7db      	b.n	800e0e6 <_strtod_l+0x30e>
 800e12e:	4990      	ldr	r1, [pc, #576]	; (800e370 <_strtod_l+0x598>)
 800e130:	a817      	add	r0, sp, #92	; 0x5c
 800e132:	f001 f885 	bl	800f240 <__match>
 800e136:	2800      	cmp	r0, #0
 800e138:	f43f aeb0 	beq.w	800de9c <_strtod_l+0xc4>
 800e13c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e13e:	498d      	ldr	r1, [pc, #564]	; (800e374 <_strtod_l+0x59c>)
 800e140:	3b01      	subs	r3, #1
 800e142:	a817      	add	r0, sp, #92	; 0x5c
 800e144:	9317      	str	r3, [sp, #92]	; 0x5c
 800e146:	f001 f87b 	bl	800f240 <__match>
 800e14a:	b910      	cbnz	r0, 800e152 <_strtod_l+0x37a>
 800e14c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e14e:	3301      	adds	r3, #1
 800e150:	9317      	str	r3, [sp, #92]	; 0x5c
 800e152:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e384 <_strtod_l+0x5ac>
 800e156:	f04f 0a00 	mov.w	sl, #0
 800e15a:	e681      	b.n	800de60 <_strtod_l+0x88>
 800e15c:	4886      	ldr	r0, [pc, #536]	; (800e378 <_strtod_l+0x5a0>)
 800e15e:	f002 fc9b 	bl	8010a98 <nan>
 800e162:	ec5b ab10 	vmov	sl, fp, d0
 800e166:	e67b      	b.n	800de60 <_strtod_l+0x88>
 800e168:	9b05      	ldr	r3, [sp, #20]
 800e16a:	9807      	ldr	r0, [sp, #28]
 800e16c:	1af3      	subs	r3, r6, r3
 800e16e:	2f00      	cmp	r7, #0
 800e170:	bf08      	it	eq
 800e172:	462f      	moveq	r7, r5
 800e174:	2d10      	cmp	r5, #16
 800e176:	9306      	str	r3, [sp, #24]
 800e178:	46a8      	mov	r8, r5
 800e17a:	bfa8      	it	ge
 800e17c:	f04f 0810 	movge.w	r8, #16
 800e180:	f7f2 f9e0 	bl	8000544 <__aeabi_ui2d>
 800e184:	2d09      	cmp	r5, #9
 800e186:	4682      	mov	sl, r0
 800e188:	468b      	mov	fp, r1
 800e18a:	dd13      	ble.n	800e1b4 <_strtod_l+0x3dc>
 800e18c:	4b7b      	ldr	r3, [pc, #492]	; (800e37c <_strtod_l+0x5a4>)
 800e18e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e192:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e196:	f7f2 fa4f 	bl	8000638 <__aeabi_dmul>
 800e19a:	4682      	mov	sl, r0
 800e19c:	4648      	mov	r0, r9
 800e19e:	468b      	mov	fp, r1
 800e1a0:	f7f2 f9d0 	bl	8000544 <__aeabi_ui2d>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	4650      	mov	r0, sl
 800e1aa:	4659      	mov	r1, fp
 800e1ac:	f7f2 f88e 	bl	80002cc <__adddf3>
 800e1b0:	4682      	mov	sl, r0
 800e1b2:	468b      	mov	fp, r1
 800e1b4:	2d0f      	cmp	r5, #15
 800e1b6:	dc38      	bgt.n	800e22a <_strtod_l+0x452>
 800e1b8:	9b06      	ldr	r3, [sp, #24]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f43f ae50 	beq.w	800de60 <_strtod_l+0x88>
 800e1c0:	dd24      	ble.n	800e20c <_strtod_l+0x434>
 800e1c2:	2b16      	cmp	r3, #22
 800e1c4:	dc0b      	bgt.n	800e1de <_strtod_l+0x406>
 800e1c6:	496d      	ldr	r1, [pc, #436]	; (800e37c <_strtod_l+0x5a4>)
 800e1c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e1cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1d0:	4652      	mov	r2, sl
 800e1d2:	465b      	mov	r3, fp
 800e1d4:	f7f2 fa30 	bl	8000638 <__aeabi_dmul>
 800e1d8:	4682      	mov	sl, r0
 800e1da:	468b      	mov	fp, r1
 800e1dc:	e640      	b.n	800de60 <_strtod_l+0x88>
 800e1de:	9a06      	ldr	r2, [sp, #24]
 800e1e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	db20      	blt.n	800e22a <_strtod_l+0x452>
 800e1e8:	4c64      	ldr	r4, [pc, #400]	; (800e37c <_strtod_l+0x5a4>)
 800e1ea:	f1c5 050f 	rsb	r5, r5, #15
 800e1ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e1f2:	4652      	mov	r2, sl
 800e1f4:	465b      	mov	r3, fp
 800e1f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1fa:	f7f2 fa1d 	bl	8000638 <__aeabi_dmul>
 800e1fe:	9b06      	ldr	r3, [sp, #24]
 800e200:	1b5d      	subs	r5, r3, r5
 800e202:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e206:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e20a:	e7e3      	b.n	800e1d4 <_strtod_l+0x3fc>
 800e20c:	9b06      	ldr	r3, [sp, #24]
 800e20e:	3316      	adds	r3, #22
 800e210:	db0b      	blt.n	800e22a <_strtod_l+0x452>
 800e212:	9b05      	ldr	r3, [sp, #20]
 800e214:	1b9e      	subs	r6, r3, r6
 800e216:	4b59      	ldr	r3, [pc, #356]	; (800e37c <_strtod_l+0x5a4>)
 800e218:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e21c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e220:	4650      	mov	r0, sl
 800e222:	4659      	mov	r1, fp
 800e224:	f7f2 fb32 	bl	800088c <__aeabi_ddiv>
 800e228:	e7d6      	b.n	800e1d8 <_strtod_l+0x400>
 800e22a:	9b06      	ldr	r3, [sp, #24]
 800e22c:	eba5 0808 	sub.w	r8, r5, r8
 800e230:	4498      	add	r8, r3
 800e232:	f1b8 0f00 	cmp.w	r8, #0
 800e236:	dd74      	ble.n	800e322 <_strtod_l+0x54a>
 800e238:	f018 030f 	ands.w	r3, r8, #15
 800e23c:	d00a      	beq.n	800e254 <_strtod_l+0x47c>
 800e23e:	494f      	ldr	r1, [pc, #316]	; (800e37c <_strtod_l+0x5a4>)
 800e240:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e244:	4652      	mov	r2, sl
 800e246:	465b      	mov	r3, fp
 800e248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e24c:	f7f2 f9f4 	bl	8000638 <__aeabi_dmul>
 800e250:	4682      	mov	sl, r0
 800e252:	468b      	mov	fp, r1
 800e254:	f038 080f 	bics.w	r8, r8, #15
 800e258:	d04f      	beq.n	800e2fa <_strtod_l+0x522>
 800e25a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e25e:	dd22      	ble.n	800e2a6 <_strtod_l+0x4ce>
 800e260:	2500      	movs	r5, #0
 800e262:	462e      	mov	r6, r5
 800e264:	9507      	str	r5, [sp, #28]
 800e266:	9505      	str	r5, [sp, #20]
 800e268:	2322      	movs	r3, #34	; 0x22
 800e26a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e384 <_strtod_l+0x5ac>
 800e26e:	6023      	str	r3, [r4, #0]
 800e270:	f04f 0a00 	mov.w	sl, #0
 800e274:	9b07      	ldr	r3, [sp, #28]
 800e276:	2b00      	cmp	r3, #0
 800e278:	f43f adf2 	beq.w	800de60 <_strtod_l+0x88>
 800e27c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e27e:	4620      	mov	r0, r4
 800e280:	f001 f8fe 	bl	800f480 <_Bfree>
 800e284:	9905      	ldr	r1, [sp, #20]
 800e286:	4620      	mov	r0, r4
 800e288:	f001 f8fa 	bl	800f480 <_Bfree>
 800e28c:	4631      	mov	r1, r6
 800e28e:	4620      	mov	r0, r4
 800e290:	f001 f8f6 	bl	800f480 <_Bfree>
 800e294:	9907      	ldr	r1, [sp, #28]
 800e296:	4620      	mov	r0, r4
 800e298:	f001 f8f2 	bl	800f480 <_Bfree>
 800e29c:	4629      	mov	r1, r5
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f001 f8ee 	bl	800f480 <_Bfree>
 800e2a4:	e5dc      	b.n	800de60 <_strtod_l+0x88>
 800e2a6:	4b36      	ldr	r3, [pc, #216]	; (800e380 <_strtod_l+0x5a8>)
 800e2a8:	9304      	str	r3, [sp, #16]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e2b0:	4650      	mov	r0, sl
 800e2b2:	4659      	mov	r1, fp
 800e2b4:	4699      	mov	r9, r3
 800e2b6:	f1b8 0f01 	cmp.w	r8, #1
 800e2ba:	dc21      	bgt.n	800e300 <_strtod_l+0x528>
 800e2bc:	b10b      	cbz	r3, 800e2c2 <_strtod_l+0x4ea>
 800e2be:	4682      	mov	sl, r0
 800e2c0:	468b      	mov	fp, r1
 800e2c2:	4b2f      	ldr	r3, [pc, #188]	; (800e380 <_strtod_l+0x5a8>)
 800e2c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e2c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	465b      	mov	r3, fp
 800e2d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e2d4:	f7f2 f9b0 	bl	8000638 <__aeabi_dmul>
 800e2d8:	4b2a      	ldr	r3, [pc, #168]	; (800e384 <_strtod_l+0x5ac>)
 800e2da:	460a      	mov	r2, r1
 800e2dc:	400b      	ands	r3, r1
 800e2de:	492a      	ldr	r1, [pc, #168]	; (800e388 <_strtod_l+0x5b0>)
 800e2e0:	428b      	cmp	r3, r1
 800e2e2:	4682      	mov	sl, r0
 800e2e4:	d8bc      	bhi.n	800e260 <_strtod_l+0x488>
 800e2e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e2ea:	428b      	cmp	r3, r1
 800e2ec:	bf86      	itte	hi
 800e2ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e38c <_strtod_l+0x5b4>
 800e2f2:	f04f 3aff 	movhi.w	sl, #4294967295
 800e2f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	9304      	str	r3, [sp, #16]
 800e2fe:	e084      	b.n	800e40a <_strtod_l+0x632>
 800e300:	f018 0f01 	tst.w	r8, #1
 800e304:	d005      	beq.n	800e312 <_strtod_l+0x53a>
 800e306:	9b04      	ldr	r3, [sp, #16]
 800e308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30c:	f7f2 f994 	bl	8000638 <__aeabi_dmul>
 800e310:	2301      	movs	r3, #1
 800e312:	9a04      	ldr	r2, [sp, #16]
 800e314:	3208      	adds	r2, #8
 800e316:	f109 0901 	add.w	r9, r9, #1
 800e31a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e31e:	9204      	str	r2, [sp, #16]
 800e320:	e7c9      	b.n	800e2b6 <_strtod_l+0x4de>
 800e322:	d0ea      	beq.n	800e2fa <_strtod_l+0x522>
 800e324:	f1c8 0800 	rsb	r8, r8, #0
 800e328:	f018 020f 	ands.w	r2, r8, #15
 800e32c:	d00a      	beq.n	800e344 <_strtod_l+0x56c>
 800e32e:	4b13      	ldr	r3, [pc, #76]	; (800e37c <_strtod_l+0x5a4>)
 800e330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e334:	4650      	mov	r0, sl
 800e336:	4659      	mov	r1, fp
 800e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33c:	f7f2 faa6 	bl	800088c <__aeabi_ddiv>
 800e340:	4682      	mov	sl, r0
 800e342:	468b      	mov	fp, r1
 800e344:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e348:	d0d7      	beq.n	800e2fa <_strtod_l+0x522>
 800e34a:	f1b8 0f1f 	cmp.w	r8, #31
 800e34e:	dd1f      	ble.n	800e390 <_strtod_l+0x5b8>
 800e350:	2500      	movs	r5, #0
 800e352:	462e      	mov	r6, r5
 800e354:	9507      	str	r5, [sp, #28]
 800e356:	9505      	str	r5, [sp, #20]
 800e358:	2322      	movs	r3, #34	; 0x22
 800e35a:	f04f 0a00 	mov.w	sl, #0
 800e35e:	f04f 0b00 	mov.w	fp, #0
 800e362:	6023      	str	r3, [r4, #0]
 800e364:	e786      	b.n	800e274 <_strtod_l+0x49c>
 800e366:	bf00      	nop
 800e368:	0801170a 	.word	0x0801170a
 800e36c:	08011724 	.word	0x08011724
 800e370:	08011701 	.word	0x08011701
 800e374:	08011704 	.word	0x08011704
 800e378:	08011ae5 	.word	0x08011ae5
 800e37c:	08011988 	.word	0x08011988
 800e380:	08011960 	.word	0x08011960
 800e384:	7ff00000 	.word	0x7ff00000
 800e388:	7ca00000 	.word	0x7ca00000
 800e38c:	7fefffff 	.word	0x7fefffff
 800e390:	f018 0310 	ands.w	r3, r8, #16
 800e394:	bf18      	it	ne
 800e396:	236a      	movne	r3, #106	; 0x6a
 800e398:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e748 <_strtod_l+0x970>
 800e39c:	9304      	str	r3, [sp, #16]
 800e39e:	4650      	mov	r0, sl
 800e3a0:	4659      	mov	r1, fp
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	f018 0f01 	tst.w	r8, #1
 800e3a8:	d004      	beq.n	800e3b4 <_strtod_l+0x5dc>
 800e3aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e3ae:	f7f2 f943 	bl	8000638 <__aeabi_dmul>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e3b8:	f109 0908 	add.w	r9, r9, #8
 800e3bc:	d1f2      	bne.n	800e3a4 <_strtod_l+0x5cc>
 800e3be:	b10b      	cbz	r3, 800e3c4 <_strtod_l+0x5ec>
 800e3c0:	4682      	mov	sl, r0
 800e3c2:	468b      	mov	fp, r1
 800e3c4:	9b04      	ldr	r3, [sp, #16]
 800e3c6:	b1c3      	cbz	r3, 800e3fa <_strtod_l+0x622>
 800e3c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e3cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	4659      	mov	r1, fp
 800e3d4:	dd11      	ble.n	800e3fa <_strtod_l+0x622>
 800e3d6:	2b1f      	cmp	r3, #31
 800e3d8:	f340 8124 	ble.w	800e624 <_strtod_l+0x84c>
 800e3dc:	2b34      	cmp	r3, #52	; 0x34
 800e3de:	bfde      	ittt	le
 800e3e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e3e4:	f04f 33ff 	movle.w	r3, #4294967295
 800e3e8:	fa03 f202 	lslle.w	r2, r3, r2
 800e3ec:	f04f 0a00 	mov.w	sl, #0
 800e3f0:	bfcc      	ite	gt
 800e3f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e3f6:	ea02 0b01 	andle.w	fp, r2, r1
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	4650      	mov	r0, sl
 800e400:	4659      	mov	r1, fp
 800e402:	f7f2 fb81 	bl	8000b08 <__aeabi_dcmpeq>
 800e406:	2800      	cmp	r0, #0
 800e408:	d1a2      	bne.n	800e350 <_strtod_l+0x578>
 800e40a:	9b07      	ldr	r3, [sp, #28]
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	9908      	ldr	r1, [sp, #32]
 800e410:	462b      	mov	r3, r5
 800e412:	463a      	mov	r2, r7
 800e414:	4620      	mov	r0, r4
 800e416:	f001 f89b 	bl	800f550 <__s2b>
 800e41a:	9007      	str	r0, [sp, #28]
 800e41c:	2800      	cmp	r0, #0
 800e41e:	f43f af1f 	beq.w	800e260 <_strtod_l+0x488>
 800e422:	9b05      	ldr	r3, [sp, #20]
 800e424:	1b9e      	subs	r6, r3, r6
 800e426:	9b06      	ldr	r3, [sp, #24]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	bfb4      	ite	lt
 800e42c:	4633      	movlt	r3, r6
 800e42e:	2300      	movge	r3, #0
 800e430:	930c      	str	r3, [sp, #48]	; 0x30
 800e432:	9b06      	ldr	r3, [sp, #24]
 800e434:	2500      	movs	r5, #0
 800e436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e43a:	9312      	str	r3, [sp, #72]	; 0x48
 800e43c:	462e      	mov	r6, r5
 800e43e:	9b07      	ldr	r3, [sp, #28]
 800e440:	4620      	mov	r0, r4
 800e442:	6859      	ldr	r1, [r3, #4]
 800e444:	f000 ffdc 	bl	800f400 <_Balloc>
 800e448:	9005      	str	r0, [sp, #20]
 800e44a:	2800      	cmp	r0, #0
 800e44c:	f43f af0c 	beq.w	800e268 <_strtod_l+0x490>
 800e450:	9b07      	ldr	r3, [sp, #28]
 800e452:	691a      	ldr	r2, [r3, #16]
 800e454:	3202      	adds	r2, #2
 800e456:	f103 010c 	add.w	r1, r3, #12
 800e45a:	0092      	lsls	r2, r2, #2
 800e45c:	300c      	adds	r0, #12
 800e45e:	f7ff f8c6 	bl	800d5ee <memcpy>
 800e462:	ec4b ab10 	vmov	d0, sl, fp
 800e466:	aa1a      	add	r2, sp, #104	; 0x68
 800e468:	a919      	add	r1, sp, #100	; 0x64
 800e46a:	4620      	mov	r0, r4
 800e46c:	f001 fbb6 	bl	800fbdc <__d2b>
 800e470:	ec4b ab18 	vmov	d8, sl, fp
 800e474:	9018      	str	r0, [sp, #96]	; 0x60
 800e476:	2800      	cmp	r0, #0
 800e478:	f43f aef6 	beq.w	800e268 <_strtod_l+0x490>
 800e47c:	2101      	movs	r1, #1
 800e47e:	4620      	mov	r0, r4
 800e480:	f001 f900 	bl	800f684 <__i2b>
 800e484:	4606      	mov	r6, r0
 800e486:	2800      	cmp	r0, #0
 800e488:	f43f aeee 	beq.w	800e268 <_strtod_l+0x490>
 800e48c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e48e:	9904      	ldr	r1, [sp, #16]
 800e490:	2b00      	cmp	r3, #0
 800e492:	bfab      	itete	ge
 800e494:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e496:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e498:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e49a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e49e:	bfac      	ite	ge
 800e4a0:	eb03 0902 	addge.w	r9, r3, r2
 800e4a4:	1ad7      	sublt	r7, r2, r3
 800e4a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e4a8:	eba3 0801 	sub.w	r8, r3, r1
 800e4ac:	4490      	add	r8, r2
 800e4ae:	4ba1      	ldr	r3, [pc, #644]	; (800e734 <_strtod_l+0x95c>)
 800e4b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4b4:	4598      	cmp	r8, r3
 800e4b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e4ba:	f280 80c7 	bge.w	800e64c <_strtod_l+0x874>
 800e4be:	eba3 0308 	sub.w	r3, r3, r8
 800e4c2:	2b1f      	cmp	r3, #31
 800e4c4:	eba2 0203 	sub.w	r2, r2, r3
 800e4c8:	f04f 0101 	mov.w	r1, #1
 800e4cc:	f300 80b1 	bgt.w	800e632 <_strtod_l+0x85a>
 800e4d0:	fa01 f303 	lsl.w	r3, r1, r3
 800e4d4:	930d      	str	r3, [sp, #52]	; 0x34
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	9308      	str	r3, [sp, #32]
 800e4da:	eb09 0802 	add.w	r8, r9, r2
 800e4de:	9b04      	ldr	r3, [sp, #16]
 800e4e0:	45c1      	cmp	r9, r8
 800e4e2:	4417      	add	r7, r2
 800e4e4:	441f      	add	r7, r3
 800e4e6:	464b      	mov	r3, r9
 800e4e8:	bfa8      	it	ge
 800e4ea:	4643      	movge	r3, r8
 800e4ec:	42bb      	cmp	r3, r7
 800e4ee:	bfa8      	it	ge
 800e4f0:	463b      	movge	r3, r7
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	bfc2      	ittt	gt
 800e4f6:	eba8 0803 	subgt.w	r8, r8, r3
 800e4fa:	1aff      	subgt	r7, r7, r3
 800e4fc:	eba9 0903 	subgt.w	r9, r9, r3
 800e500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e502:	2b00      	cmp	r3, #0
 800e504:	dd17      	ble.n	800e536 <_strtod_l+0x75e>
 800e506:	4631      	mov	r1, r6
 800e508:	461a      	mov	r2, r3
 800e50a:	4620      	mov	r0, r4
 800e50c:	f001 f97a 	bl	800f804 <__pow5mult>
 800e510:	4606      	mov	r6, r0
 800e512:	2800      	cmp	r0, #0
 800e514:	f43f aea8 	beq.w	800e268 <_strtod_l+0x490>
 800e518:	4601      	mov	r1, r0
 800e51a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e51c:	4620      	mov	r0, r4
 800e51e:	f001 f8c7 	bl	800f6b0 <__multiply>
 800e522:	900b      	str	r0, [sp, #44]	; 0x2c
 800e524:	2800      	cmp	r0, #0
 800e526:	f43f ae9f 	beq.w	800e268 <_strtod_l+0x490>
 800e52a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e52c:	4620      	mov	r0, r4
 800e52e:	f000 ffa7 	bl	800f480 <_Bfree>
 800e532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e534:	9318      	str	r3, [sp, #96]	; 0x60
 800e536:	f1b8 0f00 	cmp.w	r8, #0
 800e53a:	f300 808c 	bgt.w	800e656 <_strtod_l+0x87e>
 800e53e:	9b06      	ldr	r3, [sp, #24]
 800e540:	2b00      	cmp	r3, #0
 800e542:	dd08      	ble.n	800e556 <_strtod_l+0x77e>
 800e544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e546:	9905      	ldr	r1, [sp, #20]
 800e548:	4620      	mov	r0, r4
 800e54a:	f001 f95b 	bl	800f804 <__pow5mult>
 800e54e:	9005      	str	r0, [sp, #20]
 800e550:	2800      	cmp	r0, #0
 800e552:	f43f ae89 	beq.w	800e268 <_strtod_l+0x490>
 800e556:	2f00      	cmp	r7, #0
 800e558:	dd08      	ble.n	800e56c <_strtod_l+0x794>
 800e55a:	9905      	ldr	r1, [sp, #20]
 800e55c:	463a      	mov	r2, r7
 800e55e:	4620      	mov	r0, r4
 800e560:	f001 f9aa 	bl	800f8b8 <__lshift>
 800e564:	9005      	str	r0, [sp, #20]
 800e566:	2800      	cmp	r0, #0
 800e568:	f43f ae7e 	beq.w	800e268 <_strtod_l+0x490>
 800e56c:	f1b9 0f00 	cmp.w	r9, #0
 800e570:	dd08      	ble.n	800e584 <_strtod_l+0x7ac>
 800e572:	4631      	mov	r1, r6
 800e574:	464a      	mov	r2, r9
 800e576:	4620      	mov	r0, r4
 800e578:	f001 f99e 	bl	800f8b8 <__lshift>
 800e57c:	4606      	mov	r6, r0
 800e57e:	2800      	cmp	r0, #0
 800e580:	f43f ae72 	beq.w	800e268 <_strtod_l+0x490>
 800e584:	9a05      	ldr	r2, [sp, #20]
 800e586:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e588:	4620      	mov	r0, r4
 800e58a:	f001 fa21 	bl	800f9d0 <__mdiff>
 800e58e:	4605      	mov	r5, r0
 800e590:	2800      	cmp	r0, #0
 800e592:	f43f ae69 	beq.w	800e268 <_strtod_l+0x490>
 800e596:	68c3      	ldr	r3, [r0, #12]
 800e598:	930b      	str	r3, [sp, #44]	; 0x2c
 800e59a:	2300      	movs	r3, #0
 800e59c:	60c3      	str	r3, [r0, #12]
 800e59e:	4631      	mov	r1, r6
 800e5a0:	f001 f9fa 	bl	800f998 <__mcmp>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	da60      	bge.n	800e66a <_strtod_l+0x892>
 800e5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5aa:	ea53 030a 	orrs.w	r3, r3, sl
 800e5ae:	f040 8082 	bne.w	800e6b6 <_strtod_l+0x8de>
 800e5b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d17d      	bne.n	800e6b6 <_strtod_l+0x8de>
 800e5ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e5be:	0d1b      	lsrs	r3, r3, #20
 800e5c0:	051b      	lsls	r3, r3, #20
 800e5c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e5c6:	d976      	bls.n	800e6b6 <_strtod_l+0x8de>
 800e5c8:	696b      	ldr	r3, [r5, #20]
 800e5ca:	b913      	cbnz	r3, 800e5d2 <_strtod_l+0x7fa>
 800e5cc:	692b      	ldr	r3, [r5, #16]
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	dd71      	ble.n	800e6b6 <_strtod_l+0x8de>
 800e5d2:	4629      	mov	r1, r5
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f001 f96e 	bl	800f8b8 <__lshift>
 800e5dc:	4631      	mov	r1, r6
 800e5de:	4605      	mov	r5, r0
 800e5e0:	f001 f9da 	bl	800f998 <__mcmp>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	dd66      	ble.n	800e6b6 <_strtod_l+0x8de>
 800e5e8:	9904      	ldr	r1, [sp, #16]
 800e5ea:	4a53      	ldr	r2, [pc, #332]	; (800e738 <_strtod_l+0x960>)
 800e5ec:	465b      	mov	r3, fp
 800e5ee:	2900      	cmp	r1, #0
 800e5f0:	f000 8081 	beq.w	800e6f6 <_strtod_l+0x91e>
 800e5f4:	ea02 010b 	and.w	r1, r2, fp
 800e5f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e5fc:	dc7b      	bgt.n	800e6f6 <_strtod_l+0x91e>
 800e5fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e602:	f77f aea9 	ble.w	800e358 <_strtod_l+0x580>
 800e606:	4b4d      	ldr	r3, [pc, #308]	; (800e73c <_strtod_l+0x964>)
 800e608:	4650      	mov	r0, sl
 800e60a:	4659      	mov	r1, fp
 800e60c:	2200      	movs	r2, #0
 800e60e:	f7f2 f813 	bl	8000638 <__aeabi_dmul>
 800e612:	460b      	mov	r3, r1
 800e614:	4303      	orrs	r3, r0
 800e616:	bf08      	it	eq
 800e618:	2322      	moveq	r3, #34	; 0x22
 800e61a:	4682      	mov	sl, r0
 800e61c:	468b      	mov	fp, r1
 800e61e:	bf08      	it	eq
 800e620:	6023      	streq	r3, [r4, #0]
 800e622:	e62b      	b.n	800e27c <_strtod_l+0x4a4>
 800e624:	f04f 32ff 	mov.w	r2, #4294967295
 800e628:	fa02 f303 	lsl.w	r3, r2, r3
 800e62c:	ea03 0a0a 	and.w	sl, r3, sl
 800e630:	e6e3      	b.n	800e3fa <_strtod_l+0x622>
 800e632:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e636:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e63a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e63e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e642:	fa01 f308 	lsl.w	r3, r1, r8
 800e646:	9308      	str	r3, [sp, #32]
 800e648:	910d      	str	r1, [sp, #52]	; 0x34
 800e64a:	e746      	b.n	800e4da <_strtod_l+0x702>
 800e64c:	2300      	movs	r3, #0
 800e64e:	9308      	str	r3, [sp, #32]
 800e650:	2301      	movs	r3, #1
 800e652:	930d      	str	r3, [sp, #52]	; 0x34
 800e654:	e741      	b.n	800e4da <_strtod_l+0x702>
 800e656:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e658:	4642      	mov	r2, r8
 800e65a:	4620      	mov	r0, r4
 800e65c:	f001 f92c 	bl	800f8b8 <__lshift>
 800e660:	9018      	str	r0, [sp, #96]	; 0x60
 800e662:	2800      	cmp	r0, #0
 800e664:	f47f af6b 	bne.w	800e53e <_strtod_l+0x766>
 800e668:	e5fe      	b.n	800e268 <_strtod_l+0x490>
 800e66a:	465f      	mov	r7, fp
 800e66c:	d16e      	bne.n	800e74c <_strtod_l+0x974>
 800e66e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e670:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e674:	b342      	cbz	r2, 800e6c8 <_strtod_l+0x8f0>
 800e676:	4a32      	ldr	r2, [pc, #200]	; (800e740 <_strtod_l+0x968>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d128      	bne.n	800e6ce <_strtod_l+0x8f6>
 800e67c:	9b04      	ldr	r3, [sp, #16]
 800e67e:	4651      	mov	r1, sl
 800e680:	b1eb      	cbz	r3, 800e6be <_strtod_l+0x8e6>
 800e682:	4b2d      	ldr	r3, [pc, #180]	; (800e738 <_strtod_l+0x960>)
 800e684:	403b      	ands	r3, r7
 800e686:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e68a:	f04f 32ff 	mov.w	r2, #4294967295
 800e68e:	d819      	bhi.n	800e6c4 <_strtod_l+0x8ec>
 800e690:	0d1b      	lsrs	r3, r3, #20
 800e692:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e696:	fa02 f303 	lsl.w	r3, r2, r3
 800e69a:	4299      	cmp	r1, r3
 800e69c:	d117      	bne.n	800e6ce <_strtod_l+0x8f6>
 800e69e:	4b29      	ldr	r3, [pc, #164]	; (800e744 <_strtod_l+0x96c>)
 800e6a0:	429f      	cmp	r7, r3
 800e6a2:	d102      	bne.n	800e6aa <_strtod_l+0x8d2>
 800e6a4:	3101      	adds	r1, #1
 800e6a6:	f43f addf 	beq.w	800e268 <_strtod_l+0x490>
 800e6aa:	4b23      	ldr	r3, [pc, #140]	; (800e738 <_strtod_l+0x960>)
 800e6ac:	403b      	ands	r3, r7
 800e6ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e6b2:	f04f 0a00 	mov.w	sl, #0
 800e6b6:	9b04      	ldr	r3, [sp, #16]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1a4      	bne.n	800e606 <_strtod_l+0x82e>
 800e6bc:	e5de      	b.n	800e27c <_strtod_l+0x4a4>
 800e6be:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c2:	e7ea      	b.n	800e69a <_strtod_l+0x8c2>
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	e7e8      	b.n	800e69a <_strtod_l+0x8c2>
 800e6c8:	ea53 030a 	orrs.w	r3, r3, sl
 800e6cc:	d08c      	beq.n	800e5e8 <_strtod_l+0x810>
 800e6ce:	9b08      	ldr	r3, [sp, #32]
 800e6d0:	b1db      	cbz	r3, 800e70a <_strtod_l+0x932>
 800e6d2:	423b      	tst	r3, r7
 800e6d4:	d0ef      	beq.n	800e6b6 <_strtod_l+0x8de>
 800e6d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6d8:	9a04      	ldr	r2, [sp, #16]
 800e6da:	4650      	mov	r0, sl
 800e6dc:	4659      	mov	r1, fp
 800e6de:	b1c3      	cbz	r3, 800e712 <_strtod_l+0x93a>
 800e6e0:	f7ff fb5e 	bl	800dda0 <sulp>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	ec51 0b18 	vmov	r0, r1, d8
 800e6ec:	f7f1 fdee 	bl	80002cc <__adddf3>
 800e6f0:	4682      	mov	sl, r0
 800e6f2:	468b      	mov	fp, r1
 800e6f4:	e7df      	b.n	800e6b6 <_strtod_l+0x8de>
 800e6f6:	4013      	ands	r3, r2
 800e6f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e6fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e700:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e704:	f04f 3aff 	mov.w	sl, #4294967295
 800e708:	e7d5      	b.n	800e6b6 <_strtod_l+0x8de>
 800e70a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e70c:	ea13 0f0a 	tst.w	r3, sl
 800e710:	e7e0      	b.n	800e6d4 <_strtod_l+0x8fc>
 800e712:	f7ff fb45 	bl	800dda0 <sulp>
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	ec51 0b18 	vmov	r0, r1, d8
 800e71e:	f7f1 fdd3 	bl	80002c8 <__aeabi_dsub>
 800e722:	2200      	movs	r2, #0
 800e724:	2300      	movs	r3, #0
 800e726:	4682      	mov	sl, r0
 800e728:	468b      	mov	fp, r1
 800e72a:	f7f2 f9ed 	bl	8000b08 <__aeabi_dcmpeq>
 800e72e:	2800      	cmp	r0, #0
 800e730:	d0c1      	beq.n	800e6b6 <_strtod_l+0x8de>
 800e732:	e611      	b.n	800e358 <_strtod_l+0x580>
 800e734:	fffffc02 	.word	0xfffffc02
 800e738:	7ff00000 	.word	0x7ff00000
 800e73c:	39500000 	.word	0x39500000
 800e740:	000fffff 	.word	0x000fffff
 800e744:	7fefffff 	.word	0x7fefffff
 800e748:	08011738 	.word	0x08011738
 800e74c:	4631      	mov	r1, r6
 800e74e:	4628      	mov	r0, r5
 800e750:	f001 faa0 	bl	800fc94 <__ratio>
 800e754:	ec59 8b10 	vmov	r8, r9, d0
 800e758:	ee10 0a10 	vmov	r0, s0
 800e75c:	2200      	movs	r2, #0
 800e75e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e762:	4649      	mov	r1, r9
 800e764:	f7f2 f9e4 	bl	8000b30 <__aeabi_dcmple>
 800e768:	2800      	cmp	r0, #0
 800e76a:	d07a      	beq.n	800e862 <_strtod_l+0xa8a>
 800e76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d04a      	beq.n	800e808 <_strtod_l+0xa30>
 800e772:	4b95      	ldr	r3, [pc, #596]	; (800e9c8 <_strtod_l+0xbf0>)
 800e774:	2200      	movs	r2, #0
 800e776:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e77a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e9c8 <_strtod_l+0xbf0>
 800e77e:	f04f 0800 	mov.w	r8, #0
 800e782:	4b92      	ldr	r3, [pc, #584]	; (800e9cc <_strtod_l+0xbf4>)
 800e784:	403b      	ands	r3, r7
 800e786:	930d      	str	r3, [sp, #52]	; 0x34
 800e788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e78a:	4b91      	ldr	r3, [pc, #580]	; (800e9d0 <_strtod_l+0xbf8>)
 800e78c:	429a      	cmp	r2, r3
 800e78e:	f040 80b0 	bne.w	800e8f2 <_strtod_l+0xb1a>
 800e792:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e796:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e79a:	ec4b ab10 	vmov	d0, sl, fp
 800e79e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e7a2:	f001 f99f 	bl	800fae4 <__ulp>
 800e7a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e7aa:	ec53 2b10 	vmov	r2, r3, d0
 800e7ae:	f7f1 ff43 	bl	8000638 <__aeabi_dmul>
 800e7b2:	4652      	mov	r2, sl
 800e7b4:	465b      	mov	r3, fp
 800e7b6:	f7f1 fd89 	bl	80002cc <__adddf3>
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	4983      	ldr	r1, [pc, #524]	; (800e9cc <_strtod_l+0xbf4>)
 800e7be:	4a85      	ldr	r2, [pc, #532]	; (800e9d4 <_strtod_l+0xbfc>)
 800e7c0:	4019      	ands	r1, r3
 800e7c2:	4291      	cmp	r1, r2
 800e7c4:	4682      	mov	sl, r0
 800e7c6:	d960      	bls.n	800e88a <_strtod_l+0xab2>
 800e7c8:	ee18 3a90 	vmov	r3, s17
 800e7cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d104      	bne.n	800e7de <_strtod_l+0xa06>
 800e7d4:	ee18 3a10 	vmov	r3, s16
 800e7d8:	3301      	adds	r3, #1
 800e7da:	f43f ad45 	beq.w	800e268 <_strtod_l+0x490>
 800e7de:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e9e0 <_strtod_l+0xc08>
 800e7e2:	f04f 3aff 	mov.w	sl, #4294967295
 800e7e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	f000 fe49 	bl	800f480 <_Bfree>
 800e7ee:	9905      	ldr	r1, [sp, #20]
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f000 fe45 	bl	800f480 <_Bfree>
 800e7f6:	4631      	mov	r1, r6
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f000 fe41 	bl	800f480 <_Bfree>
 800e7fe:	4629      	mov	r1, r5
 800e800:	4620      	mov	r0, r4
 800e802:	f000 fe3d 	bl	800f480 <_Bfree>
 800e806:	e61a      	b.n	800e43e <_strtod_l+0x666>
 800e808:	f1ba 0f00 	cmp.w	sl, #0
 800e80c:	d11b      	bne.n	800e846 <_strtod_l+0xa6e>
 800e80e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e812:	b9f3      	cbnz	r3, 800e852 <_strtod_l+0xa7a>
 800e814:	4b6c      	ldr	r3, [pc, #432]	; (800e9c8 <_strtod_l+0xbf0>)
 800e816:	2200      	movs	r2, #0
 800e818:	4640      	mov	r0, r8
 800e81a:	4649      	mov	r1, r9
 800e81c:	f7f2 f97e 	bl	8000b1c <__aeabi_dcmplt>
 800e820:	b9d0      	cbnz	r0, 800e858 <_strtod_l+0xa80>
 800e822:	4640      	mov	r0, r8
 800e824:	4649      	mov	r1, r9
 800e826:	4b6c      	ldr	r3, [pc, #432]	; (800e9d8 <_strtod_l+0xc00>)
 800e828:	2200      	movs	r2, #0
 800e82a:	f7f1 ff05 	bl	8000638 <__aeabi_dmul>
 800e82e:	4680      	mov	r8, r0
 800e830:	4689      	mov	r9, r1
 800e832:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e836:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e83a:	9315      	str	r3, [sp, #84]	; 0x54
 800e83c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e840:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e844:	e79d      	b.n	800e782 <_strtod_l+0x9aa>
 800e846:	f1ba 0f01 	cmp.w	sl, #1
 800e84a:	d102      	bne.n	800e852 <_strtod_l+0xa7a>
 800e84c:	2f00      	cmp	r7, #0
 800e84e:	f43f ad83 	beq.w	800e358 <_strtod_l+0x580>
 800e852:	4b62      	ldr	r3, [pc, #392]	; (800e9dc <_strtod_l+0xc04>)
 800e854:	2200      	movs	r2, #0
 800e856:	e78e      	b.n	800e776 <_strtod_l+0x99e>
 800e858:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e9d8 <_strtod_l+0xc00>
 800e85c:	f04f 0800 	mov.w	r8, #0
 800e860:	e7e7      	b.n	800e832 <_strtod_l+0xa5a>
 800e862:	4b5d      	ldr	r3, [pc, #372]	; (800e9d8 <_strtod_l+0xc00>)
 800e864:	4640      	mov	r0, r8
 800e866:	4649      	mov	r1, r9
 800e868:	2200      	movs	r2, #0
 800e86a:	f7f1 fee5 	bl	8000638 <__aeabi_dmul>
 800e86e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e870:	4680      	mov	r8, r0
 800e872:	4689      	mov	r9, r1
 800e874:	b933      	cbnz	r3, 800e884 <_strtod_l+0xaac>
 800e876:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e87a:	900e      	str	r0, [sp, #56]	; 0x38
 800e87c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e87e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e882:	e7dd      	b.n	800e840 <_strtod_l+0xa68>
 800e884:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e888:	e7f9      	b.n	800e87e <_strtod_l+0xaa6>
 800e88a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e88e:	9b04      	ldr	r3, [sp, #16]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1a8      	bne.n	800e7e6 <_strtod_l+0xa0e>
 800e894:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e89a:	0d1b      	lsrs	r3, r3, #20
 800e89c:	051b      	lsls	r3, r3, #20
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d1a1      	bne.n	800e7e6 <_strtod_l+0xa0e>
 800e8a2:	4640      	mov	r0, r8
 800e8a4:	4649      	mov	r1, r9
 800e8a6:	f7f2 f9ff 	bl	8000ca8 <__aeabi_d2lz>
 800e8aa:	f7f1 fe97 	bl	80005dc <__aeabi_l2d>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	4640      	mov	r0, r8
 800e8b4:	4649      	mov	r1, r9
 800e8b6:	f7f1 fd07 	bl	80002c8 <__aeabi_dsub>
 800e8ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8c0:	ea43 030a 	orr.w	r3, r3, sl
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	4680      	mov	r8, r0
 800e8c8:	4689      	mov	r9, r1
 800e8ca:	d055      	beq.n	800e978 <_strtod_l+0xba0>
 800e8cc:	a336      	add	r3, pc, #216	; (adr r3, 800e9a8 <_strtod_l+0xbd0>)
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	f7f2 f923 	bl	8000b1c <__aeabi_dcmplt>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	f47f acd0 	bne.w	800e27c <_strtod_l+0x4a4>
 800e8dc:	a334      	add	r3, pc, #208	; (adr r3, 800e9b0 <_strtod_l+0xbd8>)
 800e8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e2:	4640      	mov	r0, r8
 800e8e4:	4649      	mov	r1, r9
 800e8e6:	f7f2 f937 	bl	8000b58 <__aeabi_dcmpgt>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	f43f af7b 	beq.w	800e7e6 <_strtod_l+0xa0e>
 800e8f0:	e4c4      	b.n	800e27c <_strtod_l+0x4a4>
 800e8f2:	9b04      	ldr	r3, [sp, #16]
 800e8f4:	b333      	cbz	r3, 800e944 <_strtod_l+0xb6c>
 800e8f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e8fc:	d822      	bhi.n	800e944 <_strtod_l+0xb6c>
 800e8fe:	a32e      	add	r3, pc, #184	; (adr r3, 800e9b8 <_strtod_l+0xbe0>)
 800e900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e904:	4640      	mov	r0, r8
 800e906:	4649      	mov	r1, r9
 800e908:	f7f2 f912 	bl	8000b30 <__aeabi_dcmple>
 800e90c:	b1a0      	cbz	r0, 800e938 <_strtod_l+0xb60>
 800e90e:	4649      	mov	r1, r9
 800e910:	4640      	mov	r0, r8
 800e912:	f7f2 f941 	bl	8000b98 <__aeabi_d2uiz>
 800e916:	2801      	cmp	r0, #1
 800e918:	bf38      	it	cc
 800e91a:	2001      	movcc	r0, #1
 800e91c:	f7f1 fe12 	bl	8000544 <__aeabi_ui2d>
 800e920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e922:	4680      	mov	r8, r0
 800e924:	4689      	mov	r9, r1
 800e926:	bb23      	cbnz	r3, 800e972 <_strtod_l+0xb9a>
 800e928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e92c:	9010      	str	r0, [sp, #64]	; 0x40
 800e92e:	9311      	str	r3, [sp, #68]	; 0x44
 800e930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e934:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e93a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e93c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e940:	1a9b      	subs	r3, r3, r2
 800e942:	9309      	str	r3, [sp, #36]	; 0x24
 800e944:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e948:	eeb0 0a48 	vmov.f32	s0, s16
 800e94c:	eef0 0a68 	vmov.f32	s1, s17
 800e950:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e954:	f001 f8c6 	bl	800fae4 <__ulp>
 800e958:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e95c:	ec53 2b10 	vmov	r2, r3, d0
 800e960:	f7f1 fe6a 	bl	8000638 <__aeabi_dmul>
 800e964:	ec53 2b18 	vmov	r2, r3, d8
 800e968:	f7f1 fcb0 	bl	80002cc <__adddf3>
 800e96c:	4682      	mov	sl, r0
 800e96e:	468b      	mov	fp, r1
 800e970:	e78d      	b.n	800e88e <_strtod_l+0xab6>
 800e972:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e976:	e7db      	b.n	800e930 <_strtod_l+0xb58>
 800e978:	a311      	add	r3, pc, #68	; (adr r3, 800e9c0 <_strtod_l+0xbe8>)
 800e97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97e:	f7f2 f8cd 	bl	8000b1c <__aeabi_dcmplt>
 800e982:	e7b2      	b.n	800e8ea <_strtod_l+0xb12>
 800e984:	2300      	movs	r3, #0
 800e986:	930a      	str	r3, [sp, #40]	; 0x28
 800e988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e98a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e98c:	6013      	str	r3, [r2, #0]
 800e98e:	f7ff ba6b 	b.w	800de68 <_strtod_l+0x90>
 800e992:	2a65      	cmp	r2, #101	; 0x65
 800e994:	f43f ab5f 	beq.w	800e056 <_strtod_l+0x27e>
 800e998:	2a45      	cmp	r2, #69	; 0x45
 800e99a:	f43f ab5c 	beq.w	800e056 <_strtod_l+0x27e>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	f7ff bb94 	b.w	800e0cc <_strtod_l+0x2f4>
 800e9a4:	f3af 8000 	nop.w
 800e9a8:	94a03595 	.word	0x94a03595
 800e9ac:	3fdfffff 	.word	0x3fdfffff
 800e9b0:	35afe535 	.word	0x35afe535
 800e9b4:	3fe00000 	.word	0x3fe00000
 800e9b8:	ffc00000 	.word	0xffc00000
 800e9bc:	41dfffff 	.word	0x41dfffff
 800e9c0:	94a03595 	.word	0x94a03595
 800e9c4:	3fcfffff 	.word	0x3fcfffff
 800e9c8:	3ff00000 	.word	0x3ff00000
 800e9cc:	7ff00000 	.word	0x7ff00000
 800e9d0:	7fe00000 	.word	0x7fe00000
 800e9d4:	7c9fffff 	.word	0x7c9fffff
 800e9d8:	3fe00000 	.word	0x3fe00000
 800e9dc:	bff00000 	.word	0xbff00000
 800e9e0:	7fefffff 	.word	0x7fefffff

0800e9e4 <_strtod_r>:
 800e9e4:	4b01      	ldr	r3, [pc, #4]	; (800e9ec <_strtod_r+0x8>)
 800e9e6:	f7ff b9f7 	b.w	800ddd8 <_strtod_l>
 800e9ea:	bf00      	nop
 800e9ec:	20000178 	.word	0x20000178

0800e9f0 <_strtol_l.constprop.0>:
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9f6:	d001      	beq.n	800e9fc <_strtol_l.constprop.0+0xc>
 800e9f8:	2b24      	cmp	r3, #36	; 0x24
 800e9fa:	d906      	bls.n	800ea0a <_strtol_l.constprop.0+0x1a>
 800e9fc:	f7fe fcd4 	bl	800d3a8 <__errno>
 800ea00:	2316      	movs	r3, #22
 800ea02:	6003      	str	r3, [r0, #0]
 800ea04:	2000      	movs	r0, #0
 800ea06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eaf0 <_strtol_l.constprop.0+0x100>
 800ea0e:	460d      	mov	r5, r1
 800ea10:	462e      	mov	r6, r5
 800ea12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea16:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ea1a:	f017 0708 	ands.w	r7, r7, #8
 800ea1e:	d1f7      	bne.n	800ea10 <_strtol_l.constprop.0+0x20>
 800ea20:	2c2d      	cmp	r4, #45	; 0x2d
 800ea22:	d132      	bne.n	800ea8a <_strtol_l.constprop.0+0x9a>
 800ea24:	782c      	ldrb	r4, [r5, #0]
 800ea26:	2701      	movs	r7, #1
 800ea28:	1cb5      	adds	r5, r6, #2
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d05b      	beq.n	800eae6 <_strtol_l.constprop.0+0xf6>
 800ea2e:	2b10      	cmp	r3, #16
 800ea30:	d109      	bne.n	800ea46 <_strtol_l.constprop.0+0x56>
 800ea32:	2c30      	cmp	r4, #48	; 0x30
 800ea34:	d107      	bne.n	800ea46 <_strtol_l.constprop.0+0x56>
 800ea36:	782c      	ldrb	r4, [r5, #0]
 800ea38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ea3c:	2c58      	cmp	r4, #88	; 0x58
 800ea3e:	d14d      	bne.n	800eadc <_strtol_l.constprop.0+0xec>
 800ea40:	786c      	ldrb	r4, [r5, #1]
 800ea42:	2310      	movs	r3, #16
 800ea44:	3502      	adds	r5, #2
 800ea46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ea4a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea4e:	f04f 0c00 	mov.w	ip, #0
 800ea52:	fbb8 f9f3 	udiv	r9, r8, r3
 800ea56:	4666      	mov	r6, ip
 800ea58:	fb03 8a19 	mls	sl, r3, r9, r8
 800ea5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ea60:	f1be 0f09 	cmp.w	lr, #9
 800ea64:	d816      	bhi.n	800ea94 <_strtol_l.constprop.0+0xa4>
 800ea66:	4674      	mov	r4, lr
 800ea68:	42a3      	cmp	r3, r4
 800ea6a:	dd24      	ble.n	800eab6 <_strtol_l.constprop.0+0xc6>
 800ea6c:	f1bc 0f00 	cmp.w	ip, #0
 800ea70:	db1e      	blt.n	800eab0 <_strtol_l.constprop.0+0xc0>
 800ea72:	45b1      	cmp	r9, r6
 800ea74:	d31c      	bcc.n	800eab0 <_strtol_l.constprop.0+0xc0>
 800ea76:	d101      	bne.n	800ea7c <_strtol_l.constprop.0+0x8c>
 800ea78:	45a2      	cmp	sl, r4
 800ea7a:	db19      	blt.n	800eab0 <_strtol_l.constprop.0+0xc0>
 800ea7c:	fb06 4603 	mla	r6, r6, r3, r4
 800ea80:	f04f 0c01 	mov.w	ip, #1
 800ea84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea88:	e7e8      	b.n	800ea5c <_strtol_l.constprop.0+0x6c>
 800ea8a:	2c2b      	cmp	r4, #43	; 0x2b
 800ea8c:	bf04      	itt	eq
 800ea8e:	782c      	ldrbeq	r4, [r5, #0]
 800ea90:	1cb5      	addeq	r5, r6, #2
 800ea92:	e7ca      	b.n	800ea2a <_strtol_l.constprop.0+0x3a>
 800ea94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ea98:	f1be 0f19 	cmp.w	lr, #25
 800ea9c:	d801      	bhi.n	800eaa2 <_strtol_l.constprop.0+0xb2>
 800ea9e:	3c37      	subs	r4, #55	; 0x37
 800eaa0:	e7e2      	b.n	800ea68 <_strtol_l.constprop.0+0x78>
 800eaa2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800eaa6:	f1be 0f19 	cmp.w	lr, #25
 800eaaa:	d804      	bhi.n	800eab6 <_strtol_l.constprop.0+0xc6>
 800eaac:	3c57      	subs	r4, #87	; 0x57
 800eaae:	e7db      	b.n	800ea68 <_strtol_l.constprop.0+0x78>
 800eab0:	f04f 3cff 	mov.w	ip, #4294967295
 800eab4:	e7e6      	b.n	800ea84 <_strtol_l.constprop.0+0x94>
 800eab6:	f1bc 0f00 	cmp.w	ip, #0
 800eaba:	da05      	bge.n	800eac8 <_strtol_l.constprop.0+0xd8>
 800eabc:	2322      	movs	r3, #34	; 0x22
 800eabe:	6003      	str	r3, [r0, #0]
 800eac0:	4646      	mov	r6, r8
 800eac2:	b942      	cbnz	r2, 800ead6 <_strtol_l.constprop.0+0xe6>
 800eac4:	4630      	mov	r0, r6
 800eac6:	e79e      	b.n	800ea06 <_strtol_l.constprop.0+0x16>
 800eac8:	b107      	cbz	r7, 800eacc <_strtol_l.constprop.0+0xdc>
 800eaca:	4276      	negs	r6, r6
 800eacc:	2a00      	cmp	r2, #0
 800eace:	d0f9      	beq.n	800eac4 <_strtol_l.constprop.0+0xd4>
 800ead0:	f1bc 0f00 	cmp.w	ip, #0
 800ead4:	d000      	beq.n	800ead8 <_strtol_l.constprop.0+0xe8>
 800ead6:	1e69      	subs	r1, r5, #1
 800ead8:	6011      	str	r1, [r2, #0]
 800eada:	e7f3      	b.n	800eac4 <_strtol_l.constprop.0+0xd4>
 800eadc:	2430      	movs	r4, #48	; 0x30
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1b1      	bne.n	800ea46 <_strtol_l.constprop.0+0x56>
 800eae2:	2308      	movs	r3, #8
 800eae4:	e7af      	b.n	800ea46 <_strtol_l.constprop.0+0x56>
 800eae6:	2c30      	cmp	r4, #48	; 0x30
 800eae8:	d0a5      	beq.n	800ea36 <_strtol_l.constprop.0+0x46>
 800eaea:	230a      	movs	r3, #10
 800eaec:	e7ab      	b.n	800ea46 <_strtol_l.constprop.0+0x56>
 800eaee:	bf00      	nop
 800eaf0:	08011761 	.word	0x08011761

0800eaf4 <_strtol_r>:
 800eaf4:	f7ff bf7c 	b.w	800e9f0 <_strtol_l.constprop.0>

0800eaf8 <_write_r>:
 800eaf8:	b538      	push	{r3, r4, r5, lr}
 800eafa:	4d07      	ldr	r5, [pc, #28]	; (800eb18 <_write_r+0x20>)
 800eafc:	4604      	mov	r4, r0
 800eafe:	4608      	mov	r0, r1
 800eb00:	4611      	mov	r1, r2
 800eb02:	2200      	movs	r2, #0
 800eb04:	602a      	str	r2, [r5, #0]
 800eb06:	461a      	mov	r2, r3
 800eb08:	f7f3 f945 	bl	8001d96 <_write>
 800eb0c:	1c43      	adds	r3, r0, #1
 800eb0e:	d102      	bne.n	800eb16 <_write_r+0x1e>
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	b103      	cbz	r3, 800eb16 <_write_r+0x1e>
 800eb14:	6023      	str	r3, [r4, #0]
 800eb16:	bd38      	pop	{r3, r4, r5, pc}
 800eb18:	20006f18 	.word	0x20006f18

0800eb1c <_close_r>:
 800eb1c:	b538      	push	{r3, r4, r5, lr}
 800eb1e:	4d06      	ldr	r5, [pc, #24]	; (800eb38 <_close_r+0x1c>)
 800eb20:	2300      	movs	r3, #0
 800eb22:	4604      	mov	r4, r0
 800eb24:	4608      	mov	r0, r1
 800eb26:	602b      	str	r3, [r5, #0]
 800eb28:	f7f3 f951 	bl	8001dce <_close>
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	d102      	bne.n	800eb36 <_close_r+0x1a>
 800eb30:	682b      	ldr	r3, [r5, #0]
 800eb32:	b103      	cbz	r3, 800eb36 <_close_r+0x1a>
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	bd38      	pop	{r3, r4, r5, pc}
 800eb38:	20006f18 	.word	0x20006f18

0800eb3c <__sflush_r>:
 800eb3c:	898a      	ldrh	r2, [r1, #12]
 800eb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb42:	4605      	mov	r5, r0
 800eb44:	0710      	lsls	r0, r2, #28
 800eb46:	460c      	mov	r4, r1
 800eb48:	d458      	bmi.n	800ebfc <__sflush_r+0xc0>
 800eb4a:	684b      	ldr	r3, [r1, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	dc05      	bgt.n	800eb5c <__sflush_r+0x20>
 800eb50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	dc02      	bgt.n	800eb5c <__sflush_r+0x20>
 800eb56:	2000      	movs	r0, #0
 800eb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb5e:	2e00      	cmp	r6, #0
 800eb60:	d0f9      	beq.n	800eb56 <__sflush_r+0x1a>
 800eb62:	2300      	movs	r3, #0
 800eb64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb68:	682f      	ldr	r7, [r5, #0]
 800eb6a:	602b      	str	r3, [r5, #0]
 800eb6c:	d032      	beq.n	800ebd4 <__sflush_r+0x98>
 800eb6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb70:	89a3      	ldrh	r3, [r4, #12]
 800eb72:	075a      	lsls	r2, r3, #29
 800eb74:	d505      	bpl.n	800eb82 <__sflush_r+0x46>
 800eb76:	6863      	ldr	r3, [r4, #4]
 800eb78:	1ac0      	subs	r0, r0, r3
 800eb7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb7c:	b10b      	cbz	r3, 800eb82 <__sflush_r+0x46>
 800eb7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb80:	1ac0      	subs	r0, r0, r3
 800eb82:	2300      	movs	r3, #0
 800eb84:	4602      	mov	r2, r0
 800eb86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb88:	6a21      	ldr	r1, [r4, #32]
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	47b0      	blx	r6
 800eb8e:	1c43      	adds	r3, r0, #1
 800eb90:	89a3      	ldrh	r3, [r4, #12]
 800eb92:	d106      	bne.n	800eba2 <__sflush_r+0x66>
 800eb94:	6829      	ldr	r1, [r5, #0]
 800eb96:	291d      	cmp	r1, #29
 800eb98:	d82c      	bhi.n	800ebf4 <__sflush_r+0xb8>
 800eb9a:	4a2a      	ldr	r2, [pc, #168]	; (800ec44 <__sflush_r+0x108>)
 800eb9c:	40ca      	lsrs	r2, r1
 800eb9e:	07d6      	lsls	r6, r2, #31
 800eba0:	d528      	bpl.n	800ebf4 <__sflush_r+0xb8>
 800eba2:	2200      	movs	r2, #0
 800eba4:	6062      	str	r2, [r4, #4]
 800eba6:	04d9      	lsls	r1, r3, #19
 800eba8:	6922      	ldr	r2, [r4, #16]
 800ebaa:	6022      	str	r2, [r4, #0]
 800ebac:	d504      	bpl.n	800ebb8 <__sflush_r+0x7c>
 800ebae:	1c42      	adds	r2, r0, #1
 800ebb0:	d101      	bne.n	800ebb6 <__sflush_r+0x7a>
 800ebb2:	682b      	ldr	r3, [r5, #0]
 800ebb4:	b903      	cbnz	r3, 800ebb8 <__sflush_r+0x7c>
 800ebb6:	6560      	str	r0, [r4, #84]	; 0x54
 800ebb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebba:	602f      	str	r7, [r5, #0]
 800ebbc:	2900      	cmp	r1, #0
 800ebbe:	d0ca      	beq.n	800eb56 <__sflush_r+0x1a>
 800ebc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebc4:	4299      	cmp	r1, r3
 800ebc6:	d002      	beq.n	800ebce <__sflush_r+0x92>
 800ebc8:	4628      	mov	r0, r5
 800ebca:	f001 f8f1 	bl	800fdb0 <_free_r>
 800ebce:	2000      	movs	r0, #0
 800ebd0:	6360      	str	r0, [r4, #52]	; 0x34
 800ebd2:	e7c1      	b.n	800eb58 <__sflush_r+0x1c>
 800ebd4:	6a21      	ldr	r1, [r4, #32]
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	4628      	mov	r0, r5
 800ebda:	47b0      	blx	r6
 800ebdc:	1c41      	adds	r1, r0, #1
 800ebde:	d1c7      	bne.n	800eb70 <__sflush_r+0x34>
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d0c4      	beq.n	800eb70 <__sflush_r+0x34>
 800ebe6:	2b1d      	cmp	r3, #29
 800ebe8:	d001      	beq.n	800ebee <__sflush_r+0xb2>
 800ebea:	2b16      	cmp	r3, #22
 800ebec:	d101      	bne.n	800ebf2 <__sflush_r+0xb6>
 800ebee:	602f      	str	r7, [r5, #0]
 800ebf0:	e7b1      	b.n	800eb56 <__sflush_r+0x1a>
 800ebf2:	89a3      	ldrh	r3, [r4, #12]
 800ebf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebf8:	81a3      	strh	r3, [r4, #12]
 800ebfa:	e7ad      	b.n	800eb58 <__sflush_r+0x1c>
 800ebfc:	690f      	ldr	r7, [r1, #16]
 800ebfe:	2f00      	cmp	r7, #0
 800ec00:	d0a9      	beq.n	800eb56 <__sflush_r+0x1a>
 800ec02:	0793      	lsls	r3, r2, #30
 800ec04:	680e      	ldr	r6, [r1, #0]
 800ec06:	bf08      	it	eq
 800ec08:	694b      	ldreq	r3, [r1, #20]
 800ec0a:	600f      	str	r7, [r1, #0]
 800ec0c:	bf18      	it	ne
 800ec0e:	2300      	movne	r3, #0
 800ec10:	eba6 0807 	sub.w	r8, r6, r7
 800ec14:	608b      	str	r3, [r1, #8]
 800ec16:	f1b8 0f00 	cmp.w	r8, #0
 800ec1a:	dd9c      	ble.n	800eb56 <__sflush_r+0x1a>
 800ec1c:	6a21      	ldr	r1, [r4, #32]
 800ec1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec20:	4643      	mov	r3, r8
 800ec22:	463a      	mov	r2, r7
 800ec24:	4628      	mov	r0, r5
 800ec26:	47b0      	blx	r6
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	dc06      	bgt.n	800ec3a <__sflush_r+0xfe>
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec32:	81a3      	strh	r3, [r4, #12]
 800ec34:	f04f 30ff 	mov.w	r0, #4294967295
 800ec38:	e78e      	b.n	800eb58 <__sflush_r+0x1c>
 800ec3a:	4407      	add	r7, r0
 800ec3c:	eba8 0800 	sub.w	r8, r8, r0
 800ec40:	e7e9      	b.n	800ec16 <__sflush_r+0xda>
 800ec42:	bf00      	nop
 800ec44:	20400001 	.word	0x20400001

0800ec48 <_fflush_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	690b      	ldr	r3, [r1, #16]
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	b913      	cbnz	r3, 800ec58 <_fflush_r+0x10>
 800ec52:	2500      	movs	r5, #0
 800ec54:	4628      	mov	r0, r5
 800ec56:	bd38      	pop	{r3, r4, r5, pc}
 800ec58:	b118      	cbz	r0, 800ec62 <_fflush_r+0x1a>
 800ec5a:	6983      	ldr	r3, [r0, #24]
 800ec5c:	b90b      	cbnz	r3, 800ec62 <_fflush_r+0x1a>
 800ec5e:	f7fe fc01 	bl	800d464 <__sinit>
 800ec62:	4b14      	ldr	r3, [pc, #80]	; (800ecb4 <_fflush_r+0x6c>)
 800ec64:	429c      	cmp	r4, r3
 800ec66:	d11b      	bne.n	800eca0 <_fflush_r+0x58>
 800ec68:	686c      	ldr	r4, [r5, #4]
 800ec6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d0ef      	beq.n	800ec52 <_fflush_r+0xa>
 800ec72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec74:	07d0      	lsls	r0, r2, #31
 800ec76:	d404      	bmi.n	800ec82 <_fflush_r+0x3a>
 800ec78:	0599      	lsls	r1, r3, #22
 800ec7a:	d402      	bmi.n	800ec82 <_fflush_r+0x3a>
 800ec7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec7e:	f7fe fcb4 	bl	800d5ea <__retarget_lock_acquire_recursive>
 800ec82:	4628      	mov	r0, r5
 800ec84:	4621      	mov	r1, r4
 800ec86:	f7ff ff59 	bl	800eb3c <__sflush_r>
 800ec8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec8c:	07da      	lsls	r2, r3, #31
 800ec8e:	4605      	mov	r5, r0
 800ec90:	d4e0      	bmi.n	800ec54 <_fflush_r+0xc>
 800ec92:	89a3      	ldrh	r3, [r4, #12]
 800ec94:	059b      	lsls	r3, r3, #22
 800ec96:	d4dd      	bmi.n	800ec54 <_fflush_r+0xc>
 800ec98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec9a:	f7fe fca7 	bl	800d5ec <__retarget_lock_release_recursive>
 800ec9e:	e7d9      	b.n	800ec54 <_fflush_r+0xc>
 800eca0:	4b05      	ldr	r3, [pc, #20]	; (800ecb8 <_fflush_r+0x70>)
 800eca2:	429c      	cmp	r4, r3
 800eca4:	d101      	bne.n	800ecaa <_fflush_r+0x62>
 800eca6:	68ac      	ldr	r4, [r5, #8]
 800eca8:	e7df      	b.n	800ec6a <_fflush_r+0x22>
 800ecaa:	4b04      	ldr	r3, [pc, #16]	; (800ecbc <_fflush_r+0x74>)
 800ecac:	429c      	cmp	r4, r3
 800ecae:	bf08      	it	eq
 800ecb0:	68ec      	ldreq	r4, [r5, #12]
 800ecb2:	e7da      	b.n	800ec6a <_fflush_r+0x22>
 800ecb4:	080116b8 	.word	0x080116b8
 800ecb8:	080116d8 	.word	0x080116d8
 800ecbc:	08011698 	.word	0x08011698

0800ecc0 <rshift>:
 800ecc0:	6903      	ldr	r3, [r0, #16]
 800ecc2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ecc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ecce:	f100 0414 	add.w	r4, r0, #20
 800ecd2:	dd45      	ble.n	800ed60 <rshift+0xa0>
 800ecd4:	f011 011f 	ands.w	r1, r1, #31
 800ecd8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ecdc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ece0:	d10c      	bne.n	800ecfc <rshift+0x3c>
 800ece2:	f100 0710 	add.w	r7, r0, #16
 800ece6:	4629      	mov	r1, r5
 800ece8:	42b1      	cmp	r1, r6
 800ecea:	d334      	bcc.n	800ed56 <rshift+0x96>
 800ecec:	1a9b      	subs	r3, r3, r2
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	1eea      	subs	r2, r5, #3
 800ecf2:	4296      	cmp	r6, r2
 800ecf4:	bf38      	it	cc
 800ecf6:	2300      	movcc	r3, #0
 800ecf8:	4423      	add	r3, r4
 800ecfa:	e015      	b.n	800ed28 <rshift+0x68>
 800ecfc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ed00:	f1c1 0820 	rsb	r8, r1, #32
 800ed04:	40cf      	lsrs	r7, r1
 800ed06:	f105 0e04 	add.w	lr, r5, #4
 800ed0a:	46a1      	mov	r9, r4
 800ed0c:	4576      	cmp	r6, lr
 800ed0e:	46f4      	mov	ip, lr
 800ed10:	d815      	bhi.n	800ed3e <rshift+0x7e>
 800ed12:	1a9a      	subs	r2, r3, r2
 800ed14:	0092      	lsls	r2, r2, #2
 800ed16:	3a04      	subs	r2, #4
 800ed18:	3501      	adds	r5, #1
 800ed1a:	42ae      	cmp	r6, r5
 800ed1c:	bf38      	it	cc
 800ed1e:	2200      	movcc	r2, #0
 800ed20:	18a3      	adds	r3, r4, r2
 800ed22:	50a7      	str	r7, [r4, r2]
 800ed24:	b107      	cbz	r7, 800ed28 <rshift+0x68>
 800ed26:	3304      	adds	r3, #4
 800ed28:	1b1a      	subs	r2, r3, r4
 800ed2a:	42a3      	cmp	r3, r4
 800ed2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ed30:	bf08      	it	eq
 800ed32:	2300      	moveq	r3, #0
 800ed34:	6102      	str	r2, [r0, #16]
 800ed36:	bf08      	it	eq
 800ed38:	6143      	streq	r3, [r0, #20]
 800ed3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed3e:	f8dc c000 	ldr.w	ip, [ip]
 800ed42:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed46:	ea4c 0707 	orr.w	r7, ip, r7
 800ed4a:	f849 7b04 	str.w	r7, [r9], #4
 800ed4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed52:	40cf      	lsrs	r7, r1
 800ed54:	e7da      	b.n	800ed0c <rshift+0x4c>
 800ed56:	f851 cb04 	ldr.w	ip, [r1], #4
 800ed5a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ed5e:	e7c3      	b.n	800ece8 <rshift+0x28>
 800ed60:	4623      	mov	r3, r4
 800ed62:	e7e1      	b.n	800ed28 <rshift+0x68>

0800ed64 <__hexdig_fun>:
 800ed64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ed68:	2b09      	cmp	r3, #9
 800ed6a:	d802      	bhi.n	800ed72 <__hexdig_fun+0xe>
 800ed6c:	3820      	subs	r0, #32
 800ed6e:	b2c0      	uxtb	r0, r0
 800ed70:	4770      	bx	lr
 800ed72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ed76:	2b05      	cmp	r3, #5
 800ed78:	d801      	bhi.n	800ed7e <__hexdig_fun+0x1a>
 800ed7a:	3847      	subs	r0, #71	; 0x47
 800ed7c:	e7f7      	b.n	800ed6e <__hexdig_fun+0xa>
 800ed7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ed82:	2b05      	cmp	r3, #5
 800ed84:	d801      	bhi.n	800ed8a <__hexdig_fun+0x26>
 800ed86:	3827      	subs	r0, #39	; 0x27
 800ed88:	e7f1      	b.n	800ed6e <__hexdig_fun+0xa>
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	4770      	bx	lr
	...

0800ed90 <__gethex>:
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	ed2d 8b02 	vpush	{d8}
 800ed98:	b089      	sub	sp, #36	; 0x24
 800ed9a:	ee08 0a10 	vmov	s16, r0
 800ed9e:	9304      	str	r3, [sp, #16]
 800eda0:	4bb4      	ldr	r3, [pc, #720]	; (800f074 <__gethex+0x2e4>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	9301      	str	r3, [sp, #4]
 800eda6:	4618      	mov	r0, r3
 800eda8:	468b      	mov	fp, r1
 800edaa:	4690      	mov	r8, r2
 800edac:	f7f1 fa30 	bl	8000210 <strlen>
 800edb0:	9b01      	ldr	r3, [sp, #4]
 800edb2:	f8db 2000 	ldr.w	r2, [fp]
 800edb6:	4403      	add	r3, r0
 800edb8:	4682      	mov	sl, r0
 800edba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800edbe:	9305      	str	r3, [sp, #20]
 800edc0:	1c93      	adds	r3, r2, #2
 800edc2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800edc6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800edca:	32fe      	adds	r2, #254	; 0xfe
 800edcc:	18d1      	adds	r1, r2, r3
 800edce:	461f      	mov	r7, r3
 800edd0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800edd4:	9100      	str	r1, [sp, #0]
 800edd6:	2830      	cmp	r0, #48	; 0x30
 800edd8:	d0f8      	beq.n	800edcc <__gethex+0x3c>
 800edda:	f7ff ffc3 	bl	800ed64 <__hexdig_fun>
 800edde:	4604      	mov	r4, r0
 800ede0:	2800      	cmp	r0, #0
 800ede2:	d13a      	bne.n	800ee5a <__gethex+0xca>
 800ede4:	9901      	ldr	r1, [sp, #4]
 800ede6:	4652      	mov	r2, sl
 800ede8:	4638      	mov	r0, r7
 800edea:	f001 fe95 	bl	8010b18 <strncmp>
 800edee:	4605      	mov	r5, r0
 800edf0:	2800      	cmp	r0, #0
 800edf2:	d168      	bne.n	800eec6 <__gethex+0x136>
 800edf4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800edf8:	eb07 060a 	add.w	r6, r7, sl
 800edfc:	f7ff ffb2 	bl	800ed64 <__hexdig_fun>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d062      	beq.n	800eeca <__gethex+0x13a>
 800ee04:	4633      	mov	r3, r6
 800ee06:	7818      	ldrb	r0, [r3, #0]
 800ee08:	2830      	cmp	r0, #48	; 0x30
 800ee0a:	461f      	mov	r7, r3
 800ee0c:	f103 0301 	add.w	r3, r3, #1
 800ee10:	d0f9      	beq.n	800ee06 <__gethex+0x76>
 800ee12:	f7ff ffa7 	bl	800ed64 <__hexdig_fun>
 800ee16:	2301      	movs	r3, #1
 800ee18:	fab0 f480 	clz	r4, r0
 800ee1c:	0964      	lsrs	r4, r4, #5
 800ee1e:	4635      	mov	r5, r6
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	463a      	mov	r2, r7
 800ee24:	4616      	mov	r6, r2
 800ee26:	3201      	adds	r2, #1
 800ee28:	7830      	ldrb	r0, [r6, #0]
 800ee2a:	f7ff ff9b 	bl	800ed64 <__hexdig_fun>
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d1f8      	bne.n	800ee24 <__gethex+0x94>
 800ee32:	9901      	ldr	r1, [sp, #4]
 800ee34:	4652      	mov	r2, sl
 800ee36:	4630      	mov	r0, r6
 800ee38:	f001 fe6e 	bl	8010b18 <strncmp>
 800ee3c:	b980      	cbnz	r0, 800ee60 <__gethex+0xd0>
 800ee3e:	b94d      	cbnz	r5, 800ee54 <__gethex+0xc4>
 800ee40:	eb06 050a 	add.w	r5, r6, sl
 800ee44:	462a      	mov	r2, r5
 800ee46:	4616      	mov	r6, r2
 800ee48:	3201      	adds	r2, #1
 800ee4a:	7830      	ldrb	r0, [r6, #0]
 800ee4c:	f7ff ff8a 	bl	800ed64 <__hexdig_fun>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d1f8      	bne.n	800ee46 <__gethex+0xb6>
 800ee54:	1bad      	subs	r5, r5, r6
 800ee56:	00ad      	lsls	r5, r5, #2
 800ee58:	e004      	b.n	800ee64 <__gethex+0xd4>
 800ee5a:	2400      	movs	r4, #0
 800ee5c:	4625      	mov	r5, r4
 800ee5e:	e7e0      	b.n	800ee22 <__gethex+0x92>
 800ee60:	2d00      	cmp	r5, #0
 800ee62:	d1f7      	bne.n	800ee54 <__gethex+0xc4>
 800ee64:	7833      	ldrb	r3, [r6, #0]
 800ee66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ee6a:	2b50      	cmp	r3, #80	; 0x50
 800ee6c:	d13b      	bne.n	800eee6 <__gethex+0x156>
 800ee6e:	7873      	ldrb	r3, [r6, #1]
 800ee70:	2b2b      	cmp	r3, #43	; 0x2b
 800ee72:	d02c      	beq.n	800eece <__gethex+0x13e>
 800ee74:	2b2d      	cmp	r3, #45	; 0x2d
 800ee76:	d02e      	beq.n	800eed6 <__gethex+0x146>
 800ee78:	1c71      	adds	r1, r6, #1
 800ee7a:	f04f 0900 	mov.w	r9, #0
 800ee7e:	7808      	ldrb	r0, [r1, #0]
 800ee80:	f7ff ff70 	bl	800ed64 <__hexdig_fun>
 800ee84:	1e43      	subs	r3, r0, #1
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	2b18      	cmp	r3, #24
 800ee8a:	d82c      	bhi.n	800eee6 <__gethex+0x156>
 800ee8c:	f1a0 0210 	sub.w	r2, r0, #16
 800ee90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ee94:	f7ff ff66 	bl	800ed64 <__hexdig_fun>
 800ee98:	1e43      	subs	r3, r0, #1
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	2b18      	cmp	r3, #24
 800ee9e:	d91d      	bls.n	800eedc <__gethex+0x14c>
 800eea0:	f1b9 0f00 	cmp.w	r9, #0
 800eea4:	d000      	beq.n	800eea8 <__gethex+0x118>
 800eea6:	4252      	negs	r2, r2
 800eea8:	4415      	add	r5, r2
 800eeaa:	f8cb 1000 	str.w	r1, [fp]
 800eeae:	b1e4      	cbz	r4, 800eeea <__gethex+0x15a>
 800eeb0:	9b00      	ldr	r3, [sp, #0]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	bf14      	ite	ne
 800eeb6:	2700      	movne	r7, #0
 800eeb8:	2706      	moveq	r7, #6
 800eeba:	4638      	mov	r0, r7
 800eebc:	b009      	add	sp, #36	; 0x24
 800eebe:	ecbd 8b02 	vpop	{d8}
 800eec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec6:	463e      	mov	r6, r7
 800eec8:	4625      	mov	r5, r4
 800eeca:	2401      	movs	r4, #1
 800eecc:	e7ca      	b.n	800ee64 <__gethex+0xd4>
 800eece:	f04f 0900 	mov.w	r9, #0
 800eed2:	1cb1      	adds	r1, r6, #2
 800eed4:	e7d3      	b.n	800ee7e <__gethex+0xee>
 800eed6:	f04f 0901 	mov.w	r9, #1
 800eeda:	e7fa      	b.n	800eed2 <__gethex+0x142>
 800eedc:	230a      	movs	r3, #10
 800eede:	fb03 0202 	mla	r2, r3, r2, r0
 800eee2:	3a10      	subs	r2, #16
 800eee4:	e7d4      	b.n	800ee90 <__gethex+0x100>
 800eee6:	4631      	mov	r1, r6
 800eee8:	e7df      	b.n	800eeaa <__gethex+0x11a>
 800eeea:	1bf3      	subs	r3, r6, r7
 800eeec:	3b01      	subs	r3, #1
 800eeee:	4621      	mov	r1, r4
 800eef0:	2b07      	cmp	r3, #7
 800eef2:	dc0b      	bgt.n	800ef0c <__gethex+0x17c>
 800eef4:	ee18 0a10 	vmov	r0, s16
 800eef8:	f000 fa82 	bl	800f400 <_Balloc>
 800eefc:	4604      	mov	r4, r0
 800eefe:	b940      	cbnz	r0, 800ef12 <__gethex+0x182>
 800ef00:	4b5d      	ldr	r3, [pc, #372]	; (800f078 <__gethex+0x2e8>)
 800ef02:	4602      	mov	r2, r0
 800ef04:	21de      	movs	r1, #222	; 0xde
 800ef06:	485d      	ldr	r0, [pc, #372]	; (800f07c <__gethex+0x2ec>)
 800ef08:	f001 fed6 	bl	8010cb8 <__assert_func>
 800ef0c:	3101      	adds	r1, #1
 800ef0e:	105b      	asrs	r3, r3, #1
 800ef10:	e7ee      	b.n	800eef0 <__gethex+0x160>
 800ef12:	f100 0914 	add.w	r9, r0, #20
 800ef16:	f04f 0b00 	mov.w	fp, #0
 800ef1a:	f1ca 0301 	rsb	r3, sl, #1
 800ef1e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ef22:	f8cd b000 	str.w	fp, [sp]
 800ef26:	9306      	str	r3, [sp, #24]
 800ef28:	42b7      	cmp	r7, r6
 800ef2a:	d340      	bcc.n	800efae <__gethex+0x21e>
 800ef2c:	9802      	ldr	r0, [sp, #8]
 800ef2e:	9b00      	ldr	r3, [sp, #0]
 800ef30:	f840 3b04 	str.w	r3, [r0], #4
 800ef34:	eba0 0009 	sub.w	r0, r0, r9
 800ef38:	1080      	asrs	r0, r0, #2
 800ef3a:	0146      	lsls	r6, r0, #5
 800ef3c:	6120      	str	r0, [r4, #16]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f000 fb50 	bl	800f5e4 <__hi0bits>
 800ef44:	1a30      	subs	r0, r6, r0
 800ef46:	f8d8 6000 	ldr.w	r6, [r8]
 800ef4a:	42b0      	cmp	r0, r6
 800ef4c:	dd63      	ble.n	800f016 <__gethex+0x286>
 800ef4e:	1b87      	subs	r7, r0, r6
 800ef50:	4639      	mov	r1, r7
 800ef52:	4620      	mov	r0, r4
 800ef54:	f000 fef4 	bl	800fd40 <__any_on>
 800ef58:	4682      	mov	sl, r0
 800ef5a:	b1a8      	cbz	r0, 800ef88 <__gethex+0x1f8>
 800ef5c:	1e7b      	subs	r3, r7, #1
 800ef5e:	1159      	asrs	r1, r3, #5
 800ef60:	f003 021f 	and.w	r2, r3, #31
 800ef64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ef68:	f04f 0a01 	mov.w	sl, #1
 800ef6c:	fa0a f202 	lsl.w	r2, sl, r2
 800ef70:	420a      	tst	r2, r1
 800ef72:	d009      	beq.n	800ef88 <__gethex+0x1f8>
 800ef74:	4553      	cmp	r3, sl
 800ef76:	dd05      	ble.n	800ef84 <__gethex+0x1f4>
 800ef78:	1eb9      	subs	r1, r7, #2
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f000 fee0 	bl	800fd40 <__any_on>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d145      	bne.n	800f010 <__gethex+0x280>
 800ef84:	f04f 0a02 	mov.w	sl, #2
 800ef88:	4639      	mov	r1, r7
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7ff fe98 	bl	800ecc0 <rshift>
 800ef90:	443d      	add	r5, r7
 800ef92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef96:	42ab      	cmp	r3, r5
 800ef98:	da4c      	bge.n	800f034 <__gethex+0x2a4>
 800ef9a:	ee18 0a10 	vmov	r0, s16
 800ef9e:	4621      	mov	r1, r4
 800efa0:	f000 fa6e 	bl	800f480 <_Bfree>
 800efa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800efa6:	2300      	movs	r3, #0
 800efa8:	6013      	str	r3, [r2, #0]
 800efaa:	27a3      	movs	r7, #163	; 0xa3
 800efac:	e785      	b.n	800eeba <__gethex+0x12a>
 800efae:	1e73      	subs	r3, r6, #1
 800efb0:	9a05      	ldr	r2, [sp, #20]
 800efb2:	9303      	str	r3, [sp, #12]
 800efb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800efb8:	4293      	cmp	r3, r2
 800efba:	d019      	beq.n	800eff0 <__gethex+0x260>
 800efbc:	f1bb 0f20 	cmp.w	fp, #32
 800efc0:	d107      	bne.n	800efd2 <__gethex+0x242>
 800efc2:	9b02      	ldr	r3, [sp, #8]
 800efc4:	9a00      	ldr	r2, [sp, #0]
 800efc6:	f843 2b04 	str.w	r2, [r3], #4
 800efca:	9302      	str	r3, [sp, #8]
 800efcc:	2300      	movs	r3, #0
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	469b      	mov	fp, r3
 800efd2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800efd6:	f7ff fec5 	bl	800ed64 <__hexdig_fun>
 800efda:	9b00      	ldr	r3, [sp, #0]
 800efdc:	f000 000f 	and.w	r0, r0, #15
 800efe0:	fa00 f00b 	lsl.w	r0, r0, fp
 800efe4:	4303      	orrs	r3, r0
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	f10b 0b04 	add.w	fp, fp, #4
 800efec:	9b03      	ldr	r3, [sp, #12]
 800efee:	e00d      	b.n	800f00c <__gethex+0x27c>
 800eff0:	9b03      	ldr	r3, [sp, #12]
 800eff2:	9a06      	ldr	r2, [sp, #24]
 800eff4:	4413      	add	r3, r2
 800eff6:	42bb      	cmp	r3, r7
 800eff8:	d3e0      	bcc.n	800efbc <__gethex+0x22c>
 800effa:	4618      	mov	r0, r3
 800effc:	9901      	ldr	r1, [sp, #4]
 800effe:	9307      	str	r3, [sp, #28]
 800f000:	4652      	mov	r2, sl
 800f002:	f001 fd89 	bl	8010b18 <strncmp>
 800f006:	9b07      	ldr	r3, [sp, #28]
 800f008:	2800      	cmp	r0, #0
 800f00a:	d1d7      	bne.n	800efbc <__gethex+0x22c>
 800f00c:	461e      	mov	r6, r3
 800f00e:	e78b      	b.n	800ef28 <__gethex+0x198>
 800f010:	f04f 0a03 	mov.w	sl, #3
 800f014:	e7b8      	b.n	800ef88 <__gethex+0x1f8>
 800f016:	da0a      	bge.n	800f02e <__gethex+0x29e>
 800f018:	1a37      	subs	r7, r6, r0
 800f01a:	4621      	mov	r1, r4
 800f01c:	ee18 0a10 	vmov	r0, s16
 800f020:	463a      	mov	r2, r7
 800f022:	f000 fc49 	bl	800f8b8 <__lshift>
 800f026:	1bed      	subs	r5, r5, r7
 800f028:	4604      	mov	r4, r0
 800f02a:	f100 0914 	add.w	r9, r0, #20
 800f02e:	f04f 0a00 	mov.w	sl, #0
 800f032:	e7ae      	b.n	800ef92 <__gethex+0x202>
 800f034:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f038:	42a8      	cmp	r0, r5
 800f03a:	dd72      	ble.n	800f122 <__gethex+0x392>
 800f03c:	1b45      	subs	r5, r0, r5
 800f03e:	42ae      	cmp	r6, r5
 800f040:	dc36      	bgt.n	800f0b0 <__gethex+0x320>
 800f042:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f046:	2b02      	cmp	r3, #2
 800f048:	d02a      	beq.n	800f0a0 <__gethex+0x310>
 800f04a:	2b03      	cmp	r3, #3
 800f04c:	d02c      	beq.n	800f0a8 <__gethex+0x318>
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d11c      	bne.n	800f08c <__gethex+0x2fc>
 800f052:	42ae      	cmp	r6, r5
 800f054:	d11a      	bne.n	800f08c <__gethex+0x2fc>
 800f056:	2e01      	cmp	r6, #1
 800f058:	d112      	bne.n	800f080 <__gethex+0x2f0>
 800f05a:	9a04      	ldr	r2, [sp, #16]
 800f05c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f060:	6013      	str	r3, [r2, #0]
 800f062:	2301      	movs	r3, #1
 800f064:	6123      	str	r3, [r4, #16]
 800f066:	f8c9 3000 	str.w	r3, [r9]
 800f06a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f06c:	2762      	movs	r7, #98	; 0x62
 800f06e:	601c      	str	r4, [r3, #0]
 800f070:	e723      	b.n	800eeba <__gethex+0x12a>
 800f072:	bf00      	nop
 800f074:	080118d8 	.word	0x080118d8
 800f078:	08011861 	.word	0x08011861
 800f07c:	08011872 	.word	0x08011872
 800f080:	1e71      	subs	r1, r6, #1
 800f082:	4620      	mov	r0, r4
 800f084:	f000 fe5c 	bl	800fd40 <__any_on>
 800f088:	2800      	cmp	r0, #0
 800f08a:	d1e6      	bne.n	800f05a <__gethex+0x2ca>
 800f08c:	ee18 0a10 	vmov	r0, s16
 800f090:	4621      	mov	r1, r4
 800f092:	f000 f9f5 	bl	800f480 <_Bfree>
 800f096:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f098:	2300      	movs	r3, #0
 800f09a:	6013      	str	r3, [r2, #0]
 800f09c:	2750      	movs	r7, #80	; 0x50
 800f09e:	e70c      	b.n	800eeba <__gethex+0x12a>
 800f0a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1f2      	bne.n	800f08c <__gethex+0x2fc>
 800f0a6:	e7d8      	b.n	800f05a <__gethex+0x2ca>
 800f0a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d1d5      	bne.n	800f05a <__gethex+0x2ca>
 800f0ae:	e7ed      	b.n	800f08c <__gethex+0x2fc>
 800f0b0:	1e6f      	subs	r7, r5, #1
 800f0b2:	f1ba 0f00 	cmp.w	sl, #0
 800f0b6:	d131      	bne.n	800f11c <__gethex+0x38c>
 800f0b8:	b127      	cbz	r7, 800f0c4 <__gethex+0x334>
 800f0ba:	4639      	mov	r1, r7
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f000 fe3f 	bl	800fd40 <__any_on>
 800f0c2:	4682      	mov	sl, r0
 800f0c4:	117b      	asrs	r3, r7, #5
 800f0c6:	2101      	movs	r1, #1
 800f0c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f0cc:	f007 071f 	and.w	r7, r7, #31
 800f0d0:	fa01 f707 	lsl.w	r7, r1, r7
 800f0d4:	421f      	tst	r7, r3
 800f0d6:	4629      	mov	r1, r5
 800f0d8:	4620      	mov	r0, r4
 800f0da:	bf18      	it	ne
 800f0dc:	f04a 0a02 	orrne.w	sl, sl, #2
 800f0e0:	1b76      	subs	r6, r6, r5
 800f0e2:	f7ff fded 	bl	800ecc0 <rshift>
 800f0e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f0ea:	2702      	movs	r7, #2
 800f0ec:	f1ba 0f00 	cmp.w	sl, #0
 800f0f0:	d048      	beq.n	800f184 <__gethex+0x3f4>
 800f0f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f0f6:	2b02      	cmp	r3, #2
 800f0f8:	d015      	beq.n	800f126 <__gethex+0x396>
 800f0fa:	2b03      	cmp	r3, #3
 800f0fc:	d017      	beq.n	800f12e <__gethex+0x39e>
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d109      	bne.n	800f116 <__gethex+0x386>
 800f102:	f01a 0f02 	tst.w	sl, #2
 800f106:	d006      	beq.n	800f116 <__gethex+0x386>
 800f108:	f8d9 0000 	ldr.w	r0, [r9]
 800f10c:	ea4a 0a00 	orr.w	sl, sl, r0
 800f110:	f01a 0f01 	tst.w	sl, #1
 800f114:	d10e      	bne.n	800f134 <__gethex+0x3a4>
 800f116:	f047 0710 	orr.w	r7, r7, #16
 800f11a:	e033      	b.n	800f184 <__gethex+0x3f4>
 800f11c:	f04f 0a01 	mov.w	sl, #1
 800f120:	e7d0      	b.n	800f0c4 <__gethex+0x334>
 800f122:	2701      	movs	r7, #1
 800f124:	e7e2      	b.n	800f0ec <__gethex+0x35c>
 800f126:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f128:	f1c3 0301 	rsb	r3, r3, #1
 800f12c:	9315      	str	r3, [sp, #84]	; 0x54
 800f12e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f130:	2b00      	cmp	r3, #0
 800f132:	d0f0      	beq.n	800f116 <__gethex+0x386>
 800f134:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f138:	f104 0314 	add.w	r3, r4, #20
 800f13c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f140:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f144:	f04f 0c00 	mov.w	ip, #0
 800f148:	4618      	mov	r0, r3
 800f14a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f14e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f152:	d01c      	beq.n	800f18e <__gethex+0x3fe>
 800f154:	3201      	adds	r2, #1
 800f156:	6002      	str	r2, [r0, #0]
 800f158:	2f02      	cmp	r7, #2
 800f15a:	f104 0314 	add.w	r3, r4, #20
 800f15e:	d13f      	bne.n	800f1e0 <__gethex+0x450>
 800f160:	f8d8 2000 	ldr.w	r2, [r8]
 800f164:	3a01      	subs	r2, #1
 800f166:	42b2      	cmp	r2, r6
 800f168:	d10a      	bne.n	800f180 <__gethex+0x3f0>
 800f16a:	1171      	asrs	r1, r6, #5
 800f16c:	2201      	movs	r2, #1
 800f16e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f172:	f006 061f 	and.w	r6, r6, #31
 800f176:	fa02 f606 	lsl.w	r6, r2, r6
 800f17a:	421e      	tst	r6, r3
 800f17c:	bf18      	it	ne
 800f17e:	4617      	movne	r7, r2
 800f180:	f047 0720 	orr.w	r7, r7, #32
 800f184:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f186:	601c      	str	r4, [r3, #0]
 800f188:	9b04      	ldr	r3, [sp, #16]
 800f18a:	601d      	str	r5, [r3, #0]
 800f18c:	e695      	b.n	800eeba <__gethex+0x12a>
 800f18e:	4299      	cmp	r1, r3
 800f190:	f843 cc04 	str.w	ip, [r3, #-4]
 800f194:	d8d8      	bhi.n	800f148 <__gethex+0x3b8>
 800f196:	68a3      	ldr	r3, [r4, #8]
 800f198:	459b      	cmp	fp, r3
 800f19a:	db19      	blt.n	800f1d0 <__gethex+0x440>
 800f19c:	6861      	ldr	r1, [r4, #4]
 800f19e:	ee18 0a10 	vmov	r0, s16
 800f1a2:	3101      	adds	r1, #1
 800f1a4:	f000 f92c 	bl	800f400 <_Balloc>
 800f1a8:	4681      	mov	r9, r0
 800f1aa:	b918      	cbnz	r0, 800f1b4 <__gethex+0x424>
 800f1ac:	4b1a      	ldr	r3, [pc, #104]	; (800f218 <__gethex+0x488>)
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	2184      	movs	r1, #132	; 0x84
 800f1b2:	e6a8      	b.n	800ef06 <__gethex+0x176>
 800f1b4:	6922      	ldr	r2, [r4, #16]
 800f1b6:	3202      	adds	r2, #2
 800f1b8:	f104 010c 	add.w	r1, r4, #12
 800f1bc:	0092      	lsls	r2, r2, #2
 800f1be:	300c      	adds	r0, #12
 800f1c0:	f7fe fa15 	bl	800d5ee <memcpy>
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	ee18 0a10 	vmov	r0, s16
 800f1ca:	f000 f959 	bl	800f480 <_Bfree>
 800f1ce:	464c      	mov	r4, r9
 800f1d0:	6923      	ldr	r3, [r4, #16]
 800f1d2:	1c5a      	adds	r2, r3, #1
 800f1d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1d8:	6122      	str	r2, [r4, #16]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	615a      	str	r2, [r3, #20]
 800f1de:	e7bb      	b.n	800f158 <__gethex+0x3c8>
 800f1e0:	6922      	ldr	r2, [r4, #16]
 800f1e2:	455a      	cmp	r2, fp
 800f1e4:	dd0b      	ble.n	800f1fe <__gethex+0x46e>
 800f1e6:	2101      	movs	r1, #1
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f7ff fd69 	bl	800ecc0 <rshift>
 800f1ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f1f2:	3501      	adds	r5, #1
 800f1f4:	42ab      	cmp	r3, r5
 800f1f6:	f6ff aed0 	blt.w	800ef9a <__gethex+0x20a>
 800f1fa:	2701      	movs	r7, #1
 800f1fc:	e7c0      	b.n	800f180 <__gethex+0x3f0>
 800f1fe:	f016 061f 	ands.w	r6, r6, #31
 800f202:	d0fa      	beq.n	800f1fa <__gethex+0x46a>
 800f204:	4453      	add	r3, sl
 800f206:	f1c6 0620 	rsb	r6, r6, #32
 800f20a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f20e:	f000 f9e9 	bl	800f5e4 <__hi0bits>
 800f212:	42b0      	cmp	r0, r6
 800f214:	dbe7      	blt.n	800f1e6 <__gethex+0x456>
 800f216:	e7f0      	b.n	800f1fa <__gethex+0x46a>
 800f218:	08011861 	.word	0x08011861

0800f21c <L_shift>:
 800f21c:	f1c2 0208 	rsb	r2, r2, #8
 800f220:	0092      	lsls	r2, r2, #2
 800f222:	b570      	push	{r4, r5, r6, lr}
 800f224:	f1c2 0620 	rsb	r6, r2, #32
 800f228:	6843      	ldr	r3, [r0, #4]
 800f22a:	6804      	ldr	r4, [r0, #0]
 800f22c:	fa03 f506 	lsl.w	r5, r3, r6
 800f230:	432c      	orrs	r4, r5
 800f232:	40d3      	lsrs	r3, r2
 800f234:	6004      	str	r4, [r0, #0]
 800f236:	f840 3f04 	str.w	r3, [r0, #4]!
 800f23a:	4288      	cmp	r0, r1
 800f23c:	d3f4      	bcc.n	800f228 <L_shift+0xc>
 800f23e:	bd70      	pop	{r4, r5, r6, pc}

0800f240 <__match>:
 800f240:	b530      	push	{r4, r5, lr}
 800f242:	6803      	ldr	r3, [r0, #0]
 800f244:	3301      	adds	r3, #1
 800f246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f24a:	b914      	cbnz	r4, 800f252 <__match+0x12>
 800f24c:	6003      	str	r3, [r0, #0]
 800f24e:	2001      	movs	r0, #1
 800f250:	bd30      	pop	{r4, r5, pc}
 800f252:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f256:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f25a:	2d19      	cmp	r5, #25
 800f25c:	bf98      	it	ls
 800f25e:	3220      	addls	r2, #32
 800f260:	42a2      	cmp	r2, r4
 800f262:	d0f0      	beq.n	800f246 <__match+0x6>
 800f264:	2000      	movs	r0, #0
 800f266:	e7f3      	b.n	800f250 <__match+0x10>

0800f268 <__hexnan>:
 800f268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26c:	680b      	ldr	r3, [r1, #0]
 800f26e:	115e      	asrs	r6, r3, #5
 800f270:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f274:	f013 031f 	ands.w	r3, r3, #31
 800f278:	b087      	sub	sp, #28
 800f27a:	bf18      	it	ne
 800f27c:	3604      	addne	r6, #4
 800f27e:	2500      	movs	r5, #0
 800f280:	1f37      	subs	r7, r6, #4
 800f282:	4690      	mov	r8, r2
 800f284:	6802      	ldr	r2, [r0, #0]
 800f286:	9301      	str	r3, [sp, #4]
 800f288:	4682      	mov	sl, r0
 800f28a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f28e:	46b9      	mov	r9, r7
 800f290:	463c      	mov	r4, r7
 800f292:	9502      	str	r5, [sp, #8]
 800f294:	46ab      	mov	fp, r5
 800f296:	7851      	ldrb	r1, [r2, #1]
 800f298:	1c53      	adds	r3, r2, #1
 800f29a:	9303      	str	r3, [sp, #12]
 800f29c:	b341      	cbz	r1, 800f2f0 <__hexnan+0x88>
 800f29e:	4608      	mov	r0, r1
 800f2a0:	9205      	str	r2, [sp, #20]
 800f2a2:	9104      	str	r1, [sp, #16]
 800f2a4:	f7ff fd5e 	bl	800ed64 <__hexdig_fun>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d14f      	bne.n	800f34c <__hexnan+0xe4>
 800f2ac:	9904      	ldr	r1, [sp, #16]
 800f2ae:	9a05      	ldr	r2, [sp, #20]
 800f2b0:	2920      	cmp	r1, #32
 800f2b2:	d818      	bhi.n	800f2e6 <__hexnan+0x7e>
 800f2b4:	9b02      	ldr	r3, [sp, #8]
 800f2b6:	459b      	cmp	fp, r3
 800f2b8:	dd13      	ble.n	800f2e2 <__hexnan+0x7a>
 800f2ba:	454c      	cmp	r4, r9
 800f2bc:	d206      	bcs.n	800f2cc <__hexnan+0x64>
 800f2be:	2d07      	cmp	r5, #7
 800f2c0:	dc04      	bgt.n	800f2cc <__hexnan+0x64>
 800f2c2:	462a      	mov	r2, r5
 800f2c4:	4649      	mov	r1, r9
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f7ff ffa8 	bl	800f21c <L_shift>
 800f2cc:	4544      	cmp	r4, r8
 800f2ce:	d950      	bls.n	800f372 <__hexnan+0x10a>
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	f1a4 0904 	sub.w	r9, r4, #4
 800f2d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2da:	f8cd b008 	str.w	fp, [sp, #8]
 800f2de:	464c      	mov	r4, r9
 800f2e0:	461d      	mov	r5, r3
 800f2e2:	9a03      	ldr	r2, [sp, #12]
 800f2e4:	e7d7      	b.n	800f296 <__hexnan+0x2e>
 800f2e6:	2929      	cmp	r1, #41	; 0x29
 800f2e8:	d156      	bne.n	800f398 <__hexnan+0x130>
 800f2ea:	3202      	adds	r2, #2
 800f2ec:	f8ca 2000 	str.w	r2, [sl]
 800f2f0:	f1bb 0f00 	cmp.w	fp, #0
 800f2f4:	d050      	beq.n	800f398 <__hexnan+0x130>
 800f2f6:	454c      	cmp	r4, r9
 800f2f8:	d206      	bcs.n	800f308 <__hexnan+0xa0>
 800f2fa:	2d07      	cmp	r5, #7
 800f2fc:	dc04      	bgt.n	800f308 <__hexnan+0xa0>
 800f2fe:	462a      	mov	r2, r5
 800f300:	4649      	mov	r1, r9
 800f302:	4620      	mov	r0, r4
 800f304:	f7ff ff8a 	bl	800f21c <L_shift>
 800f308:	4544      	cmp	r4, r8
 800f30a:	d934      	bls.n	800f376 <__hexnan+0x10e>
 800f30c:	f1a8 0204 	sub.w	r2, r8, #4
 800f310:	4623      	mov	r3, r4
 800f312:	f853 1b04 	ldr.w	r1, [r3], #4
 800f316:	f842 1f04 	str.w	r1, [r2, #4]!
 800f31a:	429f      	cmp	r7, r3
 800f31c:	d2f9      	bcs.n	800f312 <__hexnan+0xaa>
 800f31e:	1b3b      	subs	r3, r7, r4
 800f320:	f023 0303 	bic.w	r3, r3, #3
 800f324:	3304      	adds	r3, #4
 800f326:	3401      	adds	r4, #1
 800f328:	3e03      	subs	r6, #3
 800f32a:	42b4      	cmp	r4, r6
 800f32c:	bf88      	it	hi
 800f32e:	2304      	movhi	r3, #4
 800f330:	4443      	add	r3, r8
 800f332:	2200      	movs	r2, #0
 800f334:	f843 2b04 	str.w	r2, [r3], #4
 800f338:	429f      	cmp	r7, r3
 800f33a:	d2fb      	bcs.n	800f334 <__hexnan+0xcc>
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	b91b      	cbnz	r3, 800f348 <__hexnan+0xe0>
 800f340:	4547      	cmp	r7, r8
 800f342:	d127      	bne.n	800f394 <__hexnan+0x12c>
 800f344:	2301      	movs	r3, #1
 800f346:	603b      	str	r3, [r7, #0]
 800f348:	2005      	movs	r0, #5
 800f34a:	e026      	b.n	800f39a <__hexnan+0x132>
 800f34c:	3501      	adds	r5, #1
 800f34e:	2d08      	cmp	r5, #8
 800f350:	f10b 0b01 	add.w	fp, fp, #1
 800f354:	dd06      	ble.n	800f364 <__hexnan+0xfc>
 800f356:	4544      	cmp	r4, r8
 800f358:	d9c3      	bls.n	800f2e2 <__hexnan+0x7a>
 800f35a:	2300      	movs	r3, #0
 800f35c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f360:	2501      	movs	r5, #1
 800f362:	3c04      	subs	r4, #4
 800f364:	6822      	ldr	r2, [r4, #0]
 800f366:	f000 000f 	and.w	r0, r0, #15
 800f36a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f36e:	6022      	str	r2, [r4, #0]
 800f370:	e7b7      	b.n	800f2e2 <__hexnan+0x7a>
 800f372:	2508      	movs	r5, #8
 800f374:	e7b5      	b.n	800f2e2 <__hexnan+0x7a>
 800f376:	9b01      	ldr	r3, [sp, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d0df      	beq.n	800f33c <__hexnan+0xd4>
 800f37c:	f04f 32ff 	mov.w	r2, #4294967295
 800f380:	f1c3 0320 	rsb	r3, r3, #32
 800f384:	fa22 f303 	lsr.w	r3, r2, r3
 800f388:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f38c:	401a      	ands	r2, r3
 800f38e:	f846 2c04 	str.w	r2, [r6, #-4]
 800f392:	e7d3      	b.n	800f33c <__hexnan+0xd4>
 800f394:	3f04      	subs	r7, #4
 800f396:	e7d1      	b.n	800f33c <__hexnan+0xd4>
 800f398:	2004      	movs	r0, #4
 800f39a:	b007      	add	sp, #28
 800f39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3a0 <_lseek_r>:
 800f3a0:	b538      	push	{r3, r4, r5, lr}
 800f3a2:	4d07      	ldr	r5, [pc, #28]	; (800f3c0 <_lseek_r+0x20>)
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	4608      	mov	r0, r1
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	602a      	str	r2, [r5, #0]
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	f7f2 fd34 	bl	8001e1c <_lseek>
 800f3b4:	1c43      	adds	r3, r0, #1
 800f3b6:	d102      	bne.n	800f3be <_lseek_r+0x1e>
 800f3b8:	682b      	ldr	r3, [r5, #0]
 800f3ba:	b103      	cbz	r3, 800f3be <_lseek_r+0x1e>
 800f3bc:	6023      	str	r3, [r4, #0]
 800f3be:	bd38      	pop	{r3, r4, r5, pc}
 800f3c0:	20006f18 	.word	0x20006f18

0800f3c4 <__ascii_mbtowc>:
 800f3c4:	b082      	sub	sp, #8
 800f3c6:	b901      	cbnz	r1, 800f3ca <__ascii_mbtowc+0x6>
 800f3c8:	a901      	add	r1, sp, #4
 800f3ca:	b142      	cbz	r2, 800f3de <__ascii_mbtowc+0x1a>
 800f3cc:	b14b      	cbz	r3, 800f3e2 <__ascii_mbtowc+0x1e>
 800f3ce:	7813      	ldrb	r3, [r2, #0]
 800f3d0:	600b      	str	r3, [r1, #0]
 800f3d2:	7812      	ldrb	r2, [r2, #0]
 800f3d4:	1e10      	subs	r0, r2, #0
 800f3d6:	bf18      	it	ne
 800f3d8:	2001      	movne	r0, #1
 800f3da:	b002      	add	sp, #8
 800f3dc:	4770      	bx	lr
 800f3de:	4610      	mov	r0, r2
 800f3e0:	e7fb      	b.n	800f3da <__ascii_mbtowc+0x16>
 800f3e2:	f06f 0001 	mvn.w	r0, #1
 800f3e6:	e7f8      	b.n	800f3da <__ascii_mbtowc+0x16>

0800f3e8 <__malloc_lock>:
 800f3e8:	4801      	ldr	r0, [pc, #4]	; (800f3f0 <__malloc_lock+0x8>)
 800f3ea:	f7fe b8fe 	b.w	800d5ea <__retarget_lock_acquire_recursive>
 800f3ee:	bf00      	nop
 800f3f0:	20006f0c 	.word	0x20006f0c

0800f3f4 <__malloc_unlock>:
 800f3f4:	4801      	ldr	r0, [pc, #4]	; (800f3fc <__malloc_unlock+0x8>)
 800f3f6:	f7fe b8f9 	b.w	800d5ec <__retarget_lock_release_recursive>
 800f3fa:	bf00      	nop
 800f3fc:	20006f0c 	.word	0x20006f0c

0800f400 <_Balloc>:
 800f400:	b570      	push	{r4, r5, r6, lr}
 800f402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f404:	4604      	mov	r4, r0
 800f406:	460d      	mov	r5, r1
 800f408:	b976      	cbnz	r6, 800f428 <_Balloc+0x28>
 800f40a:	2010      	movs	r0, #16
 800f40c:	f001 fc84 	bl	8010d18 <malloc>
 800f410:	4602      	mov	r2, r0
 800f412:	6260      	str	r0, [r4, #36]	; 0x24
 800f414:	b920      	cbnz	r0, 800f420 <_Balloc+0x20>
 800f416:	4b18      	ldr	r3, [pc, #96]	; (800f478 <_Balloc+0x78>)
 800f418:	4818      	ldr	r0, [pc, #96]	; (800f47c <_Balloc+0x7c>)
 800f41a:	2166      	movs	r1, #102	; 0x66
 800f41c:	f001 fc4c 	bl	8010cb8 <__assert_func>
 800f420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f424:	6006      	str	r6, [r0, #0]
 800f426:	60c6      	str	r6, [r0, #12]
 800f428:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f42a:	68f3      	ldr	r3, [r6, #12]
 800f42c:	b183      	cbz	r3, 800f450 <_Balloc+0x50>
 800f42e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f436:	b9b8      	cbnz	r0, 800f468 <_Balloc+0x68>
 800f438:	2101      	movs	r1, #1
 800f43a:	fa01 f605 	lsl.w	r6, r1, r5
 800f43e:	1d72      	adds	r2, r6, #5
 800f440:	0092      	lsls	r2, r2, #2
 800f442:	4620      	mov	r0, r4
 800f444:	f000 fc9d 	bl	800fd82 <_calloc_r>
 800f448:	b160      	cbz	r0, 800f464 <_Balloc+0x64>
 800f44a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f44e:	e00e      	b.n	800f46e <_Balloc+0x6e>
 800f450:	2221      	movs	r2, #33	; 0x21
 800f452:	2104      	movs	r1, #4
 800f454:	4620      	mov	r0, r4
 800f456:	f000 fc94 	bl	800fd82 <_calloc_r>
 800f45a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f45c:	60f0      	str	r0, [r6, #12]
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1e4      	bne.n	800f42e <_Balloc+0x2e>
 800f464:	2000      	movs	r0, #0
 800f466:	bd70      	pop	{r4, r5, r6, pc}
 800f468:	6802      	ldr	r2, [r0, #0]
 800f46a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f46e:	2300      	movs	r3, #0
 800f470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f474:	e7f7      	b.n	800f466 <_Balloc+0x66>
 800f476:	bf00      	nop
 800f478:	080118ec 	.word	0x080118ec
 800f47c:	08011903 	.word	0x08011903

0800f480 <_Bfree>:
 800f480:	b570      	push	{r4, r5, r6, lr}
 800f482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f484:	4605      	mov	r5, r0
 800f486:	460c      	mov	r4, r1
 800f488:	b976      	cbnz	r6, 800f4a8 <_Bfree+0x28>
 800f48a:	2010      	movs	r0, #16
 800f48c:	f001 fc44 	bl	8010d18 <malloc>
 800f490:	4602      	mov	r2, r0
 800f492:	6268      	str	r0, [r5, #36]	; 0x24
 800f494:	b920      	cbnz	r0, 800f4a0 <_Bfree+0x20>
 800f496:	4b09      	ldr	r3, [pc, #36]	; (800f4bc <_Bfree+0x3c>)
 800f498:	4809      	ldr	r0, [pc, #36]	; (800f4c0 <_Bfree+0x40>)
 800f49a:	218a      	movs	r1, #138	; 0x8a
 800f49c:	f001 fc0c 	bl	8010cb8 <__assert_func>
 800f4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4a4:	6006      	str	r6, [r0, #0]
 800f4a6:	60c6      	str	r6, [r0, #12]
 800f4a8:	b13c      	cbz	r4, 800f4ba <_Bfree+0x3a>
 800f4aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f4ac:	6862      	ldr	r2, [r4, #4]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4b4:	6021      	str	r1, [r4, #0]
 800f4b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
 800f4bc:	080118ec 	.word	0x080118ec
 800f4c0:	08011903 	.word	0x08011903

0800f4c4 <__multadd>:
 800f4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c8:	690d      	ldr	r5, [r1, #16]
 800f4ca:	4607      	mov	r7, r0
 800f4cc:	460c      	mov	r4, r1
 800f4ce:	461e      	mov	r6, r3
 800f4d0:	f101 0c14 	add.w	ip, r1, #20
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	f8dc 3000 	ldr.w	r3, [ip]
 800f4da:	b299      	uxth	r1, r3
 800f4dc:	fb02 6101 	mla	r1, r2, r1, r6
 800f4e0:	0c1e      	lsrs	r6, r3, #16
 800f4e2:	0c0b      	lsrs	r3, r1, #16
 800f4e4:	fb02 3306 	mla	r3, r2, r6, r3
 800f4e8:	b289      	uxth	r1, r1
 800f4ea:	3001      	adds	r0, #1
 800f4ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4f0:	4285      	cmp	r5, r0
 800f4f2:	f84c 1b04 	str.w	r1, [ip], #4
 800f4f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f4fa:	dcec      	bgt.n	800f4d6 <__multadd+0x12>
 800f4fc:	b30e      	cbz	r6, 800f542 <__multadd+0x7e>
 800f4fe:	68a3      	ldr	r3, [r4, #8]
 800f500:	42ab      	cmp	r3, r5
 800f502:	dc19      	bgt.n	800f538 <__multadd+0x74>
 800f504:	6861      	ldr	r1, [r4, #4]
 800f506:	4638      	mov	r0, r7
 800f508:	3101      	adds	r1, #1
 800f50a:	f7ff ff79 	bl	800f400 <_Balloc>
 800f50e:	4680      	mov	r8, r0
 800f510:	b928      	cbnz	r0, 800f51e <__multadd+0x5a>
 800f512:	4602      	mov	r2, r0
 800f514:	4b0c      	ldr	r3, [pc, #48]	; (800f548 <__multadd+0x84>)
 800f516:	480d      	ldr	r0, [pc, #52]	; (800f54c <__multadd+0x88>)
 800f518:	21b5      	movs	r1, #181	; 0xb5
 800f51a:	f001 fbcd 	bl	8010cb8 <__assert_func>
 800f51e:	6922      	ldr	r2, [r4, #16]
 800f520:	3202      	adds	r2, #2
 800f522:	f104 010c 	add.w	r1, r4, #12
 800f526:	0092      	lsls	r2, r2, #2
 800f528:	300c      	adds	r0, #12
 800f52a:	f7fe f860 	bl	800d5ee <memcpy>
 800f52e:	4621      	mov	r1, r4
 800f530:	4638      	mov	r0, r7
 800f532:	f7ff ffa5 	bl	800f480 <_Bfree>
 800f536:	4644      	mov	r4, r8
 800f538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f53c:	3501      	adds	r5, #1
 800f53e:	615e      	str	r6, [r3, #20]
 800f540:	6125      	str	r5, [r4, #16]
 800f542:	4620      	mov	r0, r4
 800f544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f548:	08011861 	.word	0x08011861
 800f54c:	08011903 	.word	0x08011903

0800f550 <__s2b>:
 800f550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f554:	460c      	mov	r4, r1
 800f556:	4615      	mov	r5, r2
 800f558:	461f      	mov	r7, r3
 800f55a:	2209      	movs	r2, #9
 800f55c:	3308      	adds	r3, #8
 800f55e:	4606      	mov	r6, r0
 800f560:	fb93 f3f2 	sdiv	r3, r3, r2
 800f564:	2100      	movs	r1, #0
 800f566:	2201      	movs	r2, #1
 800f568:	429a      	cmp	r2, r3
 800f56a:	db09      	blt.n	800f580 <__s2b+0x30>
 800f56c:	4630      	mov	r0, r6
 800f56e:	f7ff ff47 	bl	800f400 <_Balloc>
 800f572:	b940      	cbnz	r0, 800f586 <__s2b+0x36>
 800f574:	4602      	mov	r2, r0
 800f576:	4b19      	ldr	r3, [pc, #100]	; (800f5dc <__s2b+0x8c>)
 800f578:	4819      	ldr	r0, [pc, #100]	; (800f5e0 <__s2b+0x90>)
 800f57a:	21ce      	movs	r1, #206	; 0xce
 800f57c:	f001 fb9c 	bl	8010cb8 <__assert_func>
 800f580:	0052      	lsls	r2, r2, #1
 800f582:	3101      	adds	r1, #1
 800f584:	e7f0      	b.n	800f568 <__s2b+0x18>
 800f586:	9b08      	ldr	r3, [sp, #32]
 800f588:	6143      	str	r3, [r0, #20]
 800f58a:	2d09      	cmp	r5, #9
 800f58c:	f04f 0301 	mov.w	r3, #1
 800f590:	6103      	str	r3, [r0, #16]
 800f592:	dd16      	ble.n	800f5c2 <__s2b+0x72>
 800f594:	f104 0909 	add.w	r9, r4, #9
 800f598:	46c8      	mov	r8, r9
 800f59a:	442c      	add	r4, r5
 800f59c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f5a0:	4601      	mov	r1, r0
 800f5a2:	3b30      	subs	r3, #48	; 0x30
 800f5a4:	220a      	movs	r2, #10
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	f7ff ff8c 	bl	800f4c4 <__multadd>
 800f5ac:	45a0      	cmp	r8, r4
 800f5ae:	d1f5      	bne.n	800f59c <__s2b+0x4c>
 800f5b0:	f1a5 0408 	sub.w	r4, r5, #8
 800f5b4:	444c      	add	r4, r9
 800f5b6:	1b2d      	subs	r5, r5, r4
 800f5b8:	1963      	adds	r3, r4, r5
 800f5ba:	42bb      	cmp	r3, r7
 800f5bc:	db04      	blt.n	800f5c8 <__s2b+0x78>
 800f5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5c2:	340a      	adds	r4, #10
 800f5c4:	2509      	movs	r5, #9
 800f5c6:	e7f6      	b.n	800f5b6 <__s2b+0x66>
 800f5c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5cc:	4601      	mov	r1, r0
 800f5ce:	3b30      	subs	r3, #48	; 0x30
 800f5d0:	220a      	movs	r2, #10
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	f7ff ff76 	bl	800f4c4 <__multadd>
 800f5d8:	e7ee      	b.n	800f5b8 <__s2b+0x68>
 800f5da:	bf00      	nop
 800f5dc:	08011861 	.word	0x08011861
 800f5e0:	08011903 	.word	0x08011903

0800f5e4 <__hi0bits>:
 800f5e4:	0c03      	lsrs	r3, r0, #16
 800f5e6:	041b      	lsls	r3, r3, #16
 800f5e8:	b9d3      	cbnz	r3, 800f620 <__hi0bits+0x3c>
 800f5ea:	0400      	lsls	r0, r0, #16
 800f5ec:	2310      	movs	r3, #16
 800f5ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5f2:	bf04      	itt	eq
 800f5f4:	0200      	lsleq	r0, r0, #8
 800f5f6:	3308      	addeq	r3, #8
 800f5f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f5fc:	bf04      	itt	eq
 800f5fe:	0100      	lsleq	r0, r0, #4
 800f600:	3304      	addeq	r3, #4
 800f602:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f606:	bf04      	itt	eq
 800f608:	0080      	lsleq	r0, r0, #2
 800f60a:	3302      	addeq	r3, #2
 800f60c:	2800      	cmp	r0, #0
 800f60e:	db05      	blt.n	800f61c <__hi0bits+0x38>
 800f610:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f614:	f103 0301 	add.w	r3, r3, #1
 800f618:	bf08      	it	eq
 800f61a:	2320      	moveq	r3, #32
 800f61c:	4618      	mov	r0, r3
 800f61e:	4770      	bx	lr
 800f620:	2300      	movs	r3, #0
 800f622:	e7e4      	b.n	800f5ee <__hi0bits+0xa>

0800f624 <__lo0bits>:
 800f624:	6803      	ldr	r3, [r0, #0]
 800f626:	f013 0207 	ands.w	r2, r3, #7
 800f62a:	4601      	mov	r1, r0
 800f62c:	d00b      	beq.n	800f646 <__lo0bits+0x22>
 800f62e:	07da      	lsls	r2, r3, #31
 800f630:	d423      	bmi.n	800f67a <__lo0bits+0x56>
 800f632:	0798      	lsls	r0, r3, #30
 800f634:	bf49      	itett	mi
 800f636:	085b      	lsrmi	r3, r3, #1
 800f638:	089b      	lsrpl	r3, r3, #2
 800f63a:	2001      	movmi	r0, #1
 800f63c:	600b      	strmi	r3, [r1, #0]
 800f63e:	bf5c      	itt	pl
 800f640:	600b      	strpl	r3, [r1, #0]
 800f642:	2002      	movpl	r0, #2
 800f644:	4770      	bx	lr
 800f646:	b298      	uxth	r0, r3
 800f648:	b9a8      	cbnz	r0, 800f676 <__lo0bits+0x52>
 800f64a:	0c1b      	lsrs	r3, r3, #16
 800f64c:	2010      	movs	r0, #16
 800f64e:	b2da      	uxtb	r2, r3
 800f650:	b90a      	cbnz	r2, 800f656 <__lo0bits+0x32>
 800f652:	3008      	adds	r0, #8
 800f654:	0a1b      	lsrs	r3, r3, #8
 800f656:	071a      	lsls	r2, r3, #28
 800f658:	bf04      	itt	eq
 800f65a:	091b      	lsreq	r3, r3, #4
 800f65c:	3004      	addeq	r0, #4
 800f65e:	079a      	lsls	r2, r3, #30
 800f660:	bf04      	itt	eq
 800f662:	089b      	lsreq	r3, r3, #2
 800f664:	3002      	addeq	r0, #2
 800f666:	07da      	lsls	r2, r3, #31
 800f668:	d403      	bmi.n	800f672 <__lo0bits+0x4e>
 800f66a:	085b      	lsrs	r3, r3, #1
 800f66c:	f100 0001 	add.w	r0, r0, #1
 800f670:	d005      	beq.n	800f67e <__lo0bits+0x5a>
 800f672:	600b      	str	r3, [r1, #0]
 800f674:	4770      	bx	lr
 800f676:	4610      	mov	r0, r2
 800f678:	e7e9      	b.n	800f64e <__lo0bits+0x2a>
 800f67a:	2000      	movs	r0, #0
 800f67c:	4770      	bx	lr
 800f67e:	2020      	movs	r0, #32
 800f680:	4770      	bx	lr
	...

0800f684 <__i2b>:
 800f684:	b510      	push	{r4, lr}
 800f686:	460c      	mov	r4, r1
 800f688:	2101      	movs	r1, #1
 800f68a:	f7ff feb9 	bl	800f400 <_Balloc>
 800f68e:	4602      	mov	r2, r0
 800f690:	b928      	cbnz	r0, 800f69e <__i2b+0x1a>
 800f692:	4b05      	ldr	r3, [pc, #20]	; (800f6a8 <__i2b+0x24>)
 800f694:	4805      	ldr	r0, [pc, #20]	; (800f6ac <__i2b+0x28>)
 800f696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f69a:	f001 fb0d 	bl	8010cb8 <__assert_func>
 800f69e:	2301      	movs	r3, #1
 800f6a0:	6144      	str	r4, [r0, #20]
 800f6a2:	6103      	str	r3, [r0, #16]
 800f6a4:	bd10      	pop	{r4, pc}
 800f6a6:	bf00      	nop
 800f6a8:	08011861 	.word	0x08011861
 800f6ac:	08011903 	.word	0x08011903

0800f6b0 <__multiply>:
 800f6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b4:	4691      	mov	r9, r2
 800f6b6:	690a      	ldr	r2, [r1, #16]
 800f6b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	bfb8      	it	lt
 800f6c0:	460b      	movlt	r3, r1
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	bfbc      	itt	lt
 800f6c6:	464c      	movlt	r4, r9
 800f6c8:	4699      	movlt	r9, r3
 800f6ca:	6927      	ldr	r7, [r4, #16]
 800f6cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6d0:	68a3      	ldr	r3, [r4, #8]
 800f6d2:	6861      	ldr	r1, [r4, #4]
 800f6d4:	eb07 060a 	add.w	r6, r7, sl
 800f6d8:	42b3      	cmp	r3, r6
 800f6da:	b085      	sub	sp, #20
 800f6dc:	bfb8      	it	lt
 800f6de:	3101      	addlt	r1, #1
 800f6e0:	f7ff fe8e 	bl	800f400 <_Balloc>
 800f6e4:	b930      	cbnz	r0, 800f6f4 <__multiply+0x44>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	4b44      	ldr	r3, [pc, #272]	; (800f7fc <__multiply+0x14c>)
 800f6ea:	4845      	ldr	r0, [pc, #276]	; (800f800 <__multiply+0x150>)
 800f6ec:	f240 115d 	movw	r1, #349	; 0x15d
 800f6f0:	f001 fae2 	bl	8010cb8 <__assert_func>
 800f6f4:	f100 0514 	add.w	r5, r0, #20
 800f6f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f6fc:	462b      	mov	r3, r5
 800f6fe:	2200      	movs	r2, #0
 800f700:	4543      	cmp	r3, r8
 800f702:	d321      	bcc.n	800f748 <__multiply+0x98>
 800f704:	f104 0314 	add.w	r3, r4, #20
 800f708:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f70c:	f109 0314 	add.w	r3, r9, #20
 800f710:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f714:	9202      	str	r2, [sp, #8]
 800f716:	1b3a      	subs	r2, r7, r4
 800f718:	3a15      	subs	r2, #21
 800f71a:	f022 0203 	bic.w	r2, r2, #3
 800f71e:	3204      	adds	r2, #4
 800f720:	f104 0115 	add.w	r1, r4, #21
 800f724:	428f      	cmp	r7, r1
 800f726:	bf38      	it	cc
 800f728:	2204      	movcc	r2, #4
 800f72a:	9201      	str	r2, [sp, #4]
 800f72c:	9a02      	ldr	r2, [sp, #8]
 800f72e:	9303      	str	r3, [sp, #12]
 800f730:	429a      	cmp	r2, r3
 800f732:	d80c      	bhi.n	800f74e <__multiply+0x9e>
 800f734:	2e00      	cmp	r6, #0
 800f736:	dd03      	ble.n	800f740 <__multiply+0x90>
 800f738:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d05a      	beq.n	800f7f6 <__multiply+0x146>
 800f740:	6106      	str	r6, [r0, #16]
 800f742:	b005      	add	sp, #20
 800f744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f748:	f843 2b04 	str.w	r2, [r3], #4
 800f74c:	e7d8      	b.n	800f700 <__multiply+0x50>
 800f74e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f752:	f1ba 0f00 	cmp.w	sl, #0
 800f756:	d024      	beq.n	800f7a2 <__multiply+0xf2>
 800f758:	f104 0e14 	add.w	lr, r4, #20
 800f75c:	46a9      	mov	r9, r5
 800f75e:	f04f 0c00 	mov.w	ip, #0
 800f762:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f766:	f8d9 1000 	ldr.w	r1, [r9]
 800f76a:	fa1f fb82 	uxth.w	fp, r2
 800f76e:	b289      	uxth	r1, r1
 800f770:	fb0a 110b 	mla	r1, sl, fp, r1
 800f774:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f778:	f8d9 2000 	ldr.w	r2, [r9]
 800f77c:	4461      	add	r1, ip
 800f77e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f782:	fb0a c20b 	mla	r2, sl, fp, ip
 800f786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f78a:	b289      	uxth	r1, r1
 800f78c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f790:	4577      	cmp	r7, lr
 800f792:	f849 1b04 	str.w	r1, [r9], #4
 800f796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f79a:	d8e2      	bhi.n	800f762 <__multiply+0xb2>
 800f79c:	9a01      	ldr	r2, [sp, #4]
 800f79e:	f845 c002 	str.w	ip, [r5, r2]
 800f7a2:	9a03      	ldr	r2, [sp, #12]
 800f7a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f7a8:	3304      	adds	r3, #4
 800f7aa:	f1b9 0f00 	cmp.w	r9, #0
 800f7ae:	d020      	beq.n	800f7f2 <__multiply+0x142>
 800f7b0:	6829      	ldr	r1, [r5, #0]
 800f7b2:	f104 0c14 	add.w	ip, r4, #20
 800f7b6:	46ae      	mov	lr, r5
 800f7b8:	f04f 0a00 	mov.w	sl, #0
 800f7bc:	f8bc b000 	ldrh.w	fp, [ip]
 800f7c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f7c4:	fb09 220b 	mla	r2, r9, fp, r2
 800f7c8:	4492      	add	sl, r2
 800f7ca:	b289      	uxth	r1, r1
 800f7cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f7d0:	f84e 1b04 	str.w	r1, [lr], #4
 800f7d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f7d8:	f8be 1000 	ldrh.w	r1, [lr]
 800f7dc:	0c12      	lsrs	r2, r2, #16
 800f7de:	fb09 1102 	mla	r1, r9, r2, r1
 800f7e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f7e6:	4567      	cmp	r7, ip
 800f7e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7ec:	d8e6      	bhi.n	800f7bc <__multiply+0x10c>
 800f7ee:	9a01      	ldr	r2, [sp, #4]
 800f7f0:	50a9      	str	r1, [r5, r2]
 800f7f2:	3504      	adds	r5, #4
 800f7f4:	e79a      	b.n	800f72c <__multiply+0x7c>
 800f7f6:	3e01      	subs	r6, #1
 800f7f8:	e79c      	b.n	800f734 <__multiply+0x84>
 800f7fa:	bf00      	nop
 800f7fc:	08011861 	.word	0x08011861
 800f800:	08011903 	.word	0x08011903

0800f804 <__pow5mult>:
 800f804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f808:	4615      	mov	r5, r2
 800f80a:	f012 0203 	ands.w	r2, r2, #3
 800f80e:	4606      	mov	r6, r0
 800f810:	460f      	mov	r7, r1
 800f812:	d007      	beq.n	800f824 <__pow5mult+0x20>
 800f814:	4c25      	ldr	r4, [pc, #148]	; (800f8ac <__pow5mult+0xa8>)
 800f816:	3a01      	subs	r2, #1
 800f818:	2300      	movs	r3, #0
 800f81a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f81e:	f7ff fe51 	bl	800f4c4 <__multadd>
 800f822:	4607      	mov	r7, r0
 800f824:	10ad      	asrs	r5, r5, #2
 800f826:	d03d      	beq.n	800f8a4 <__pow5mult+0xa0>
 800f828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f82a:	b97c      	cbnz	r4, 800f84c <__pow5mult+0x48>
 800f82c:	2010      	movs	r0, #16
 800f82e:	f001 fa73 	bl	8010d18 <malloc>
 800f832:	4602      	mov	r2, r0
 800f834:	6270      	str	r0, [r6, #36]	; 0x24
 800f836:	b928      	cbnz	r0, 800f844 <__pow5mult+0x40>
 800f838:	4b1d      	ldr	r3, [pc, #116]	; (800f8b0 <__pow5mult+0xac>)
 800f83a:	481e      	ldr	r0, [pc, #120]	; (800f8b4 <__pow5mult+0xb0>)
 800f83c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f840:	f001 fa3a 	bl	8010cb8 <__assert_func>
 800f844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f848:	6004      	str	r4, [r0, #0]
 800f84a:	60c4      	str	r4, [r0, #12]
 800f84c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f854:	b94c      	cbnz	r4, 800f86a <__pow5mult+0x66>
 800f856:	f240 2171 	movw	r1, #625	; 0x271
 800f85a:	4630      	mov	r0, r6
 800f85c:	f7ff ff12 	bl	800f684 <__i2b>
 800f860:	2300      	movs	r3, #0
 800f862:	f8c8 0008 	str.w	r0, [r8, #8]
 800f866:	4604      	mov	r4, r0
 800f868:	6003      	str	r3, [r0, #0]
 800f86a:	f04f 0900 	mov.w	r9, #0
 800f86e:	07eb      	lsls	r3, r5, #31
 800f870:	d50a      	bpl.n	800f888 <__pow5mult+0x84>
 800f872:	4639      	mov	r1, r7
 800f874:	4622      	mov	r2, r4
 800f876:	4630      	mov	r0, r6
 800f878:	f7ff ff1a 	bl	800f6b0 <__multiply>
 800f87c:	4639      	mov	r1, r7
 800f87e:	4680      	mov	r8, r0
 800f880:	4630      	mov	r0, r6
 800f882:	f7ff fdfd 	bl	800f480 <_Bfree>
 800f886:	4647      	mov	r7, r8
 800f888:	106d      	asrs	r5, r5, #1
 800f88a:	d00b      	beq.n	800f8a4 <__pow5mult+0xa0>
 800f88c:	6820      	ldr	r0, [r4, #0]
 800f88e:	b938      	cbnz	r0, 800f8a0 <__pow5mult+0x9c>
 800f890:	4622      	mov	r2, r4
 800f892:	4621      	mov	r1, r4
 800f894:	4630      	mov	r0, r6
 800f896:	f7ff ff0b 	bl	800f6b0 <__multiply>
 800f89a:	6020      	str	r0, [r4, #0]
 800f89c:	f8c0 9000 	str.w	r9, [r0]
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	e7e4      	b.n	800f86e <__pow5mult+0x6a>
 800f8a4:	4638      	mov	r0, r7
 800f8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8aa:	bf00      	nop
 800f8ac:	08011a50 	.word	0x08011a50
 800f8b0:	080118ec 	.word	0x080118ec
 800f8b4:	08011903 	.word	0x08011903

0800f8b8 <__lshift>:
 800f8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8bc:	460c      	mov	r4, r1
 800f8be:	6849      	ldr	r1, [r1, #4]
 800f8c0:	6923      	ldr	r3, [r4, #16]
 800f8c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8c6:	68a3      	ldr	r3, [r4, #8]
 800f8c8:	4607      	mov	r7, r0
 800f8ca:	4691      	mov	r9, r2
 800f8cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8d0:	f108 0601 	add.w	r6, r8, #1
 800f8d4:	42b3      	cmp	r3, r6
 800f8d6:	db0b      	blt.n	800f8f0 <__lshift+0x38>
 800f8d8:	4638      	mov	r0, r7
 800f8da:	f7ff fd91 	bl	800f400 <_Balloc>
 800f8de:	4605      	mov	r5, r0
 800f8e0:	b948      	cbnz	r0, 800f8f6 <__lshift+0x3e>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	4b2a      	ldr	r3, [pc, #168]	; (800f990 <__lshift+0xd8>)
 800f8e6:	482b      	ldr	r0, [pc, #172]	; (800f994 <__lshift+0xdc>)
 800f8e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f8ec:	f001 f9e4 	bl	8010cb8 <__assert_func>
 800f8f0:	3101      	adds	r1, #1
 800f8f2:	005b      	lsls	r3, r3, #1
 800f8f4:	e7ee      	b.n	800f8d4 <__lshift+0x1c>
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f100 0114 	add.w	r1, r0, #20
 800f8fc:	f100 0210 	add.w	r2, r0, #16
 800f900:	4618      	mov	r0, r3
 800f902:	4553      	cmp	r3, sl
 800f904:	db37      	blt.n	800f976 <__lshift+0xbe>
 800f906:	6920      	ldr	r0, [r4, #16]
 800f908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f90c:	f104 0314 	add.w	r3, r4, #20
 800f910:	f019 091f 	ands.w	r9, r9, #31
 800f914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f918:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f91c:	d02f      	beq.n	800f97e <__lshift+0xc6>
 800f91e:	f1c9 0e20 	rsb	lr, r9, #32
 800f922:	468a      	mov	sl, r1
 800f924:	f04f 0c00 	mov.w	ip, #0
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	fa02 f209 	lsl.w	r2, r2, r9
 800f92e:	ea42 020c 	orr.w	r2, r2, ip
 800f932:	f84a 2b04 	str.w	r2, [sl], #4
 800f936:	f853 2b04 	ldr.w	r2, [r3], #4
 800f93a:	4298      	cmp	r0, r3
 800f93c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f940:	d8f2      	bhi.n	800f928 <__lshift+0x70>
 800f942:	1b03      	subs	r3, r0, r4
 800f944:	3b15      	subs	r3, #21
 800f946:	f023 0303 	bic.w	r3, r3, #3
 800f94a:	3304      	adds	r3, #4
 800f94c:	f104 0215 	add.w	r2, r4, #21
 800f950:	4290      	cmp	r0, r2
 800f952:	bf38      	it	cc
 800f954:	2304      	movcc	r3, #4
 800f956:	f841 c003 	str.w	ip, [r1, r3]
 800f95a:	f1bc 0f00 	cmp.w	ip, #0
 800f95e:	d001      	beq.n	800f964 <__lshift+0xac>
 800f960:	f108 0602 	add.w	r6, r8, #2
 800f964:	3e01      	subs	r6, #1
 800f966:	4638      	mov	r0, r7
 800f968:	612e      	str	r6, [r5, #16]
 800f96a:	4621      	mov	r1, r4
 800f96c:	f7ff fd88 	bl	800f480 <_Bfree>
 800f970:	4628      	mov	r0, r5
 800f972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f976:	f842 0f04 	str.w	r0, [r2, #4]!
 800f97a:	3301      	adds	r3, #1
 800f97c:	e7c1      	b.n	800f902 <__lshift+0x4a>
 800f97e:	3904      	subs	r1, #4
 800f980:	f853 2b04 	ldr.w	r2, [r3], #4
 800f984:	f841 2f04 	str.w	r2, [r1, #4]!
 800f988:	4298      	cmp	r0, r3
 800f98a:	d8f9      	bhi.n	800f980 <__lshift+0xc8>
 800f98c:	e7ea      	b.n	800f964 <__lshift+0xac>
 800f98e:	bf00      	nop
 800f990:	08011861 	.word	0x08011861
 800f994:	08011903 	.word	0x08011903

0800f998 <__mcmp>:
 800f998:	b530      	push	{r4, r5, lr}
 800f99a:	6902      	ldr	r2, [r0, #16]
 800f99c:	690c      	ldr	r4, [r1, #16]
 800f99e:	1b12      	subs	r2, r2, r4
 800f9a0:	d10e      	bne.n	800f9c0 <__mcmp+0x28>
 800f9a2:	f100 0314 	add.w	r3, r0, #20
 800f9a6:	3114      	adds	r1, #20
 800f9a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f9ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f9b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f9b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f9b8:	42a5      	cmp	r5, r4
 800f9ba:	d003      	beq.n	800f9c4 <__mcmp+0x2c>
 800f9bc:	d305      	bcc.n	800f9ca <__mcmp+0x32>
 800f9be:	2201      	movs	r2, #1
 800f9c0:	4610      	mov	r0, r2
 800f9c2:	bd30      	pop	{r4, r5, pc}
 800f9c4:	4283      	cmp	r3, r0
 800f9c6:	d3f3      	bcc.n	800f9b0 <__mcmp+0x18>
 800f9c8:	e7fa      	b.n	800f9c0 <__mcmp+0x28>
 800f9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ce:	e7f7      	b.n	800f9c0 <__mcmp+0x28>

0800f9d0 <__mdiff>:
 800f9d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d4:	460c      	mov	r4, r1
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	4611      	mov	r1, r2
 800f9da:	4620      	mov	r0, r4
 800f9dc:	4690      	mov	r8, r2
 800f9de:	f7ff ffdb 	bl	800f998 <__mcmp>
 800f9e2:	1e05      	subs	r5, r0, #0
 800f9e4:	d110      	bne.n	800fa08 <__mdiff+0x38>
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7ff fd09 	bl	800f400 <_Balloc>
 800f9ee:	b930      	cbnz	r0, 800f9fe <__mdiff+0x2e>
 800f9f0:	4b3a      	ldr	r3, [pc, #232]	; (800fadc <__mdiff+0x10c>)
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	f240 2132 	movw	r1, #562	; 0x232
 800f9f8:	4839      	ldr	r0, [pc, #228]	; (800fae0 <__mdiff+0x110>)
 800f9fa:	f001 f95d 	bl	8010cb8 <__assert_func>
 800f9fe:	2301      	movs	r3, #1
 800fa00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa08:	bfa4      	itt	ge
 800fa0a:	4643      	movge	r3, r8
 800fa0c:	46a0      	movge	r8, r4
 800fa0e:	4630      	mov	r0, r6
 800fa10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa14:	bfa6      	itte	ge
 800fa16:	461c      	movge	r4, r3
 800fa18:	2500      	movge	r5, #0
 800fa1a:	2501      	movlt	r5, #1
 800fa1c:	f7ff fcf0 	bl	800f400 <_Balloc>
 800fa20:	b920      	cbnz	r0, 800fa2c <__mdiff+0x5c>
 800fa22:	4b2e      	ldr	r3, [pc, #184]	; (800fadc <__mdiff+0x10c>)
 800fa24:	4602      	mov	r2, r0
 800fa26:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa2a:	e7e5      	b.n	800f9f8 <__mdiff+0x28>
 800fa2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa30:	6926      	ldr	r6, [r4, #16]
 800fa32:	60c5      	str	r5, [r0, #12]
 800fa34:	f104 0914 	add.w	r9, r4, #20
 800fa38:	f108 0514 	add.w	r5, r8, #20
 800fa3c:	f100 0e14 	add.w	lr, r0, #20
 800fa40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa48:	f108 0210 	add.w	r2, r8, #16
 800fa4c:	46f2      	mov	sl, lr
 800fa4e:	2100      	movs	r1, #0
 800fa50:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa58:	fa1f f883 	uxth.w	r8, r3
 800fa5c:	fa11 f18b 	uxtah	r1, r1, fp
 800fa60:	0c1b      	lsrs	r3, r3, #16
 800fa62:	eba1 0808 	sub.w	r8, r1, r8
 800fa66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa6e:	fa1f f888 	uxth.w	r8, r8
 800fa72:	1419      	asrs	r1, r3, #16
 800fa74:	454e      	cmp	r6, r9
 800fa76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa7a:	f84a 3b04 	str.w	r3, [sl], #4
 800fa7e:	d8e7      	bhi.n	800fa50 <__mdiff+0x80>
 800fa80:	1b33      	subs	r3, r6, r4
 800fa82:	3b15      	subs	r3, #21
 800fa84:	f023 0303 	bic.w	r3, r3, #3
 800fa88:	3304      	adds	r3, #4
 800fa8a:	3415      	adds	r4, #21
 800fa8c:	42a6      	cmp	r6, r4
 800fa8e:	bf38      	it	cc
 800fa90:	2304      	movcc	r3, #4
 800fa92:	441d      	add	r5, r3
 800fa94:	4473      	add	r3, lr
 800fa96:	469e      	mov	lr, r3
 800fa98:	462e      	mov	r6, r5
 800fa9a:	4566      	cmp	r6, ip
 800fa9c:	d30e      	bcc.n	800fabc <__mdiff+0xec>
 800fa9e:	f10c 0203 	add.w	r2, ip, #3
 800faa2:	1b52      	subs	r2, r2, r5
 800faa4:	f022 0203 	bic.w	r2, r2, #3
 800faa8:	3d03      	subs	r5, #3
 800faaa:	45ac      	cmp	ip, r5
 800faac:	bf38      	it	cc
 800faae:	2200      	movcc	r2, #0
 800fab0:	441a      	add	r2, r3
 800fab2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fab6:	b17b      	cbz	r3, 800fad8 <__mdiff+0x108>
 800fab8:	6107      	str	r7, [r0, #16]
 800faba:	e7a3      	b.n	800fa04 <__mdiff+0x34>
 800fabc:	f856 8b04 	ldr.w	r8, [r6], #4
 800fac0:	fa11 f288 	uxtah	r2, r1, r8
 800fac4:	1414      	asrs	r4, r2, #16
 800fac6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800faca:	b292      	uxth	r2, r2
 800facc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fad0:	f84e 2b04 	str.w	r2, [lr], #4
 800fad4:	1421      	asrs	r1, r4, #16
 800fad6:	e7e0      	b.n	800fa9a <__mdiff+0xca>
 800fad8:	3f01      	subs	r7, #1
 800fada:	e7ea      	b.n	800fab2 <__mdiff+0xe2>
 800fadc:	08011861 	.word	0x08011861
 800fae0:	08011903 	.word	0x08011903

0800fae4 <__ulp>:
 800fae4:	b082      	sub	sp, #8
 800fae6:	ed8d 0b00 	vstr	d0, [sp]
 800faea:	9b01      	ldr	r3, [sp, #4]
 800faec:	4912      	ldr	r1, [pc, #72]	; (800fb38 <__ulp+0x54>)
 800faee:	4019      	ands	r1, r3
 800faf0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800faf4:	2900      	cmp	r1, #0
 800faf6:	dd05      	ble.n	800fb04 <__ulp+0x20>
 800faf8:	2200      	movs	r2, #0
 800fafa:	460b      	mov	r3, r1
 800fafc:	ec43 2b10 	vmov	d0, r2, r3
 800fb00:	b002      	add	sp, #8
 800fb02:	4770      	bx	lr
 800fb04:	4249      	negs	r1, r1
 800fb06:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fb0a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fb0e:	f04f 0200 	mov.w	r2, #0
 800fb12:	f04f 0300 	mov.w	r3, #0
 800fb16:	da04      	bge.n	800fb22 <__ulp+0x3e>
 800fb18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fb1c:	fa41 f300 	asr.w	r3, r1, r0
 800fb20:	e7ec      	b.n	800fafc <__ulp+0x18>
 800fb22:	f1a0 0114 	sub.w	r1, r0, #20
 800fb26:	291e      	cmp	r1, #30
 800fb28:	bfda      	itte	le
 800fb2a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fb2e:	fa20 f101 	lsrle.w	r1, r0, r1
 800fb32:	2101      	movgt	r1, #1
 800fb34:	460a      	mov	r2, r1
 800fb36:	e7e1      	b.n	800fafc <__ulp+0x18>
 800fb38:	7ff00000 	.word	0x7ff00000

0800fb3c <__b2d>:
 800fb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3e:	6905      	ldr	r5, [r0, #16]
 800fb40:	f100 0714 	add.w	r7, r0, #20
 800fb44:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fb48:	1f2e      	subs	r6, r5, #4
 800fb4a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f7ff fd48 	bl	800f5e4 <__hi0bits>
 800fb54:	f1c0 0320 	rsb	r3, r0, #32
 800fb58:	280a      	cmp	r0, #10
 800fb5a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fbd8 <__b2d+0x9c>
 800fb5e:	600b      	str	r3, [r1, #0]
 800fb60:	dc14      	bgt.n	800fb8c <__b2d+0x50>
 800fb62:	f1c0 0e0b 	rsb	lr, r0, #11
 800fb66:	fa24 f10e 	lsr.w	r1, r4, lr
 800fb6a:	42b7      	cmp	r7, r6
 800fb6c:	ea41 030c 	orr.w	r3, r1, ip
 800fb70:	bf34      	ite	cc
 800fb72:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb76:	2100      	movcs	r1, #0
 800fb78:	3015      	adds	r0, #21
 800fb7a:	fa04 f000 	lsl.w	r0, r4, r0
 800fb7e:	fa21 f10e 	lsr.w	r1, r1, lr
 800fb82:	ea40 0201 	orr.w	r2, r0, r1
 800fb86:	ec43 2b10 	vmov	d0, r2, r3
 800fb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb8c:	42b7      	cmp	r7, r6
 800fb8e:	bf3a      	itte	cc
 800fb90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb94:	f1a5 0608 	subcc.w	r6, r5, #8
 800fb98:	2100      	movcs	r1, #0
 800fb9a:	380b      	subs	r0, #11
 800fb9c:	d017      	beq.n	800fbce <__b2d+0x92>
 800fb9e:	f1c0 0c20 	rsb	ip, r0, #32
 800fba2:	fa04 f500 	lsl.w	r5, r4, r0
 800fba6:	42be      	cmp	r6, r7
 800fba8:	fa21 f40c 	lsr.w	r4, r1, ip
 800fbac:	ea45 0504 	orr.w	r5, r5, r4
 800fbb0:	bf8c      	ite	hi
 800fbb2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fbb6:	2400      	movls	r4, #0
 800fbb8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fbbc:	fa01 f000 	lsl.w	r0, r1, r0
 800fbc0:	fa24 f40c 	lsr.w	r4, r4, ip
 800fbc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fbc8:	ea40 0204 	orr.w	r2, r0, r4
 800fbcc:	e7db      	b.n	800fb86 <__b2d+0x4a>
 800fbce:	ea44 030c 	orr.w	r3, r4, ip
 800fbd2:	460a      	mov	r2, r1
 800fbd4:	e7d7      	b.n	800fb86 <__b2d+0x4a>
 800fbd6:	bf00      	nop
 800fbd8:	3ff00000 	.word	0x3ff00000

0800fbdc <__d2b>:
 800fbdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbe0:	4689      	mov	r9, r1
 800fbe2:	2101      	movs	r1, #1
 800fbe4:	ec57 6b10 	vmov	r6, r7, d0
 800fbe8:	4690      	mov	r8, r2
 800fbea:	f7ff fc09 	bl	800f400 <_Balloc>
 800fbee:	4604      	mov	r4, r0
 800fbf0:	b930      	cbnz	r0, 800fc00 <__d2b+0x24>
 800fbf2:	4602      	mov	r2, r0
 800fbf4:	4b25      	ldr	r3, [pc, #148]	; (800fc8c <__d2b+0xb0>)
 800fbf6:	4826      	ldr	r0, [pc, #152]	; (800fc90 <__d2b+0xb4>)
 800fbf8:	f240 310a 	movw	r1, #778	; 0x30a
 800fbfc:	f001 f85c 	bl	8010cb8 <__assert_func>
 800fc00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fc04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc08:	bb35      	cbnz	r5, 800fc58 <__d2b+0x7c>
 800fc0a:	2e00      	cmp	r6, #0
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	d028      	beq.n	800fc62 <__d2b+0x86>
 800fc10:	4668      	mov	r0, sp
 800fc12:	9600      	str	r6, [sp, #0]
 800fc14:	f7ff fd06 	bl	800f624 <__lo0bits>
 800fc18:	9900      	ldr	r1, [sp, #0]
 800fc1a:	b300      	cbz	r0, 800fc5e <__d2b+0x82>
 800fc1c:	9a01      	ldr	r2, [sp, #4]
 800fc1e:	f1c0 0320 	rsb	r3, r0, #32
 800fc22:	fa02 f303 	lsl.w	r3, r2, r3
 800fc26:	430b      	orrs	r3, r1
 800fc28:	40c2      	lsrs	r2, r0
 800fc2a:	6163      	str	r3, [r4, #20]
 800fc2c:	9201      	str	r2, [sp, #4]
 800fc2e:	9b01      	ldr	r3, [sp, #4]
 800fc30:	61a3      	str	r3, [r4, #24]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	bf14      	ite	ne
 800fc36:	2202      	movne	r2, #2
 800fc38:	2201      	moveq	r2, #1
 800fc3a:	6122      	str	r2, [r4, #16]
 800fc3c:	b1d5      	cbz	r5, 800fc74 <__d2b+0x98>
 800fc3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc42:	4405      	add	r5, r0
 800fc44:	f8c9 5000 	str.w	r5, [r9]
 800fc48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc4c:	f8c8 0000 	str.w	r0, [r8]
 800fc50:	4620      	mov	r0, r4
 800fc52:	b003      	add	sp, #12
 800fc54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc5c:	e7d5      	b.n	800fc0a <__d2b+0x2e>
 800fc5e:	6161      	str	r1, [r4, #20]
 800fc60:	e7e5      	b.n	800fc2e <__d2b+0x52>
 800fc62:	a801      	add	r0, sp, #4
 800fc64:	f7ff fcde 	bl	800f624 <__lo0bits>
 800fc68:	9b01      	ldr	r3, [sp, #4]
 800fc6a:	6163      	str	r3, [r4, #20]
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	6122      	str	r2, [r4, #16]
 800fc70:	3020      	adds	r0, #32
 800fc72:	e7e3      	b.n	800fc3c <__d2b+0x60>
 800fc74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc7c:	f8c9 0000 	str.w	r0, [r9]
 800fc80:	6918      	ldr	r0, [r3, #16]
 800fc82:	f7ff fcaf 	bl	800f5e4 <__hi0bits>
 800fc86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc8a:	e7df      	b.n	800fc4c <__d2b+0x70>
 800fc8c:	08011861 	.word	0x08011861
 800fc90:	08011903 	.word	0x08011903

0800fc94 <__ratio>:
 800fc94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc98:	4688      	mov	r8, r1
 800fc9a:	4669      	mov	r1, sp
 800fc9c:	4681      	mov	r9, r0
 800fc9e:	f7ff ff4d 	bl	800fb3c <__b2d>
 800fca2:	a901      	add	r1, sp, #4
 800fca4:	4640      	mov	r0, r8
 800fca6:	ec55 4b10 	vmov	r4, r5, d0
 800fcaa:	f7ff ff47 	bl	800fb3c <__b2d>
 800fcae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fcb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fcb6:	eba3 0c02 	sub.w	ip, r3, r2
 800fcba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fcbe:	1a9b      	subs	r3, r3, r2
 800fcc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fcc4:	ec51 0b10 	vmov	r0, r1, d0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	bfd6      	itet	le
 800fccc:	460a      	movle	r2, r1
 800fcce:	462a      	movgt	r2, r5
 800fcd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fcd4:	468b      	mov	fp, r1
 800fcd6:	462f      	mov	r7, r5
 800fcd8:	bfd4      	ite	le
 800fcda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fcde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fce2:	4620      	mov	r0, r4
 800fce4:	ee10 2a10 	vmov	r2, s0
 800fce8:	465b      	mov	r3, fp
 800fcea:	4639      	mov	r1, r7
 800fcec:	f7f0 fdce 	bl	800088c <__aeabi_ddiv>
 800fcf0:	ec41 0b10 	vmov	d0, r0, r1
 800fcf4:	b003      	add	sp, #12
 800fcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcfa <__copybits>:
 800fcfa:	3901      	subs	r1, #1
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	1149      	asrs	r1, r1, #5
 800fd00:	6914      	ldr	r4, [r2, #16]
 800fd02:	3101      	adds	r1, #1
 800fd04:	f102 0314 	add.w	r3, r2, #20
 800fd08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fd0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd10:	1f05      	subs	r5, r0, #4
 800fd12:	42a3      	cmp	r3, r4
 800fd14:	d30c      	bcc.n	800fd30 <__copybits+0x36>
 800fd16:	1aa3      	subs	r3, r4, r2
 800fd18:	3b11      	subs	r3, #17
 800fd1a:	f023 0303 	bic.w	r3, r3, #3
 800fd1e:	3211      	adds	r2, #17
 800fd20:	42a2      	cmp	r2, r4
 800fd22:	bf88      	it	hi
 800fd24:	2300      	movhi	r3, #0
 800fd26:	4418      	add	r0, r3
 800fd28:	2300      	movs	r3, #0
 800fd2a:	4288      	cmp	r0, r1
 800fd2c:	d305      	bcc.n	800fd3a <__copybits+0x40>
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}
 800fd30:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd34:	f845 6f04 	str.w	r6, [r5, #4]!
 800fd38:	e7eb      	b.n	800fd12 <__copybits+0x18>
 800fd3a:	f840 3b04 	str.w	r3, [r0], #4
 800fd3e:	e7f4      	b.n	800fd2a <__copybits+0x30>

0800fd40 <__any_on>:
 800fd40:	f100 0214 	add.w	r2, r0, #20
 800fd44:	6900      	ldr	r0, [r0, #16]
 800fd46:	114b      	asrs	r3, r1, #5
 800fd48:	4298      	cmp	r0, r3
 800fd4a:	b510      	push	{r4, lr}
 800fd4c:	db11      	blt.n	800fd72 <__any_on+0x32>
 800fd4e:	dd0a      	ble.n	800fd66 <__any_on+0x26>
 800fd50:	f011 011f 	ands.w	r1, r1, #31
 800fd54:	d007      	beq.n	800fd66 <__any_on+0x26>
 800fd56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd5a:	fa24 f001 	lsr.w	r0, r4, r1
 800fd5e:	fa00 f101 	lsl.w	r1, r0, r1
 800fd62:	428c      	cmp	r4, r1
 800fd64:	d10b      	bne.n	800fd7e <__any_on+0x3e>
 800fd66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d803      	bhi.n	800fd76 <__any_on+0x36>
 800fd6e:	2000      	movs	r0, #0
 800fd70:	bd10      	pop	{r4, pc}
 800fd72:	4603      	mov	r3, r0
 800fd74:	e7f7      	b.n	800fd66 <__any_on+0x26>
 800fd76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd7a:	2900      	cmp	r1, #0
 800fd7c:	d0f5      	beq.n	800fd6a <__any_on+0x2a>
 800fd7e:	2001      	movs	r0, #1
 800fd80:	e7f6      	b.n	800fd70 <__any_on+0x30>

0800fd82 <_calloc_r>:
 800fd82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd84:	fba1 2402 	umull	r2, r4, r1, r2
 800fd88:	b94c      	cbnz	r4, 800fd9e <_calloc_r+0x1c>
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	9201      	str	r2, [sp, #4]
 800fd8e:	f7fd fc65 	bl	800d65c <_malloc_r>
 800fd92:	9a01      	ldr	r2, [sp, #4]
 800fd94:	4605      	mov	r5, r0
 800fd96:	b930      	cbnz	r0, 800fda6 <_calloc_r+0x24>
 800fd98:	4628      	mov	r0, r5
 800fd9a:	b003      	add	sp, #12
 800fd9c:	bd30      	pop	{r4, r5, pc}
 800fd9e:	220c      	movs	r2, #12
 800fda0:	6002      	str	r2, [r0, #0]
 800fda2:	2500      	movs	r5, #0
 800fda4:	e7f8      	b.n	800fd98 <_calloc_r+0x16>
 800fda6:	4621      	mov	r1, r4
 800fda8:	f7fd fc2f 	bl	800d60a <memset>
 800fdac:	e7f4      	b.n	800fd98 <_calloc_r+0x16>
	...

0800fdb0 <_free_r>:
 800fdb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdb2:	2900      	cmp	r1, #0
 800fdb4:	d044      	beq.n	800fe40 <_free_r+0x90>
 800fdb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdba:	9001      	str	r0, [sp, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f1a1 0404 	sub.w	r4, r1, #4
 800fdc2:	bfb8      	it	lt
 800fdc4:	18e4      	addlt	r4, r4, r3
 800fdc6:	f7ff fb0f 	bl	800f3e8 <__malloc_lock>
 800fdca:	4a1e      	ldr	r2, [pc, #120]	; (800fe44 <_free_r+0x94>)
 800fdcc:	9801      	ldr	r0, [sp, #4]
 800fdce:	6813      	ldr	r3, [r2, #0]
 800fdd0:	b933      	cbnz	r3, 800fde0 <_free_r+0x30>
 800fdd2:	6063      	str	r3, [r4, #4]
 800fdd4:	6014      	str	r4, [r2, #0]
 800fdd6:	b003      	add	sp, #12
 800fdd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fddc:	f7ff bb0a 	b.w	800f3f4 <__malloc_unlock>
 800fde0:	42a3      	cmp	r3, r4
 800fde2:	d908      	bls.n	800fdf6 <_free_r+0x46>
 800fde4:	6825      	ldr	r5, [r4, #0]
 800fde6:	1961      	adds	r1, r4, r5
 800fde8:	428b      	cmp	r3, r1
 800fdea:	bf01      	itttt	eq
 800fdec:	6819      	ldreq	r1, [r3, #0]
 800fdee:	685b      	ldreq	r3, [r3, #4]
 800fdf0:	1949      	addeq	r1, r1, r5
 800fdf2:	6021      	streq	r1, [r4, #0]
 800fdf4:	e7ed      	b.n	800fdd2 <_free_r+0x22>
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	b10b      	cbz	r3, 800fe00 <_free_r+0x50>
 800fdfc:	42a3      	cmp	r3, r4
 800fdfe:	d9fa      	bls.n	800fdf6 <_free_r+0x46>
 800fe00:	6811      	ldr	r1, [r2, #0]
 800fe02:	1855      	adds	r5, r2, r1
 800fe04:	42a5      	cmp	r5, r4
 800fe06:	d10b      	bne.n	800fe20 <_free_r+0x70>
 800fe08:	6824      	ldr	r4, [r4, #0]
 800fe0a:	4421      	add	r1, r4
 800fe0c:	1854      	adds	r4, r2, r1
 800fe0e:	42a3      	cmp	r3, r4
 800fe10:	6011      	str	r1, [r2, #0]
 800fe12:	d1e0      	bne.n	800fdd6 <_free_r+0x26>
 800fe14:	681c      	ldr	r4, [r3, #0]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	6053      	str	r3, [r2, #4]
 800fe1a:	4421      	add	r1, r4
 800fe1c:	6011      	str	r1, [r2, #0]
 800fe1e:	e7da      	b.n	800fdd6 <_free_r+0x26>
 800fe20:	d902      	bls.n	800fe28 <_free_r+0x78>
 800fe22:	230c      	movs	r3, #12
 800fe24:	6003      	str	r3, [r0, #0]
 800fe26:	e7d6      	b.n	800fdd6 <_free_r+0x26>
 800fe28:	6825      	ldr	r5, [r4, #0]
 800fe2a:	1961      	adds	r1, r4, r5
 800fe2c:	428b      	cmp	r3, r1
 800fe2e:	bf04      	itt	eq
 800fe30:	6819      	ldreq	r1, [r3, #0]
 800fe32:	685b      	ldreq	r3, [r3, #4]
 800fe34:	6063      	str	r3, [r4, #4]
 800fe36:	bf04      	itt	eq
 800fe38:	1949      	addeq	r1, r1, r5
 800fe3a:	6021      	streq	r1, [r4, #0]
 800fe3c:	6054      	str	r4, [r2, #4]
 800fe3e:	e7ca      	b.n	800fdd6 <_free_r+0x26>
 800fe40:	b003      	add	sp, #12
 800fe42:	bd30      	pop	{r4, r5, pc}
 800fe44:	20006f10 	.word	0x20006f10

0800fe48 <__ssputs_r>:
 800fe48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe4c:	688e      	ldr	r6, [r1, #8]
 800fe4e:	429e      	cmp	r6, r3
 800fe50:	4682      	mov	sl, r0
 800fe52:	460c      	mov	r4, r1
 800fe54:	4690      	mov	r8, r2
 800fe56:	461f      	mov	r7, r3
 800fe58:	d838      	bhi.n	800fecc <__ssputs_r+0x84>
 800fe5a:	898a      	ldrh	r2, [r1, #12]
 800fe5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe60:	d032      	beq.n	800fec8 <__ssputs_r+0x80>
 800fe62:	6825      	ldr	r5, [r4, #0]
 800fe64:	6909      	ldr	r1, [r1, #16]
 800fe66:	eba5 0901 	sub.w	r9, r5, r1
 800fe6a:	6965      	ldr	r5, [r4, #20]
 800fe6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe74:	3301      	adds	r3, #1
 800fe76:	444b      	add	r3, r9
 800fe78:	106d      	asrs	r5, r5, #1
 800fe7a:	429d      	cmp	r5, r3
 800fe7c:	bf38      	it	cc
 800fe7e:	461d      	movcc	r5, r3
 800fe80:	0553      	lsls	r3, r2, #21
 800fe82:	d531      	bpl.n	800fee8 <__ssputs_r+0xa0>
 800fe84:	4629      	mov	r1, r5
 800fe86:	f7fd fbe9 	bl	800d65c <_malloc_r>
 800fe8a:	4606      	mov	r6, r0
 800fe8c:	b950      	cbnz	r0, 800fea4 <__ssputs_r+0x5c>
 800fe8e:	230c      	movs	r3, #12
 800fe90:	f8ca 3000 	str.w	r3, [sl]
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe9a:	81a3      	strh	r3, [r4, #12]
 800fe9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fea4:	6921      	ldr	r1, [r4, #16]
 800fea6:	464a      	mov	r2, r9
 800fea8:	f7fd fba1 	bl	800d5ee <memcpy>
 800feac:	89a3      	ldrh	r3, [r4, #12]
 800feae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800feb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feb6:	81a3      	strh	r3, [r4, #12]
 800feb8:	6126      	str	r6, [r4, #16]
 800feba:	6165      	str	r5, [r4, #20]
 800febc:	444e      	add	r6, r9
 800febe:	eba5 0509 	sub.w	r5, r5, r9
 800fec2:	6026      	str	r6, [r4, #0]
 800fec4:	60a5      	str	r5, [r4, #8]
 800fec6:	463e      	mov	r6, r7
 800fec8:	42be      	cmp	r6, r7
 800feca:	d900      	bls.n	800fece <__ssputs_r+0x86>
 800fecc:	463e      	mov	r6, r7
 800fece:	6820      	ldr	r0, [r4, #0]
 800fed0:	4632      	mov	r2, r6
 800fed2:	4641      	mov	r1, r8
 800fed4:	f000 ff28 	bl	8010d28 <memmove>
 800fed8:	68a3      	ldr	r3, [r4, #8]
 800feda:	1b9b      	subs	r3, r3, r6
 800fedc:	60a3      	str	r3, [r4, #8]
 800fede:	6823      	ldr	r3, [r4, #0]
 800fee0:	4433      	add	r3, r6
 800fee2:	6023      	str	r3, [r4, #0]
 800fee4:	2000      	movs	r0, #0
 800fee6:	e7db      	b.n	800fea0 <__ssputs_r+0x58>
 800fee8:	462a      	mov	r2, r5
 800feea:	f000 ff37 	bl	8010d5c <_realloc_r>
 800feee:	4606      	mov	r6, r0
 800fef0:	2800      	cmp	r0, #0
 800fef2:	d1e1      	bne.n	800feb8 <__ssputs_r+0x70>
 800fef4:	6921      	ldr	r1, [r4, #16]
 800fef6:	4650      	mov	r0, sl
 800fef8:	f7ff ff5a 	bl	800fdb0 <_free_r>
 800fefc:	e7c7      	b.n	800fe8e <__ssputs_r+0x46>
	...

0800ff00 <_svfiprintf_r>:
 800ff00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff04:	4698      	mov	r8, r3
 800ff06:	898b      	ldrh	r3, [r1, #12]
 800ff08:	061b      	lsls	r3, r3, #24
 800ff0a:	b09d      	sub	sp, #116	; 0x74
 800ff0c:	4607      	mov	r7, r0
 800ff0e:	460d      	mov	r5, r1
 800ff10:	4614      	mov	r4, r2
 800ff12:	d50e      	bpl.n	800ff32 <_svfiprintf_r+0x32>
 800ff14:	690b      	ldr	r3, [r1, #16]
 800ff16:	b963      	cbnz	r3, 800ff32 <_svfiprintf_r+0x32>
 800ff18:	2140      	movs	r1, #64	; 0x40
 800ff1a:	f7fd fb9f 	bl	800d65c <_malloc_r>
 800ff1e:	6028      	str	r0, [r5, #0]
 800ff20:	6128      	str	r0, [r5, #16]
 800ff22:	b920      	cbnz	r0, 800ff2e <_svfiprintf_r+0x2e>
 800ff24:	230c      	movs	r3, #12
 800ff26:	603b      	str	r3, [r7, #0]
 800ff28:	f04f 30ff 	mov.w	r0, #4294967295
 800ff2c:	e0d1      	b.n	80100d2 <_svfiprintf_r+0x1d2>
 800ff2e:	2340      	movs	r3, #64	; 0x40
 800ff30:	616b      	str	r3, [r5, #20]
 800ff32:	2300      	movs	r3, #0
 800ff34:	9309      	str	r3, [sp, #36]	; 0x24
 800ff36:	2320      	movs	r3, #32
 800ff38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff40:	2330      	movs	r3, #48	; 0x30
 800ff42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80100ec <_svfiprintf_r+0x1ec>
 800ff46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff4a:	f04f 0901 	mov.w	r9, #1
 800ff4e:	4623      	mov	r3, r4
 800ff50:	469a      	mov	sl, r3
 800ff52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff56:	b10a      	cbz	r2, 800ff5c <_svfiprintf_r+0x5c>
 800ff58:	2a25      	cmp	r2, #37	; 0x25
 800ff5a:	d1f9      	bne.n	800ff50 <_svfiprintf_r+0x50>
 800ff5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ff60:	d00b      	beq.n	800ff7a <_svfiprintf_r+0x7a>
 800ff62:	465b      	mov	r3, fp
 800ff64:	4622      	mov	r2, r4
 800ff66:	4629      	mov	r1, r5
 800ff68:	4638      	mov	r0, r7
 800ff6a:	f7ff ff6d 	bl	800fe48 <__ssputs_r>
 800ff6e:	3001      	adds	r0, #1
 800ff70:	f000 80aa 	beq.w	80100c8 <_svfiprintf_r+0x1c8>
 800ff74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff76:	445a      	add	r2, fp
 800ff78:	9209      	str	r2, [sp, #36]	; 0x24
 800ff7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	f000 80a2 	beq.w	80100c8 <_svfiprintf_r+0x1c8>
 800ff84:	2300      	movs	r3, #0
 800ff86:	f04f 32ff 	mov.w	r2, #4294967295
 800ff8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff8e:	f10a 0a01 	add.w	sl, sl, #1
 800ff92:	9304      	str	r3, [sp, #16]
 800ff94:	9307      	str	r3, [sp, #28]
 800ff96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ff9c:	4654      	mov	r4, sl
 800ff9e:	2205      	movs	r2, #5
 800ffa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffa4:	4851      	ldr	r0, [pc, #324]	; (80100ec <_svfiprintf_r+0x1ec>)
 800ffa6:	f7f0 f93b 	bl	8000220 <memchr>
 800ffaa:	9a04      	ldr	r2, [sp, #16]
 800ffac:	b9d8      	cbnz	r0, 800ffe6 <_svfiprintf_r+0xe6>
 800ffae:	06d0      	lsls	r0, r2, #27
 800ffb0:	bf44      	itt	mi
 800ffb2:	2320      	movmi	r3, #32
 800ffb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffb8:	0711      	lsls	r1, r2, #28
 800ffba:	bf44      	itt	mi
 800ffbc:	232b      	movmi	r3, #43	; 0x2b
 800ffbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffc2:	f89a 3000 	ldrb.w	r3, [sl]
 800ffc6:	2b2a      	cmp	r3, #42	; 0x2a
 800ffc8:	d015      	beq.n	800fff6 <_svfiprintf_r+0xf6>
 800ffca:	9a07      	ldr	r2, [sp, #28]
 800ffcc:	4654      	mov	r4, sl
 800ffce:	2000      	movs	r0, #0
 800ffd0:	f04f 0c0a 	mov.w	ip, #10
 800ffd4:	4621      	mov	r1, r4
 800ffd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffda:	3b30      	subs	r3, #48	; 0x30
 800ffdc:	2b09      	cmp	r3, #9
 800ffde:	d94e      	bls.n	801007e <_svfiprintf_r+0x17e>
 800ffe0:	b1b0      	cbz	r0, 8010010 <_svfiprintf_r+0x110>
 800ffe2:	9207      	str	r2, [sp, #28]
 800ffe4:	e014      	b.n	8010010 <_svfiprintf_r+0x110>
 800ffe6:	eba0 0308 	sub.w	r3, r0, r8
 800ffea:	fa09 f303 	lsl.w	r3, r9, r3
 800ffee:	4313      	orrs	r3, r2
 800fff0:	9304      	str	r3, [sp, #16]
 800fff2:	46a2      	mov	sl, r4
 800fff4:	e7d2      	b.n	800ff9c <_svfiprintf_r+0x9c>
 800fff6:	9b03      	ldr	r3, [sp, #12]
 800fff8:	1d19      	adds	r1, r3, #4
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	9103      	str	r1, [sp, #12]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	bfbb      	ittet	lt
 8010002:	425b      	neglt	r3, r3
 8010004:	f042 0202 	orrlt.w	r2, r2, #2
 8010008:	9307      	strge	r3, [sp, #28]
 801000a:	9307      	strlt	r3, [sp, #28]
 801000c:	bfb8      	it	lt
 801000e:	9204      	strlt	r2, [sp, #16]
 8010010:	7823      	ldrb	r3, [r4, #0]
 8010012:	2b2e      	cmp	r3, #46	; 0x2e
 8010014:	d10c      	bne.n	8010030 <_svfiprintf_r+0x130>
 8010016:	7863      	ldrb	r3, [r4, #1]
 8010018:	2b2a      	cmp	r3, #42	; 0x2a
 801001a:	d135      	bne.n	8010088 <_svfiprintf_r+0x188>
 801001c:	9b03      	ldr	r3, [sp, #12]
 801001e:	1d1a      	adds	r2, r3, #4
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	9203      	str	r2, [sp, #12]
 8010024:	2b00      	cmp	r3, #0
 8010026:	bfb8      	it	lt
 8010028:	f04f 33ff 	movlt.w	r3, #4294967295
 801002c:	3402      	adds	r4, #2
 801002e:	9305      	str	r3, [sp, #20]
 8010030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80100fc <_svfiprintf_r+0x1fc>
 8010034:	7821      	ldrb	r1, [r4, #0]
 8010036:	2203      	movs	r2, #3
 8010038:	4650      	mov	r0, sl
 801003a:	f7f0 f8f1 	bl	8000220 <memchr>
 801003e:	b140      	cbz	r0, 8010052 <_svfiprintf_r+0x152>
 8010040:	2340      	movs	r3, #64	; 0x40
 8010042:	eba0 000a 	sub.w	r0, r0, sl
 8010046:	fa03 f000 	lsl.w	r0, r3, r0
 801004a:	9b04      	ldr	r3, [sp, #16]
 801004c:	4303      	orrs	r3, r0
 801004e:	3401      	adds	r4, #1
 8010050:	9304      	str	r3, [sp, #16]
 8010052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010056:	4826      	ldr	r0, [pc, #152]	; (80100f0 <_svfiprintf_r+0x1f0>)
 8010058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801005c:	2206      	movs	r2, #6
 801005e:	f7f0 f8df 	bl	8000220 <memchr>
 8010062:	2800      	cmp	r0, #0
 8010064:	d038      	beq.n	80100d8 <_svfiprintf_r+0x1d8>
 8010066:	4b23      	ldr	r3, [pc, #140]	; (80100f4 <_svfiprintf_r+0x1f4>)
 8010068:	bb1b      	cbnz	r3, 80100b2 <_svfiprintf_r+0x1b2>
 801006a:	9b03      	ldr	r3, [sp, #12]
 801006c:	3307      	adds	r3, #7
 801006e:	f023 0307 	bic.w	r3, r3, #7
 8010072:	3308      	adds	r3, #8
 8010074:	9303      	str	r3, [sp, #12]
 8010076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010078:	4433      	add	r3, r6
 801007a:	9309      	str	r3, [sp, #36]	; 0x24
 801007c:	e767      	b.n	800ff4e <_svfiprintf_r+0x4e>
 801007e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010082:	460c      	mov	r4, r1
 8010084:	2001      	movs	r0, #1
 8010086:	e7a5      	b.n	800ffd4 <_svfiprintf_r+0xd4>
 8010088:	2300      	movs	r3, #0
 801008a:	3401      	adds	r4, #1
 801008c:	9305      	str	r3, [sp, #20]
 801008e:	4619      	mov	r1, r3
 8010090:	f04f 0c0a 	mov.w	ip, #10
 8010094:	4620      	mov	r0, r4
 8010096:	f810 2b01 	ldrb.w	r2, [r0], #1
 801009a:	3a30      	subs	r2, #48	; 0x30
 801009c:	2a09      	cmp	r2, #9
 801009e:	d903      	bls.n	80100a8 <_svfiprintf_r+0x1a8>
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d0c5      	beq.n	8010030 <_svfiprintf_r+0x130>
 80100a4:	9105      	str	r1, [sp, #20]
 80100a6:	e7c3      	b.n	8010030 <_svfiprintf_r+0x130>
 80100a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80100ac:	4604      	mov	r4, r0
 80100ae:	2301      	movs	r3, #1
 80100b0:	e7f0      	b.n	8010094 <_svfiprintf_r+0x194>
 80100b2:	ab03      	add	r3, sp, #12
 80100b4:	9300      	str	r3, [sp, #0]
 80100b6:	462a      	mov	r2, r5
 80100b8:	4b0f      	ldr	r3, [pc, #60]	; (80100f8 <_svfiprintf_r+0x1f8>)
 80100ba:	a904      	add	r1, sp, #16
 80100bc:	4638      	mov	r0, r7
 80100be:	f3af 8000 	nop.w
 80100c2:	1c42      	adds	r2, r0, #1
 80100c4:	4606      	mov	r6, r0
 80100c6:	d1d6      	bne.n	8010076 <_svfiprintf_r+0x176>
 80100c8:	89ab      	ldrh	r3, [r5, #12]
 80100ca:	065b      	lsls	r3, r3, #25
 80100cc:	f53f af2c 	bmi.w	800ff28 <_svfiprintf_r+0x28>
 80100d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100d2:	b01d      	add	sp, #116	; 0x74
 80100d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d8:	ab03      	add	r3, sp, #12
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	462a      	mov	r2, r5
 80100de:	4b06      	ldr	r3, [pc, #24]	; (80100f8 <_svfiprintf_r+0x1f8>)
 80100e0:	a904      	add	r1, sp, #16
 80100e2:	4638      	mov	r0, r7
 80100e4:	f000 fa4c 	bl	8010580 <_printf_i>
 80100e8:	e7eb      	b.n	80100c2 <_svfiprintf_r+0x1c2>
 80100ea:	bf00      	nop
 80100ec:	08011a5c 	.word	0x08011a5c
 80100f0:	08011a66 	.word	0x08011a66
 80100f4:	00000000 	.word	0x00000000
 80100f8:	0800fe49 	.word	0x0800fe49
 80100fc:	08011a62 	.word	0x08011a62

08010100 <_sungetc_r>:
 8010100:	b538      	push	{r3, r4, r5, lr}
 8010102:	1c4b      	adds	r3, r1, #1
 8010104:	4614      	mov	r4, r2
 8010106:	d103      	bne.n	8010110 <_sungetc_r+0x10>
 8010108:	f04f 35ff 	mov.w	r5, #4294967295
 801010c:	4628      	mov	r0, r5
 801010e:	bd38      	pop	{r3, r4, r5, pc}
 8010110:	8993      	ldrh	r3, [r2, #12]
 8010112:	f023 0320 	bic.w	r3, r3, #32
 8010116:	8193      	strh	r3, [r2, #12]
 8010118:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801011a:	6852      	ldr	r2, [r2, #4]
 801011c:	b2cd      	uxtb	r5, r1
 801011e:	b18b      	cbz	r3, 8010144 <_sungetc_r+0x44>
 8010120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010122:	4293      	cmp	r3, r2
 8010124:	dd08      	ble.n	8010138 <_sungetc_r+0x38>
 8010126:	6823      	ldr	r3, [r4, #0]
 8010128:	1e5a      	subs	r2, r3, #1
 801012a:	6022      	str	r2, [r4, #0]
 801012c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010130:	6863      	ldr	r3, [r4, #4]
 8010132:	3301      	adds	r3, #1
 8010134:	6063      	str	r3, [r4, #4]
 8010136:	e7e9      	b.n	801010c <_sungetc_r+0xc>
 8010138:	4621      	mov	r1, r4
 801013a:	f000 fd75 	bl	8010c28 <__submore>
 801013e:	2800      	cmp	r0, #0
 8010140:	d0f1      	beq.n	8010126 <_sungetc_r+0x26>
 8010142:	e7e1      	b.n	8010108 <_sungetc_r+0x8>
 8010144:	6921      	ldr	r1, [r4, #16]
 8010146:	6823      	ldr	r3, [r4, #0]
 8010148:	b151      	cbz	r1, 8010160 <_sungetc_r+0x60>
 801014a:	4299      	cmp	r1, r3
 801014c:	d208      	bcs.n	8010160 <_sungetc_r+0x60>
 801014e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010152:	42a9      	cmp	r1, r5
 8010154:	d104      	bne.n	8010160 <_sungetc_r+0x60>
 8010156:	3b01      	subs	r3, #1
 8010158:	3201      	adds	r2, #1
 801015a:	6023      	str	r3, [r4, #0]
 801015c:	6062      	str	r2, [r4, #4]
 801015e:	e7d5      	b.n	801010c <_sungetc_r+0xc>
 8010160:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010168:	6363      	str	r3, [r4, #52]	; 0x34
 801016a:	2303      	movs	r3, #3
 801016c:	63a3      	str	r3, [r4, #56]	; 0x38
 801016e:	4623      	mov	r3, r4
 8010170:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010174:	6023      	str	r3, [r4, #0]
 8010176:	2301      	movs	r3, #1
 8010178:	e7dc      	b.n	8010134 <_sungetc_r+0x34>

0801017a <__ssrefill_r>:
 801017a:	b510      	push	{r4, lr}
 801017c:	460c      	mov	r4, r1
 801017e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010180:	b169      	cbz	r1, 801019e <__ssrefill_r+0x24>
 8010182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010186:	4299      	cmp	r1, r3
 8010188:	d001      	beq.n	801018e <__ssrefill_r+0x14>
 801018a:	f7ff fe11 	bl	800fdb0 <_free_r>
 801018e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010190:	6063      	str	r3, [r4, #4]
 8010192:	2000      	movs	r0, #0
 8010194:	6360      	str	r0, [r4, #52]	; 0x34
 8010196:	b113      	cbz	r3, 801019e <__ssrefill_r+0x24>
 8010198:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801019a:	6023      	str	r3, [r4, #0]
 801019c:	bd10      	pop	{r4, pc}
 801019e:	6923      	ldr	r3, [r4, #16]
 80101a0:	6023      	str	r3, [r4, #0]
 80101a2:	2300      	movs	r3, #0
 80101a4:	6063      	str	r3, [r4, #4]
 80101a6:	89a3      	ldrh	r3, [r4, #12]
 80101a8:	f043 0320 	orr.w	r3, r3, #32
 80101ac:	81a3      	strh	r3, [r4, #12]
 80101ae:	f04f 30ff 	mov.w	r0, #4294967295
 80101b2:	e7f3      	b.n	801019c <__ssrefill_r+0x22>

080101b4 <__ssvfiscanf_r>:
 80101b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b8:	460c      	mov	r4, r1
 80101ba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80101be:	2100      	movs	r1, #0
 80101c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80101c4:	49a6      	ldr	r1, [pc, #664]	; (8010460 <__ssvfiscanf_r+0x2ac>)
 80101c6:	91a0      	str	r1, [sp, #640]	; 0x280
 80101c8:	f10d 0804 	add.w	r8, sp, #4
 80101cc:	49a5      	ldr	r1, [pc, #660]	; (8010464 <__ssvfiscanf_r+0x2b0>)
 80101ce:	4fa6      	ldr	r7, [pc, #664]	; (8010468 <__ssvfiscanf_r+0x2b4>)
 80101d0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801046c <__ssvfiscanf_r+0x2b8>
 80101d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80101d8:	4606      	mov	r6, r0
 80101da:	91a1      	str	r1, [sp, #644]	; 0x284
 80101dc:	9300      	str	r3, [sp, #0]
 80101de:	7813      	ldrb	r3, [r2, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	f000 815a 	beq.w	801049a <__ssvfiscanf_r+0x2e6>
 80101e6:	5dd9      	ldrb	r1, [r3, r7]
 80101e8:	f011 0108 	ands.w	r1, r1, #8
 80101ec:	f102 0501 	add.w	r5, r2, #1
 80101f0:	d019      	beq.n	8010226 <__ssvfiscanf_r+0x72>
 80101f2:	6863      	ldr	r3, [r4, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	dd0f      	ble.n	8010218 <__ssvfiscanf_r+0x64>
 80101f8:	6823      	ldr	r3, [r4, #0]
 80101fa:	781a      	ldrb	r2, [r3, #0]
 80101fc:	5cba      	ldrb	r2, [r7, r2]
 80101fe:	0712      	lsls	r2, r2, #28
 8010200:	d401      	bmi.n	8010206 <__ssvfiscanf_r+0x52>
 8010202:	462a      	mov	r2, r5
 8010204:	e7eb      	b.n	80101de <__ssvfiscanf_r+0x2a>
 8010206:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010208:	3201      	adds	r2, #1
 801020a:	9245      	str	r2, [sp, #276]	; 0x114
 801020c:	6862      	ldr	r2, [r4, #4]
 801020e:	3301      	adds	r3, #1
 8010210:	3a01      	subs	r2, #1
 8010212:	6062      	str	r2, [r4, #4]
 8010214:	6023      	str	r3, [r4, #0]
 8010216:	e7ec      	b.n	80101f2 <__ssvfiscanf_r+0x3e>
 8010218:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801021a:	4621      	mov	r1, r4
 801021c:	4630      	mov	r0, r6
 801021e:	4798      	blx	r3
 8010220:	2800      	cmp	r0, #0
 8010222:	d0e9      	beq.n	80101f8 <__ssvfiscanf_r+0x44>
 8010224:	e7ed      	b.n	8010202 <__ssvfiscanf_r+0x4e>
 8010226:	2b25      	cmp	r3, #37	; 0x25
 8010228:	d012      	beq.n	8010250 <__ssvfiscanf_r+0x9c>
 801022a:	469a      	mov	sl, r3
 801022c:	6863      	ldr	r3, [r4, #4]
 801022e:	2b00      	cmp	r3, #0
 8010230:	f340 8091 	ble.w	8010356 <__ssvfiscanf_r+0x1a2>
 8010234:	6822      	ldr	r2, [r4, #0]
 8010236:	7813      	ldrb	r3, [r2, #0]
 8010238:	4553      	cmp	r3, sl
 801023a:	f040 812e 	bne.w	801049a <__ssvfiscanf_r+0x2e6>
 801023e:	6863      	ldr	r3, [r4, #4]
 8010240:	3b01      	subs	r3, #1
 8010242:	6063      	str	r3, [r4, #4]
 8010244:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010246:	3201      	adds	r2, #1
 8010248:	3301      	adds	r3, #1
 801024a:	6022      	str	r2, [r4, #0]
 801024c:	9345      	str	r3, [sp, #276]	; 0x114
 801024e:	e7d8      	b.n	8010202 <__ssvfiscanf_r+0x4e>
 8010250:	9141      	str	r1, [sp, #260]	; 0x104
 8010252:	9143      	str	r1, [sp, #268]	; 0x10c
 8010254:	7853      	ldrb	r3, [r2, #1]
 8010256:	2b2a      	cmp	r3, #42	; 0x2a
 8010258:	bf02      	ittt	eq
 801025a:	2310      	moveq	r3, #16
 801025c:	1c95      	addeq	r5, r2, #2
 801025e:	9341      	streq	r3, [sp, #260]	; 0x104
 8010260:	220a      	movs	r2, #10
 8010262:	46aa      	mov	sl, r5
 8010264:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010268:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801026c:	2b09      	cmp	r3, #9
 801026e:	d91d      	bls.n	80102ac <__ssvfiscanf_r+0xf8>
 8010270:	487e      	ldr	r0, [pc, #504]	; (801046c <__ssvfiscanf_r+0x2b8>)
 8010272:	2203      	movs	r2, #3
 8010274:	f7ef ffd4 	bl	8000220 <memchr>
 8010278:	b140      	cbz	r0, 801028c <__ssvfiscanf_r+0xd8>
 801027a:	2301      	movs	r3, #1
 801027c:	eba0 0009 	sub.w	r0, r0, r9
 8010280:	fa03 f000 	lsl.w	r0, r3, r0
 8010284:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010286:	4318      	orrs	r0, r3
 8010288:	9041      	str	r0, [sp, #260]	; 0x104
 801028a:	4655      	mov	r5, sl
 801028c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010290:	2b78      	cmp	r3, #120	; 0x78
 8010292:	d806      	bhi.n	80102a2 <__ssvfiscanf_r+0xee>
 8010294:	2b57      	cmp	r3, #87	; 0x57
 8010296:	d810      	bhi.n	80102ba <__ssvfiscanf_r+0x106>
 8010298:	2b25      	cmp	r3, #37	; 0x25
 801029a:	d0c6      	beq.n	801022a <__ssvfiscanf_r+0x76>
 801029c:	d856      	bhi.n	801034c <__ssvfiscanf_r+0x198>
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d064      	beq.n	801036c <__ssvfiscanf_r+0x1b8>
 80102a2:	2303      	movs	r3, #3
 80102a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80102a6:	230a      	movs	r3, #10
 80102a8:	9342      	str	r3, [sp, #264]	; 0x108
 80102aa:	e071      	b.n	8010390 <__ssvfiscanf_r+0x1dc>
 80102ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80102ae:	fb02 1103 	mla	r1, r2, r3, r1
 80102b2:	3930      	subs	r1, #48	; 0x30
 80102b4:	9143      	str	r1, [sp, #268]	; 0x10c
 80102b6:	4655      	mov	r5, sl
 80102b8:	e7d3      	b.n	8010262 <__ssvfiscanf_r+0xae>
 80102ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80102be:	2a20      	cmp	r2, #32
 80102c0:	d8ef      	bhi.n	80102a2 <__ssvfiscanf_r+0xee>
 80102c2:	a101      	add	r1, pc, #4	; (adr r1, 80102c8 <__ssvfiscanf_r+0x114>)
 80102c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80102c8:	0801037b 	.word	0x0801037b
 80102cc:	080102a3 	.word	0x080102a3
 80102d0:	080102a3 	.word	0x080102a3
 80102d4:	080103d9 	.word	0x080103d9
 80102d8:	080102a3 	.word	0x080102a3
 80102dc:	080102a3 	.word	0x080102a3
 80102e0:	080102a3 	.word	0x080102a3
 80102e4:	080102a3 	.word	0x080102a3
 80102e8:	080102a3 	.word	0x080102a3
 80102ec:	080102a3 	.word	0x080102a3
 80102f0:	080102a3 	.word	0x080102a3
 80102f4:	080103ef 	.word	0x080103ef
 80102f8:	080103c5 	.word	0x080103c5
 80102fc:	08010353 	.word	0x08010353
 8010300:	08010353 	.word	0x08010353
 8010304:	08010353 	.word	0x08010353
 8010308:	080102a3 	.word	0x080102a3
 801030c:	080103c9 	.word	0x080103c9
 8010310:	080102a3 	.word	0x080102a3
 8010314:	080102a3 	.word	0x080102a3
 8010318:	080102a3 	.word	0x080102a3
 801031c:	080102a3 	.word	0x080102a3
 8010320:	080103ff 	.word	0x080103ff
 8010324:	080103d1 	.word	0x080103d1
 8010328:	08010373 	.word	0x08010373
 801032c:	080102a3 	.word	0x080102a3
 8010330:	080102a3 	.word	0x080102a3
 8010334:	080103fb 	.word	0x080103fb
 8010338:	080102a3 	.word	0x080102a3
 801033c:	080103c5 	.word	0x080103c5
 8010340:	080102a3 	.word	0x080102a3
 8010344:	080102a3 	.word	0x080102a3
 8010348:	0801037b 	.word	0x0801037b
 801034c:	3b45      	subs	r3, #69	; 0x45
 801034e:	2b02      	cmp	r3, #2
 8010350:	d8a7      	bhi.n	80102a2 <__ssvfiscanf_r+0xee>
 8010352:	2305      	movs	r3, #5
 8010354:	e01b      	b.n	801038e <__ssvfiscanf_r+0x1da>
 8010356:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010358:	4621      	mov	r1, r4
 801035a:	4630      	mov	r0, r6
 801035c:	4798      	blx	r3
 801035e:	2800      	cmp	r0, #0
 8010360:	f43f af68 	beq.w	8010234 <__ssvfiscanf_r+0x80>
 8010364:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010366:	2800      	cmp	r0, #0
 8010368:	f040 808d 	bne.w	8010486 <__ssvfiscanf_r+0x2d2>
 801036c:	f04f 30ff 	mov.w	r0, #4294967295
 8010370:	e08f      	b.n	8010492 <__ssvfiscanf_r+0x2de>
 8010372:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010374:	f042 0220 	orr.w	r2, r2, #32
 8010378:	9241      	str	r2, [sp, #260]	; 0x104
 801037a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801037c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010380:	9241      	str	r2, [sp, #260]	; 0x104
 8010382:	2210      	movs	r2, #16
 8010384:	2b6f      	cmp	r3, #111	; 0x6f
 8010386:	9242      	str	r2, [sp, #264]	; 0x108
 8010388:	bf34      	ite	cc
 801038a:	2303      	movcc	r3, #3
 801038c:	2304      	movcs	r3, #4
 801038e:	9347      	str	r3, [sp, #284]	; 0x11c
 8010390:	6863      	ldr	r3, [r4, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	dd42      	ble.n	801041c <__ssvfiscanf_r+0x268>
 8010396:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010398:	0659      	lsls	r1, r3, #25
 801039a:	d404      	bmi.n	80103a6 <__ssvfiscanf_r+0x1f2>
 801039c:	6823      	ldr	r3, [r4, #0]
 801039e:	781a      	ldrb	r2, [r3, #0]
 80103a0:	5cba      	ldrb	r2, [r7, r2]
 80103a2:	0712      	lsls	r2, r2, #28
 80103a4:	d441      	bmi.n	801042a <__ssvfiscanf_r+0x276>
 80103a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80103a8:	2b02      	cmp	r3, #2
 80103aa:	dc50      	bgt.n	801044e <__ssvfiscanf_r+0x29a>
 80103ac:	466b      	mov	r3, sp
 80103ae:	4622      	mov	r2, r4
 80103b0:	a941      	add	r1, sp, #260	; 0x104
 80103b2:	4630      	mov	r0, r6
 80103b4:	f000 fa0a 	bl	80107cc <_scanf_chars>
 80103b8:	2801      	cmp	r0, #1
 80103ba:	d06e      	beq.n	801049a <__ssvfiscanf_r+0x2e6>
 80103bc:	2802      	cmp	r0, #2
 80103be:	f47f af20 	bne.w	8010202 <__ssvfiscanf_r+0x4e>
 80103c2:	e7cf      	b.n	8010364 <__ssvfiscanf_r+0x1b0>
 80103c4:	220a      	movs	r2, #10
 80103c6:	e7dd      	b.n	8010384 <__ssvfiscanf_r+0x1d0>
 80103c8:	2300      	movs	r3, #0
 80103ca:	9342      	str	r3, [sp, #264]	; 0x108
 80103cc:	2303      	movs	r3, #3
 80103ce:	e7de      	b.n	801038e <__ssvfiscanf_r+0x1da>
 80103d0:	2308      	movs	r3, #8
 80103d2:	9342      	str	r3, [sp, #264]	; 0x108
 80103d4:	2304      	movs	r3, #4
 80103d6:	e7da      	b.n	801038e <__ssvfiscanf_r+0x1da>
 80103d8:	4629      	mov	r1, r5
 80103da:	4640      	mov	r0, r8
 80103dc:	f000 fb64 	bl	8010aa8 <__sccl>
 80103e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80103e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103e6:	9341      	str	r3, [sp, #260]	; 0x104
 80103e8:	4605      	mov	r5, r0
 80103ea:	2301      	movs	r3, #1
 80103ec:	e7cf      	b.n	801038e <__ssvfiscanf_r+0x1da>
 80103ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80103f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103f4:	9341      	str	r3, [sp, #260]	; 0x104
 80103f6:	2300      	movs	r3, #0
 80103f8:	e7c9      	b.n	801038e <__ssvfiscanf_r+0x1da>
 80103fa:	2302      	movs	r3, #2
 80103fc:	e7c7      	b.n	801038e <__ssvfiscanf_r+0x1da>
 80103fe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010400:	06c3      	lsls	r3, r0, #27
 8010402:	f53f aefe 	bmi.w	8010202 <__ssvfiscanf_r+0x4e>
 8010406:	9b00      	ldr	r3, [sp, #0]
 8010408:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801040a:	1d19      	adds	r1, r3, #4
 801040c:	9100      	str	r1, [sp, #0]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f010 0f01 	tst.w	r0, #1
 8010414:	bf14      	ite	ne
 8010416:	801a      	strhne	r2, [r3, #0]
 8010418:	601a      	streq	r2, [r3, #0]
 801041a:	e6f2      	b.n	8010202 <__ssvfiscanf_r+0x4e>
 801041c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801041e:	4621      	mov	r1, r4
 8010420:	4630      	mov	r0, r6
 8010422:	4798      	blx	r3
 8010424:	2800      	cmp	r0, #0
 8010426:	d0b6      	beq.n	8010396 <__ssvfiscanf_r+0x1e2>
 8010428:	e79c      	b.n	8010364 <__ssvfiscanf_r+0x1b0>
 801042a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801042c:	3201      	adds	r2, #1
 801042e:	9245      	str	r2, [sp, #276]	; 0x114
 8010430:	6862      	ldr	r2, [r4, #4]
 8010432:	3a01      	subs	r2, #1
 8010434:	2a00      	cmp	r2, #0
 8010436:	6062      	str	r2, [r4, #4]
 8010438:	dd02      	ble.n	8010440 <__ssvfiscanf_r+0x28c>
 801043a:	3301      	adds	r3, #1
 801043c:	6023      	str	r3, [r4, #0]
 801043e:	e7ad      	b.n	801039c <__ssvfiscanf_r+0x1e8>
 8010440:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010442:	4621      	mov	r1, r4
 8010444:	4630      	mov	r0, r6
 8010446:	4798      	blx	r3
 8010448:	2800      	cmp	r0, #0
 801044a:	d0a7      	beq.n	801039c <__ssvfiscanf_r+0x1e8>
 801044c:	e78a      	b.n	8010364 <__ssvfiscanf_r+0x1b0>
 801044e:	2b04      	cmp	r3, #4
 8010450:	dc0e      	bgt.n	8010470 <__ssvfiscanf_r+0x2bc>
 8010452:	466b      	mov	r3, sp
 8010454:	4622      	mov	r2, r4
 8010456:	a941      	add	r1, sp, #260	; 0x104
 8010458:	4630      	mov	r0, r6
 801045a:	f000 fa11 	bl	8010880 <_scanf_i>
 801045e:	e7ab      	b.n	80103b8 <__ssvfiscanf_r+0x204>
 8010460:	08010101 	.word	0x08010101
 8010464:	0801017b 	.word	0x0801017b
 8010468:	08011761 	.word	0x08011761
 801046c:	08011a62 	.word	0x08011a62
 8010470:	4b0b      	ldr	r3, [pc, #44]	; (80104a0 <__ssvfiscanf_r+0x2ec>)
 8010472:	2b00      	cmp	r3, #0
 8010474:	f43f aec5 	beq.w	8010202 <__ssvfiscanf_r+0x4e>
 8010478:	466b      	mov	r3, sp
 801047a:	4622      	mov	r2, r4
 801047c:	a941      	add	r1, sp, #260	; 0x104
 801047e:	4630      	mov	r0, r6
 8010480:	f7fd f960 	bl	800d744 <_scanf_float>
 8010484:	e798      	b.n	80103b8 <__ssvfiscanf_r+0x204>
 8010486:	89a3      	ldrh	r3, [r4, #12]
 8010488:	f013 0f40 	tst.w	r3, #64	; 0x40
 801048c:	bf18      	it	ne
 801048e:	f04f 30ff 	movne.w	r0, #4294967295
 8010492:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801049a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801049c:	e7f9      	b.n	8010492 <__ssvfiscanf_r+0x2de>
 801049e:	bf00      	nop
 80104a0:	0800d745 	.word	0x0800d745

080104a4 <_printf_common>:
 80104a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104a8:	4616      	mov	r6, r2
 80104aa:	4699      	mov	r9, r3
 80104ac:	688a      	ldr	r2, [r1, #8]
 80104ae:	690b      	ldr	r3, [r1, #16]
 80104b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104b4:	4293      	cmp	r3, r2
 80104b6:	bfb8      	it	lt
 80104b8:	4613      	movlt	r3, r2
 80104ba:	6033      	str	r3, [r6, #0]
 80104bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104c0:	4607      	mov	r7, r0
 80104c2:	460c      	mov	r4, r1
 80104c4:	b10a      	cbz	r2, 80104ca <_printf_common+0x26>
 80104c6:	3301      	adds	r3, #1
 80104c8:	6033      	str	r3, [r6, #0]
 80104ca:	6823      	ldr	r3, [r4, #0]
 80104cc:	0699      	lsls	r1, r3, #26
 80104ce:	bf42      	ittt	mi
 80104d0:	6833      	ldrmi	r3, [r6, #0]
 80104d2:	3302      	addmi	r3, #2
 80104d4:	6033      	strmi	r3, [r6, #0]
 80104d6:	6825      	ldr	r5, [r4, #0]
 80104d8:	f015 0506 	ands.w	r5, r5, #6
 80104dc:	d106      	bne.n	80104ec <_printf_common+0x48>
 80104de:	f104 0a19 	add.w	sl, r4, #25
 80104e2:	68e3      	ldr	r3, [r4, #12]
 80104e4:	6832      	ldr	r2, [r6, #0]
 80104e6:	1a9b      	subs	r3, r3, r2
 80104e8:	42ab      	cmp	r3, r5
 80104ea:	dc26      	bgt.n	801053a <_printf_common+0x96>
 80104ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104f0:	1e13      	subs	r3, r2, #0
 80104f2:	6822      	ldr	r2, [r4, #0]
 80104f4:	bf18      	it	ne
 80104f6:	2301      	movne	r3, #1
 80104f8:	0692      	lsls	r2, r2, #26
 80104fa:	d42b      	bmi.n	8010554 <_printf_common+0xb0>
 80104fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010500:	4649      	mov	r1, r9
 8010502:	4638      	mov	r0, r7
 8010504:	47c0      	blx	r8
 8010506:	3001      	adds	r0, #1
 8010508:	d01e      	beq.n	8010548 <_printf_common+0xa4>
 801050a:	6823      	ldr	r3, [r4, #0]
 801050c:	68e5      	ldr	r5, [r4, #12]
 801050e:	6832      	ldr	r2, [r6, #0]
 8010510:	f003 0306 	and.w	r3, r3, #6
 8010514:	2b04      	cmp	r3, #4
 8010516:	bf08      	it	eq
 8010518:	1aad      	subeq	r5, r5, r2
 801051a:	68a3      	ldr	r3, [r4, #8]
 801051c:	6922      	ldr	r2, [r4, #16]
 801051e:	bf0c      	ite	eq
 8010520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010524:	2500      	movne	r5, #0
 8010526:	4293      	cmp	r3, r2
 8010528:	bfc4      	itt	gt
 801052a:	1a9b      	subgt	r3, r3, r2
 801052c:	18ed      	addgt	r5, r5, r3
 801052e:	2600      	movs	r6, #0
 8010530:	341a      	adds	r4, #26
 8010532:	42b5      	cmp	r5, r6
 8010534:	d11a      	bne.n	801056c <_printf_common+0xc8>
 8010536:	2000      	movs	r0, #0
 8010538:	e008      	b.n	801054c <_printf_common+0xa8>
 801053a:	2301      	movs	r3, #1
 801053c:	4652      	mov	r2, sl
 801053e:	4649      	mov	r1, r9
 8010540:	4638      	mov	r0, r7
 8010542:	47c0      	blx	r8
 8010544:	3001      	adds	r0, #1
 8010546:	d103      	bne.n	8010550 <_printf_common+0xac>
 8010548:	f04f 30ff 	mov.w	r0, #4294967295
 801054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010550:	3501      	adds	r5, #1
 8010552:	e7c6      	b.n	80104e2 <_printf_common+0x3e>
 8010554:	18e1      	adds	r1, r4, r3
 8010556:	1c5a      	adds	r2, r3, #1
 8010558:	2030      	movs	r0, #48	; 0x30
 801055a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801055e:	4422      	add	r2, r4
 8010560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010568:	3302      	adds	r3, #2
 801056a:	e7c7      	b.n	80104fc <_printf_common+0x58>
 801056c:	2301      	movs	r3, #1
 801056e:	4622      	mov	r2, r4
 8010570:	4649      	mov	r1, r9
 8010572:	4638      	mov	r0, r7
 8010574:	47c0      	blx	r8
 8010576:	3001      	adds	r0, #1
 8010578:	d0e6      	beq.n	8010548 <_printf_common+0xa4>
 801057a:	3601      	adds	r6, #1
 801057c:	e7d9      	b.n	8010532 <_printf_common+0x8e>
	...

08010580 <_printf_i>:
 8010580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010584:	7e0f      	ldrb	r7, [r1, #24]
 8010586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010588:	2f78      	cmp	r7, #120	; 0x78
 801058a:	4691      	mov	r9, r2
 801058c:	4680      	mov	r8, r0
 801058e:	460c      	mov	r4, r1
 8010590:	469a      	mov	sl, r3
 8010592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010596:	d807      	bhi.n	80105a8 <_printf_i+0x28>
 8010598:	2f62      	cmp	r7, #98	; 0x62
 801059a:	d80a      	bhi.n	80105b2 <_printf_i+0x32>
 801059c:	2f00      	cmp	r7, #0
 801059e:	f000 80d8 	beq.w	8010752 <_printf_i+0x1d2>
 80105a2:	2f58      	cmp	r7, #88	; 0x58
 80105a4:	f000 80a3 	beq.w	80106ee <_printf_i+0x16e>
 80105a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80105b0:	e03a      	b.n	8010628 <_printf_i+0xa8>
 80105b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80105b6:	2b15      	cmp	r3, #21
 80105b8:	d8f6      	bhi.n	80105a8 <_printf_i+0x28>
 80105ba:	a101      	add	r1, pc, #4	; (adr r1, 80105c0 <_printf_i+0x40>)
 80105bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105c0:	08010619 	.word	0x08010619
 80105c4:	0801062d 	.word	0x0801062d
 80105c8:	080105a9 	.word	0x080105a9
 80105cc:	080105a9 	.word	0x080105a9
 80105d0:	080105a9 	.word	0x080105a9
 80105d4:	080105a9 	.word	0x080105a9
 80105d8:	0801062d 	.word	0x0801062d
 80105dc:	080105a9 	.word	0x080105a9
 80105e0:	080105a9 	.word	0x080105a9
 80105e4:	080105a9 	.word	0x080105a9
 80105e8:	080105a9 	.word	0x080105a9
 80105ec:	08010739 	.word	0x08010739
 80105f0:	0801065d 	.word	0x0801065d
 80105f4:	0801071b 	.word	0x0801071b
 80105f8:	080105a9 	.word	0x080105a9
 80105fc:	080105a9 	.word	0x080105a9
 8010600:	0801075b 	.word	0x0801075b
 8010604:	080105a9 	.word	0x080105a9
 8010608:	0801065d 	.word	0x0801065d
 801060c:	080105a9 	.word	0x080105a9
 8010610:	080105a9 	.word	0x080105a9
 8010614:	08010723 	.word	0x08010723
 8010618:	682b      	ldr	r3, [r5, #0]
 801061a:	1d1a      	adds	r2, r3, #4
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	602a      	str	r2, [r5, #0]
 8010620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010628:	2301      	movs	r3, #1
 801062a:	e0a3      	b.n	8010774 <_printf_i+0x1f4>
 801062c:	6820      	ldr	r0, [r4, #0]
 801062e:	6829      	ldr	r1, [r5, #0]
 8010630:	0606      	lsls	r6, r0, #24
 8010632:	f101 0304 	add.w	r3, r1, #4
 8010636:	d50a      	bpl.n	801064e <_printf_i+0xce>
 8010638:	680e      	ldr	r6, [r1, #0]
 801063a:	602b      	str	r3, [r5, #0]
 801063c:	2e00      	cmp	r6, #0
 801063e:	da03      	bge.n	8010648 <_printf_i+0xc8>
 8010640:	232d      	movs	r3, #45	; 0x2d
 8010642:	4276      	negs	r6, r6
 8010644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010648:	485e      	ldr	r0, [pc, #376]	; (80107c4 <_printf_i+0x244>)
 801064a:	230a      	movs	r3, #10
 801064c:	e019      	b.n	8010682 <_printf_i+0x102>
 801064e:	680e      	ldr	r6, [r1, #0]
 8010650:	602b      	str	r3, [r5, #0]
 8010652:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010656:	bf18      	it	ne
 8010658:	b236      	sxthne	r6, r6
 801065a:	e7ef      	b.n	801063c <_printf_i+0xbc>
 801065c:	682b      	ldr	r3, [r5, #0]
 801065e:	6820      	ldr	r0, [r4, #0]
 8010660:	1d19      	adds	r1, r3, #4
 8010662:	6029      	str	r1, [r5, #0]
 8010664:	0601      	lsls	r1, r0, #24
 8010666:	d501      	bpl.n	801066c <_printf_i+0xec>
 8010668:	681e      	ldr	r6, [r3, #0]
 801066a:	e002      	b.n	8010672 <_printf_i+0xf2>
 801066c:	0646      	lsls	r6, r0, #25
 801066e:	d5fb      	bpl.n	8010668 <_printf_i+0xe8>
 8010670:	881e      	ldrh	r6, [r3, #0]
 8010672:	4854      	ldr	r0, [pc, #336]	; (80107c4 <_printf_i+0x244>)
 8010674:	2f6f      	cmp	r7, #111	; 0x6f
 8010676:	bf0c      	ite	eq
 8010678:	2308      	moveq	r3, #8
 801067a:	230a      	movne	r3, #10
 801067c:	2100      	movs	r1, #0
 801067e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010682:	6865      	ldr	r5, [r4, #4]
 8010684:	60a5      	str	r5, [r4, #8]
 8010686:	2d00      	cmp	r5, #0
 8010688:	bfa2      	ittt	ge
 801068a:	6821      	ldrge	r1, [r4, #0]
 801068c:	f021 0104 	bicge.w	r1, r1, #4
 8010690:	6021      	strge	r1, [r4, #0]
 8010692:	b90e      	cbnz	r6, 8010698 <_printf_i+0x118>
 8010694:	2d00      	cmp	r5, #0
 8010696:	d04d      	beq.n	8010734 <_printf_i+0x1b4>
 8010698:	4615      	mov	r5, r2
 801069a:	fbb6 f1f3 	udiv	r1, r6, r3
 801069e:	fb03 6711 	mls	r7, r3, r1, r6
 80106a2:	5dc7      	ldrb	r7, [r0, r7]
 80106a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80106a8:	4637      	mov	r7, r6
 80106aa:	42bb      	cmp	r3, r7
 80106ac:	460e      	mov	r6, r1
 80106ae:	d9f4      	bls.n	801069a <_printf_i+0x11a>
 80106b0:	2b08      	cmp	r3, #8
 80106b2:	d10b      	bne.n	80106cc <_printf_i+0x14c>
 80106b4:	6823      	ldr	r3, [r4, #0]
 80106b6:	07de      	lsls	r6, r3, #31
 80106b8:	d508      	bpl.n	80106cc <_printf_i+0x14c>
 80106ba:	6923      	ldr	r3, [r4, #16]
 80106bc:	6861      	ldr	r1, [r4, #4]
 80106be:	4299      	cmp	r1, r3
 80106c0:	bfde      	ittt	le
 80106c2:	2330      	movle	r3, #48	; 0x30
 80106c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80106cc:	1b52      	subs	r2, r2, r5
 80106ce:	6122      	str	r2, [r4, #16]
 80106d0:	f8cd a000 	str.w	sl, [sp]
 80106d4:	464b      	mov	r3, r9
 80106d6:	aa03      	add	r2, sp, #12
 80106d8:	4621      	mov	r1, r4
 80106da:	4640      	mov	r0, r8
 80106dc:	f7ff fee2 	bl	80104a4 <_printf_common>
 80106e0:	3001      	adds	r0, #1
 80106e2:	d14c      	bne.n	801077e <_printf_i+0x1fe>
 80106e4:	f04f 30ff 	mov.w	r0, #4294967295
 80106e8:	b004      	add	sp, #16
 80106ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ee:	4835      	ldr	r0, [pc, #212]	; (80107c4 <_printf_i+0x244>)
 80106f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80106f4:	6829      	ldr	r1, [r5, #0]
 80106f6:	6823      	ldr	r3, [r4, #0]
 80106f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80106fc:	6029      	str	r1, [r5, #0]
 80106fe:	061d      	lsls	r5, r3, #24
 8010700:	d514      	bpl.n	801072c <_printf_i+0x1ac>
 8010702:	07df      	lsls	r7, r3, #31
 8010704:	bf44      	itt	mi
 8010706:	f043 0320 	orrmi.w	r3, r3, #32
 801070a:	6023      	strmi	r3, [r4, #0]
 801070c:	b91e      	cbnz	r6, 8010716 <_printf_i+0x196>
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	f023 0320 	bic.w	r3, r3, #32
 8010714:	6023      	str	r3, [r4, #0]
 8010716:	2310      	movs	r3, #16
 8010718:	e7b0      	b.n	801067c <_printf_i+0xfc>
 801071a:	6823      	ldr	r3, [r4, #0]
 801071c:	f043 0320 	orr.w	r3, r3, #32
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	2378      	movs	r3, #120	; 0x78
 8010724:	4828      	ldr	r0, [pc, #160]	; (80107c8 <_printf_i+0x248>)
 8010726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801072a:	e7e3      	b.n	80106f4 <_printf_i+0x174>
 801072c:	0659      	lsls	r1, r3, #25
 801072e:	bf48      	it	mi
 8010730:	b2b6      	uxthmi	r6, r6
 8010732:	e7e6      	b.n	8010702 <_printf_i+0x182>
 8010734:	4615      	mov	r5, r2
 8010736:	e7bb      	b.n	80106b0 <_printf_i+0x130>
 8010738:	682b      	ldr	r3, [r5, #0]
 801073a:	6826      	ldr	r6, [r4, #0]
 801073c:	6961      	ldr	r1, [r4, #20]
 801073e:	1d18      	adds	r0, r3, #4
 8010740:	6028      	str	r0, [r5, #0]
 8010742:	0635      	lsls	r5, r6, #24
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	d501      	bpl.n	801074c <_printf_i+0x1cc>
 8010748:	6019      	str	r1, [r3, #0]
 801074a:	e002      	b.n	8010752 <_printf_i+0x1d2>
 801074c:	0670      	lsls	r0, r6, #25
 801074e:	d5fb      	bpl.n	8010748 <_printf_i+0x1c8>
 8010750:	8019      	strh	r1, [r3, #0]
 8010752:	2300      	movs	r3, #0
 8010754:	6123      	str	r3, [r4, #16]
 8010756:	4615      	mov	r5, r2
 8010758:	e7ba      	b.n	80106d0 <_printf_i+0x150>
 801075a:	682b      	ldr	r3, [r5, #0]
 801075c:	1d1a      	adds	r2, r3, #4
 801075e:	602a      	str	r2, [r5, #0]
 8010760:	681d      	ldr	r5, [r3, #0]
 8010762:	6862      	ldr	r2, [r4, #4]
 8010764:	2100      	movs	r1, #0
 8010766:	4628      	mov	r0, r5
 8010768:	f7ef fd5a 	bl	8000220 <memchr>
 801076c:	b108      	cbz	r0, 8010772 <_printf_i+0x1f2>
 801076e:	1b40      	subs	r0, r0, r5
 8010770:	6060      	str	r0, [r4, #4]
 8010772:	6863      	ldr	r3, [r4, #4]
 8010774:	6123      	str	r3, [r4, #16]
 8010776:	2300      	movs	r3, #0
 8010778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801077c:	e7a8      	b.n	80106d0 <_printf_i+0x150>
 801077e:	6923      	ldr	r3, [r4, #16]
 8010780:	462a      	mov	r2, r5
 8010782:	4649      	mov	r1, r9
 8010784:	4640      	mov	r0, r8
 8010786:	47d0      	blx	sl
 8010788:	3001      	adds	r0, #1
 801078a:	d0ab      	beq.n	80106e4 <_printf_i+0x164>
 801078c:	6823      	ldr	r3, [r4, #0]
 801078e:	079b      	lsls	r3, r3, #30
 8010790:	d413      	bmi.n	80107ba <_printf_i+0x23a>
 8010792:	68e0      	ldr	r0, [r4, #12]
 8010794:	9b03      	ldr	r3, [sp, #12]
 8010796:	4298      	cmp	r0, r3
 8010798:	bfb8      	it	lt
 801079a:	4618      	movlt	r0, r3
 801079c:	e7a4      	b.n	80106e8 <_printf_i+0x168>
 801079e:	2301      	movs	r3, #1
 80107a0:	4632      	mov	r2, r6
 80107a2:	4649      	mov	r1, r9
 80107a4:	4640      	mov	r0, r8
 80107a6:	47d0      	blx	sl
 80107a8:	3001      	adds	r0, #1
 80107aa:	d09b      	beq.n	80106e4 <_printf_i+0x164>
 80107ac:	3501      	adds	r5, #1
 80107ae:	68e3      	ldr	r3, [r4, #12]
 80107b0:	9903      	ldr	r1, [sp, #12]
 80107b2:	1a5b      	subs	r3, r3, r1
 80107b4:	42ab      	cmp	r3, r5
 80107b6:	dcf2      	bgt.n	801079e <_printf_i+0x21e>
 80107b8:	e7eb      	b.n	8010792 <_printf_i+0x212>
 80107ba:	2500      	movs	r5, #0
 80107bc:	f104 0619 	add.w	r6, r4, #25
 80107c0:	e7f5      	b.n	80107ae <_printf_i+0x22e>
 80107c2:	bf00      	nop
 80107c4:	08011a6d 	.word	0x08011a6d
 80107c8:	08011a7e 	.word	0x08011a7e

080107cc <_scanf_chars>:
 80107cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107d0:	4615      	mov	r5, r2
 80107d2:	688a      	ldr	r2, [r1, #8]
 80107d4:	4680      	mov	r8, r0
 80107d6:	460c      	mov	r4, r1
 80107d8:	b932      	cbnz	r2, 80107e8 <_scanf_chars+0x1c>
 80107da:	698a      	ldr	r2, [r1, #24]
 80107dc:	2a00      	cmp	r2, #0
 80107de:	bf0c      	ite	eq
 80107e0:	2201      	moveq	r2, #1
 80107e2:	f04f 32ff 	movne.w	r2, #4294967295
 80107e6:	608a      	str	r2, [r1, #8]
 80107e8:	6822      	ldr	r2, [r4, #0]
 80107ea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801087c <_scanf_chars+0xb0>
 80107ee:	06d1      	lsls	r1, r2, #27
 80107f0:	bf5f      	itttt	pl
 80107f2:	681a      	ldrpl	r2, [r3, #0]
 80107f4:	1d11      	addpl	r1, r2, #4
 80107f6:	6019      	strpl	r1, [r3, #0]
 80107f8:	6816      	ldrpl	r6, [r2, #0]
 80107fa:	2700      	movs	r7, #0
 80107fc:	69a0      	ldr	r0, [r4, #24]
 80107fe:	b188      	cbz	r0, 8010824 <_scanf_chars+0x58>
 8010800:	2801      	cmp	r0, #1
 8010802:	d107      	bne.n	8010814 <_scanf_chars+0x48>
 8010804:	682a      	ldr	r2, [r5, #0]
 8010806:	7811      	ldrb	r1, [r2, #0]
 8010808:	6962      	ldr	r2, [r4, #20]
 801080a:	5c52      	ldrb	r2, [r2, r1]
 801080c:	b952      	cbnz	r2, 8010824 <_scanf_chars+0x58>
 801080e:	2f00      	cmp	r7, #0
 8010810:	d031      	beq.n	8010876 <_scanf_chars+0xaa>
 8010812:	e022      	b.n	801085a <_scanf_chars+0x8e>
 8010814:	2802      	cmp	r0, #2
 8010816:	d120      	bne.n	801085a <_scanf_chars+0x8e>
 8010818:	682b      	ldr	r3, [r5, #0]
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010820:	071b      	lsls	r3, r3, #28
 8010822:	d41a      	bmi.n	801085a <_scanf_chars+0x8e>
 8010824:	6823      	ldr	r3, [r4, #0]
 8010826:	06da      	lsls	r2, r3, #27
 8010828:	bf5e      	ittt	pl
 801082a:	682b      	ldrpl	r3, [r5, #0]
 801082c:	781b      	ldrbpl	r3, [r3, #0]
 801082e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010832:	682a      	ldr	r2, [r5, #0]
 8010834:	686b      	ldr	r3, [r5, #4]
 8010836:	3201      	adds	r2, #1
 8010838:	602a      	str	r2, [r5, #0]
 801083a:	68a2      	ldr	r2, [r4, #8]
 801083c:	3b01      	subs	r3, #1
 801083e:	3a01      	subs	r2, #1
 8010840:	606b      	str	r3, [r5, #4]
 8010842:	3701      	adds	r7, #1
 8010844:	60a2      	str	r2, [r4, #8]
 8010846:	b142      	cbz	r2, 801085a <_scanf_chars+0x8e>
 8010848:	2b00      	cmp	r3, #0
 801084a:	dcd7      	bgt.n	80107fc <_scanf_chars+0x30>
 801084c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010850:	4629      	mov	r1, r5
 8010852:	4640      	mov	r0, r8
 8010854:	4798      	blx	r3
 8010856:	2800      	cmp	r0, #0
 8010858:	d0d0      	beq.n	80107fc <_scanf_chars+0x30>
 801085a:	6823      	ldr	r3, [r4, #0]
 801085c:	f013 0310 	ands.w	r3, r3, #16
 8010860:	d105      	bne.n	801086e <_scanf_chars+0xa2>
 8010862:	68e2      	ldr	r2, [r4, #12]
 8010864:	3201      	adds	r2, #1
 8010866:	60e2      	str	r2, [r4, #12]
 8010868:	69a2      	ldr	r2, [r4, #24]
 801086a:	b102      	cbz	r2, 801086e <_scanf_chars+0xa2>
 801086c:	7033      	strb	r3, [r6, #0]
 801086e:	6923      	ldr	r3, [r4, #16]
 8010870:	443b      	add	r3, r7
 8010872:	6123      	str	r3, [r4, #16]
 8010874:	2000      	movs	r0, #0
 8010876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801087a:	bf00      	nop
 801087c:	08011761 	.word	0x08011761

08010880 <_scanf_i>:
 8010880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010884:	4698      	mov	r8, r3
 8010886:	4b76      	ldr	r3, [pc, #472]	; (8010a60 <_scanf_i+0x1e0>)
 8010888:	460c      	mov	r4, r1
 801088a:	4682      	mov	sl, r0
 801088c:	4616      	mov	r6, r2
 801088e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010892:	b087      	sub	sp, #28
 8010894:	ab03      	add	r3, sp, #12
 8010896:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801089a:	4b72      	ldr	r3, [pc, #456]	; (8010a64 <_scanf_i+0x1e4>)
 801089c:	69a1      	ldr	r1, [r4, #24]
 801089e:	4a72      	ldr	r2, [pc, #456]	; (8010a68 <_scanf_i+0x1e8>)
 80108a0:	2903      	cmp	r1, #3
 80108a2:	bf18      	it	ne
 80108a4:	461a      	movne	r2, r3
 80108a6:	68a3      	ldr	r3, [r4, #8]
 80108a8:	9201      	str	r2, [sp, #4]
 80108aa:	1e5a      	subs	r2, r3, #1
 80108ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80108b0:	bf88      	it	hi
 80108b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80108b6:	4627      	mov	r7, r4
 80108b8:	bf82      	ittt	hi
 80108ba:	eb03 0905 	addhi.w	r9, r3, r5
 80108be:	f240 135d 	movwhi	r3, #349	; 0x15d
 80108c2:	60a3      	strhi	r3, [r4, #8]
 80108c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80108c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80108cc:	bf98      	it	ls
 80108ce:	f04f 0900 	movls.w	r9, #0
 80108d2:	6023      	str	r3, [r4, #0]
 80108d4:	463d      	mov	r5, r7
 80108d6:	f04f 0b00 	mov.w	fp, #0
 80108da:	6831      	ldr	r1, [r6, #0]
 80108dc:	ab03      	add	r3, sp, #12
 80108de:	7809      	ldrb	r1, [r1, #0]
 80108e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80108e4:	2202      	movs	r2, #2
 80108e6:	f7ef fc9b 	bl	8000220 <memchr>
 80108ea:	b328      	cbz	r0, 8010938 <_scanf_i+0xb8>
 80108ec:	f1bb 0f01 	cmp.w	fp, #1
 80108f0:	d159      	bne.n	80109a6 <_scanf_i+0x126>
 80108f2:	6862      	ldr	r2, [r4, #4]
 80108f4:	b92a      	cbnz	r2, 8010902 <_scanf_i+0x82>
 80108f6:	6822      	ldr	r2, [r4, #0]
 80108f8:	2308      	movs	r3, #8
 80108fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80108fe:	6063      	str	r3, [r4, #4]
 8010900:	6022      	str	r2, [r4, #0]
 8010902:	6822      	ldr	r2, [r4, #0]
 8010904:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010908:	6022      	str	r2, [r4, #0]
 801090a:	68a2      	ldr	r2, [r4, #8]
 801090c:	1e51      	subs	r1, r2, #1
 801090e:	60a1      	str	r1, [r4, #8]
 8010910:	b192      	cbz	r2, 8010938 <_scanf_i+0xb8>
 8010912:	6832      	ldr	r2, [r6, #0]
 8010914:	1c51      	adds	r1, r2, #1
 8010916:	6031      	str	r1, [r6, #0]
 8010918:	7812      	ldrb	r2, [r2, #0]
 801091a:	f805 2b01 	strb.w	r2, [r5], #1
 801091e:	6872      	ldr	r2, [r6, #4]
 8010920:	3a01      	subs	r2, #1
 8010922:	2a00      	cmp	r2, #0
 8010924:	6072      	str	r2, [r6, #4]
 8010926:	dc07      	bgt.n	8010938 <_scanf_i+0xb8>
 8010928:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801092c:	4631      	mov	r1, r6
 801092e:	4650      	mov	r0, sl
 8010930:	4790      	blx	r2
 8010932:	2800      	cmp	r0, #0
 8010934:	f040 8085 	bne.w	8010a42 <_scanf_i+0x1c2>
 8010938:	f10b 0b01 	add.w	fp, fp, #1
 801093c:	f1bb 0f03 	cmp.w	fp, #3
 8010940:	d1cb      	bne.n	80108da <_scanf_i+0x5a>
 8010942:	6863      	ldr	r3, [r4, #4]
 8010944:	b90b      	cbnz	r3, 801094a <_scanf_i+0xca>
 8010946:	230a      	movs	r3, #10
 8010948:	6063      	str	r3, [r4, #4]
 801094a:	6863      	ldr	r3, [r4, #4]
 801094c:	4947      	ldr	r1, [pc, #284]	; (8010a6c <_scanf_i+0x1ec>)
 801094e:	6960      	ldr	r0, [r4, #20]
 8010950:	1ac9      	subs	r1, r1, r3
 8010952:	f000 f8a9 	bl	8010aa8 <__sccl>
 8010956:	f04f 0b00 	mov.w	fp, #0
 801095a:	68a3      	ldr	r3, [r4, #8]
 801095c:	6822      	ldr	r2, [r4, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d03d      	beq.n	80109de <_scanf_i+0x15e>
 8010962:	6831      	ldr	r1, [r6, #0]
 8010964:	6960      	ldr	r0, [r4, #20]
 8010966:	f891 c000 	ldrb.w	ip, [r1]
 801096a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801096e:	2800      	cmp	r0, #0
 8010970:	d035      	beq.n	80109de <_scanf_i+0x15e>
 8010972:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010976:	d124      	bne.n	80109c2 <_scanf_i+0x142>
 8010978:	0510      	lsls	r0, r2, #20
 801097a:	d522      	bpl.n	80109c2 <_scanf_i+0x142>
 801097c:	f10b 0b01 	add.w	fp, fp, #1
 8010980:	f1b9 0f00 	cmp.w	r9, #0
 8010984:	d003      	beq.n	801098e <_scanf_i+0x10e>
 8010986:	3301      	adds	r3, #1
 8010988:	f109 39ff 	add.w	r9, r9, #4294967295
 801098c:	60a3      	str	r3, [r4, #8]
 801098e:	6873      	ldr	r3, [r6, #4]
 8010990:	3b01      	subs	r3, #1
 8010992:	2b00      	cmp	r3, #0
 8010994:	6073      	str	r3, [r6, #4]
 8010996:	dd1b      	ble.n	80109d0 <_scanf_i+0x150>
 8010998:	6833      	ldr	r3, [r6, #0]
 801099a:	3301      	adds	r3, #1
 801099c:	6033      	str	r3, [r6, #0]
 801099e:	68a3      	ldr	r3, [r4, #8]
 80109a0:	3b01      	subs	r3, #1
 80109a2:	60a3      	str	r3, [r4, #8]
 80109a4:	e7d9      	b.n	801095a <_scanf_i+0xda>
 80109a6:	f1bb 0f02 	cmp.w	fp, #2
 80109aa:	d1ae      	bne.n	801090a <_scanf_i+0x8a>
 80109ac:	6822      	ldr	r2, [r4, #0]
 80109ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80109b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80109b6:	d1bf      	bne.n	8010938 <_scanf_i+0xb8>
 80109b8:	2310      	movs	r3, #16
 80109ba:	6063      	str	r3, [r4, #4]
 80109bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80109c0:	e7a2      	b.n	8010908 <_scanf_i+0x88>
 80109c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80109c6:	6022      	str	r2, [r4, #0]
 80109c8:	780b      	ldrb	r3, [r1, #0]
 80109ca:	f805 3b01 	strb.w	r3, [r5], #1
 80109ce:	e7de      	b.n	801098e <_scanf_i+0x10e>
 80109d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80109d4:	4631      	mov	r1, r6
 80109d6:	4650      	mov	r0, sl
 80109d8:	4798      	blx	r3
 80109da:	2800      	cmp	r0, #0
 80109dc:	d0df      	beq.n	801099e <_scanf_i+0x11e>
 80109de:	6823      	ldr	r3, [r4, #0]
 80109e0:	05db      	lsls	r3, r3, #23
 80109e2:	d50d      	bpl.n	8010a00 <_scanf_i+0x180>
 80109e4:	42bd      	cmp	r5, r7
 80109e6:	d909      	bls.n	80109fc <_scanf_i+0x17c>
 80109e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80109ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80109f0:	4632      	mov	r2, r6
 80109f2:	4650      	mov	r0, sl
 80109f4:	4798      	blx	r3
 80109f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80109fa:	464d      	mov	r5, r9
 80109fc:	42bd      	cmp	r5, r7
 80109fe:	d02d      	beq.n	8010a5c <_scanf_i+0x1dc>
 8010a00:	6822      	ldr	r2, [r4, #0]
 8010a02:	f012 0210 	ands.w	r2, r2, #16
 8010a06:	d113      	bne.n	8010a30 <_scanf_i+0x1b0>
 8010a08:	702a      	strb	r2, [r5, #0]
 8010a0a:	6863      	ldr	r3, [r4, #4]
 8010a0c:	9e01      	ldr	r6, [sp, #4]
 8010a0e:	4639      	mov	r1, r7
 8010a10:	4650      	mov	r0, sl
 8010a12:	47b0      	blx	r6
 8010a14:	6821      	ldr	r1, [r4, #0]
 8010a16:	f8d8 3000 	ldr.w	r3, [r8]
 8010a1a:	f011 0f20 	tst.w	r1, #32
 8010a1e:	d013      	beq.n	8010a48 <_scanf_i+0x1c8>
 8010a20:	1d1a      	adds	r2, r3, #4
 8010a22:	f8c8 2000 	str.w	r2, [r8]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	6018      	str	r0, [r3, #0]
 8010a2a:	68e3      	ldr	r3, [r4, #12]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	60e3      	str	r3, [r4, #12]
 8010a30:	1bed      	subs	r5, r5, r7
 8010a32:	44ab      	add	fp, r5
 8010a34:	6925      	ldr	r5, [r4, #16]
 8010a36:	445d      	add	r5, fp
 8010a38:	6125      	str	r5, [r4, #16]
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	b007      	add	sp, #28
 8010a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a42:	f04f 0b00 	mov.w	fp, #0
 8010a46:	e7ca      	b.n	80109de <_scanf_i+0x15e>
 8010a48:	1d1a      	adds	r2, r3, #4
 8010a4a:	f8c8 2000 	str.w	r2, [r8]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f011 0f01 	tst.w	r1, #1
 8010a54:	bf14      	ite	ne
 8010a56:	8018      	strhne	r0, [r3, #0]
 8010a58:	6018      	streq	r0, [r3, #0]
 8010a5a:	e7e6      	b.n	8010a2a <_scanf_i+0x1aa>
 8010a5c:	2001      	movs	r0, #1
 8010a5e:	e7ed      	b.n	8010a3c <_scanf_i+0x1bc>
 8010a60:	080115e4 	.word	0x080115e4
 8010a64:	08010c25 	.word	0x08010c25
 8010a68:	0800eaf5 	.word	0x0800eaf5
 8010a6c:	08011aa8 	.word	0x08011aa8

08010a70 <_read_r>:
 8010a70:	b538      	push	{r3, r4, r5, lr}
 8010a72:	4d07      	ldr	r5, [pc, #28]	; (8010a90 <_read_r+0x20>)
 8010a74:	4604      	mov	r4, r0
 8010a76:	4608      	mov	r0, r1
 8010a78:	4611      	mov	r1, r2
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	602a      	str	r2, [r5, #0]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	f7f1 f96c 	bl	8001d5c <_read>
 8010a84:	1c43      	adds	r3, r0, #1
 8010a86:	d102      	bne.n	8010a8e <_read_r+0x1e>
 8010a88:	682b      	ldr	r3, [r5, #0]
 8010a8a:	b103      	cbz	r3, 8010a8e <_read_r+0x1e>
 8010a8c:	6023      	str	r3, [r4, #0]
 8010a8e:	bd38      	pop	{r3, r4, r5, pc}
 8010a90:	20006f18 	.word	0x20006f18
 8010a94:	00000000 	.word	0x00000000

08010a98 <nan>:
 8010a98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010aa0 <nan+0x8>
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop
 8010aa0:	00000000 	.word	0x00000000
 8010aa4:	7ff80000 	.word	0x7ff80000

08010aa8 <__sccl>:
 8010aa8:	b570      	push	{r4, r5, r6, lr}
 8010aaa:	780b      	ldrb	r3, [r1, #0]
 8010aac:	4604      	mov	r4, r0
 8010aae:	2b5e      	cmp	r3, #94	; 0x5e
 8010ab0:	bf0b      	itete	eq
 8010ab2:	784b      	ldrbeq	r3, [r1, #1]
 8010ab4:	1c48      	addne	r0, r1, #1
 8010ab6:	1c88      	addeq	r0, r1, #2
 8010ab8:	2200      	movne	r2, #0
 8010aba:	bf08      	it	eq
 8010abc:	2201      	moveq	r2, #1
 8010abe:	1e61      	subs	r1, r4, #1
 8010ac0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010ac4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010ac8:	42a9      	cmp	r1, r5
 8010aca:	d1fb      	bne.n	8010ac4 <__sccl+0x1c>
 8010acc:	b90b      	cbnz	r3, 8010ad2 <__sccl+0x2a>
 8010ace:	3801      	subs	r0, #1
 8010ad0:	bd70      	pop	{r4, r5, r6, pc}
 8010ad2:	f082 0201 	eor.w	r2, r2, #1
 8010ad6:	54e2      	strb	r2, [r4, r3]
 8010ad8:	4605      	mov	r5, r0
 8010ada:	4628      	mov	r0, r5
 8010adc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010ae0:	292d      	cmp	r1, #45	; 0x2d
 8010ae2:	d006      	beq.n	8010af2 <__sccl+0x4a>
 8010ae4:	295d      	cmp	r1, #93	; 0x5d
 8010ae6:	d0f3      	beq.n	8010ad0 <__sccl+0x28>
 8010ae8:	b909      	cbnz	r1, 8010aee <__sccl+0x46>
 8010aea:	4628      	mov	r0, r5
 8010aec:	e7f0      	b.n	8010ad0 <__sccl+0x28>
 8010aee:	460b      	mov	r3, r1
 8010af0:	e7f1      	b.n	8010ad6 <__sccl+0x2e>
 8010af2:	786e      	ldrb	r6, [r5, #1]
 8010af4:	2e5d      	cmp	r6, #93	; 0x5d
 8010af6:	d0fa      	beq.n	8010aee <__sccl+0x46>
 8010af8:	42b3      	cmp	r3, r6
 8010afa:	dcf8      	bgt.n	8010aee <__sccl+0x46>
 8010afc:	3502      	adds	r5, #2
 8010afe:	4619      	mov	r1, r3
 8010b00:	3101      	adds	r1, #1
 8010b02:	428e      	cmp	r6, r1
 8010b04:	5462      	strb	r2, [r4, r1]
 8010b06:	dcfb      	bgt.n	8010b00 <__sccl+0x58>
 8010b08:	1af1      	subs	r1, r6, r3
 8010b0a:	3901      	subs	r1, #1
 8010b0c:	1c58      	adds	r0, r3, #1
 8010b0e:	42b3      	cmp	r3, r6
 8010b10:	bfa8      	it	ge
 8010b12:	2100      	movge	r1, #0
 8010b14:	1843      	adds	r3, r0, r1
 8010b16:	e7e0      	b.n	8010ada <__sccl+0x32>

08010b18 <strncmp>:
 8010b18:	b510      	push	{r4, lr}
 8010b1a:	b17a      	cbz	r2, 8010b3c <strncmp+0x24>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	3901      	subs	r1, #1
 8010b20:	1884      	adds	r4, r0, r2
 8010b22:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010b2a:	4290      	cmp	r0, r2
 8010b2c:	d101      	bne.n	8010b32 <strncmp+0x1a>
 8010b2e:	42a3      	cmp	r3, r4
 8010b30:	d101      	bne.n	8010b36 <strncmp+0x1e>
 8010b32:	1a80      	subs	r0, r0, r2
 8010b34:	bd10      	pop	{r4, pc}
 8010b36:	2800      	cmp	r0, #0
 8010b38:	d1f3      	bne.n	8010b22 <strncmp+0xa>
 8010b3a:	e7fa      	b.n	8010b32 <strncmp+0x1a>
 8010b3c:	4610      	mov	r0, r2
 8010b3e:	e7f9      	b.n	8010b34 <strncmp+0x1c>

08010b40 <_strtoul_l.constprop.0>:
 8010b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b44:	4f36      	ldr	r7, [pc, #216]	; (8010c20 <_strtoul_l.constprop.0+0xe0>)
 8010b46:	4686      	mov	lr, r0
 8010b48:	460d      	mov	r5, r1
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b50:	5de6      	ldrb	r6, [r4, r7]
 8010b52:	f016 0608 	ands.w	r6, r6, #8
 8010b56:	d1f8      	bne.n	8010b4a <_strtoul_l.constprop.0+0xa>
 8010b58:	2c2d      	cmp	r4, #45	; 0x2d
 8010b5a:	d12f      	bne.n	8010bbc <_strtoul_l.constprop.0+0x7c>
 8010b5c:	782c      	ldrb	r4, [r5, #0]
 8010b5e:	2601      	movs	r6, #1
 8010b60:	1c85      	adds	r5, r0, #2
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d057      	beq.n	8010c16 <_strtoul_l.constprop.0+0xd6>
 8010b66:	2b10      	cmp	r3, #16
 8010b68:	d109      	bne.n	8010b7e <_strtoul_l.constprop.0+0x3e>
 8010b6a:	2c30      	cmp	r4, #48	; 0x30
 8010b6c:	d107      	bne.n	8010b7e <_strtoul_l.constprop.0+0x3e>
 8010b6e:	7828      	ldrb	r0, [r5, #0]
 8010b70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010b74:	2858      	cmp	r0, #88	; 0x58
 8010b76:	d149      	bne.n	8010c0c <_strtoul_l.constprop.0+0xcc>
 8010b78:	786c      	ldrb	r4, [r5, #1]
 8010b7a:	2310      	movs	r3, #16
 8010b7c:	3502      	adds	r5, #2
 8010b7e:	f04f 38ff 	mov.w	r8, #4294967295
 8010b82:	2700      	movs	r7, #0
 8010b84:	fbb8 f8f3 	udiv	r8, r8, r3
 8010b88:	fb03 f908 	mul.w	r9, r3, r8
 8010b8c:	ea6f 0909 	mvn.w	r9, r9
 8010b90:	4638      	mov	r0, r7
 8010b92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010b96:	f1bc 0f09 	cmp.w	ip, #9
 8010b9a:	d814      	bhi.n	8010bc6 <_strtoul_l.constprop.0+0x86>
 8010b9c:	4664      	mov	r4, ip
 8010b9e:	42a3      	cmp	r3, r4
 8010ba0:	dd22      	ble.n	8010be8 <_strtoul_l.constprop.0+0xa8>
 8010ba2:	2f00      	cmp	r7, #0
 8010ba4:	db1d      	blt.n	8010be2 <_strtoul_l.constprop.0+0xa2>
 8010ba6:	4580      	cmp	r8, r0
 8010ba8:	d31b      	bcc.n	8010be2 <_strtoul_l.constprop.0+0xa2>
 8010baa:	d101      	bne.n	8010bb0 <_strtoul_l.constprop.0+0x70>
 8010bac:	45a1      	cmp	r9, r4
 8010bae:	db18      	blt.n	8010be2 <_strtoul_l.constprop.0+0xa2>
 8010bb0:	fb00 4003 	mla	r0, r0, r3, r4
 8010bb4:	2701      	movs	r7, #1
 8010bb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bba:	e7ea      	b.n	8010b92 <_strtoul_l.constprop.0+0x52>
 8010bbc:	2c2b      	cmp	r4, #43	; 0x2b
 8010bbe:	bf04      	itt	eq
 8010bc0:	782c      	ldrbeq	r4, [r5, #0]
 8010bc2:	1c85      	addeq	r5, r0, #2
 8010bc4:	e7cd      	b.n	8010b62 <_strtoul_l.constprop.0+0x22>
 8010bc6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010bca:	f1bc 0f19 	cmp.w	ip, #25
 8010bce:	d801      	bhi.n	8010bd4 <_strtoul_l.constprop.0+0x94>
 8010bd0:	3c37      	subs	r4, #55	; 0x37
 8010bd2:	e7e4      	b.n	8010b9e <_strtoul_l.constprop.0+0x5e>
 8010bd4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010bd8:	f1bc 0f19 	cmp.w	ip, #25
 8010bdc:	d804      	bhi.n	8010be8 <_strtoul_l.constprop.0+0xa8>
 8010bde:	3c57      	subs	r4, #87	; 0x57
 8010be0:	e7dd      	b.n	8010b9e <_strtoul_l.constprop.0+0x5e>
 8010be2:	f04f 37ff 	mov.w	r7, #4294967295
 8010be6:	e7e6      	b.n	8010bb6 <_strtoul_l.constprop.0+0x76>
 8010be8:	2f00      	cmp	r7, #0
 8010bea:	da07      	bge.n	8010bfc <_strtoul_l.constprop.0+0xbc>
 8010bec:	2322      	movs	r3, #34	; 0x22
 8010bee:	f8ce 3000 	str.w	r3, [lr]
 8010bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8010bf6:	b932      	cbnz	r2, 8010c06 <_strtoul_l.constprop.0+0xc6>
 8010bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bfc:	b106      	cbz	r6, 8010c00 <_strtoul_l.constprop.0+0xc0>
 8010bfe:	4240      	negs	r0, r0
 8010c00:	2a00      	cmp	r2, #0
 8010c02:	d0f9      	beq.n	8010bf8 <_strtoul_l.constprop.0+0xb8>
 8010c04:	b107      	cbz	r7, 8010c08 <_strtoul_l.constprop.0+0xc8>
 8010c06:	1e69      	subs	r1, r5, #1
 8010c08:	6011      	str	r1, [r2, #0]
 8010c0a:	e7f5      	b.n	8010bf8 <_strtoul_l.constprop.0+0xb8>
 8010c0c:	2430      	movs	r4, #48	; 0x30
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d1b5      	bne.n	8010b7e <_strtoul_l.constprop.0+0x3e>
 8010c12:	2308      	movs	r3, #8
 8010c14:	e7b3      	b.n	8010b7e <_strtoul_l.constprop.0+0x3e>
 8010c16:	2c30      	cmp	r4, #48	; 0x30
 8010c18:	d0a9      	beq.n	8010b6e <_strtoul_l.constprop.0+0x2e>
 8010c1a:	230a      	movs	r3, #10
 8010c1c:	e7af      	b.n	8010b7e <_strtoul_l.constprop.0+0x3e>
 8010c1e:	bf00      	nop
 8010c20:	08011761 	.word	0x08011761

08010c24 <_strtoul_r>:
 8010c24:	f7ff bf8c 	b.w	8010b40 <_strtoul_l.constprop.0>

08010c28 <__submore>:
 8010c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c2c:	460c      	mov	r4, r1
 8010c2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c34:	4299      	cmp	r1, r3
 8010c36:	d11d      	bne.n	8010c74 <__submore+0x4c>
 8010c38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010c3c:	f7fc fd0e 	bl	800d65c <_malloc_r>
 8010c40:	b918      	cbnz	r0, 8010c4a <__submore+0x22>
 8010c42:	f04f 30ff 	mov.w	r0, #4294967295
 8010c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8010c50:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010c54:	6360      	str	r0, [r4, #52]	; 0x34
 8010c56:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010c5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010c5e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010c62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010c66:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010c6a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010c6e:	6020      	str	r0, [r4, #0]
 8010c70:	2000      	movs	r0, #0
 8010c72:	e7e8      	b.n	8010c46 <__submore+0x1e>
 8010c74:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010c76:	0077      	lsls	r7, r6, #1
 8010c78:	463a      	mov	r2, r7
 8010c7a:	f000 f86f 	bl	8010d5c <_realloc_r>
 8010c7e:	4605      	mov	r5, r0
 8010c80:	2800      	cmp	r0, #0
 8010c82:	d0de      	beq.n	8010c42 <__submore+0x1a>
 8010c84:	eb00 0806 	add.w	r8, r0, r6
 8010c88:	4601      	mov	r1, r0
 8010c8a:	4632      	mov	r2, r6
 8010c8c:	4640      	mov	r0, r8
 8010c8e:	f7fc fcae 	bl	800d5ee <memcpy>
 8010c92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010c96:	f8c4 8000 	str.w	r8, [r4]
 8010c9a:	e7e9      	b.n	8010c70 <__submore+0x48>

08010c9c <__ascii_wctomb>:
 8010c9c:	b149      	cbz	r1, 8010cb2 <__ascii_wctomb+0x16>
 8010c9e:	2aff      	cmp	r2, #255	; 0xff
 8010ca0:	bf85      	ittet	hi
 8010ca2:	238a      	movhi	r3, #138	; 0x8a
 8010ca4:	6003      	strhi	r3, [r0, #0]
 8010ca6:	700a      	strbls	r2, [r1, #0]
 8010ca8:	f04f 30ff 	movhi.w	r0, #4294967295
 8010cac:	bf98      	it	ls
 8010cae:	2001      	movls	r0, #1
 8010cb0:	4770      	bx	lr
 8010cb2:	4608      	mov	r0, r1
 8010cb4:	4770      	bx	lr
	...

08010cb8 <__assert_func>:
 8010cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010cba:	4614      	mov	r4, r2
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	4b09      	ldr	r3, [pc, #36]	; (8010ce4 <__assert_func+0x2c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4605      	mov	r5, r0
 8010cc4:	68d8      	ldr	r0, [r3, #12]
 8010cc6:	b14c      	cbz	r4, 8010cdc <__assert_func+0x24>
 8010cc8:	4b07      	ldr	r3, [pc, #28]	; (8010ce8 <__assert_func+0x30>)
 8010cca:	9100      	str	r1, [sp, #0]
 8010ccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010cd0:	4906      	ldr	r1, [pc, #24]	; (8010cec <__assert_func+0x34>)
 8010cd2:	462b      	mov	r3, r5
 8010cd4:	f000 f80e 	bl	8010cf4 <fiprintf>
 8010cd8:	f000 fa88 	bl	80111ec <abort>
 8010cdc:	4b04      	ldr	r3, [pc, #16]	; (8010cf0 <__assert_func+0x38>)
 8010cde:	461c      	mov	r4, r3
 8010ce0:	e7f3      	b.n	8010cca <__assert_func+0x12>
 8010ce2:	bf00      	nop
 8010ce4:	20000110 	.word	0x20000110
 8010ce8:	08011aaa 	.word	0x08011aaa
 8010cec:	08011ab7 	.word	0x08011ab7
 8010cf0:	08011ae5 	.word	0x08011ae5

08010cf4 <fiprintf>:
 8010cf4:	b40e      	push	{r1, r2, r3}
 8010cf6:	b503      	push	{r0, r1, lr}
 8010cf8:	4601      	mov	r1, r0
 8010cfa:	ab03      	add	r3, sp, #12
 8010cfc:	4805      	ldr	r0, [pc, #20]	; (8010d14 <fiprintf+0x20>)
 8010cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d02:	6800      	ldr	r0, [r0, #0]
 8010d04:	9301      	str	r3, [sp, #4]
 8010d06:	f000 f881 	bl	8010e0c <_vfiprintf_r>
 8010d0a:	b002      	add	sp, #8
 8010d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d10:	b003      	add	sp, #12
 8010d12:	4770      	bx	lr
 8010d14:	20000110 	.word	0x20000110

08010d18 <malloc>:
 8010d18:	4b02      	ldr	r3, [pc, #8]	; (8010d24 <malloc+0xc>)
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	6818      	ldr	r0, [r3, #0]
 8010d1e:	f7fc bc9d 	b.w	800d65c <_malloc_r>
 8010d22:	bf00      	nop
 8010d24:	20000110 	.word	0x20000110

08010d28 <memmove>:
 8010d28:	4288      	cmp	r0, r1
 8010d2a:	b510      	push	{r4, lr}
 8010d2c:	eb01 0402 	add.w	r4, r1, r2
 8010d30:	d902      	bls.n	8010d38 <memmove+0x10>
 8010d32:	4284      	cmp	r4, r0
 8010d34:	4623      	mov	r3, r4
 8010d36:	d807      	bhi.n	8010d48 <memmove+0x20>
 8010d38:	1e43      	subs	r3, r0, #1
 8010d3a:	42a1      	cmp	r1, r4
 8010d3c:	d008      	beq.n	8010d50 <memmove+0x28>
 8010d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d46:	e7f8      	b.n	8010d3a <memmove+0x12>
 8010d48:	4402      	add	r2, r0
 8010d4a:	4601      	mov	r1, r0
 8010d4c:	428a      	cmp	r2, r1
 8010d4e:	d100      	bne.n	8010d52 <memmove+0x2a>
 8010d50:	bd10      	pop	{r4, pc}
 8010d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d5a:	e7f7      	b.n	8010d4c <memmove+0x24>

08010d5c <_realloc_r>:
 8010d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d60:	4680      	mov	r8, r0
 8010d62:	4614      	mov	r4, r2
 8010d64:	460e      	mov	r6, r1
 8010d66:	b921      	cbnz	r1, 8010d72 <_realloc_r+0x16>
 8010d68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d6c:	4611      	mov	r1, r2
 8010d6e:	f7fc bc75 	b.w	800d65c <_malloc_r>
 8010d72:	b92a      	cbnz	r2, 8010d80 <_realloc_r+0x24>
 8010d74:	f7ff f81c 	bl	800fdb0 <_free_r>
 8010d78:	4625      	mov	r5, r4
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d80:	f000 faa0 	bl	80112c4 <_malloc_usable_size_r>
 8010d84:	4284      	cmp	r4, r0
 8010d86:	4607      	mov	r7, r0
 8010d88:	d802      	bhi.n	8010d90 <_realloc_r+0x34>
 8010d8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010d8e:	d812      	bhi.n	8010db6 <_realloc_r+0x5a>
 8010d90:	4621      	mov	r1, r4
 8010d92:	4640      	mov	r0, r8
 8010d94:	f7fc fc62 	bl	800d65c <_malloc_r>
 8010d98:	4605      	mov	r5, r0
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	d0ed      	beq.n	8010d7a <_realloc_r+0x1e>
 8010d9e:	42bc      	cmp	r4, r7
 8010da0:	4622      	mov	r2, r4
 8010da2:	4631      	mov	r1, r6
 8010da4:	bf28      	it	cs
 8010da6:	463a      	movcs	r2, r7
 8010da8:	f7fc fc21 	bl	800d5ee <memcpy>
 8010dac:	4631      	mov	r1, r6
 8010dae:	4640      	mov	r0, r8
 8010db0:	f7fe fffe 	bl	800fdb0 <_free_r>
 8010db4:	e7e1      	b.n	8010d7a <_realloc_r+0x1e>
 8010db6:	4635      	mov	r5, r6
 8010db8:	e7df      	b.n	8010d7a <_realloc_r+0x1e>

08010dba <__sfputc_r>:
 8010dba:	6893      	ldr	r3, [r2, #8]
 8010dbc:	3b01      	subs	r3, #1
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	b410      	push	{r4}
 8010dc2:	6093      	str	r3, [r2, #8]
 8010dc4:	da08      	bge.n	8010dd8 <__sfputc_r+0x1e>
 8010dc6:	6994      	ldr	r4, [r2, #24]
 8010dc8:	42a3      	cmp	r3, r4
 8010dca:	db01      	blt.n	8010dd0 <__sfputc_r+0x16>
 8010dcc:	290a      	cmp	r1, #10
 8010dce:	d103      	bne.n	8010dd8 <__sfputc_r+0x1e>
 8010dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dd4:	f000 b94a 	b.w	801106c <__swbuf_r>
 8010dd8:	6813      	ldr	r3, [r2, #0]
 8010dda:	1c58      	adds	r0, r3, #1
 8010ddc:	6010      	str	r0, [r2, #0]
 8010dde:	7019      	strb	r1, [r3, #0]
 8010de0:	4608      	mov	r0, r1
 8010de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010de6:	4770      	bx	lr

08010de8 <__sfputs_r>:
 8010de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dea:	4606      	mov	r6, r0
 8010dec:	460f      	mov	r7, r1
 8010dee:	4614      	mov	r4, r2
 8010df0:	18d5      	adds	r5, r2, r3
 8010df2:	42ac      	cmp	r4, r5
 8010df4:	d101      	bne.n	8010dfa <__sfputs_r+0x12>
 8010df6:	2000      	movs	r0, #0
 8010df8:	e007      	b.n	8010e0a <__sfputs_r+0x22>
 8010dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dfe:	463a      	mov	r2, r7
 8010e00:	4630      	mov	r0, r6
 8010e02:	f7ff ffda 	bl	8010dba <__sfputc_r>
 8010e06:	1c43      	adds	r3, r0, #1
 8010e08:	d1f3      	bne.n	8010df2 <__sfputs_r+0xa>
 8010e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e0c <_vfiprintf_r>:
 8010e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e10:	460d      	mov	r5, r1
 8010e12:	b09d      	sub	sp, #116	; 0x74
 8010e14:	4614      	mov	r4, r2
 8010e16:	4698      	mov	r8, r3
 8010e18:	4606      	mov	r6, r0
 8010e1a:	b118      	cbz	r0, 8010e24 <_vfiprintf_r+0x18>
 8010e1c:	6983      	ldr	r3, [r0, #24]
 8010e1e:	b90b      	cbnz	r3, 8010e24 <_vfiprintf_r+0x18>
 8010e20:	f7fc fb20 	bl	800d464 <__sinit>
 8010e24:	4b89      	ldr	r3, [pc, #548]	; (801104c <_vfiprintf_r+0x240>)
 8010e26:	429d      	cmp	r5, r3
 8010e28:	d11b      	bne.n	8010e62 <_vfiprintf_r+0x56>
 8010e2a:	6875      	ldr	r5, [r6, #4]
 8010e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e2e:	07d9      	lsls	r1, r3, #31
 8010e30:	d405      	bmi.n	8010e3e <_vfiprintf_r+0x32>
 8010e32:	89ab      	ldrh	r3, [r5, #12]
 8010e34:	059a      	lsls	r2, r3, #22
 8010e36:	d402      	bmi.n	8010e3e <_vfiprintf_r+0x32>
 8010e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e3a:	f7fc fbd6 	bl	800d5ea <__retarget_lock_acquire_recursive>
 8010e3e:	89ab      	ldrh	r3, [r5, #12]
 8010e40:	071b      	lsls	r3, r3, #28
 8010e42:	d501      	bpl.n	8010e48 <_vfiprintf_r+0x3c>
 8010e44:	692b      	ldr	r3, [r5, #16]
 8010e46:	b9eb      	cbnz	r3, 8010e84 <_vfiprintf_r+0x78>
 8010e48:	4629      	mov	r1, r5
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	f000 f960 	bl	8011110 <__swsetup_r>
 8010e50:	b1c0      	cbz	r0, 8010e84 <_vfiprintf_r+0x78>
 8010e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e54:	07dc      	lsls	r4, r3, #31
 8010e56:	d50e      	bpl.n	8010e76 <_vfiprintf_r+0x6a>
 8010e58:	f04f 30ff 	mov.w	r0, #4294967295
 8010e5c:	b01d      	add	sp, #116	; 0x74
 8010e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e62:	4b7b      	ldr	r3, [pc, #492]	; (8011050 <_vfiprintf_r+0x244>)
 8010e64:	429d      	cmp	r5, r3
 8010e66:	d101      	bne.n	8010e6c <_vfiprintf_r+0x60>
 8010e68:	68b5      	ldr	r5, [r6, #8]
 8010e6a:	e7df      	b.n	8010e2c <_vfiprintf_r+0x20>
 8010e6c:	4b79      	ldr	r3, [pc, #484]	; (8011054 <_vfiprintf_r+0x248>)
 8010e6e:	429d      	cmp	r5, r3
 8010e70:	bf08      	it	eq
 8010e72:	68f5      	ldreq	r5, [r6, #12]
 8010e74:	e7da      	b.n	8010e2c <_vfiprintf_r+0x20>
 8010e76:	89ab      	ldrh	r3, [r5, #12]
 8010e78:	0598      	lsls	r0, r3, #22
 8010e7a:	d4ed      	bmi.n	8010e58 <_vfiprintf_r+0x4c>
 8010e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e7e:	f7fc fbb5 	bl	800d5ec <__retarget_lock_release_recursive>
 8010e82:	e7e9      	b.n	8010e58 <_vfiprintf_r+0x4c>
 8010e84:	2300      	movs	r3, #0
 8010e86:	9309      	str	r3, [sp, #36]	; 0x24
 8010e88:	2320      	movs	r3, #32
 8010e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e92:	2330      	movs	r3, #48	; 0x30
 8010e94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011058 <_vfiprintf_r+0x24c>
 8010e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e9c:	f04f 0901 	mov.w	r9, #1
 8010ea0:	4623      	mov	r3, r4
 8010ea2:	469a      	mov	sl, r3
 8010ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ea8:	b10a      	cbz	r2, 8010eae <_vfiprintf_r+0xa2>
 8010eaa:	2a25      	cmp	r2, #37	; 0x25
 8010eac:	d1f9      	bne.n	8010ea2 <_vfiprintf_r+0x96>
 8010eae:	ebba 0b04 	subs.w	fp, sl, r4
 8010eb2:	d00b      	beq.n	8010ecc <_vfiprintf_r+0xc0>
 8010eb4:	465b      	mov	r3, fp
 8010eb6:	4622      	mov	r2, r4
 8010eb8:	4629      	mov	r1, r5
 8010eba:	4630      	mov	r0, r6
 8010ebc:	f7ff ff94 	bl	8010de8 <__sfputs_r>
 8010ec0:	3001      	adds	r0, #1
 8010ec2:	f000 80aa 	beq.w	801101a <_vfiprintf_r+0x20e>
 8010ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ec8:	445a      	add	r2, fp
 8010eca:	9209      	str	r2, [sp, #36]	; 0x24
 8010ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	f000 80a2 	beq.w	801101a <_vfiprintf_r+0x20e>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8010edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ee0:	f10a 0a01 	add.w	sl, sl, #1
 8010ee4:	9304      	str	r3, [sp, #16]
 8010ee6:	9307      	str	r3, [sp, #28]
 8010ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010eec:	931a      	str	r3, [sp, #104]	; 0x68
 8010eee:	4654      	mov	r4, sl
 8010ef0:	2205      	movs	r2, #5
 8010ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ef6:	4858      	ldr	r0, [pc, #352]	; (8011058 <_vfiprintf_r+0x24c>)
 8010ef8:	f7ef f992 	bl	8000220 <memchr>
 8010efc:	9a04      	ldr	r2, [sp, #16]
 8010efe:	b9d8      	cbnz	r0, 8010f38 <_vfiprintf_r+0x12c>
 8010f00:	06d1      	lsls	r1, r2, #27
 8010f02:	bf44      	itt	mi
 8010f04:	2320      	movmi	r3, #32
 8010f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f0a:	0713      	lsls	r3, r2, #28
 8010f0c:	bf44      	itt	mi
 8010f0e:	232b      	movmi	r3, #43	; 0x2b
 8010f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f14:	f89a 3000 	ldrb.w	r3, [sl]
 8010f18:	2b2a      	cmp	r3, #42	; 0x2a
 8010f1a:	d015      	beq.n	8010f48 <_vfiprintf_r+0x13c>
 8010f1c:	9a07      	ldr	r2, [sp, #28]
 8010f1e:	4654      	mov	r4, sl
 8010f20:	2000      	movs	r0, #0
 8010f22:	f04f 0c0a 	mov.w	ip, #10
 8010f26:	4621      	mov	r1, r4
 8010f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f2c:	3b30      	subs	r3, #48	; 0x30
 8010f2e:	2b09      	cmp	r3, #9
 8010f30:	d94e      	bls.n	8010fd0 <_vfiprintf_r+0x1c4>
 8010f32:	b1b0      	cbz	r0, 8010f62 <_vfiprintf_r+0x156>
 8010f34:	9207      	str	r2, [sp, #28]
 8010f36:	e014      	b.n	8010f62 <_vfiprintf_r+0x156>
 8010f38:	eba0 0308 	sub.w	r3, r0, r8
 8010f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8010f40:	4313      	orrs	r3, r2
 8010f42:	9304      	str	r3, [sp, #16]
 8010f44:	46a2      	mov	sl, r4
 8010f46:	e7d2      	b.n	8010eee <_vfiprintf_r+0xe2>
 8010f48:	9b03      	ldr	r3, [sp, #12]
 8010f4a:	1d19      	adds	r1, r3, #4
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	9103      	str	r1, [sp, #12]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	bfbb      	ittet	lt
 8010f54:	425b      	neglt	r3, r3
 8010f56:	f042 0202 	orrlt.w	r2, r2, #2
 8010f5a:	9307      	strge	r3, [sp, #28]
 8010f5c:	9307      	strlt	r3, [sp, #28]
 8010f5e:	bfb8      	it	lt
 8010f60:	9204      	strlt	r2, [sp, #16]
 8010f62:	7823      	ldrb	r3, [r4, #0]
 8010f64:	2b2e      	cmp	r3, #46	; 0x2e
 8010f66:	d10c      	bne.n	8010f82 <_vfiprintf_r+0x176>
 8010f68:	7863      	ldrb	r3, [r4, #1]
 8010f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8010f6c:	d135      	bne.n	8010fda <_vfiprintf_r+0x1ce>
 8010f6e:	9b03      	ldr	r3, [sp, #12]
 8010f70:	1d1a      	adds	r2, r3, #4
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	9203      	str	r2, [sp, #12]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	bfb8      	it	lt
 8010f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f7e:	3402      	adds	r4, #2
 8010f80:	9305      	str	r3, [sp, #20]
 8010f82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011068 <_vfiprintf_r+0x25c>
 8010f86:	7821      	ldrb	r1, [r4, #0]
 8010f88:	2203      	movs	r2, #3
 8010f8a:	4650      	mov	r0, sl
 8010f8c:	f7ef f948 	bl	8000220 <memchr>
 8010f90:	b140      	cbz	r0, 8010fa4 <_vfiprintf_r+0x198>
 8010f92:	2340      	movs	r3, #64	; 0x40
 8010f94:	eba0 000a 	sub.w	r0, r0, sl
 8010f98:	fa03 f000 	lsl.w	r0, r3, r0
 8010f9c:	9b04      	ldr	r3, [sp, #16]
 8010f9e:	4303      	orrs	r3, r0
 8010fa0:	3401      	adds	r4, #1
 8010fa2:	9304      	str	r3, [sp, #16]
 8010fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fa8:	482c      	ldr	r0, [pc, #176]	; (801105c <_vfiprintf_r+0x250>)
 8010faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fae:	2206      	movs	r2, #6
 8010fb0:	f7ef f936 	bl	8000220 <memchr>
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	d03f      	beq.n	8011038 <_vfiprintf_r+0x22c>
 8010fb8:	4b29      	ldr	r3, [pc, #164]	; (8011060 <_vfiprintf_r+0x254>)
 8010fba:	bb1b      	cbnz	r3, 8011004 <_vfiprintf_r+0x1f8>
 8010fbc:	9b03      	ldr	r3, [sp, #12]
 8010fbe:	3307      	adds	r3, #7
 8010fc0:	f023 0307 	bic.w	r3, r3, #7
 8010fc4:	3308      	adds	r3, #8
 8010fc6:	9303      	str	r3, [sp, #12]
 8010fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fca:	443b      	add	r3, r7
 8010fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8010fce:	e767      	b.n	8010ea0 <_vfiprintf_r+0x94>
 8010fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fd4:	460c      	mov	r4, r1
 8010fd6:	2001      	movs	r0, #1
 8010fd8:	e7a5      	b.n	8010f26 <_vfiprintf_r+0x11a>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	3401      	adds	r4, #1
 8010fde:	9305      	str	r3, [sp, #20]
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	f04f 0c0a 	mov.w	ip, #10
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fec:	3a30      	subs	r2, #48	; 0x30
 8010fee:	2a09      	cmp	r2, #9
 8010ff0:	d903      	bls.n	8010ffa <_vfiprintf_r+0x1ee>
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d0c5      	beq.n	8010f82 <_vfiprintf_r+0x176>
 8010ff6:	9105      	str	r1, [sp, #20]
 8010ff8:	e7c3      	b.n	8010f82 <_vfiprintf_r+0x176>
 8010ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ffe:	4604      	mov	r4, r0
 8011000:	2301      	movs	r3, #1
 8011002:	e7f0      	b.n	8010fe6 <_vfiprintf_r+0x1da>
 8011004:	ab03      	add	r3, sp, #12
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	462a      	mov	r2, r5
 801100a:	4b16      	ldr	r3, [pc, #88]	; (8011064 <_vfiprintf_r+0x258>)
 801100c:	a904      	add	r1, sp, #16
 801100e:	4630      	mov	r0, r6
 8011010:	f3af 8000 	nop.w
 8011014:	4607      	mov	r7, r0
 8011016:	1c78      	adds	r0, r7, #1
 8011018:	d1d6      	bne.n	8010fc8 <_vfiprintf_r+0x1bc>
 801101a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801101c:	07d9      	lsls	r1, r3, #31
 801101e:	d405      	bmi.n	801102c <_vfiprintf_r+0x220>
 8011020:	89ab      	ldrh	r3, [r5, #12]
 8011022:	059a      	lsls	r2, r3, #22
 8011024:	d402      	bmi.n	801102c <_vfiprintf_r+0x220>
 8011026:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011028:	f7fc fae0 	bl	800d5ec <__retarget_lock_release_recursive>
 801102c:	89ab      	ldrh	r3, [r5, #12]
 801102e:	065b      	lsls	r3, r3, #25
 8011030:	f53f af12 	bmi.w	8010e58 <_vfiprintf_r+0x4c>
 8011034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011036:	e711      	b.n	8010e5c <_vfiprintf_r+0x50>
 8011038:	ab03      	add	r3, sp, #12
 801103a:	9300      	str	r3, [sp, #0]
 801103c:	462a      	mov	r2, r5
 801103e:	4b09      	ldr	r3, [pc, #36]	; (8011064 <_vfiprintf_r+0x258>)
 8011040:	a904      	add	r1, sp, #16
 8011042:	4630      	mov	r0, r6
 8011044:	f7ff fa9c 	bl	8010580 <_printf_i>
 8011048:	e7e4      	b.n	8011014 <_vfiprintf_r+0x208>
 801104a:	bf00      	nop
 801104c:	080116b8 	.word	0x080116b8
 8011050:	080116d8 	.word	0x080116d8
 8011054:	08011698 	.word	0x08011698
 8011058:	08011a5c 	.word	0x08011a5c
 801105c:	08011a66 	.word	0x08011a66
 8011060:	00000000 	.word	0x00000000
 8011064:	08010de9 	.word	0x08010de9
 8011068:	08011a62 	.word	0x08011a62

0801106c <__swbuf_r>:
 801106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801106e:	460e      	mov	r6, r1
 8011070:	4614      	mov	r4, r2
 8011072:	4605      	mov	r5, r0
 8011074:	b118      	cbz	r0, 801107e <__swbuf_r+0x12>
 8011076:	6983      	ldr	r3, [r0, #24]
 8011078:	b90b      	cbnz	r3, 801107e <__swbuf_r+0x12>
 801107a:	f7fc f9f3 	bl	800d464 <__sinit>
 801107e:	4b21      	ldr	r3, [pc, #132]	; (8011104 <__swbuf_r+0x98>)
 8011080:	429c      	cmp	r4, r3
 8011082:	d12b      	bne.n	80110dc <__swbuf_r+0x70>
 8011084:	686c      	ldr	r4, [r5, #4]
 8011086:	69a3      	ldr	r3, [r4, #24]
 8011088:	60a3      	str	r3, [r4, #8]
 801108a:	89a3      	ldrh	r3, [r4, #12]
 801108c:	071a      	lsls	r2, r3, #28
 801108e:	d52f      	bpl.n	80110f0 <__swbuf_r+0x84>
 8011090:	6923      	ldr	r3, [r4, #16]
 8011092:	b36b      	cbz	r3, 80110f0 <__swbuf_r+0x84>
 8011094:	6923      	ldr	r3, [r4, #16]
 8011096:	6820      	ldr	r0, [r4, #0]
 8011098:	1ac0      	subs	r0, r0, r3
 801109a:	6963      	ldr	r3, [r4, #20]
 801109c:	b2f6      	uxtb	r6, r6
 801109e:	4283      	cmp	r3, r0
 80110a0:	4637      	mov	r7, r6
 80110a2:	dc04      	bgt.n	80110ae <__swbuf_r+0x42>
 80110a4:	4621      	mov	r1, r4
 80110a6:	4628      	mov	r0, r5
 80110a8:	f7fd fdce 	bl	800ec48 <_fflush_r>
 80110ac:	bb30      	cbnz	r0, 80110fc <__swbuf_r+0x90>
 80110ae:	68a3      	ldr	r3, [r4, #8]
 80110b0:	3b01      	subs	r3, #1
 80110b2:	60a3      	str	r3, [r4, #8]
 80110b4:	6823      	ldr	r3, [r4, #0]
 80110b6:	1c5a      	adds	r2, r3, #1
 80110b8:	6022      	str	r2, [r4, #0]
 80110ba:	701e      	strb	r6, [r3, #0]
 80110bc:	6963      	ldr	r3, [r4, #20]
 80110be:	3001      	adds	r0, #1
 80110c0:	4283      	cmp	r3, r0
 80110c2:	d004      	beq.n	80110ce <__swbuf_r+0x62>
 80110c4:	89a3      	ldrh	r3, [r4, #12]
 80110c6:	07db      	lsls	r3, r3, #31
 80110c8:	d506      	bpl.n	80110d8 <__swbuf_r+0x6c>
 80110ca:	2e0a      	cmp	r6, #10
 80110cc:	d104      	bne.n	80110d8 <__swbuf_r+0x6c>
 80110ce:	4621      	mov	r1, r4
 80110d0:	4628      	mov	r0, r5
 80110d2:	f7fd fdb9 	bl	800ec48 <_fflush_r>
 80110d6:	b988      	cbnz	r0, 80110fc <__swbuf_r+0x90>
 80110d8:	4638      	mov	r0, r7
 80110da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110dc:	4b0a      	ldr	r3, [pc, #40]	; (8011108 <__swbuf_r+0x9c>)
 80110de:	429c      	cmp	r4, r3
 80110e0:	d101      	bne.n	80110e6 <__swbuf_r+0x7a>
 80110e2:	68ac      	ldr	r4, [r5, #8]
 80110e4:	e7cf      	b.n	8011086 <__swbuf_r+0x1a>
 80110e6:	4b09      	ldr	r3, [pc, #36]	; (801110c <__swbuf_r+0xa0>)
 80110e8:	429c      	cmp	r4, r3
 80110ea:	bf08      	it	eq
 80110ec:	68ec      	ldreq	r4, [r5, #12]
 80110ee:	e7ca      	b.n	8011086 <__swbuf_r+0x1a>
 80110f0:	4621      	mov	r1, r4
 80110f2:	4628      	mov	r0, r5
 80110f4:	f000 f80c 	bl	8011110 <__swsetup_r>
 80110f8:	2800      	cmp	r0, #0
 80110fa:	d0cb      	beq.n	8011094 <__swbuf_r+0x28>
 80110fc:	f04f 37ff 	mov.w	r7, #4294967295
 8011100:	e7ea      	b.n	80110d8 <__swbuf_r+0x6c>
 8011102:	bf00      	nop
 8011104:	080116b8 	.word	0x080116b8
 8011108:	080116d8 	.word	0x080116d8
 801110c:	08011698 	.word	0x08011698

08011110 <__swsetup_r>:
 8011110:	4b32      	ldr	r3, [pc, #200]	; (80111dc <__swsetup_r+0xcc>)
 8011112:	b570      	push	{r4, r5, r6, lr}
 8011114:	681d      	ldr	r5, [r3, #0]
 8011116:	4606      	mov	r6, r0
 8011118:	460c      	mov	r4, r1
 801111a:	b125      	cbz	r5, 8011126 <__swsetup_r+0x16>
 801111c:	69ab      	ldr	r3, [r5, #24]
 801111e:	b913      	cbnz	r3, 8011126 <__swsetup_r+0x16>
 8011120:	4628      	mov	r0, r5
 8011122:	f7fc f99f 	bl	800d464 <__sinit>
 8011126:	4b2e      	ldr	r3, [pc, #184]	; (80111e0 <__swsetup_r+0xd0>)
 8011128:	429c      	cmp	r4, r3
 801112a:	d10f      	bne.n	801114c <__swsetup_r+0x3c>
 801112c:	686c      	ldr	r4, [r5, #4]
 801112e:	89a3      	ldrh	r3, [r4, #12]
 8011130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011134:	0719      	lsls	r1, r3, #28
 8011136:	d42c      	bmi.n	8011192 <__swsetup_r+0x82>
 8011138:	06dd      	lsls	r5, r3, #27
 801113a:	d411      	bmi.n	8011160 <__swsetup_r+0x50>
 801113c:	2309      	movs	r3, #9
 801113e:	6033      	str	r3, [r6, #0]
 8011140:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011144:	81a3      	strh	r3, [r4, #12]
 8011146:	f04f 30ff 	mov.w	r0, #4294967295
 801114a:	e03e      	b.n	80111ca <__swsetup_r+0xba>
 801114c:	4b25      	ldr	r3, [pc, #148]	; (80111e4 <__swsetup_r+0xd4>)
 801114e:	429c      	cmp	r4, r3
 8011150:	d101      	bne.n	8011156 <__swsetup_r+0x46>
 8011152:	68ac      	ldr	r4, [r5, #8]
 8011154:	e7eb      	b.n	801112e <__swsetup_r+0x1e>
 8011156:	4b24      	ldr	r3, [pc, #144]	; (80111e8 <__swsetup_r+0xd8>)
 8011158:	429c      	cmp	r4, r3
 801115a:	bf08      	it	eq
 801115c:	68ec      	ldreq	r4, [r5, #12]
 801115e:	e7e6      	b.n	801112e <__swsetup_r+0x1e>
 8011160:	0758      	lsls	r0, r3, #29
 8011162:	d512      	bpl.n	801118a <__swsetup_r+0x7a>
 8011164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011166:	b141      	cbz	r1, 801117a <__swsetup_r+0x6a>
 8011168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801116c:	4299      	cmp	r1, r3
 801116e:	d002      	beq.n	8011176 <__swsetup_r+0x66>
 8011170:	4630      	mov	r0, r6
 8011172:	f7fe fe1d 	bl	800fdb0 <_free_r>
 8011176:	2300      	movs	r3, #0
 8011178:	6363      	str	r3, [r4, #52]	; 0x34
 801117a:	89a3      	ldrh	r3, [r4, #12]
 801117c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011180:	81a3      	strh	r3, [r4, #12]
 8011182:	2300      	movs	r3, #0
 8011184:	6063      	str	r3, [r4, #4]
 8011186:	6923      	ldr	r3, [r4, #16]
 8011188:	6023      	str	r3, [r4, #0]
 801118a:	89a3      	ldrh	r3, [r4, #12]
 801118c:	f043 0308 	orr.w	r3, r3, #8
 8011190:	81a3      	strh	r3, [r4, #12]
 8011192:	6923      	ldr	r3, [r4, #16]
 8011194:	b94b      	cbnz	r3, 80111aa <__swsetup_r+0x9a>
 8011196:	89a3      	ldrh	r3, [r4, #12]
 8011198:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801119c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111a0:	d003      	beq.n	80111aa <__swsetup_r+0x9a>
 80111a2:	4621      	mov	r1, r4
 80111a4:	4630      	mov	r0, r6
 80111a6:	f000 f84d 	bl	8011244 <__smakebuf_r>
 80111aa:	89a0      	ldrh	r0, [r4, #12]
 80111ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111b0:	f010 0301 	ands.w	r3, r0, #1
 80111b4:	d00a      	beq.n	80111cc <__swsetup_r+0xbc>
 80111b6:	2300      	movs	r3, #0
 80111b8:	60a3      	str	r3, [r4, #8]
 80111ba:	6963      	ldr	r3, [r4, #20]
 80111bc:	425b      	negs	r3, r3
 80111be:	61a3      	str	r3, [r4, #24]
 80111c0:	6923      	ldr	r3, [r4, #16]
 80111c2:	b943      	cbnz	r3, 80111d6 <__swsetup_r+0xc6>
 80111c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80111c8:	d1ba      	bne.n	8011140 <__swsetup_r+0x30>
 80111ca:	bd70      	pop	{r4, r5, r6, pc}
 80111cc:	0781      	lsls	r1, r0, #30
 80111ce:	bf58      	it	pl
 80111d0:	6963      	ldrpl	r3, [r4, #20]
 80111d2:	60a3      	str	r3, [r4, #8]
 80111d4:	e7f4      	b.n	80111c0 <__swsetup_r+0xb0>
 80111d6:	2000      	movs	r0, #0
 80111d8:	e7f7      	b.n	80111ca <__swsetup_r+0xba>
 80111da:	bf00      	nop
 80111dc:	20000110 	.word	0x20000110
 80111e0:	080116b8 	.word	0x080116b8
 80111e4:	080116d8 	.word	0x080116d8
 80111e8:	08011698 	.word	0x08011698

080111ec <abort>:
 80111ec:	b508      	push	{r3, lr}
 80111ee:	2006      	movs	r0, #6
 80111f0:	f000 f898 	bl	8011324 <raise>
 80111f4:	2001      	movs	r0, #1
 80111f6:	f7f0 fda7 	bl	8001d48 <_exit>

080111fa <__swhatbuf_r>:
 80111fa:	b570      	push	{r4, r5, r6, lr}
 80111fc:	460e      	mov	r6, r1
 80111fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011202:	2900      	cmp	r1, #0
 8011204:	b096      	sub	sp, #88	; 0x58
 8011206:	4614      	mov	r4, r2
 8011208:	461d      	mov	r5, r3
 801120a:	da08      	bge.n	801121e <__swhatbuf_r+0x24>
 801120c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011210:	2200      	movs	r2, #0
 8011212:	602a      	str	r2, [r5, #0]
 8011214:	061a      	lsls	r2, r3, #24
 8011216:	d410      	bmi.n	801123a <__swhatbuf_r+0x40>
 8011218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801121c:	e00e      	b.n	801123c <__swhatbuf_r+0x42>
 801121e:	466a      	mov	r2, sp
 8011220:	f000 f89c 	bl	801135c <_fstat_r>
 8011224:	2800      	cmp	r0, #0
 8011226:	dbf1      	blt.n	801120c <__swhatbuf_r+0x12>
 8011228:	9a01      	ldr	r2, [sp, #4]
 801122a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801122e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011232:	425a      	negs	r2, r3
 8011234:	415a      	adcs	r2, r3
 8011236:	602a      	str	r2, [r5, #0]
 8011238:	e7ee      	b.n	8011218 <__swhatbuf_r+0x1e>
 801123a:	2340      	movs	r3, #64	; 0x40
 801123c:	2000      	movs	r0, #0
 801123e:	6023      	str	r3, [r4, #0]
 8011240:	b016      	add	sp, #88	; 0x58
 8011242:	bd70      	pop	{r4, r5, r6, pc}

08011244 <__smakebuf_r>:
 8011244:	898b      	ldrh	r3, [r1, #12]
 8011246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011248:	079d      	lsls	r5, r3, #30
 801124a:	4606      	mov	r6, r0
 801124c:	460c      	mov	r4, r1
 801124e:	d507      	bpl.n	8011260 <__smakebuf_r+0x1c>
 8011250:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011254:	6023      	str	r3, [r4, #0]
 8011256:	6123      	str	r3, [r4, #16]
 8011258:	2301      	movs	r3, #1
 801125a:	6163      	str	r3, [r4, #20]
 801125c:	b002      	add	sp, #8
 801125e:	bd70      	pop	{r4, r5, r6, pc}
 8011260:	ab01      	add	r3, sp, #4
 8011262:	466a      	mov	r2, sp
 8011264:	f7ff ffc9 	bl	80111fa <__swhatbuf_r>
 8011268:	9900      	ldr	r1, [sp, #0]
 801126a:	4605      	mov	r5, r0
 801126c:	4630      	mov	r0, r6
 801126e:	f7fc f9f5 	bl	800d65c <_malloc_r>
 8011272:	b948      	cbnz	r0, 8011288 <__smakebuf_r+0x44>
 8011274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011278:	059a      	lsls	r2, r3, #22
 801127a:	d4ef      	bmi.n	801125c <__smakebuf_r+0x18>
 801127c:	f023 0303 	bic.w	r3, r3, #3
 8011280:	f043 0302 	orr.w	r3, r3, #2
 8011284:	81a3      	strh	r3, [r4, #12]
 8011286:	e7e3      	b.n	8011250 <__smakebuf_r+0xc>
 8011288:	4b0d      	ldr	r3, [pc, #52]	; (80112c0 <__smakebuf_r+0x7c>)
 801128a:	62b3      	str	r3, [r6, #40]	; 0x28
 801128c:	89a3      	ldrh	r3, [r4, #12]
 801128e:	6020      	str	r0, [r4, #0]
 8011290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011294:	81a3      	strh	r3, [r4, #12]
 8011296:	9b00      	ldr	r3, [sp, #0]
 8011298:	6163      	str	r3, [r4, #20]
 801129a:	9b01      	ldr	r3, [sp, #4]
 801129c:	6120      	str	r0, [r4, #16]
 801129e:	b15b      	cbz	r3, 80112b8 <__smakebuf_r+0x74>
 80112a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112a4:	4630      	mov	r0, r6
 80112a6:	f000 f86b 	bl	8011380 <_isatty_r>
 80112aa:	b128      	cbz	r0, 80112b8 <__smakebuf_r+0x74>
 80112ac:	89a3      	ldrh	r3, [r4, #12]
 80112ae:	f023 0303 	bic.w	r3, r3, #3
 80112b2:	f043 0301 	orr.w	r3, r3, #1
 80112b6:	81a3      	strh	r3, [r4, #12]
 80112b8:	89a0      	ldrh	r0, [r4, #12]
 80112ba:	4305      	orrs	r5, r0
 80112bc:	81a5      	strh	r5, [r4, #12]
 80112be:	e7cd      	b.n	801125c <__smakebuf_r+0x18>
 80112c0:	0800d3fd 	.word	0x0800d3fd

080112c4 <_malloc_usable_size_r>:
 80112c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112c8:	1f18      	subs	r0, r3, #4
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	bfbc      	itt	lt
 80112ce:	580b      	ldrlt	r3, [r1, r0]
 80112d0:	18c0      	addlt	r0, r0, r3
 80112d2:	4770      	bx	lr

080112d4 <_raise_r>:
 80112d4:	291f      	cmp	r1, #31
 80112d6:	b538      	push	{r3, r4, r5, lr}
 80112d8:	4604      	mov	r4, r0
 80112da:	460d      	mov	r5, r1
 80112dc:	d904      	bls.n	80112e8 <_raise_r+0x14>
 80112de:	2316      	movs	r3, #22
 80112e0:	6003      	str	r3, [r0, #0]
 80112e2:	f04f 30ff 	mov.w	r0, #4294967295
 80112e6:	bd38      	pop	{r3, r4, r5, pc}
 80112e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80112ea:	b112      	cbz	r2, 80112f2 <_raise_r+0x1e>
 80112ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80112f0:	b94b      	cbnz	r3, 8011306 <_raise_r+0x32>
 80112f2:	4620      	mov	r0, r4
 80112f4:	f000 f830 	bl	8011358 <_getpid_r>
 80112f8:	462a      	mov	r2, r5
 80112fa:	4601      	mov	r1, r0
 80112fc:	4620      	mov	r0, r4
 80112fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011302:	f000 b817 	b.w	8011334 <_kill_r>
 8011306:	2b01      	cmp	r3, #1
 8011308:	d00a      	beq.n	8011320 <_raise_r+0x4c>
 801130a:	1c59      	adds	r1, r3, #1
 801130c:	d103      	bne.n	8011316 <_raise_r+0x42>
 801130e:	2316      	movs	r3, #22
 8011310:	6003      	str	r3, [r0, #0]
 8011312:	2001      	movs	r0, #1
 8011314:	e7e7      	b.n	80112e6 <_raise_r+0x12>
 8011316:	2400      	movs	r4, #0
 8011318:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801131c:	4628      	mov	r0, r5
 801131e:	4798      	blx	r3
 8011320:	2000      	movs	r0, #0
 8011322:	e7e0      	b.n	80112e6 <_raise_r+0x12>

08011324 <raise>:
 8011324:	4b02      	ldr	r3, [pc, #8]	; (8011330 <raise+0xc>)
 8011326:	4601      	mov	r1, r0
 8011328:	6818      	ldr	r0, [r3, #0]
 801132a:	f7ff bfd3 	b.w	80112d4 <_raise_r>
 801132e:	bf00      	nop
 8011330:	20000110 	.word	0x20000110

08011334 <_kill_r>:
 8011334:	b538      	push	{r3, r4, r5, lr}
 8011336:	4d07      	ldr	r5, [pc, #28]	; (8011354 <_kill_r+0x20>)
 8011338:	2300      	movs	r3, #0
 801133a:	4604      	mov	r4, r0
 801133c:	4608      	mov	r0, r1
 801133e:	4611      	mov	r1, r2
 8011340:	602b      	str	r3, [r5, #0]
 8011342:	f7f0 fcf1 	bl	8001d28 <_kill>
 8011346:	1c43      	adds	r3, r0, #1
 8011348:	d102      	bne.n	8011350 <_kill_r+0x1c>
 801134a:	682b      	ldr	r3, [r5, #0]
 801134c:	b103      	cbz	r3, 8011350 <_kill_r+0x1c>
 801134e:	6023      	str	r3, [r4, #0]
 8011350:	bd38      	pop	{r3, r4, r5, pc}
 8011352:	bf00      	nop
 8011354:	20006f18 	.word	0x20006f18

08011358 <_getpid_r>:
 8011358:	f7f0 bcde 	b.w	8001d18 <_getpid>

0801135c <_fstat_r>:
 801135c:	b538      	push	{r3, r4, r5, lr}
 801135e:	4d07      	ldr	r5, [pc, #28]	; (801137c <_fstat_r+0x20>)
 8011360:	2300      	movs	r3, #0
 8011362:	4604      	mov	r4, r0
 8011364:	4608      	mov	r0, r1
 8011366:	4611      	mov	r1, r2
 8011368:	602b      	str	r3, [r5, #0]
 801136a:	f7f0 fd3c 	bl	8001de6 <_fstat>
 801136e:	1c43      	adds	r3, r0, #1
 8011370:	d102      	bne.n	8011378 <_fstat_r+0x1c>
 8011372:	682b      	ldr	r3, [r5, #0]
 8011374:	b103      	cbz	r3, 8011378 <_fstat_r+0x1c>
 8011376:	6023      	str	r3, [r4, #0]
 8011378:	bd38      	pop	{r3, r4, r5, pc}
 801137a:	bf00      	nop
 801137c:	20006f18 	.word	0x20006f18

08011380 <_isatty_r>:
 8011380:	b538      	push	{r3, r4, r5, lr}
 8011382:	4d06      	ldr	r5, [pc, #24]	; (801139c <_isatty_r+0x1c>)
 8011384:	2300      	movs	r3, #0
 8011386:	4604      	mov	r4, r0
 8011388:	4608      	mov	r0, r1
 801138a:	602b      	str	r3, [r5, #0]
 801138c:	f7f0 fd3b 	bl	8001e06 <_isatty>
 8011390:	1c43      	adds	r3, r0, #1
 8011392:	d102      	bne.n	801139a <_isatty_r+0x1a>
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	b103      	cbz	r3, 801139a <_isatty_r+0x1a>
 8011398:	6023      	str	r3, [r4, #0]
 801139a:	bd38      	pop	{r3, r4, r5, pc}
 801139c:	20006f18 	.word	0x20006f18

080113a0 <_init>:
 80113a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113a2:	bf00      	nop
 80113a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113a6:	bc08      	pop	{r3}
 80113a8:	469e      	mov	lr, r3
 80113aa:	4770      	bx	lr

080113ac <_fini>:
 80113ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ae:	bf00      	nop
 80113b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113b2:	bc08      	pop	{r3}
 80113b4:	469e      	mov	lr, r3
 80113b6:	4770      	bx	lr
